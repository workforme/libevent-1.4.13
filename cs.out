cscope 15 $HOME/libevent-1.4.13-stable -q 0000009375 0000988199
	@WIN32-Code/config.h

8 
	#DNS_USE_FTIME_FOR_ID
 1

	)

35 
	#HAVE_FCNTL_H
 1

	)

68 
	#HAVE_MEMORY_H
 1

	)

95 
	#HAVE_SIGNAL
 1

	)

98 
	#HAVE_SIGNAL_H
 1

	)

101 
	#HAVE_STDARG_H
 1

	)

107 
	#HAVE_STDLIB_H
 1

	)

110 
	#HAVE_STRINGS_H
 1

	)

113 
	#HAVE_STRING_H
 1

	)

125 
	#HAVE_STRUCT_IN6_ADDR
 1

	)

167 
	#HAVE_TIMERCMP
 1

	)

170 
	#HAVE_TIMERISSET
 1

	)

182 
	#PACKAGE
 "libevít"

	)

185 
	#PACKAGE_BUGREPORT
 ""

	)

188 
	#PACKAGE_NAME
 ""

	)

191 
	#PACKAGE_STRING
 ""

	)

194 
	#PACKAGE_TARNAME
 ""

	)

197 
	#PACKAGE_VERSION
 ""

	)

200 
	#STDC_HEADERS
 1

	)

203 
	#TIME_WITH_SYS_TIME
 1

	)

206 
	#VERSION
 "1.3.99-åunk"

	)

209 #i‡
deföed
(
_MSC_VER
) && _MSC_VER < 1300

210 
	#__func__
 "??"

	)

212 
	#__func__
 
__FUNCTION__


	)

220 #i‚de‡
__˝lu•lus


221 
	#ölöe
 
__ölöe


	)

231 
	#sockÀn_t
 

	)

234 
	#uöt16_t
 

	)

237 
	#uöt32_t
 

	)

240 
	#uöt64_t
 
__uöt64_t


	)

243 
	#uöt8_t
 

	)

	@WIN32-Code/event-config.h

6 #i‚de‡
_EVENT_CONFIG_H_


7 
	#_EVENT_CONFIG_H_


	)

15 
	#_EVENT_DNS_USE_GETTIMEOFDAY_FOR_ID
 1

	)

39 
	#_EVENT_HAVE_FCNTL_H
 1

	)

72 
	#_EVENT_HAVE_MEMORY_H
 1

	)

99 
	#_EVENT_HAVE_SIGNAL
 1

	)

102 
	#_EVENT_HAVE_SIGNAL_H
 1

	)

105 
	#_EVENT_HAVE_STDARG_H
 1

	)

111 
	#_EVENT_HAVE_STDLIB_H
 1

	)

114 
	#_EVENT_HAVE_STRINGS_H
 1

	)

117 
	#_EVENT_HAVE_STRING_H
 1

	)

129 
	#_EVENT_HAVE_STRUCT_IN6_ADDR
 1

	)

153 
	#_EVENT_HAVE_SYS_STAT_H
 1

	)

171 
	#_EVENT_HAVE_TIMERCMP
 1

	)

174 
	#_EVENT_HAVE_TIMERISSET
 1

	)

186 
	#_EVENT_PACKAGE
 "libevít"

	)

189 
	#_EVENT_PACKAGE_BUGREPORT
 ""

	)

192 
	#_EVENT_PACKAGE_NAME
 ""

	)

195 
	#_EVENT_PACKAGE_STRING
 ""

	)

198 
	#_EVENT_PACKAGE_TARNAME
 ""

	)

201 
	#_EVENT_PACKAGE_VERSION
 ""

	)

204 
	#_EVENT_STDC_HEADERS
 1

	)

207 
	#_EVENT_TIME_WITH_SYS_TIME
 1

	)

210 
	#_EVENT_VERSION
 "1.3.99-åunk"

	)

220 #i‚de‡
_EVENT___˝lu•lus


221 
	#_EVENT_ölöe
 
__ölöe


	)

224 
	#_EVENT___func__
 
__FUNCTION__


	)

233 
	#_EVENT_sockÀn_t
 

	)

	@WIN32-Code/tree.h

27 #i‚def 
_SYS_TREE_H_


28 
	#_SYS_TREE_H_


	)

57 
	#SPLAY_HEAD
(
«me
, 
ty≥
) \

58 
	s«me
 { \

59 
ty≥
 *
•h_roŸ
; \

60 }

	)

62 
	#SPLAY_INITIALIZER
(
roŸ
) \

63 { 
NULL
 }

	)

65 
	#SPLAY_INIT
(
roŸ
) do { \

66 (
roŸ
)->
•h_roŸ
 = 
NULL
; \

67 } 0)

	)

69 
	#SPLAY_ENTRY
(
ty≥
) \

71 
ty≥
 *
•e_À·
; \

72 
ty≥
 *
•e_right
; \

73 }

	)

75 
	#SPLAY_LEFT
(
ñm
, 
fõld
Ë”lm)->fõld.
•e_À·


	)

76 
	#SPLAY_RIGHT
(
ñm
, 
fõld
Ë”lm)->fõld.
•e_right


	)

77 
	#SPLAY_ROOT
(
hód
Ë(hód)->
•h_roŸ


	)

78 
	#SPLAY_EMPTY
(
hód
Ë(
	`SPLAY_ROOT
(hódË=
NULL
)

	)

81 
	#SPLAY_ROTATE_RIGHT
(
hód
, 
tmp
, 
fõld
) do { \

82 
	`SPLAY_LEFT
((
hód
)->
•h_roŸ
, 
fõld
Ë
	`SPLAY_RIGHT
(
tmp
, field); \

83 
	`SPLAY_RIGHT
(
tmp
, 
fõld
Ë(
hód
)->
•h_roŸ
; \

84 (
hód
)->
•h_roŸ
 = 
tmp
; \

85 } 0)

	)

87 
	#SPLAY_ROTATE_LEFT
(
hód
, 
tmp
, 
fõld
) do { \

88 
	`SPLAY_RIGHT
((
hód
)->
•h_roŸ
, 
fõld
Ë
	`SPLAY_LEFT
(
tmp
, field); \

89 
	`SPLAY_LEFT
(
tmp
, 
fõld
Ë(
hód
)->
•h_roŸ
; \

90 (
hód
)->
•h_roŸ
 = 
tmp
; \

91 } 0)

	)

93 
	#SPLAY_LINKLEFT
(
hód
, 
tmp
, 
fõld
) do { \

94 
	`SPLAY_LEFT
(
tmp
, 
fõld
Ë(
hód
)->
•h_roŸ
; \

95 
tmp
 = (
hód
)->
•h_roŸ
; \

96 (
hód
)->
•h_roŸ
 = 
	`SPLAY_LEFT
((hód)->•h_roŸ, 
fõld
); \

97 } 0)

	)

99 
	#SPLAY_LINKRIGHT
(
hód
, 
tmp
, 
fõld
) do { \

100 
	`SPLAY_RIGHT
(
tmp
, 
fõld
Ë(
hód
)->
•h_roŸ
; \

101 
tmp
 = (
hód
)->
•h_roŸ
; \

102 (
hód
)->
•h_roŸ
 = 
	`SPLAY_RIGHT
((hód)->•h_roŸ, 
fõld
); \

103 } 0)

	)

105 
	#SPLAY_ASSEMBLE
(
hód
, 
node
, 
À·
, 
right
, 
fõld
) do { \

106 
	`SPLAY_RIGHT
(
À·
, 
fõld
Ë
	`SPLAY_LEFT
((
hód
)->
•h_roŸ
, field); \

107 
	`SPLAY_LEFT
(
right
, 
fõld
Ë
	`SPLAY_RIGHT
((
hód
)->
•h_roŸ
, field);\

108 
	`SPLAY_LEFT
((
hód
)->
•h_roŸ
, 
fõld
Ë
	`SPLAY_RIGHT
(
node
, field); \

109 
	`SPLAY_RIGHT
((
hód
)->
•h_roŸ
, 
fõld
Ë
	`SPLAY_LEFT
(
node
, field); \

110 } 0)

	)

114 
	#SPLAY_PROTOTYPE
(
«me
, 
ty≥
, 
fõld
, 
cmp
) \

115 
«me
##
	`_SPLAY
(«mê*, 
ty≥
 *); \

116 
«me
##
	`_SPLAY_MINMAX
(name *, ); \

117 
ty≥
 *
«me
##
	`_SPLAY_INSERT
(name *, type *); \

118 
ty≥
 *
«me
##
	`_SPLAY_REMOVE
(name *, type *); \

121 
__ölöe
 
ty≥
 * \

122 
«me
##
	`_SPLAY_FIND
(«mê*
hód
, 
ty≥
 *
ñm
) \

124 i‡(
	`SPLAY_EMPTY
(
hód
)) \

125 (
NULL
); \

126 
«me
##
	`_SPLAY
(
hód
, 
ñm
); \

127 i‡((
cmp
)(
ñm
, (
hód
)->
•h_roŸ
) == 0) \

128  (
hód
->
•h_roŸ
); \

129  (
NULL
); \

132 
__ölöe
 
ty≥
 * \

133 
«me
##
	`_SPLAY_NEXT
(«mê*
hód
, 
ty≥
 *
ñm
) \

135 
«me
##
	`_SPLAY
(
hód
, 
ñm
); \

136 i‡(
	`SPLAY_RIGHT
(
ñm
, 
fõld
Ë!
NULL
) { \

137 
ñm
 = 
	`SPLAY_RIGHT
”lm, 
fõld
); \

138 
	`SPLAY_LEFT
(
ñm
, 
fõld
Ë!
NULL
) { \

139 
ñm
 = 
	`SPLAY_LEFT
”lm, 
fõld
); \

142 
ñm
 = 
NULL
; \

143  (
ñm
); \

146 
__ölöe
 
ty≥
 * \

147 
«me
##
	`_SPLAY_MIN_MAX
(«mê*
hód
, 
vÆ
) \

149 
«me
##
	`_SPLAY_MINMAX
(
hód
, 
vÆ
); \

150  (
	`SPLAY_ROOT
(
hód
)); \

151 }

	)

156 
	#SPLAY_GENERATE
(
«me
, 
ty≥
, 
fõld
, 
cmp
) \

157 
ty≥
 * \

158 
«me
##
	`_SPLAY_INSERT
(«mê*
hód
, 
ty≥
 *
ñm
) \

160 i‡(
	`SPLAY_EMPTY
(
hód
)) { \

161 
	`SPLAY_LEFT
(
ñm
, 
fõld
Ë
	`SPLAY_RIGHT
”lm, fõldË
NULL
; \

163 
__comp
; \

164 
«me
##
	`_SPLAY
(
hód
, 
ñm
); \

165 
__comp
 = (
cmp
)(
ñm
, (
hód
)->
•h_roŸ
); \

166 if(
__comp
 < 0) { \

167 
	`SPLAY_LEFT
(
ñm
, 
fõld
ËSPLAY_LEFT((
hód
)->
•h_roŸ
, field);\

168 
	`SPLAY_RIGHT
(
ñm
, 
fõld
Ë(
hód
)->
•h_roŸ
; \

169 
	`SPLAY_LEFT
((
hód
)->
•h_roŸ
, 
fõld
Ë
NULL
; \

170 } i‡(
__comp
 > 0) { \

171 
	`SPLAY_RIGHT
(
ñm
, 
fõld
ËSPLAY_RIGHT((
hód
)->
•h_roŸ
, field);\

172 
	`SPLAY_LEFT
(
ñm
, 
fõld
Ë(
hód
)->
•h_roŸ
; \

173 
	`SPLAY_RIGHT
((
hód
)->
•h_roŸ
, 
fõld
Ë
NULL
; \

175  ((
hód
)->
•h_roŸ
); \

177 (
hód
)->
•h_roŸ
 = (
ñm
); \

178  (
NULL
); \

181 
ty≥
 * \

182 
«me
##
	`_SPLAY_REMOVE
(«mê*
hód
, 
ty≥
 *
ñm
) \

184 
ty≥
 *
__tmp
; \

185 i‡(
	`SPLAY_EMPTY
(
hód
)) \

186  (
NULL
); \

187 
«me
##
	`_SPLAY
(
hód
, 
ñm
); \

188 i‡((
cmp
)(
ñm
, (
hód
)->
•h_roŸ
) == 0) { \

189 i‡(
	`SPLAY_LEFT
((
hód
)->
•h_roŸ
, 
fõld
Ë=
NULL
) { \

190 (
hód
)->
•h_roŸ
 = 
	`SPLAY_RIGHT
((hód)->•h_roŸ, 
fõld
);\

192 
__tmp
 = 
	`SPLAY_RIGHT
((
hód
)->
•h_roŸ
, 
fõld
); \

193 (
hód
)->
•h_roŸ
 = 
	`SPLAY_LEFT
((hód)->•h_roŸ, 
fõld
);\

194 
«me
##
	`_SPLAY
(
hód
, 
ñm
); \

195 
	`SPLAY_RIGHT
((
hód
)->
•h_roŸ
, 
fõld
Ë
__tmp
; \

197  (
ñm
); \

199  (
NULL
); \

203 
«me
##
	`_SPLAY
(«mê*
hód
, 
ty≥
 *
ñm
) \

205 
ty≥
 
__node
, *
__À·
, *
__right
, *
__tmp
; \

206 
__comp
; \

208 
	`SPLAY_LEFT
(&
__node
, 
fõld
Ë
	`SPLAY_RIGHT
(&__node, fõldË
NULL
;\

209 
__À·
 = 
__right
 = &
__node
; \

211 (
__comp
 = (
cmp
)(
ñm
, (
hód
)->
•h_roŸ
))) { \

212 i‡(
__comp
 < 0) { \

213 
__tmp
 = 
	`SPLAY_LEFT
((
hód
)->
•h_roŸ
, 
fõld
); \

214 i‡(
__tmp
 =
NULL
) \

216 i‡((
cmp
)(
ñm
, 
__tmp
) < 0){ \

217 
	`SPLAY_ROTATE_RIGHT
(
hód
, 
__tmp
, 
fõld
); \

218 i‡(
	`SPLAY_LEFT
((
hód
)->
•h_roŸ
, 
fõld
Ë=
NULL
)\

221 
	`SPLAY_LINKLEFT
(
hód
, 
__right
, 
fõld
); \

222 } i‡(
__comp
 > 0) { \

223 
__tmp
 = 
	`SPLAY_RIGHT
((
hód
)->
•h_roŸ
, 
fõld
); \

224 i‡(
__tmp
 =
NULL
) \

226 i‡((
cmp
)(
ñm
, 
__tmp
) > 0){ \

227 
	`SPLAY_ROTATE_LEFT
(
hód
, 
__tmp
, 
fõld
); \

228 i‡(
	`SPLAY_RIGHT
((
hód
)->
•h_roŸ
, 
fõld
Ë=
NULL
)\

231 
	`SPLAY_LINKRIGHT
(
hód
, 
__À·
, 
fõld
); \

234 
	`SPLAY_ASSEMBLE
(
hód
, &
__node
, 
__À·
, 
__right
, 
fõld
); \

240 
«me
##
	`_SPLAY_MINMAX
(«mê*
hód
, 
__comp
) \

242 
ty≥
 
__node
, *
__À·
, *
__right
, *
__tmp
; \

244 
	`SPLAY_LEFT
(&
__node
, 
fõld
Ë
	`SPLAY_RIGHT
(&__node, fõldË
NULL
;\

245 
__À·
 = 
__right
 = &
__node
; \

248 i‡(
__comp
 < 0) { \

249 
__tmp
 = 
	`SPLAY_LEFT
((
hód
)->
•h_roŸ
, 
fõld
); \

250 i‡(
__tmp
 =
NULL
) \

252 i‡(
__comp
 < 0){ \

253 
	`SPLAY_ROTATE_RIGHT
(
hód
, 
__tmp
, 
fõld
); \

254 i‡(
	`SPLAY_LEFT
((
hód
)->
•h_roŸ
, 
fõld
Ë=
NULL
)\

257 
	`SPLAY_LINKLEFT
(
hód
, 
__right
, 
fõld
); \

258 } i‡(
__comp
 > 0) { \

259 
__tmp
 = 
	`SPLAY_RIGHT
((
hód
)->
•h_roŸ
, 
fõld
); \

260 i‡(
__tmp
 =
NULL
) \

262 i‡(
__comp
 > 0) { \

263 
	`SPLAY_ROTATE_LEFT
(
hód
, 
__tmp
, 
fõld
); \

264 i‡(
	`SPLAY_RIGHT
((
hód
)->
•h_roŸ
, 
fõld
Ë=
NULL
)\

267 
	`SPLAY_LINKRIGHT
(
hód
, 
__À·
, 
fõld
); \

270 
	`SPLAY_ASSEMBLE
(
hód
, &
__node
, 
__À·
, 
__right
, 
fõld
); \

271 }

	)

273 
	#SPLAY_NEGINF
 -1

	)

274 
	#SPLAY_INF
 1

	)

276 
	#SPLAY_INSERT
(
«me
, 
x
, 
y
Ë«me##
	`_SPLAY_INSERT
(x, y)

	)

277 
	#SPLAY_REMOVE
(
«me
, 
x
, 
y
Ë«me##
	`_SPLAY_REMOVE
(x, y)

	)

278 
	#SPLAY_FIND
(
«me
, 
x
, 
y
Ë«me##
	`_SPLAY_FIND
(x, y)

	)

279 
	#SPLAY_NEXT
(
«me
, 
x
, 
y
Ë«me##
	`_SPLAY_NEXT
(x, y)

	)

280 
	#SPLAY_MIN
(
«me
, 
x
Ë(
	`SPLAY_EMPTY
(xË? 
NULL
 \

281 : 
«me
##
	`_SPLAY_MIN_MAX
(
x
, 
SPLAY_NEGINF
))

	)

282 
	#SPLAY_MAX
(
«me
, 
x
Ë(
	`SPLAY_EMPTY
(xË? 
NULL
 \

283 : 
«me
##
	`_SPLAY_MIN_MAX
(
x
, 
SPLAY_INF
))

	)

285 
	#SPLAY_FOREACH
(
x
, 
«me
, 
hód
) \

286 (
x
Ë
	`SPLAY_MIN
(
«me
, 
hód
); \

287 (
x
Ë!
NULL
; \

288 (
x
Ë
	`SPLAY_NEXT
(
«me
, 
hód
, x))

	)

291 
	#RB_HEAD
(
«me
, 
ty≥
) \

292 
	s«me
 { \

293 
ty≥
 *
rbh_roŸ
; \

294 }

	)

296 
	#RB_INITIALIZER
(
roŸ
) \

297 { 
NULL
 }

	)

299 
	#RB_INIT
(
roŸ
) do { \

300 (
roŸ
)->
rbh_roŸ
 = 
NULL
; \

301 } 0)

	)

303 
	#RB_BLACK
 0

	)

304 
	#RB_RED
 1

	)

305 
	#RB_ENTRY
(
ty≥
) \

307 
ty≥
 *
rbe_À·
; \

308 
ty≥
 *
rbe_right
; \

309 
ty≥
 *
rbe_∑ª¡
; \

310 
rbe_cﬁ‹
; \

311 }

	)

313 
	#RB_LEFT
(
ñm
, 
fõld
Ë”lm)->fõld.
rbe_À·


	)

314 
	#RB_RIGHT
(
ñm
, 
fõld
Ë”lm)->fõld.
rbe_right


	)

315 
	#RB_PARENT
(
ñm
, 
fõld
Ë”lm)->fõld.
rbe_∑ª¡


	)

316 
	#RB_COLOR
(
ñm
, 
fõld
Ë”lm)->fõld.
rbe_cﬁ‹


	)

317 
	#RB_ROOT
(
hód
Ë(hód)->
rbh_roŸ


	)

318 
	#RB_EMPTY
(
hód
Ë(
	`RB_ROOT
(hódË=
NULL
)

	)

320 
	#RB_SET
(
ñm
, 
∑ª¡
, 
fõld
) do { \

321 
	`RB_PARENT
(
ñm
, 
fõld
Ë
∑ª¡
; \

322 
	`RB_LEFT
(
ñm
, 
fõld
Ë
	`RB_RIGHT
”lm, fõldË
NULL
; \

323 
	`RB_COLOR
(
ñm
, 
fõld
Ë
RB_RED
; \

324 } 0)

	)

326 
	#RB_SET_BLACKRED
(
bœck
, 
ªd
, 
fõld
) do { \

327 
	`RB_COLOR
(
bœck
, 
fõld
Ë
RB_BLACK
; \

328 
	`RB_COLOR
(
ªd
, 
fõld
Ë
RB_RED
; \

329 } 0)

	)

331 #i‚de‡
RB_AUGMENT


332 
	#RB_AUGMENT
(
x
)

	)

335 
	#RB_ROTATE_LEFT
(
hód
, 
ñm
, 
tmp
, 
fõld
) do { \

336 (
tmp
Ë
	`RB_RIGHT
(
ñm
, 
fõld
); \

337 i‡((
	`RB_RIGHT
(
ñm
, 
fõld
Ë
	`RB_LEFT
(
tmp
, field))) { \

338 
	`RB_PARENT
(
	`RB_LEFT
(
tmp
, 
fõld
), fõldË(
ñm
); \

340 
	`RB_AUGMENT
(
ñm
); \

341 i‡((
	`RB_PARENT
(
tmp
, 
fõld
ËRB_PARENT(
ñm
, field))) { \

342 i‡((
ñm
Ë=
	`RB_LEFT
(
	`RB_PARENT
”lm, 
fõld
), field)) \

343 
	`RB_LEFT
(
	`RB_PARENT
(
ñm
, 
fõld
), fõldË(
tmp
); \

345 
	`RB_RIGHT
(
	`RB_PARENT
(
ñm
, 
fõld
), fõldË(
tmp
); \

347 (
hód
)->
rbh_roŸ
 = (
tmp
); \

348 
	`RB_LEFT
(
tmp
, 
fõld
Ë(
ñm
); \

349 
	`RB_PARENT
(
ñm
, 
fõld
Ë(
tmp
); \

350 
	`RB_AUGMENT
(
tmp
); \

351 i‡((
	`RB_PARENT
(
tmp
, 
fõld
))) \

352 
	`RB_AUGMENT
(
	`RB_PARENT
(
tmp
, 
fõld
)); \

353 } 0)

	)

355 
	#RB_ROTATE_RIGHT
(
hód
, 
ñm
, 
tmp
, 
fõld
) do { \

356 (
tmp
Ë
	`RB_LEFT
(
ñm
, 
fõld
); \

357 i‡((
	`RB_LEFT
(
ñm
, 
fõld
Ë
	`RB_RIGHT
(
tmp
, field))) { \

358 
	`RB_PARENT
(
	`RB_RIGHT
(
tmp
, 
fõld
), fõldË(
ñm
); \

360 
	`RB_AUGMENT
(
ñm
); \

361 i‡((
	`RB_PARENT
(
tmp
, 
fõld
ËRB_PARENT(
ñm
, field))) { \

362 i‡((
ñm
Ë=
	`RB_LEFT
(
	`RB_PARENT
”lm, 
fõld
), field)) \

363 
	`RB_LEFT
(
	`RB_PARENT
(
ñm
, 
fõld
), fõldË(
tmp
); \

365 
	`RB_RIGHT
(
	`RB_PARENT
(
ñm
, 
fõld
), fõldË(
tmp
); \

367 (
hód
)->
rbh_roŸ
 = (
tmp
); \

368 
	`RB_RIGHT
(
tmp
, 
fõld
Ë(
ñm
); \

369 
	`RB_PARENT
(
ñm
, 
fõld
Ë(
tmp
); \

370 
	`RB_AUGMENT
(
tmp
); \

371 i‡((
	`RB_PARENT
(
tmp
, 
fõld
))) \

372 
	`RB_AUGMENT
(
	`RB_PARENT
(
tmp
, 
fõld
)); \

373 } 0)

	)

376 
	#RB_PROTOTYPE
(
«me
, 
ty≥
, 
fõld
, 
cmp
) \

377 
«me
##
	`_RB_INSERT_COLOR
(«mê*, 
ty≥
 *); \

378 
«me
##
	`_RB_REMOVE_COLOR
(«mê*, 
ty≥
 *, type *);\

379 
ty≥
 *
«me
##
	`_RB_REMOVE
(name *, type *); \

380 
ty≥
 *
«me
##
	`_RB_INSERT
(name *, type *); \

381 
ty≥
 *
«me
##
	`_RB_FIND
(name *, type *); \

382 
ty≥
 *
«me
##
	`_RB_NEXT
(type *); \

383 
ty≥
 *
«me
##
	`_RB_MINMAX
(name *, ); \

385 

	)

389 
	#RB_GENERATE
(
«me
, 
ty≥
, 
fõld
, 
cmp
) \

391 
«me
##
	`_RB_INSERT_COLOR
(«mê*
hód
, 
ty≥
 *
ñm
) \

393 
ty≥
 *
∑ª¡
, *
g∑ª¡
, *
tmp
; \

394 (
∑ª¡
 = 
	`RB_PARENT
(
ñm
, 
fõld
)) && \

395 
	`RB_COLOR
(
∑ª¡
, 
fõld
Ë=
RB_RED
) { \

396 
g∑ª¡
 = 
	`RB_PARENT
(
∑ª¡
, 
fõld
); \

397 i‡(
∑ª¡
 =
	`RB_LEFT
(
g∑ª¡
, 
fõld
)) { \

398 
tmp
 = 
	`RB_RIGHT
(
g∑ª¡
, 
fõld
); \

399 i‡(
tmp
 && 
	`RB_COLOR
—mp, 
fõld
Ë=
RB_RED
) { \

400 
	`RB_COLOR
(
tmp
, 
fõld
Ë
RB_BLACK
; \

401 
	`RB_SET_BLACKRED
(
∑ª¡
, 
g∑ª¡
, 
fõld
);\

402 
ñm
 = 
g∑ª¡
; \

405 i‡(
	`RB_RIGHT
(
∑ª¡
, 
fõld
Ë=
ñm
) { \

406 
	`RB_ROTATE_LEFT
(
hód
, 
∑ª¡
, 
tmp
, 
fõld
);\

407 
tmp
 = 
∑ª¡
; \

408 
∑ª¡
 = 
ñm
; \

409 
ñm
 = 
tmp
; \

411 
	`RB_SET_BLACKRED
(
∑ª¡
, 
g∑ª¡
, 
fõld
); \

412 
	`RB_ROTATE_RIGHT
(
hód
, 
g∑ª¡
, 
tmp
, 
fõld
); \

414 
tmp
 = 
	`RB_LEFT
(
g∑ª¡
, 
fõld
); \

415 i‡(
tmp
 && 
	`RB_COLOR
—mp, 
fõld
Ë=
RB_RED
) { \

416 
	`RB_COLOR
(
tmp
, 
fõld
Ë
RB_BLACK
; \

417 
	`RB_SET_BLACKRED
(
∑ª¡
, 
g∑ª¡
, 
fõld
);\

418 
ñm
 = 
g∑ª¡
; \

421 i‡(
	`RB_LEFT
(
∑ª¡
, 
fõld
Ë=
ñm
) { \

422 
	`RB_ROTATE_RIGHT
(
hód
, 
∑ª¡
, 
tmp
, 
fõld
);\

423 
tmp
 = 
∑ª¡
; \

424 
∑ª¡
 = 
ñm
; \

425 
ñm
 = 
tmp
; \

427 
	`RB_SET_BLACKRED
(
∑ª¡
, 
g∑ª¡
, 
fõld
); \

428 
	`RB_ROTATE_LEFT
(
hód
, 
g∑ª¡
, 
tmp
, 
fõld
); \

431 
	`RB_COLOR
(
hód
->
rbh_roŸ
, 
fõld
Ë
RB_BLACK
; \

435 
«me
##
	`_RB_REMOVE_COLOR
(«mê*
hód
, 
ty≥
 *
∑ª¡
, ty≥ *
ñm
) \

437 
ty≥
 *
tmp
; \

438 (
ñm
 =
NULL
 || 
	`RB_COLOR
”lm, 
fõld
Ë=
RB_BLACK
) && \

439 
ñm
 !
	`RB_ROOT
(
hód
)) { \

440 i‡(
	`RB_LEFT
(
∑ª¡
, 
fõld
Ë=
ñm
) { \

441 
tmp
 = 
	`RB_RIGHT
(
∑ª¡
, 
fõld
); \

442 i‡(
	`RB_COLOR
(
tmp
, 
fõld
Ë=
RB_RED
) { \

443 
	`RB_SET_BLACKRED
(
tmp
, 
∑ª¡
, 
fõld
); \

444 
	`RB_ROTATE_LEFT
(
hód
, 
∑ª¡
, 
tmp
, 
fõld
);\

445 
tmp
 = 
	`RB_RIGHT
(
∑ª¡
, 
fõld
); \

447 i‡((
	`RB_LEFT
(
tmp
, 
fõld
Ë=
NULL
 || \

448 
	`RB_COLOR
(
	`RB_LEFT
(
tmp
, 
fõld
), fõldË=
RB_BLACK
) &&\

449 (
	`RB_RIGHT
(
tmp
, 
fõld
Ë=
NULL
 || \

450 
	`RB_COLOR
(
	`RB_RIGHT
(
tmp
, 
fõld
), fõldË=
RB_BLACK
)) {\

451 
	`RB_COLOR
(
tmp
, 
fõld
Ë
RB_RED
; \

452 
ñm
 = 
∑ª¡
; \

453 
∑ª¡
 = 
	`RB_PARENT
(
ñm
, 
fõld
); \

455 i‡(
	`RB_RIGHT
(
tmp
, 
fõld
Ë=
NULL
 || \

456 
	`RB_COLOR
(
	`RB_RIGHT
(
tmp
, 
fõld
), fõldË=
RB_BLACK
) {\

457 
ty≥
 *
ﬁe·
; \

458 i‡((
ﬁe·
 = 
	`RB_LEFT
(
tmp
, 
fõld
)))\

459 
	`RB_COLOR
(
ﬁe·
, 
fõld
Ë
RB_BLACK
;\

460 
	`RB_COLOR
(
tmp
, 
fõld
Ë
RB_RED
; \

461 
	`RB_ROTATE_RIGHT
(
hód
, 
tmp
, 
ﬁe·
, 
fõld
);\

462 
tmp
 = 
	`RB_RIGHT
(
∑ª¡
, 
fõld
); \

464 
	`RB_COLOR
(
tmp
, 
fõld
ËRB_COLOR(
∑ª¡
, field);\

465 
	`RB_COLOR
(
∑ª¡
, 
fõld
Ë
RB_BLACK
; \

466 i‡(
	`RB_RIGHT
(
tmp
, 
fõld
)) \

467 
	`RB_COLOR
(
	`RB_RIGHT
(
tmp
, 
fõld
), fõldË
RB_BLACK
;\

468 
	`RB_ROTATE_LEFT
(
hód
, 
∑ª¡
, 
tmp
, 
fõld
);\

469 
ñm
 = 
	`RB_ROOT
(
hód
); \

473 
tmp
 = 
	`RB_LEFT
(
∑ª¡
, 
fõld
); \

474 i‡(
	`RB_COLOR
(
tmp
, 
fõld
Ë=
RB_RED
) { \

475 
	`RB_SET_BLACKRED
(
tmp
, 
∑ª¡
, 
fõld
); \

476 
	`RB_ROTATE_RIGHT
(
hód
, 
∑ª¡
, 
tmp
, 
fõld
);\

477 
tmp
 = 
	`RB_LEFT
(
∑ª¡
, 
fõld
); \

479 i‡((
	`RB_LEFT
(
tmp
, 
fõld
Ë=
NULL
 || \

480 
	`RB_COLOR
(
	`RB_LEFT
(
tmp
, 
fõld
), fõldË=
RB_BLACK
) &&\

481 (
	`RB_RIGHT
(
tmp
, 
fõld
Ë=
NULL
 || \

482 
	`RB_COLOR
(
	`RB_RIGHT
(
tmp
, 
fõld
), fõldË=
RB_BLACK
)) {\

483 
	`RB_COLOR
(
tmp
, 
fõld
Ë
RB_RED
; \

484 
ñm
 = 
∑ª¡
; \

485 
∑ª¡
 = 
	`RB_PARENT
(
ñm
, 
fõld
); \

487 i‡(
	`RB_LEFT
(
tmp
, 
fõld
Ë=
NULL
 || \

488 
	`RB_COLOR
(
	`RB_LEFT
(
tmp
, 
fõld
), fõldË=
RB_BLACK
) {\

489 
ty≥
 *
‹ight
; \

490 i‡((
‹ight
 = 
	`RB_RIGHT
(
tmp
, 
fõld
)))\

491 
	`RB_COLOR
(
‹ight
, 
fõld
Ë
RB_BLACK
;\

492 
	`RB_COLOR
(
tmp
, 
fõld
Ë
RB_RED
; \

493 
	`RB_ROTATE_LEFT
(
hód
, 
tmp
, 
‹ight
, 
fõld
);\

494 
tmp
 = 
	`RB_LEFT
(
∑ª¡
, 
fõld
); \

496 
	`RB_COLOR
(
tmp
, 
fõld
ËRB_COLOR(
∑ª¡
, field);\

497 
	`RB_COLOR
(
∑ª¡
, 
fõld
Ë
RB_BLACK
; \

498 i‡(
	`RB_LEFT
(
tmp
, 
fõld
)) \

499 
	`RB_COLOR
(
	`RB_LEFT
(
tmp
, 
fõld
), fõldË
RB_BLACK
;\

500 
	`RB_ROTATE_RIGHT
(
hód
, 
∑ª¡
, 
tmp
, 
fõld
);\

501 
ñm
 = 
	`RB_ROOT
(
hód
); \

506 i‡(
ñm
) \

507 
	`RB_COLOR
(
ñm
, 
fõld
Ë
RB_BLACK
; \

510 
ty≥
 * \

511 
«me
##
	`_RB_REMOVE
(«mê*
hód
, 
ty≥
 *
ñm
) \

513 
ty≥
 *
chûd
, *
∑ª¡
, *
ﬁd
 = 
ñm
; \

514 
cﬁ‹
; \

515 i‡(
	`RB_LEFT
(
ñm
, 
fõld
Ë=
NULL
) \

516 
chûd
 = 
	`RB_RIGHT
(
ñm
, 
fõld
); \

517 i‡(
	`RB_RIGHT
(
ñm
, 
fõld
Ë=
NULL
) \

518 
chûd
 = 
	`RB_LEFT
(
ñm
, 
fõld
); \

520 
ty≥
 *
À·
; \

521 
ñm
 = 
	`RB_RIGHT
”lm, 
fõld
); \

522 (
À·
 = 
	`RB_LEFT
(
ñm
, 
fõld
))) \

523 
ñm
 = 
À·
; \

524 
chûd
 = 
	`RB_RIGHT
(
ñm
, 
fõld
); \

525 
∑ª¡
 = 
	`RB_PARENT
(
ñm
, 
fõld
); \

526 
cﬁ‹
 = 
	`RB_COLOR
(
ñm
, 
fõld
); \

527 i‡(
chûd
) \

528 
	`RB_PARENT
(
chûd
, 
fõld
Ë
∑ª¡
; \

529 i‡(
∑ª¡
) { \

530 i‡(
	`RB_LEFT
(
∑ª¡
, 
fõld
Ë=
ñm
) \

531 
	`RB_LEFT
(
∑ª¡
, 
fõld
Ë
chûd
; \

533 
	`RB_RIGHT
(
∑ª¡
, 
fõld
Ë
chûd
; \

534 
	`RB_AUGMENT
(
∑ª¡
); \

536 
	`RB_ROOT
(
hód
Ë
chûd
; \

537 i‡(
	`RB_PARENT
(
ñm
, 
fõld
Ë=
ﬁd
) \

538 
∑ª¡
 = 
ñm
; \

539 (
ñm
)->
fõld
 = (
ﬁd
)->field; \

540 i‡(
	`RB_PARENT
(
ﬁd
, 
fõld
)) { \

541 i‡(
	`RB_LEFT
(
	`RB_PARENT
(
ﬁd
, 
fõld
), field) == old)\

542 
	`RB_LEFT
(
	`RB_PARENT
(
ﬁd
, 
fõld
), fõldË
ñm
;\

544 
	`RB_RIGHT
(
	`RB_PARENT
(
ﬁd
, 
fõld
), fõldË
ñm
;\

545 
	`RB_AUGMENT
(
	`RB_PARENT
(
ﬁd
, 
fõld
)); \

547 
	`RB_ROOT
(
hód
Ë
ñm
; \

548 
	`RB_PARENT
(
	`RB_LEFT
(
ﬁd
, 
fõld
), fõldË
ñm
; \

549 i‡(
	`RB_RIGHT
(
ﬁd
, 
fõld
)) \

550 
	`RB_PARENT
(
	`RB_RIGHT
(
ﬁd
, 
fõld
), fõldË
ñm
; \

551 i‡(
∑ª¡
) { \

552 
À·
 = 
∑ª¡
; \

554 
	`RB_AUGMENT
(
À·
); \

555 } (
À·
 = 
	`RB_PARENT
÷e·, 
fõld
))); \

557 
cﬁ‹
; \

559 
∑ª¡
 = 
	`RB_PARENT
(
ñm
, 
fõld
); \

560 
cﬁ‹
 = 
	`RB_COLOR
(
ñm
, 
fõld
); \

561 i‡(
chûd
) \

562 
	`RB_PARENT
(
chûd
, 
fõld
Ë
∑ª¡
; \

563 i‡(
∑ª¡
) { \

564 i‡(
	`RB_LEFT
(
∑ª¡
, 
fõld
Ë=
ñm
) \

565 
	`RB_LEFT
(
∑ª¡
, 
fõld
Ë
chûd
; \

567 
	`RB_RIGHT
(
∑ª¡
, 
fõld
Ë
chûd
; \

568 
	`RB_AUGMENT
(
∑ª¡
); \

570 
	`RB_ROOT
(
hód
Ë
chûd
; \

571 
cﬁ‹
: \

572 i‡(
cﬁ‹
 =
RB_BLACK
) \

573 
«me
##
	`_RB_REMOVE_COLOR
(
hód
, 
∑ª¡
, 
chûd
); \

574  (
ﬁd
); \

578 
ty≥
 * \

579 
«me
##
	`_RB_INSERT
(«mê*
hód
, 
ty≥
 *
ñm
) \

581 
ty≥
 *
tmp
; \

582 
ty≥
 *
∑ª¡
 = 
NULL
; \

583 
comp
 = 0; \

584 
tmp
 = 
	`RB_ROOT
(
hód
); \

585 
tmp
) { \

586 
∑ª¡
 = 
tmp
; \

587 
comp
 = (
cmp
)(
ñm
, 
∑ª¡
); \

588 i‡(
comp
 < 0) \

589 
tmp
 = 
	`RB_LEFT
—mp, 
fõld
); \

590 i‡(
comp
 > 0) \

591 
tmp
 = 
	`RB_RIGHT
—mp, 
fõld
); \

593  (
tmp
); \

595 
	`RB_SET
(
ñm
, 
∑ª¡
, 
fõld
); \

596 i‡(
∑ª¡
 !
NULL
) { \

597 i‡(
comp
 < 0) \

598 
	`RB_LEFT
(
∑ª¡
, 
fõld
Ë
ñm
; \

600 
	`RB_RIGHT
(
∑ª¡
, 
fõld
Ë
ñm
; \

601 
	`RB_AUGMENT
(
∑ª¡
); \

603 
	`RB_ROOT
(
hód
Ë
ñm
; \

604 
«me
##
	`_RB_INSERT_COLOR
(
hód
, 
ñm
); \

605  (
NULL
); \

609 
ty≥
 * \

610 
«me
##
	`_RB_FIND
(«mê*
hód
, 
ty≥
 *
ñm
) \

612 
ty≥
 *
tmp
 = 
	`RB_ROOT
(
hód
); \

613 
comp
; \

614 
tmp
) { \

615 
comp
 = 
	`cmp
(
ñm
, 
tmp
); \

616 i‡(
comp
 < 0) \

617 
tmp
 = 
	`RB_LEFT
—mp, 
fõld
); \

618 i‡(
comp
 > 0) \

619 
tmp
 = 
	`RB_RIGHT
—mp, 
fõld
); \

621  (
tmp
); \

623  (
NULL
); \

626 
ty≥
 * \

627 
«me
##
	`_RB_NEXT
(
ty≥
 *
ñm
) \

629 i‡(
	`RB_RIGHT
(
ñm
, 
fõld
)) { \

630 
ñm
 = 
	`RB_RIGHT
”lm, 
fõld
); \

631 
	`RB_LEFT
(
ñm
, 
fõld
)) \

632 
ñm
 = 
	`RB_LEFT
”lm, 
fõld
); \

634 i‡(
	`RB_PARENT
(
ñm
, 
fõld
) && \

635 (
ñm
 =
	`RB_LEFT
(
	`RB_PARENT
”lm, 
fõld
), field))) \

636 
ñm
 = 
	`RB_PARENT
”lm, 
fõld
); \

638 
	`RB_PARENT
(
ñm
, 
fõld
) && \

639 (
ñm
 =
	`RB_RIGHT
(
	`RB_PARENT
”lm, 
fõld
), field)))\

640 
ñm
 = 
	`RB_PARENT
”lm, 
fõld
); \

641 
ñm
 = 
	`RB_PARENT
”lm, 
fõld
); \

644  (
ñm
); \

647 
ty≥
 * \

648 
«me
##
	`_RB_MINMAX
(«mê*
hód
, 
vÆ
) \

650 
ty≥
 *
tmp
 = 
	`RB_ROOT
(
hód
); \

651 
ty≥
 *
∑ª¡
 = 
NULL
; \

652 
tmp
) { \

653 
∑ª¡
 = 
tmp
; \

654 i‡(
vÆ
 < 0) \

655 
tmp
 = 
	`RB_LEFT
—mp, 
fõld
); \

657 
tmp
 = 
	`RB_RIGHT
—mp, 
fõld
); \

659  (
∑ª¡
); \

660 }

	)

662 
	#RB_NEGINF
 -1

	)

663 
	#RB_INF
 1

	)

665 
	#RB_INSERT
(
«me
, 
x
, 
y
Ë«me##
	`_RB_INSERT
(x, y)

	)

666 
	#RB_REMOVE
(
«me
, 
x
, 
y
Ë«me##
	`_RB_REMOVE
(x, y)

	)

667 
	#RB_FIND
(
«me
, 
x
, 
y
Ë«me##
	`_RB_FIND
(x, y)

	)

668 
	#RB_NEXT
(
«me
, 
x
, 
y
Ë«me##
	`_RB_NEXT
(y)

	)

669 
	#RB_MIN
(
«me
, 
x
Ë«me##
	`_RB_MINMAX
(x, 
RB_NEGINF
)

	)

670 
	#RB_MAX
(
«me
, 
x
Ë«me##
	`_RB_MINMAX
(x, 
RB_INF
)

	)

672 
	#RB_FOREACH
(
x
, 
«me
, 
hód
) \

673 (
x
Ë
	`RB_MIN
(
«me
, 
hód
); \

674 (
x
Ë!
NULL
; \

675 (
x
Ë
«me
##
	`_RB_NEXT
(x))

	)

704 #i‚def 
_SYS_TREE_H_


705 
	#_SYS_TREE_H_


	)

734 
	#SPLAY_HEAD
(
«me
, 
ty≥
) \

735 
	s«me
 { \

736 
ty≥
 *
•h_roŸ
; \

737 }

	)

739 
	#SPLAY_INITIALIZER
(
roŸ
) \

740 { 
NULL
 }

	)

742 
	#SPLAY_INIT
(
roŸ
) do { \

743 (
roŸ
)->
•h_roŸ
 = 
NULL
; \

744 } 0)

	)

746 
	#SPLAY_ENTRY
(
ty≥
) \

748 
ty≥
 *
•e_À·
; \

749 
ty≥
 *
•e_right
; \

750 }

	)

752 
	#SPLAY_LEFT
(
ñm
, 
fõld
Ë”lm)->fõld.
•e_À·


	)

753 
	#SPLAY_RIGHT
(
ñm
, 
fõld
Ë”lm)->fõld.
•e_right


	)

754 
	#SPLAY_ROOT
(
hód
Ë(hód)->
•h_roŸ


	)

755 
	#SPLAY_EMPTY
(
hód
Ë(
	`SPLAY_ROOT
(hódË=
NULL
)

	)

758 
	#SPLAY_ROTATE_RIGHT
(
hód
, 
tmp
, 
fõld
) do { \

759 
	`SPLAY_LEFT
((
hód
)->
•h_roŸ
, 
fõld
Ë
	`SPLAY_RIGHT
(
tmp
, field); \

760 
	`SPLAY_RIGHT
(
tmp
, 
fõld
Ë(
hód
)->
•h_roŸ
; \

761 (
hód
)->
•h_roŸ
 = 
tmp
; \

762 } 0)

	)

764 
	#SPLAY_ROTATE_LEFT
(
hód
, 
tmp
, 
fõld
) do { \

765 
	`SPLAY_RIGHT
((
hód
)->
•h_roŸ
, 
fõld
Ë
	`SPLAY_LEFT
(
tmp
, field); \

766 
	`SPLAY_LEFT
(
tmp
, 
fõld
Ë(
hód
)->
•h_roŸ
; \

767 (
hód
)->
•h_roŸ
 = 
tmp
; \

768 } 0)

	)

770 
	#SPLAY_LINKLEFT
(
hód
, 
tmp
, 
fõld
) do { \

771 
	`SPLAY_LEFT
(
tmp
, 
fõld
Ë(
hód
)->
•h_roŸ
; \

772 
tmp
 = (
hód
)->
•h_roŸ
; \

773 (
hód
)->
•h_roŸ
 = 
	`SPLAY_LEFT
((hód)->•h_roŸ, 
fõld
); \

774 } 0)

	)

776 
	#SPLAY_LINKRIGHT
(
hód
, 
tmp
, 
fõld
) do { \

777 
	`SPLAY_RIGHT
(
tmp
, 
fõld
Ë(
hód
)->
•h_roŸ
; \

778 
tmp
 = (
hód
)->
•h_roŸ
; \

779 (
hód
)->
•h_roŸ
 = 
	`SPLAY_RIGHT
((hód)->•h_roŸ, 
fõld
); \

780 } 0)

	)

782 
	#SPLAY_ASSEMBLE
(
hód
, 
node
, 
À·
, 
right
, 
fõld
) do { \

783 
	`SPLAY_RIGHT
(
À·
, 
fõld
Ë
	`SPLAY_LEFT
((
hód
)->
•h_roŸ
, field); \

784 
	`SPLAY_LEFT
(
right
, 
fõld
Ë
	`SPLAY_RIGHT
((
hód
)->
•h_roŸ
, field);\

785 
	`SPLAY_LEFT
((
hód
)->
•h_roŸ
, 
fõld
Ë
	`SPLAY_RIGHT
(
node
, field); \

786 
	`SPLAY_RIGHT
((
hód
)->
•h_roŸ
, 
fõld
Ë
	`SPLAY_LEFT
(
node
, field); \

787 } 0)

	)

791 
	#SPLAY_PROTOTYPE
(
«me
, 
ty≥
, 
fõld
, 
cmp
) \

792 
«me
##
	`_SPLAY
(«mê*, 
ty≥
 *); \

793 
«me
##
	`_SPLAY_MINMAX
(name *, ); \

794 
ty≥
 *
«me
##
	`_SPLAY_INSERT
(name *, type *); \

795 
ty≥
 *
«me
##
	`_SPLAY_REMOVE
(name *, type *); \

798 
__ölöe
 
ty≥
 * \

799 
«me
##
	`_SPLAY_FIND
(«mê*
hód
, 
ty≥
 *
ñm
) \

801 i‡(
	`SPLAY_EMPTY
(
hód
)) \

802 (
NULL
); \

803 
«me
##
	`_SPLAY
(
hód
, 
ñm
); \

804 i‡((
cmp
)(
ñm
, (
hód
)->
•h_roŸ
) == 0) \

805  (
hód
->
•h_roŸ
); \

806  (
NULL
); \

809 
__ölöe
 
ty≥
 * \

810 
«me
##
	`_SPLAY_NEXT
(«mê*
hód
, 
ty≥
 *
ñm
) \

812 
«me
##
	`_SPLAY
(
hód
, 
ñm
); \

813 i‡(
	`SPLAY_RIGHT
(
ñm
, 
fõld
Ë!
NULL
) { \

814 
ñm
 = 
	`SPLAY_RIGHT
”lm, 
fõld
); \

815 
	`SPLAY_LEFT
(
ñm
, 
fõld
Ë!
NULL
) { \

816 
ñm
 = 
	`SPLAY_LEFT
”lm, 
fõld
); \

819 
ñm
 = 
NULL
; \

820  (
ñm
); \

823 
__ölöe
 
ty≥
 * \

824 
«me
##
	`_SPLAY_MIN_MAX
(«mê*
hód
, 
vÆ
) \

826 
«me
##
	`_SPLAY_MINMAX
(
hód
, 
vÆ
); \

827  (
	`SPLAY_ROOT
(
hód
)); \

828 }

	)

833 
	#SPLAY_GENERATE
(
«me
, 
ty≥
, 
fõld
, 
cmp
) \

834 
ty≥
 * \

835 
«me
##
	`_SPLAY_INSERT
(«mê*
hód
, 
ty≥
 *
ñm
) \

837 i‡(
	`SPLAY_EMPTY
(
hód
)) { \

838 
	`SPLAY_LEFT
(
ñm
, 
fõld
Ë
	`SPLAY_RIGHT
”lm, fõldË
NULL
; \

840 
__comp
; \

841 
«me
##
	`_SPLAY
(
hód
, 
ñm
); \

842 
__comp
 = (
cmp
)(
ñm
, (
hód
)->
•h_roŸ
); \

843 if(
__comp
 < 0) { \

844 
	`SPLAY_LEFT
(
ñm
, 
fõld
ËSPLAY_LEFT((
hód
)->
•h_roŸ
, field);\

845 
	`SPLAY_RIGHT
(
ñm
, 
fõld
Ë(
hód
)->
•h_roŸ
; \

846 
	`SPLAY_LEFT
((
hód
)->
•h_roŸ
, 
fõld
Ë
NULL
; \

847 } i‡(
__comp
 > 0) { \

848 
	`SPLAY_RIGHT
(
ñm
, 
fõld
ËSPLAY_RIGHT((
hód
)->
•h_roŸ
, field);\

849 
	`SPLAY_LEFT
(
ñm
, 
fõld
Ë(
hód
)->
•h_roŸ
; \

850 
	`SPLAY_RIGHT
((
hód
)->
•h_roŸ
, 
fõld
Ë
NULL
; \

852  ((
hód
)->
•h_roŸ
); \

854 (
hód
)->
•h_roŸ
 = (
ñm
); \

855  (
NULL
); \

858 
ty≥
 * \

859 
«me
##
	`_SPLAY_REMOVE
(«mê*
hód
, 
ty≥
 *
ñm
) \

861 
ty≥
 *
__tmp
; \

862 i‡(
	`SPLAY_EMPTY
(
hód
)) \

863  (
NULL
); \

864 
«me
##
	`_SPLAY
(
hód
, 
ñm
); \

865 i‡((
cmp
)(
ñm
, (
hód
)->
•h_roŸ
) == 0) { \

866 i‡(
	`SPLAY_LEFT
((
hód
)->
•h_roŸ
, 
fõld
Ë=
NULL
) { \

867 (
hód
)->
•h_roŸ
 = 
	`SPLAY_RIGHT
((hód)->•h_roŸ, 
fõld
);\

869 
__tmp
 = 
	`SPLAY_RIGHT
((
hód
)->
•h_roŸ
, 
fõld
); \

870 (
hód
)->
•h_roŸ
 = 
	`SPLAY_LEFT
((hód)->•h_roŸ, 
fõld
);\

871 
«me
##
	`_SPLAY
(
hód
, 
ñm
); \

872 
	`SPLAY_RIGHT
((
hód
)->
•h_roŸ
, 
fõld
Ë
__tmp
; \

874  (
ñm
); \

876  (
NULL
); \

880 
«me
##
	`_SPLAY
(«mê*
hód
, 
ty≥
 *
ñm
) \

882 
ty≥
 
__node
, *
__À·
, *
__right
, *
__tmp
; \

883 
__comp
; \

885 
	`SPLAY_LEFT
(&
__node
, 
fõld
Ë
	`SPLAY_RIGHT
(&__node, fõldË
NULL
;\

886 
__À·
 = 
__right
 = &
__node
; \

888 (
__comp
 = (
cmp
)(
ñm
, (
hód
)->
•h_roŸ
))) { \

889 i‡(
__comp
 < 0) { \

890 
__tmp
 = 
	`SPLAY_LEFT
((
hód
)->
•h_roŸ
, 
fõld
); \

891 i‡(
__tmp
 =
NULL
) \

893 i‡((
cmp
)(
ñm
, 
__tmp
) < 0){ \

894 
	`SPLAY_ROTATE_RIGHT
(
hód
, 
__tmp
, 
fõld
); \

895 i‡(
	`SPLAY_LEFT
((
hód
)->
•h_roŸ
, 
fõld
Ë=
NULL
)\

898 
	`SPLAY_LINKLEFT
(
hód
, 
__right
, 
fõld
); \

899 } i‡(
__comp
 > 0) { \

900 
__tmp
 = 
	`SPLAY_RIGHT
((
hód
)->
•h_roŸ
, 
fõld
); \

901 i‡(
__tmp
 =
NULL
) \

903 i‡((
cmp
)(
ñm
, 
__tmp
) > 0){ \

904 
	`SPLAY_ROTATE_LEFT
(
hód
, 
__tmp
, 
fõld
); \

905 i‡(
	`SPLAY_RIGHT
((
hód
)->
•h_roŸ
, 
fõld
Ë=
NULL
)\

908 
	`SPLAY_LINKRIGHT
(
hód
, 
__À·
, 
fõld
); \

911 
	`SPLAY_ASSEMBLE
(
hód
, &
__node
, 
__À·
, 
__right
, 
fõld
); \

917 
«me
##
	`_SPLAY_MINMAX
(«mê*
hód
, 
__comp
) \

919 
ty≥
 
__node
, *
__À·
, *
__right
, *
__tmp
; \

921 
	`SPLAY_LEFT
(&
__node
, 
fõld
Ë
	`SPLAY_RIGHT
(&__node, fõldË
NULL
;\

922 
__À·
 = 
__right
 = &
__node
; \

925 i‡(
__comp
 < 0) { \

926 
__tmp
 = 
	`SPLAY_LEFT
((
hód
)->
•h_roŸ
, 
fõld
); \

927 i‡(
__tmp
 =
NULL
) \

929 i‡(
__comp
 < 0){ \

930 
	`SPLAY_ROTATE_RIGHT
(
hód
, 
__tmp
, 
fõld
); \

931 i‡(
	`SPLAY_LEFT
((
hód
)->
•h_roŸ
, 
fõld
Ë=
NULL
)\

934 
	`SPLAY_LINKLEFT
(
hód
, 
__right
, 
fõld
); \

935 } i‡(
__comp
 > 0) { \

936 
__tmp
 = 
	`SPLAY_RIGHT
((
hód
)->
•h_roŸ
, 
fõld
); \

937 i‡(
__tmp
 =
NULL
) \

939 i‡(
__comp
 > 0) { \

940 
	`SPLAY_ROTATE_LEFT
(
hód
, 
__tmp
, 
fõld
); \

941 i‡(
	`SPLAY_RIGHT
((
hód
)->
•h_roŸ
, 
fõld
Ë=
NULL
)\

944 
	`SPLAY_LINKRIGHT
(
hód
, 
__À·
, 
fõld
); \

947 
	`SPLAY_ASSEMBLE
(
hód
, &
__node
, 
__À·
, 
__right
, 
fõld
); \

948 }

	)

950 
	#SPLAY_NEGINF
 -1

	)

951 
	#SPLAY_INF
 1

	)

953 
	#SPLAY_INSERT
(
«me
, 
x
, 
y
Ë«me##
	`_SPLAY_INSERT
(x, y)

	)

954 
	#SPLAY_REMOVE
(
«me
, 
x
, 
y
Ë«me##
	`_SPLAY_REMOVE
(x, y)

	)

955 
	#SPLAY_FIND
(
«me
, 
x
, 
y
Ë«me##
	`_SPLAY_FIND
(x, y)

	)

956 
	#SPLAY_NEXT
(
«me
, 
x
, 
y
Ë«me##
	`_SPLAY_NEXT
(x, y)

	)

957 
	#SPLAY_MIN
(
«me
, 
x
Ë(
	`SPLAY_EMPTY
(xË? 
NULL
 \

958 : 
«me
##
	`_SPLAY_MIN_MAX
(
x
, 
SPLAY_NEGINF
))

	)

959 
	#SPLAY_MAX
(
«me
, 
x
Ë(
	`SPLAY_EMPTY
(xË? 
NULL
 \

960 : 
«me
##
	`_SPLAY_MIN_MAX
(
x
, 
SPLAY_INF
))

	)

962 
	#SPLAY_FOREACH
(
x
, 
«me
, 
hód
) \

963 (
x
Ë
	`SPLAY_MIN
(
«me
, 
hód
); \

964 (
x
Ë!
NULL
; \

965 (
x
Ë
	`SPLAY_NEXT
(
«me
, 
hód
, x))

	)

968 
	#RB_HEAD
(
«me
, 
ty≥
) \

969 
	s«me
 { \

970 
ty≥
 *
rbh_roŸ
; \

971 }

	)

973 
	#RB_INITIALIZER
(
roŸ
) \

974 { 
NULL
 }

	)

976 
	#RB_INIT
(
roŸ
) do { \

977 (
roŸ
)->
rbh_roŸ
 = 
NULL
; \

978 } 0)

	)

980 
	#RB_BLACK
 0

	)

981 
	#RB_RED
 1

	)

982 
	#RB_ENTRY
(
ty≥
) \

984 
ty≥
 *
rbe_À·
; \

985 
ty≥
 *
rbe_right
; \

986 
ty≥
 *
rbe_∑ª¡
; \

987 
rbe_cﬁ‹
; \

988 }

	)

990 
	#RB_LEFT
(
ñm
, 
fõld
Ë”lm)->fõld.
rbe_À·


	)

991 
	#RB_RIGHT
(
ñm
, 
fõld
Ë”lm)->fõld.
rbe_right


	)

992 
	#RB_PARENT
(
ñm
, 
fõld
Ë”lm)->fõld.
rbe_∑ª¡


	)

993 
	#RB_COLOR
(
ñm
, 
fõld
Ë”lm)->fõld.
rbe_cﬁ‹


	)

994 
	#RB_ROOT
(
hód
Ë(hód)->
rbh_roŸ


	)

995 
	#RB_EMPTY
(
hód
Ë(
	`RB_ROOT
(hódË=
NULL
)

	)

997 
	#RB_SET
(
ñm
, 
∑ª¡
, 
fõld
) do { \

998 
	`RB_PARENT
(
ñm
, 
fõld
Ë
∑ª¡
; \

999 
	`RB_LEFT
(
ñm
, 
fõld
Ë
	`RB_RIGHT
”lm, fõldË
NULL
; \

1000 
	`RB_COLOR
(
ñm
, 
fõld
Ë
RB_RED
; \

1001 } 0)

	)

1003 
	#RB_SET_BLACKRED
(
bœck
, 
ªd
, 
fõld
) do { \

1004 
	`RB_COLOR
(
bœck
, 
fõld
Ë
RB_BLACK
; \

1005 
	`RB_COLOR
(
ªd
, 
fõld
Ë
RB_RED
; \

1006 } 0)

	)

1008 #i‚de‡
RB_AUGMENT


1009 
	#RB_AUGMENT
(
x
)

	)

1012 
	#RB_ROTATE_LEFT
(
hód
, 
ñm
, 
tmp
, 
fõld
) do { \

1013 (
tmp
Ë
	`RB_RIGHT
(
ñm
, 
fõld
); \

1014 i‡((
	`RB_RIGHT
(
ñm
, 
fõld
Ë
	`RB_LEFT
(
tmp
, field))) { \

1015 
	`RB_PARENT
(
	`RB_LEFT
(
tmp
, 
fõld
), fõldË(
ñm
); \

1017 
	`RB_AUGMENT
(
ñm
); \

1018 i‡((
	`RB_PARENT
(
tmp
, 
fõld
ËRB_PARENT(
ñm
, field))) { \

1019 i‡((
ñm
Ë=
	`RB_LEFT
(
	`RB_PARENT
”lm, 
fõld
), field)) \

1020 
	`RB_LEFT
(
	`RB_PARENT
(
ñm
, 
fõld
), fõldË(
tmp
); \

1022 
	`RB_RIGHT
(
	`RB_PARENT
(
ñm
, 
fõld
), fõldË(
tmp
); \

1024 (
hód
)->
rbh_roŸ
 = (
tmp
); \

1025 
	`RB_LEFT
(
tmp
, 
fõld
Ë(
ñm
); \

1026 
	`RB_PARENT
(
ñm
, 
fõld
Ë(
tmp
); \

1027 
	`RB_AUGMENT
(
tmp
); \

1028 i‡((
	`RB_PARENT
(
tmp
, 
fõld
))) \

1029 
	`RB_AUGMENT
(
	`RB_PARENT
(
tmp
, 
fõld
)); \

1030 } 0)

	)

1032 
	#RB_ROTATE_RIGHT
(
hód
, 
ñm
, 
tmp
, 
fõld
) do { \

1033 (
tmp
Ë
	`RB_LEFT
(
ñm
, 
fõld
); \

1034 i‡((
	`RB_LEFT
(
ñm
, 
fõld
Ë
	`RB_RIGHT
(
tmp
, field))) { \

1035 
	`RB_PARENT
(
	`RB_RIGHT
(
tmp
, 
fõld
), fõldË(
ñm
); \

1037 
	`RB_AUGMENT
(
ñm
); \

1038 i‡((
	`RB_PARENT
(
tmp
, 
fõld
ËRB_PARENT(
ñm
, field))) { \

1039 i‡((
ñm
Ë=
	`RB_LEFT
(
	`RB_PARENT
”lm, 
fõld
), field)) \

1040 
	`RB_LEFT
(
	`RB_PARENT
(
ñm
, 
fõld
), fõldË(
tmp
); \

1042 
	`RB_RIGHT
(
	`RB_PARENT
(
ñm
, 
fõld
), fõldË(
tmp
); \

1044 (
hód
)->
rbh_roŸ
 = (
tmp
); \

1045 
	`RB_RIGHT
(
tmp
, 
fõld
Ë(
ñm
); \

1046 
	`RB_PARENT
(
ñm
, 
fõld
Ë(
tmp
); \

1047 
	`RB_AUGMENT
(
tmp
); \

1048 i‡((
	`RB_PARENT
(
tmp
, 
fõld
))) \

1049 
	`RB_AUGMENT
(
	`RB_PARENT
(
tmp
, 
fõld
)); \

1050 } 0)

	)

1053 
	#RB_PROTOTYPE
(
«me
, 
ty≥
, 
fõld
, 
cmp
) \

1054 
«me
##
	`_RB_INSERT_COLOR
(«mê*, 
ty≥
 *); \

1055 
«me
##
	`_RB_REMOVE_COLOR
(«mê*, 
ty≥
 *, type *);\

1056 
ty≥
 *
«me
##
	`_RB_REMOVE
(name *, type *); \

1057 
ty≥
 *
«me
##
	`_RB_INSERT
(name *, type *); \

1058 
ty≥
 *
«me
##
	`_RB_FIND
(name *, type *); \

1059 
ty≥
 *
«me
##
	`_RB_NEXT
(type *); \

1060 
ty≥
 *
«me
##
	`_RB_MINMAX
(name *, ); \

1062 

	)

1066 
	#RB_GENERATE
(
«me
, 
ty≥
, 
fõld
, 
cmp
) \

1068 
«me
##
	`_RB_INSERT_COLOR
(«mê*
hód
, 
ty≥
 *
ñm
) \

1070 
ty≥
 *
∑ª¡
, *
g∑ª¡
, *
tmp
; \

1071 (
∑ª¡
 = 
	`RB_PARENT
(
ñm
, 
fõld
)) && \

1072 
	`RB_COLOR
(
∑ª¡
, 
fõld
Ë=
RB_RED
) { \

1073 
g∑ª¡
 = 
	`RB_PARENT
(
∑ª¡
, 
fõld
); \

1074 i‡(
∑ª¡
 =
	`RB_LEFT
(
g∑ª¡
, 
fõld
)) { \

1075 
tmp
 = 
	`RB_RIGHT
(
g∑ª¡
, 
fõld
); \

1076 i‡(
tmp
 && 
	`RB_COLOR
—mp, 
fõld
Ë=
RB_RED
) { \

1077 
	`RB_COLOR
(
tmp
, 
fõld
Ë
RB_BLACK
; \

1078 
	`RB_SET_BLACKRED
(
∑ª¡
, 
g∑ª¡
, 
fõld
);\

1079 
ñm
 = 
g∑ª¡
; \

1082 i‡(
	`RB_RIGHT
(
∑ª¡
, 
fõld
Ë=
ñm
) { \

1083 
	`RB_ROTATE_LEFT
(
hód
, 
∑ª¡
, 
tmp
, 
fõld
);\

1084 
tmp
 = 
∑ª¡
; \

1085 
∑ª¡
 = 
ñm
; \

1086 
ñm
 = 
tmp
; \

1088 
	`RB_SET_BLACKRED
(
∑ª¡
, 
g∑ª¡
, 
fõld
); \

1089 
	`RB_ROTATE_RIGHT
(
hód
, 
g∑ª¡
, 
tmp
, 
fõld
); \

1091 
tmp
 = 
	`RB_LEFT
(
g∑ª¡
, 
fõld
); \

1092 i‡(
tmp
 && 
	`RB_COLOR
—mp, 
fõld
Ë=
RB_RED
) { \

1093 
	`RB_COLOR
(
tmp
, 
fõld
Ë
RB_BLACK
; \

1094 
	`RB_SET_BLACKRED
(
∑ª¡
, 
g∑ª¡
, 
fõld
);\

1095 
ñm
 = 
g∑ª¡
; \

1098 i‡(
	`RB_LEFT
(
∑ª¡
, 
fõld
Ë=
ñm
) { \

1099 
	`RB_ROTATE_RIGHT
(
hód
, 
∑ª¡
, 
tmp
, 
fõld
);\

1100 
tmp
 = 
∑ª¡
; \

1101 
∑ª¡
 = 
ñm
; \

1102 
ñm
 = 
tmp
; \

1104 
	`RB_SET_BLACKRED
(
∑ª¡
, 
g∑ª¡
, 
fõld
); \

1105 
	`RB_ROTATE_LEFT
(
hód
, 
g∑ª¡
, 
tmp
, 
fõld
); \

1108 
	`RB_COLOR
(
hód
->
rbh_roŸ
, 
fõld
Ë
RB_BLACK
; \

1112 
«me
##
	`_RB_REMOVE_COLOR
(«mê*
hód
, 
ty≥
 *
∑ª¡
, ty≥ *
ñm
) \

1114 
ty≥
 *
tmp
; \

1115 (
ñm
 =
NULL
 || 
	`RB_COLOR
”lm, 
fõld
Ë=
RB_BLACK
) && \

1116 
ñm
 !
	`RB_ROOT
(
hód
)) { \

1117 i‡(
	`RB_LEFT
(
∑ª¡
, 
fõld
Ë=
ñm
) { \

1118 
tmp
 = 
	`RB_RIGHT
(
∑ª¡
, 
fõld
); \

1119 i‡(
	`RB_COLOR
(
tmp
, 
fõld
Ë=
RB_RED
) { \

1120 
	`RB_SET_BLACKRED
(
tmp
, 
∑ª¡
, 
fõld
); \

1121 
	`RB_ROTATE_LEFT
(
hód
, 
∑ª¡
, 
tmp
, 
fõld
);\

1122 
tmp
 = 
	`RB_RIGHT
(
∑ª¡
, 
fõld
); \

1124 i‡((
	`RB_LEFT
(
tmp
, 
fõld
Ë=
NULL
 || \

1125 
	`RB_COLOR
(
	`RB_LEFT
(
tmp
, 
fõld
), fõldË=
RB_BLACK
) &&\

1126 (
	`RB_RIGHT
(
tmp
, 
fõld
Ë=
NULL
 || \

1127 
	`RB_COLOR
(
	`RB_RIGHT
(
tmp
, 
fõld
), fõldË=
RB_BLACK
)) {\

1128 
	`RB_COLOR
(
tmp
, 
fõld
Ë
RB_RED
; \

1129 
ñm
 = 
∑ª¡
; \

1130 
∑ª¡
 = 
	`RB_PARENT
(
ñm
, 
fõld
); \

1132 i‡(
	`RB_RIGHT
(
tmp
, 
fõld
Ë=
NULL
 || \

1133 
	`RB_COLOR
(
	`RB_RIGHT
(
tmp
, 
fõld
), fõldË=
RB_BLACK
) {\

1134 
ty≥
 *
ﬁe·
; \

1135 i‡((
ﬁe·
 = 
	`RB_LEFT
(
tmp
, 
fõld
)))\

1136 
	`RB_COLOR
(
ﬁe·
, 
fõld
Ë
RB_BLACK
;\

1137 
	`RB_COLOR
(
tmp
, 
fõld
Ë
RB_RED
; \

1138 
	`RB_ROTATE_RIGHT
(
hód
, 
tmp
, 
ﬁe·
, 
fõld
);\

1139 
tmp
 = 
	`RB_RIGHT
(
∑ª¡
, 
fõld
); \

1141 
	`RB_COLOR
(
tmp
, 
fõld
ËRB_COLOR(
∑ª¡
, field);\

1142 
	`RB_COLOR
(
∑ª¡
, 
fõld
Ë
RB_BLACK
; \

1143 i‡(
	`RB_RIGHT
(
tmp
, 
fõld
)) \

1144 
	`RB_COLOR
(
	`RB_RIGHT
(
tmp
, 
fõld
), fõldË
RB_BLACK
;\

1145 
	`RB_ROTATE_LEFT
(
hód
, 
∑ª¡
, 
tmp
, 
fõld
);\

1146 
ñm
 = 
	`RB_ROOT
(
hód
); \

1150 
tmp
 = 
	`RB_LEFT
(
∑ª¡
, 
fõld
); \

1151 i‡(
	`RB_COLOR
(
tmp
, 
fõld
Ë=
RB_RED
) { \

1152 
	`RB_SET_BLACKRED
(
tmp
, 
∑ª¡
, 
fõld
); \

1153 
	`RB_ROTATE_RIGHT
(
hód
, 
∑ª¡
, 
tmp
, 
fõld
);\

1154 
tmp
 = 
	`RB_LEFT
(
∑ª¡
, 
fõld
); \

1156 i‡((
	`RB_LEFT
(
tmp
, 
fõld
Ë=
NULL
 || \

1157 
	`RB_COLOR
(
	`RB_LEFT
(
tmp
, 
fõld
), fõldË=
RB_BLACK
) &&\

1158 (
	`RB_RIGHT
(
tmp
, 
fõld
Ë=
NULL
 || \

1159 
	`RB_COLOR
(
	`RB_RIGHT
(
tmp
, 
fõld
), fõldË=
RB_BLACK
)) {\

1160 
	`RB_COLOR
(
tmp
, 
fõld
Ë
RB_RED
; \

1161 
ñm
 = 
∑ª¡
; \

1162 
∑ª¡
 = 
	`RB_PARENT
(
ñm
, 
fõld
); \

1164 i‡(
	`RB_LEFT
(
tmp
, 
fõld
Ë=
NULL
 || \

1165 
	`RB_COLOR
(
	`RB_LEFT
(
tmp
, 
fõld
), fõldË=
RB_BLACK
) {\

1166 
ty≥
 *
‹ight
; \

1167 i‡((
‹ight
 = 
	`RB_RIGHT
(
tmp
, 
fõld
)))\

1168 
	`RB_COLOR
(
‹ight
, 
fõld
Ë
RB_BLACK
;\

1169 
	`RB_COLOR
(
tmp
, 
fõld
Ë
RB_RED
; \

1170 
	`RB_ROTATE_LEFT
(
hód
, 
tmp
, 
‹ight
, 
fõld
);\

1171 
tmp
 = 
	`RB_LEFT
(
∑ª¡
, 
fõld
); \

1173 
	`RB_COLOR
(
tmp
, 
fõld
ËRB_COLOR(
∑ª¡
, field);\

1174 
	`RB_COLOR
(
∑ª¡
, 
fõld
Ë
RB_BLACK
; \

1175 i‡(
	`RB_LEFT
(
tmp
, 
fõld
)) \

1176 
	`RB_COLOR
(
	`RB_LEFT
(
tmp
, 
fõld
), fõldË
RB_BLACK
;\

1177 
	`RB_ROTATE_RIGHT
(
hód
, 
∑ª¡
, 
tmp
, 
fõld
);\

1178 
ñm
 = 
	`RB_ROOT
(
hód
); \

1183 i‡(
ñm
) \

1184 
	`RB_COLOR
(
ñm
, 
fõld
Ë
RB_BLACK
; \

1187 
ty≥
 * \

1188 
«me
##
	`_RB_REMOVE
(«mê*
hód
, 
ty≥
 *
ñm
) \

1190 
ty≥
 *
chûd
, *
∑ª¡
, *
ﬁd
 = 
ñm
; \

1191 
cﬁ‹
; \

1192 i‡(
	`RB_LEFT
(
ñm
, 
fõld
Ë=
NULL
) \

1193 
chûd
 = 
	`RB_RIGHT
(
ñm
, 
fõld
); \

1194 i‡(
	`RB_RIGHT
(
ñm
, 
fõld
Ë=
NULL
) \

1195 
chûd
 = 
	`RB_LEFT
(
ñm
, 
fõld
); \

1197 
ty≥
 *
À·
; \

1198 
ñm
 = 
	`RB_RIGHT
”lm, 
fõld
); \

1199 (
À·
 = 
	`RB_LEFT
(
ñm
, 
fõld
))) \

1200 
ñm
 = 
À·
; \

1201 
chûd
 = 
	`RB_RIGHT
(
ñm
, 
fõld
); \

1202 
∑ª¡
 = 
	`RB_PARENT
(
ñm
, 
fõld
); \

1203 
cﬁ‹
 = 
	`RB_COLOR
(
ñm
, 
fõld
); \

1204 i‡(
chûd
) \

1205 
	`RB_PARENT
(
chûd
, 
fõld
Ë
∑ª¡
; \

1206 i‡(
∑ª¡
) { \

1207 i‡(
	`RB_LEFT
(
∑ª¡
, 
fõld
Ë=
ñm
) \

1208 
	`RB_LEFT
(
∑ª¡
, 
fõld
Ë
chûd
; \

1210 
	`RB_RIGHT
(
∑ª¡
, 
fõld
Ë
chûd
; \

1211 
	`RB_AUGMENT
(
∑ª¡
); \

1213 
	`RB_ROOT
(
hód
Ë
chûd
; \

1214 i‡(
	`RB_PARENT
(
ñm
, 
fõld
Ë=
ﬁd
) \

1215 
∑ª¡
 = 
ñm
; \

1216 (
ñm
)->
fõld
 = (
ﬁd
)->field; \

1217 i‡(
	`RB_PARENT
(
ﬁd
, 
fõld
)) { \

1218 i‡(
	`RB_LEFT
(
	`RB_PARENT
(
ﬁd
, 
fõld
), field) == old)\

1219 
	`RB_LEFT
(
	`RB_PARENT
(
ﬁd
, 
fõld
), fõldË
ñm
;\

1221 
	`RB_RIGHT
(
	`RB_PARENT
(
ﬁd
, 
fõld
), fõldË
ñm
;\

1222 
	`RB_AUGMENT
(
	`RB_PARENT
(
ﬁd
, 
fõld
)); \

1224 
	`RB_ROOT
(
hód
Ë
ñm
; \

1225 
	`RB_PARENT
(
	`RB_LEFT
(
ﬁd
, 
fõld
), fõldË
ñm
; \

1226 i‡(
	`RB_RIGHT
(
ﬁd
, 
fõld
)) \

1227 
	`RB_PARENT
(
	`RB_RIGHT
(
ﬁd
, 
fõld
), fõldË
ñm
; \

1228 i‡(
∑ª¡
) { \

1229 
À·
 = 
∑ª¡
; \

1231 
	`RB_AUGMENT
(
À·
); \

1232 } (
À·
 = 
	`RB_PARENT
÷e·, 
fõld
))); \

1234 
cﬁ‹
; \

1236 
∑ª¡
 = 
	`RB_PARENT
(
ñm
, 
fõld
); \

1237 
cﬁ‹
 = 
	`RB_COLOR
(
ñm
, 
fõld
); \

1238 i‡(
chûd
) \

1239 
	`RB_PARENT
(
chûd
, 
fõld
Ë
∑ª¡
; \

1240 i‡(
∑ª¡
) { \

1241 i‡(
	`RB_LEFT
(
∑ª¡
, 
fõld
Ë=
ñm
) \

1242 
	`RB_LEFT
(
∑ª¡
, 
fõld
Ë
chûd
; \

1244 
	`RB_RIGHT
(
∑ª¡
, 
fõld
Ë
chûd
; \

1245 
	`RB_AUGMENT
(
∑ª¡
); \

1247 
	`RB_ROOT
(
hód
Ë
chûd
; \

1248 
cﬁ‹
: \

1249 i‡(
cﬁ‹
 =
RB_BLACK
) \

1250 
«me
##
	`_RB_REMOVE_COLOR
(
hód
, 
∑ª¡
, 
chûd
); \

1251  (
ﬁd
); \

1255 
ty≥
 * \

1256 
«me
##
	`_RB_INSERT
(«mê*
hód
, 
ty≥
 *
ñm
) \

1258 
ty≥
 *
tmp
; \

1259 
ty≥
 *
∑ª¡
 = 
NULL
; \

1260 
comp
 = 0; \

1261 
tmp
 = 
	`RB_ROOT
(
hód
); \

1262 
tmp
) { \

1263 
∑ª¡
 = 
tmp
; \

1264 
comp
 = (
cmp
)(
ñm
, 
∑ª¡
); \

1265 i‡(
comp
 < 0) \

1266 
tmp
 = 
	`RB_LEFT
—mp, 
fõld
); \

1267 i‡(
comp
 > 0) \

1268 
tmp
 = 
	`RB_RIGHT
—mp, 
fõld
); \

1270  (
tmp
); \

1272 
	`RB_SET
(
ñm
, 
∑ª¡
, 
fõld
); \

1273 i‡(
∑ª¡
 !
NULL
) { \

1274 i‡(
comp
 < 0) \

1275 
	`RB_LEFT
(
∑ª¡
, 
fõld
Ë
ñm
; \

1277 
	`RB_RIGHT
(
∑ª¡
, 
fõld
Ë
ñm
; \

1278 
	`RB_AUGMENT
(
∑ª¡
); \

1280 
	`RB_ROOT
(
hód
Ë
ñm
; \

1281 
«me
##
	`_RB_INSERT_COLOR
(
hód
, 
ñm
); \

1282  (
NULL
); \

1286 
ty≥
 * \

1287 
«me
##
	`_RB_FIND
(«mê*
hód
, 
ty≥
 *
ñm
) \

1289 
ty≥
 *
tmp
 = 
	`RB_ROOT
(
hód
); \

1290 
comp
; \

1291 
tmp
) { \

1292 
comp
 = 
	`cmp
(
ñm
, 
tmp
); \

1293 i‡(
comp
 < 0) \

1294 
tmp
 = 
	`RB_LEFT
—mp, 
fõld
); \

1295 i‡(
comp
 > 0) \

1296 
tmp
 = 
	`RB_RIGHT
—mp, 
fõld
); \

1298  (
tmp
); \

1300  (
NULL
); \

1303 
ty≥
 * \

1304 
«me
##
	`_RB_NEXT
(
ty≥
 *
ñm
) \

1306 i‡(
	`RB_RIGHT
(
ñm
, 
fõld
)) { \

1307 
ñm
 = 
	`RB_RIGHT
”lm, 
fõld
); \

1308 
	`RB_LEFT
(
ñm
, 
fõld
)) \

1309 
ñm
 = 
	`RB_LEFT
”lm, 
fõld
); \

1311 i‡(
	`RB_PARENT
(
ñm
, 
fõld
) && \

1312 (
ñm
 =
	`RB_LEFT
(
	`RB_PARENT
”lm, 
fõld
), field))) \

1313 
ñm
 = 
	`RB_PARENT
”lm, 
fõld
); \

1315 
	`RB_PARENT
(
ñm
, 
fõld
) && \

1316 (
ñm
 =
	`RB_RIGHT
(
	`RB_PARENT
”lm, 
fõld
), field)))\

1317 
ñm
 = 
	`RB_PARENT
”lm, 
fõld
); \

1318 
ñm
 = 
	`RB_PARENT
”lm, 
fõld
); \

1321  (
ñm
); \

1324 
ty≥
 * \

1325 
«me
##
	`_RB_MINMAX
(«mê*
hód
, 
vÆ
) \

1327 
ty≥
 *
tmp
 = 
	`RB_ROOT
(
hód
); \

1328 
ty≥
 *
∑ª¡
 = 
NULL
; \

1329 
tmp
) { \

1330 
∑ª¡
 = 
tmp
; \

1331 i‡(
vÆ
 < 0) \

1332 
tmp
 = 
	`RB_LEFT
—mp, 
fõld
); \

1334 
tmp
 = 
	`RB_RIGHT
—mp, 
fõld
); \

1336  (
∑ª¡
); \

1337 }

	)

1339 
	#RB_NEGINF
 -1

	)

1340 
	#RB_INF
 1

	)

1342 
	#RB_INSERT
(
«me
, 
x
, 
y
Ë«me##
	`_RB_INSERT
(x, y)

	)

1343 
	#RB_REMOVE
(
«me
, 
x
, 
y
Ë«me##
	`_RB_REMOVE
(x, y)

	)

1344 
	#RB_FIND
(
«me
, 
x
, 
y
Ë«me##
	`_RB_FIND
(x, y)

	)

1345 
	#RB_NEXT
(
«me
, 
x
, 
y
Ë«me##
	`_RB_NEXT
(y)

	)

1346 
	#RB_MIN
(
«me
, 
x
Ë«me##
	`_RB_MINMAX
(x, 
RB_NEGINF
)

	)

1347 
	#RB_MAX
(
«me
, 
x
Ë«me##
	`_RB_MINMAX
(x, 
RB_INF
)

	)

1349 
	#RB_FOREACH
(
x
, 
«me
, 
hód
) \

1350 (
x
Ë
	`RB_MIN
(
«me
, 
hód
); \

1351 (
x
Ë!
NULL
; \

1352 (
x
Ë
«me
##
	`_RB_NEXT
(x))

	)

	@WIN32-Code/win32.c

28 #ifde‡
_MSC_VER


29 
	~"c⁄fig.h
"

32 
	~"../c⁄fig.h
"

35 
	~<wösock2.h
>

36 
	~<wödows.h
>

37 
	~<sys/ty≥s.h
>

38 
	~<sys/queue.h
>

39 
	~<sig«l.h
>

40 
	~<°dio.h
>

41 
	~<°dlib.h
>

42 
	~<°rög.h
>

43 
	~<î∫o.h
>

44 
	~<as£π.h
>

46 
	#RB_AUGMENT
(
x
Ë()(x)

	)

47 
	~"åì.h
"

48 
	~"log.h
"

49 
	~"evít.h
"

50 
	~"evít-öã∫Æ.h
"

52 
	#XFREE
(
±r
Ëdÿ{ i‡’åË
	`‰ì
’å); } 0)

	)

54 
evít_li°
 
timequeue
;

55 
evít_li°
 
addqueue
;

57 
evít_li°
 
sig«lqueue
;

60 
	swö_fd_£t
 {

61 
u_öt
 
	mfd_cou¡
;

62 
SOCKET
 
	mfd_¨øy
[1];

65 
	gevsigˇught
[
NSIG
];

66 vﬁ©ûê
sig_©omic_t
 
	gsig«l_ˇught
 = 0;

68 vﬁ©ûê
	gSIGFPE_REQ
 = 0.0f;

71 
sig«l_h™dÀr
(
sig
);

73 
sig«l_¥o˚ss
();

74 
sig«l_ªˇlc
();

77 
	sevít_íåy
 {

78 
RB_ENTRY
(
evít_íåy
Ë
	mnode
;

79 
SOCKET
 
	msock
;

80 
	mªad_pos
;

81 
	mwrôe_pos
;

82 
evít
 *
	mªad_evít
;

83 
evít
 *
	mwrôe_evít
;

87 
	$com∑ª
(
evít_íåy
 *
a
, evít_íåy *
b
)

89 i‡(
a
->
sock
 < 
b
->sock)

91 i‡(
a
->
sock
 > 
b
->sock)

95 
	}
}

97 
	swö32›
 {

98 
	mfd_£tsz
;

99 
wö_fd_£t
 *
	mªad£t_ö
;

100 
wö_fd_£t
 *
	mwrôe£t_ö
;

101 
wö_fd_£t
 *
	mªad£t_out
;

102 
wö_fd_£t
 *
	mwrôe£t_out
;

103 
wö_fd_£t
 *
	mex£t_out
;

104 
RB_HEAD
(
evít_m≠
, 
evít_íåy
Ë
	mevít_roŸ
;

106 
	msig«ls_¨e_brokí
 : 1;

109 
RB_PROTOTYPE
(
evít_m≠
, 
evít_íåy
, 
node
, 
com∑ª
);

110 
RB_GENERATE
(
evít_m≠
, 
evít_íåy
, 
node
, 
com∑ª
);

112 *
wö32_öô
 (
evít_ba£
 *);

113 
wö32_ö£π
 (*, 
evít
 *);

114 
wö32_dñ
 (*, 
evít
 *);

115 
wö32_di•©ch
 (
evít_ba£
 *
ba£
, *, 
timevÆ
 *);

116 
wö32_dóŒoc
 (
evít_ba£
 *, *);

118 
evít›
 
	gwö32›s
 = {

120 
wö32_öô
,

121 
wö32_ö£π
,

122 
wö32_dñ
,

123 
wö32_di•©ch
,

124 
wö32_dóŒoc
,

128 
	#FD_SET_ALLOC_SIZE
(
n
Ë(((
wö_fd_£t
Ë+ (“)-1)*(
SOCKET
)))

	)

131 
	$ªÆloc_fd_£ts
(
wö32›
 *
›
, 
size_t
 
√w_size
)

133 
size_t
 
size
;

135 
	`as£π
(
√w_size
 >
›
->
ªad£t_ö
->
fd_cou¡
 &&

136 
√w_size
 >
›
->
wrôe£t_ö
->
fd_cou¡
);

137 
	`as£π
(
√w_size
 >= 1);

139 
size
 = 
	`FD_SET_ALLOC_SIZE
(
√w_size
);

140 i‡(!(
›
->
ªad£t_ö
 = 
	`ªÆloc
(›->ªad£t_ö, 
size
)))

142 i‡(!(
›
->
wrôe£t_ö
 = 
	`ªÆloc
(›->wrôe£t_ö, 
size
)))

144 i‡(!(
›
->
ªad£t_out
 = 
	`ªÆloc
(›->ªad£t_out, 
size
)))

146 i‡(!(
›
->
ex£t_out
 = 
	`ªÆloc
(›->ex£t_out, 
size
)))

148 i‡(!(
›
->
wrôe£t_out
 = 
	`ªÆloc
(›->wrôe£t_out, 
size
)))

150 
›
->
fd_£tsz
 = 
√w_size
;

152 
	}
}

155 
	$timevÆ_to_ms
(
timevÆ
 *
tv
)

157  ((
tv
->
tv_£c
 * 1000Ë+ (tv->
tv_u£c
 / 1000));

158 
	}
}

160 
evít_íåy
*

161 
	$gë_evít_íåy
(
wö32›
 *
›
, 
SOCKET
 
s
, 
¸óã
)

163 
evít_íåy
 
key
, *
vÆ
;

164 
key
.
sock
 = 
s
;

165 
vÆ
 = 
	`RB_FIND
(
evít_m≠
, &
›
->
evít_roŸ
, &
key
);

166 i‡(
vÆ
 || !
¸óã
)

167  
vÆ
;

168 i‡(!(
vÆ
 = 
	`ˇŒoc
(1, (
evít_íåy
)))) {

169 
	`evít_w¨n
("%s: cÆloc", 
__func__
);

170  
NULL
;

172 
vÆ
->
sock
 = 
s
;

173 
vÆ
->
ªad_pos
 = vÆ->
wrôe_pos
 = -1;

174 
	`RB_INSERT
(
evít_m≠
, &
›
->
evít_roŸ
, 
vÆ
);

175  
vÆ
;

176 
	}
}

179 
	$do_fd_£t
(
wö32›
 *
›
, 
evít_íåy
 *
ít
, 
ªad
)

181 
SOCKET
 
s
 = 
ít
->
sock
;

182 
wö_fd_£t
 *
£t
 = 
ªad
 ? 
›
->
ªad£t_ö
 : op->
wrôe£t_ö
;

183 i‡(
ªad
) {

184 i‡(
ít
->
ªad_pos
 >= 0)

187 i‡(
ít
->
wrôe_pos
 >= 0)

190 i‡(
£t
->
fd_cou¡
 =
›
->
fd_£tsz
) {

191 i‡(
	`ªÆloc_fd_£ts
(
›
, op->
fd_£tsz
*2))

194 
£t
 = 
ªad
 ? 
›
->
ªad£t_ö
 : op->
wrôe£t_ö
;

196 
£t
->
fd_¨øy
[£t->
fd_cou¡
] = 
s
;

197 i‡(
ªad
)

198 
ít
->
ªad_pos
 = 
£t
->
fd_cou¡
;

200 
ít
->
wrôe_pos
 = 
£t
->
fd_cou¡
;

201  (
£t
->
fd_cou¡
++);

202 
	}
}

205 
	$do_fd_˛ór
(
wö32›
 *
›
, 
evít_íåy
 *
ít
, 
ªad
)

207 
i
;

208 
wö_fd_£t
 *
£t
 = 
ªad
 ? 
›
->
ªad£t_ö
 : op->
wrôe£t_ö
;

209 i‡(
ªad
) {

210 
i
 = 
ít
->
ªad_pos
;

211 
ít
->
ªad_pos
 = -1;

213 
i
 = 
ít
->
wrôe_pos
;

214 
ít
->
wrôe_pos
 = -1;

216 i‡(
i
 < 0)

218 i‡(--
£t
->
fd_cou¡
 !
i
) {

219 
evít_íåy
 *
ít2
;

220 
SOCKET
 
s2
;

221 
s2
 = 
£t
->
fd_¨øy
[
i
] = së->fd_¨øy[£t->
fd_cou¡
];

222 
ít2
 = 
	`gë_evít_íåy
(
›
, 
s2
, 0);

223 i‡(!
ít
)

225 i‡(
ªad
)

226 
ít2
->
ªad_pos
 = 
i
;

228 
ít2
->
wrôe_pos
 = 
i
;

231 
	}
}

233 
	#NEVENT
 64

	)

235 
	$wö32_öô
(
evít_ba£
 *
_ba£
)

237 
wö32›
 *
wö›
;

238 
size_t
 
size
;

239 i‡(!(
wö›
 = 
	`ˇŒoc
(1, (
wö32›
))))

240  
NULL
;

241 
wö›
->
fd_£tsz
 = 
NEVENT
;

242 
size
 = 
	`FD_SET_ALLOC_SIZE
(
NEVENT
);

243 i‡(!(
wö›
->
ªad£t_ö
 = 
	`mÆloc
(
size
)))

244 
îr
;

245 i‡(!(
wö›
->
wrôe£t_ö
 = 
	`mÆloc
(
size
)))

246 
îr
;

247 i‡(!(
wö›
->
ªad£t_out
 = 
	`mÆloc
(
size
)))

248 
îr
;

249 i‡(!(
wö›
->
wrôe£t_out
 = 
	`mÆloc
(
size
)))

250 
îr
;

251 i‡(!(
wö›
->
ex£t_out
 = 
	`mÆloc
(
size
)))

252 
îr
;

253 
	`RB_INIT
(&
wö›
->
evít_roŸ
);

254 
wö›
->
ªad£t_ö
->
fd_cou¡
 = wö›->
wrôe£t_ö
->fd_count = 0;

255 
wö›
->
ªad£t_out
->
fd_cou¡
 = wö›->
wrôe£t_out
->fd_count

256 
wö›
->
ex£t_out
->
fd_cou¡
 = 0;

258 i‡(
	`evsig«l_öô
(
_ba£
) < 0)

259 
wö›
->
sig«ls_¨e_brokí
 = 1;

261  (
wö›
);

262 
îr
:

263 
	`XFREE
(
wö›
->
ªad£t_ö
);

264 
	`XFREE
(
wö›
->
wrôe£t_ö
);

265 
	`XFREE
(
wö›
->
ªad£t_out
);

266 
	`XFREE
(
wö›
->
wrôe£t_out
);

267 
	`XFREE
(
wö›
->
ex£t_out
);

268 
	`XFREE
(
wö›
);

269  (
NULL
);

270 
	}
}

273 
	$wö32_ö£π
(*
›
, 
evít
 *
ev
)

275 
wö32›
 *wö32› = 
›
;

276 
evít_íåy
 *
ít
;

278 i‡(
ev
->
ev_evíts
 & 
EV_SIGNAL
) {

279 i‡(
wö32›
->
sig«ls_¨e_brokí
)

281  (
	`evsig«l_add
(
ev
));

283 i‡(!(
ev
->
ev_evíts
 & (
EV_READ
|
EV_WRITE
)))

285 
ít
 = 
	`gë_evít_íåy
(
wö32›
, 
ev
->
ev_fd
, 1);

286 i‡(!
ít
)

289 
	`evít_debug
(("%s:áddögÉvíàf‹ %d", 
__func__
, ()
ev
->
ev_fd
));

290 i‡(
ev
->
ev_evíts
 & 
EV_READ
) {

291 i‡(
	`do_fd_£t
(
wö32›
, 
ít
, 1)<0)

293 
ít
->
ªad_evít
 = 
ev
;

295 i‡(
ev
->
ev_evíts
 & 
EV_WRITE
) {

296 i‡(
	`do_fd_£t
(
wö32›
, 
ít
, 0)<0)

298 
ít
->
wrôe_evít
 = 
ev
;

301 
	}
}

304 
	$wö32_dñ
(*
›
, 
evít
 *
ev
)

306 
wö32›
 *wö32› = 
›
;

307 
evít_íåy
 *
ít
;

309 i‡(
ev
->
ev_evíts
 & 
EV_SIGNAL
)

310  (
	`evsig«l_dñ
(
ev
));

312 i‡(!(
ít
 = 
	`gë_evít_íåy
(
wö32›
, 
ev
->
ev_fd
, 0)))

314 
	`evít_debug
(("%s: RemovögÉvíàf‹ %d", 
__func__
, 
ev
->
ev_fd
));

315 i‡(
ev
 =
ít
->
ªad_evít
) {

316 
	`do_fd_˛ór
(
wö32›
, 
ít
, 1);

317 
ít
->
ªad_evít
 = 
NULL
;

319 i‡(
ev
 =
ít
->
wrôe_evít
) {

320 
	`do_fd_˛ór
(
wö32›
, 
ít
, 0);

321 
ít
->
wrôe_evít
 = 
NULL
;

323 i‡(!
ít
->
ªad_evít
 && !ít->
wrôe_evít
) {

324 
	`RB_REMOVE
(
evít_m≠
, &
wö32›
->
evít_roŸ
, 
ít
);

325 
	`‰ì
(
ít
);

329 
	}
}

332 
	$fd_£t_c›y
(
wö_fd_£t
 *
out
, c⁄° wö_fd_£à*
ö
)

334 
out
->
fd_cou¡
 = 
ö
->fd_count;

335 
	`mem˝y
(
out
->
fd_¨øy
, 
ö
->fd_¨øy, in->
fd_cou¡
 * ((
SOCKET
)));

336 
	}
}

350 
	$wö32_di•©ch
(
evít_ba£
 *
ba£
, *
›
,

351 
timevÆ
 *
tv
)

353 
wö32›
 *wö32› = 
›
;

354 
ªs
 = 0;

355 
j
, 
i
;

356 
fd_cou¡
;

357 
SOCKET
 
s
;

358 
evít_íåy
 *
ít
;

360 
	`fd_£t_c›y
(
wö32›
->
ªad£t_out
, wö32›->
ªad£t_ö
);

361 
	`fd_£t_c›y
(
wö32›
->
ex£t_out
, wö32›->
ªad£t_ö
);

362 
	`fd_£t_c›y
(
wö32›
->
wrôe£t_out
, wö32›->
wrôe£t_ö
);

364 
fd_cou¡
 =

365 (
wö32›
->
ªad£t_out
->
fd_cou¡
 > wö32›->
wrôe£t_out
->fd_count) ?

366 
wö32›
->
ªad£t_out
->
fd_cou¡
 : wö32›->
wrôe£t_out
->fd_count;

368 i‡(!
fd_cou¡
) {

370 
	`SÀï
(
	`timevÆ_to_ms
(
tv
));

371 
	`evsig«l_¥o˚ss
(
ba£
);

375 
ªs
 = 
	`£À˘
(
fd_cou¡
,

376 (
fd_£t
*)
wö32›
->
ªad£t_out
,

377 (
fd_£t
*)
wö32›
->
wrôe£t_out
,

378 (
fd_£t
*)
wö32›
->
ex£t_out
, 
tv
);

380 
	`evít_debug
(("%s: sñe˘Ñëu∫ed %d", 
__func__
, 
ªs
));

382 if(
ªs
 <= 0) {

383 
	`evsig«l_¥o˚ss
(
ba£
);

384  
ªs
;

385 } i‡(
ba£
->
sig
.
evsig«l_ˇught
) {

386 
	`evsig«l_¥o˚ss
(
ba£
);

389 i‡(
wö32›
->
ªad£t_out
->
fd_cou¡
) {

390 
i
 = 
	`ønd
(Ë% 
wö32›
->
ªad£t_out
->
fd_cou¡
;

391 
j
=0; j<
wö32›
->
ªad£t_out
->
fd_cou¡
; ++j) {

392 i‡(++
i
 >
wö32›
->
ªad£t_out
->
fd_cou¡
)

393 
i
 = 0;

394 
s
 = 
wö32›
->
ªad£t_out
->
fd_¨øy
[
i
];

395 i‡((
ít
 = 
	`gë_evít_íåy
(
wö32›
, 
s
, 0)Ë&&É¡->
ªad_evít
)

396 
	`evít_a˘ive
(
ít
->
ªad_evít
, 
EV_READ
, 1);

399 i‡(
wö32›
->
ex£t_out
->
fd_cou¡
) {

400 
i
 = 
	`ønd
(Ë% 
wö32›
->
ex£t_out
->
fd_cou¡
;

401 
j
=0; j<
wö32›
->
ex£t_out
->
fd_cou¡
; ++j) {

402 i‡(++
i
 >
wö32›
->
ex£t_out
->
fd_cou¡
)

403 
i
 = 0;

404 
s
 = 
wö32›
->
ex£t_out
->
fd_¨øy
[
i
];

405 i‡((
ít
 = 
	`gë_evít_íåy
(
wö32›
, 
s
, 0)Ë&&É¡->
ªad_evít
)

406 
	`evít_a˘ive
(
ít
->
ªad_evít
, 
EV_READ
, 1);

409 i‡(
wö32›
->
wrôe£t_out
->
fd_cou¡
) {

410 
i
 = 
	`ønd
(Ë% 
wö32›
->
wrôe£t_out
->
fd_cou¡
;

411 
j
=0; j<
wö32›
->
wrôe£t_out
->
fd_cou¡
; ++j) {

412 i‡(++
i
 >
wö32›
->
ex£t_out
->
fd_cou¡
)

413 
i
 = 0;

414 
s
 = 
wö32›
->
wrôe£t_out
->
fd_¨øy
[
i
];

415 i‡((
ít
 = 
	`gë_evít_íåy
(
wö32›
, 
s
, 0)Ë&&É¡->
wrôe_evít
)

416 
	`evít_a˘ive
(
ít
->
wrôe_evít
, 
EV_WRITE
, 1);

422 
	}
}

425 
	$wö32_dóŒoc
(
evít_ba£
 *
_ba£
, *
¨g
)

427 
wö32›
 *wö32› = 
¨g
;

429 
	`evsig«l_dóŒoc
(
_ba£
);

430 i‡(
wö32›
->
ªad£t_ö
)

431 
	`‰ì
(
wö32›
->
ªad£t_ö
);

432 i‡(
wö32›
->
wrôe£t_ö
)

433 
	`‰ì
(
wö32›
->
wrôe£t_ö
);

434 i‡(
wö32›
->
ªad£t_out
)

435 
	`‰ì
(
wö32›
->
ªad£t_out
);

436 i‡(
wö32›
->
wrôe£t_out
)

437 
	`‰ì
(
wö32›
->
wrôe£t_out
);

438 i‡(
wö32›
->
ex£t_out
)

439 
	`‰ì
(
wö32›
->
ex£t_out
);

442 
	`mem£t
(
wö32›
, 0, (win32op));

443 
	`‰ì
(
wö32›
);

444 
	}
}

448 
	$sig«l_h™dÀr
(
sig
)

450 
evsigˇught
[
sig
]++;

451 
sig«l_ˇught
 = 1;

452 
	}
}

455 
	$sig«l_ªˇlc
()

457 
evít
 *
ev
;

460 
	`TAILQ_FOREACH
(
ev
, &
sig«lqueue
, 
ev_sig«l_√xt
) {

461 if(()
	`sig«l
(
	`EVENT_SIGNAL
(
ev
), 
sig«l_h™dÀr
) == -1)

465 
	}
}

468 
	$sig«l_¥o˚ss
()

470 
evít
 *
ev
;

471 
nˇŒs
;

473 
	`TAILQ_FOREACH
(
ev
, &
sig«lqueue
, 
ev_sig«l_√xt
) {

474 
nˇŒs
 = 
evsigˇught
[
	`EVENT_SIGNAL
(
ev
)];

475 i‡(
nˇŒs
) {

476 i‡(!(
ev
->
ev_evíts
 & 
EV_PERSIST
))

477 
	`evít_dñ
(
ev
);

478 
	`evít_a˘ive
(
ev
, 
EV_SIGNAL
, 
nˇŒs
);

482 
	`mem£t
(
evsigˇught
, 0, (evsigcaught));

483 
sig«l_ˇught
 = 0;

484 
	}
}

	@buffer.c

28 #ifde‡
HAVE_CONFIG_H


29 
	~"c⁄fig.h
"

32 #ifde‡
WIN32


33 
	~<wösock2.h
>

34 
	~<wödows.h
>

37 #ifde‡
HAVE_VASPRINTF


39 
	#_GNU_SOURCE


	)

42 
	~<sys/ty≥s.h
>

44 #ifde‡
HAVE_SYS_TIME_H


45 
	~<sys/time.h
>

48 #ifde‡
HAVE_SYS_IOCTL_H


49 
	~<sys/io˘l.h
>

52 
	~<as£π.h
>

53 
	~<î∫o.h
>

54 
	~<°dio.h
>

55 
	~<°dlib.h
>

56 
	~<°rög.h
>

57 #ifde‡
HAVE_STDARG_H


58 
	~<°d¨g.h
>

60 #ifde‡
HAVE_UNISTD_H


61 
	~<uni°d.h
>

64 
	~"evít.h
"

65 
	~"c⁄fig.h
"

66 
	~"evutû.h
"

68 
evbuf„r
 *

69 
	$evbuf„r_√w
()

71 
evbuf„r
 *
buf„r
;

73 
buf„r
 = 
	`ˇŒoc
(1, (
evbuf„r
));

75  (
buf„r
);

76 
	}
}

79 
	$evbuf„r_‰ì
(
evbuf„r
 *
buf„r
)

81 i‡(
buf„r
->
‹ig_buf„r
 !
NULL
)

82 
	`‰ì
(
buf„r
->
‹ig_buf„r
);

83 
	`‰ì
(
buf„r
);

84 
	}
}

91 
	#SWAP
(
x
,
y
) do { \

92 (
x
)->
buf„r
 = (
y
)->buffer; \

93 (
x
)->
‹ig_buf„r
 = (
y
)->orig_buffer; \

94 (
x
)->
mißlign
 = (
y
)->misalign; \

95 (
x
)->
tŸÆÀn
 = (
y
)->totallen; \

96 (
x
)->
off
 = (
y
)->off; \

97 } 0)

	)

100 
	$evbuf„r_add_buf„r
(
evbuf„r
 *
outbuf
, evbuf„∏*
öbuf
)

102 
ªs
;

105 i‡(
outbuf
->
off
 == 0) {

106 
evbuf„r
 
tmp
;

107 
size_t
 
ﬁdoff
 = 
öbuf
->
off
;

110 
	`SWAP
(&
tmp
, 
outbuf
);

111 
	`SWAP
(
outbuf
, 
öbuf
);

112 
	`SWAP
(
öbuf
, &
tmp
);

119 i‡(
öbuf
->
off
 !
ﬁdoff
 && inbuf->
cb
 !
NULL
)

120 (*
öbuf
->
cb
)(öbuf, 
ﬁdoff
, inbuf->
off
, inbuf->
cb¨g
);

121 i‡(
ﬁdoff
 && 
outbuf
->
cb
 !
NULL
)

122 (*
outbuf
->
cb
)(outbuf, 0, 
ﬁdoff
, outbuf->
cb¨g
);

127 
ªs
 = 
	`evbuf„r_add
(
outbuf
, 
öbuf
->
buf„r
, inbuf->
off
);

128 i‡(
ªs
 == 0) {

130 
	`evbuf„r_døö
(
öbuf
, inbuf->
off
);

133  (
ªs
);

134 
	}
}

137 
	$evbuf„r_add_v¥ötf
(
evbuf„r
 *
buf
, c⁄° *
fmt
, 
va_li°
 
≠
)

139 *
buf„r
;

140 
size_t
 
•a˚
;

141 
size_t
 
ﬁdoff
 = 
buf
->
off
;

142 
sz
;

143 
va_li°
 
aq
;

146 
	`evbuf„r_ex∑nd
(
buf
, 64);

148 
size_t
 
u£d
 = 
buf
->
mißlign
 + buf->
off
;

149 
buf„r
 = (*)
buf
->buf„∏+ buf->
off
;

150 
	`as£π
(
buf
->
tŸÆÀn
 >
u£d
);

151 
•a˚
 = 
buf
->
tŸÆÀn
 - 
u£d
;

153 #i‚de‡
va_c›y


154 
	#va_c›y
(
d°
, 
§c
Ë
	`mem˝y
(&(d°), &(§c), (
va_li°
))

	)

156 
	`va_c›y
(
aq
, 
≠
);

158 
sz
 = 
	`evutû_v¢¥ötf
(
buf„r
, 
•a˚
, 
fmt
, 
aq
);

160 
	`va_íd
(
aq
);

162 i‡(
sz
 < 0)

164 i‡((
size_t
)
sz
 < 
•a˚
) {

165 
buf
->
off
 +
sz
;

166 i‡(
buf
->
cb
 !
NULL
)

167 (*
buf
->
cb
)(buf, 
ﬁdoff
, buf->
off
, buf->
cb¨g
);

168  (
sz
);

170 i‡(
	`evbuf„r_ex∑nd
(
buf
, 
sz
 + 1) == -1)

175 
	}
}

178 
	$evbuf„r_add_¥ötf
(
evbuf„r
 *
buf
, c⁄° *
fmt
, ...)

180 
ªs
 = -1;

181 
va_li°
 
≠
;

183 
	`va_°¨t
(
≠
, 
fmt
);

184 
ªs
 = 
	`evbuf„r_add_v¥ötf
(
buf
, 
fmt
, 
≠
);

185 
	`va_íd
(
≠
);

187  (
ªs
);

188 
	}
}

193 
	$evbuf„r_ªmove
(
evbuf„r
 *
buf
, *
d©a
, 
size_t
 
d©Àn
)

195 
size_t
 
ƒód
 = 
d©Àn
;

196 i‡(
ƒód
 >
buf
->
off
)

197 
ƒód
 = 
buf
->
off
;

199 
	`mem˝y
(
d©a
, 
buf
->
buf„r
, 
ƒód
);

200 
	`evbuf„r_døö
(
buf
, 
ƒód
);

202  (
ƒód
);

203 
	}
}

211 
	$evbuf„r_ªadlöe
(
evbuf„r
 *
buf„r
)

213 
u_ch¨
 *
d©a
 = 
	`EVBUFFER_DATA
(
buf„r
);

214 
size_t
 
Àn
 = 
	`EVBUFFER_LENGTH
(
buf„r
);

215 *
löe
;

216 
i
;

218 
i
 = 0; i < 
Àn
; i++) {

219 i‡(
d©a
[
i
] == '\r' || data[i] == '\n')

223 i‡(
i
 =
Àn
)

224  (
NULL
);

226 i‡((
löe
 = 
	`mÆloc
(
i
 + 1)Ë=
NULL
) {

227 
	`Ârötf
(
°dîr
, "%s: ouào‡mem‹y\n", 
__func__
);

228  (
NULL
);

231 
	`mem˝y
(
löe
, 
d©a
, 
i
);

232 
löe
[
i
] = '\0';

238 i‡–
i
 < 
Àn
 - 1 ) {

239 
fch
 = 
d©a
[
i
], 
sch
 = data[i+1];

242 i‡–(
sch
 ='\r' || sch ='\n'Ë&& sch !
fch
 )

243 
i
 += 1;

246 
	`evbuf„r_døö
(
buf„r
, 
i
 + 1);

248  (
löe
);

249 
	}
}

254 
	$evbuf„r_Æign
(
evbuf„r
 *
buf
)

256 
	`memmove
(
buf
->
‹ig_buf„r
, buf->
buf„r
, buf->
off
);

257 
buf
->
buf„r
 = buf->
‹ig_buf„r
;

258 
buf
->
mißlign
 = 0;

259 
	}
}

264 
	$evbuf„r_ex∑nd
(
evbuf„r
 *
buf
, 
size_t
 
d©Àn
)

266 
size_t
 
√ed
 = 
buf
->
mißlign
 + buf->
off
 + 
d©Àn
;

269 i‡(
buf
->
tŸÆÀn
 >
√ed
)

276 i‡(
buf
->
mißlign
 >
d©Àn
) {

277 
	`evbuf„r_Æign
(
buf
);

279 *
√wbuf
;

280 
size_t
 
Àngth
 = 
buf
->
tŸÆÀn
;

282 i‡(
Àngth
 < 256)

283 
Àngth
 = 256;

284 
Àngth
 < 
√ed
)

285 
Àngth
 <<= 1;

287 i‡(
buf
->
‹ig_buf„r
 !buf->
buf„r
)

288 
	`evbuf„r_Æign
(
buf
);

289 i‡((
√wbuf
 = 
	`ªÆloc
(
buf
->
buf„r
, 
Àngth
)Ë=
NULL
)

292 
buf
->
‹ig_buf„r
 = buf->
buf„r
 = 
√wbuf
;

293 
buf
->
tŸÆÀn
 = 
Àngth
;

297 
	}
}

300 
	$evbuf„r_add
(
evbuf„r
 *
buf
, c⁄° *
d©a
, 
size_t
 
d©Àn
)

302 
size_t
 
√ed
 = 
buf
->
mißlign
 + buf->
off
 + 
d©Àn
;

303 
size_t
 
ﬁdoff
 = 
buf
->
off
;

305 i‡(
buf
->
tŸÆÀn
 < 
√ed
) {

306 i‡(
	`evbuf„r_ex∑nd
(
buf
, 
d©Àn
) == -1)

310 
	`mem˝y
(
buf
->
buf„r
 + buf->
off
, 
d©a
, 
d©Àn
);

311 
buf
->
off
 +
d©Àn
;

313 i‡(
d©Àn
 && 
buf
->
cb
 !
NULL
)

314 (*
buf
->
cb
)(buf, 
ﬁdoff
, buf->
off
, buf->
cb¨g
);

317 
	}
}

320 
	$evbuf„r_døö
(
evbuf„r
 *
buf
, 
size_t
 
Àn
)

322 
size_t
 
ﬁdoff
 = 
buf
->
off
;

324 i‡(
Àn
 >
buf
->
off
) {

325 
buf
->
off
 = 0;

326 
buf
->
buf„r
 = buf->
‹ig_buf„r
;

327 
buf
->
mißlign
 = 0;

328 
d⁄e
;

331 
buf
->
buf„r
 +
Àn
;

332 
buf
->
mißlign
 +
Àn
;

334 
buf
->
off
 -
Àn
;

336 
d⁄e
:

338 i‡(
buf
->
off
 !
ﬁdoff
 && buf->
cb
 !
NULL
)

339 (*
buf
->
cb
)(buf, 
ﬁdoff
, buf->
off
, buf->
cb¨g
);

341 
	}
}

347 
	#EVBUFFER_MAX_READ
 4096

	)

350 
	$evbuf„r_ªad
(
evbuf„r
 *
buf
, 
fd
, 
howmuch
)

352 
u_ch¨
 *
p
;

353 
size_t
 
ﬁdoff
 = 
buf
->
off
;

354 
n
 = 
EVBUFFER_MAX_READ
;

356 #i‡
	`deföed
(
FIONREAD
)

357 #ifde‡
WIN32


358 
 g
 = 
n
;

359 i‡(
	`io˘lsockë
(
fd
, 
FIONREAD
, &
 g
Ë=-1 || (
n
=lng) <= 0) {

361 i‡(
	`io˘l
(
fd
, 
FIONREAD
, &
n
) == -1 ||Ç <= 0) {

363 
n
 = 
EVBUFFER_MAX_READ
;

364 } i‡(
n
 > 
EVBUFFER_MAX_READ
 &&Ç > 
howmuch
) {

372 i‡((
size_t
)
n
 > 
buf
->
tŸÆÀn
 << 2)

373 
n
 = 
buf
->
tŸÆÀn
 << 2;

374 i‡(
n
 < 
EVBUFFER_MAX_READ
)

375 
n
 = 
EVBUFFER_MAX_READ
;

378 i‡(
howmuch
 < 0 || howmuch > 
n
)

379 
howmuch
 = 
n
;

382 i‡(
	`evbuf„r_ex∑nd
(
buf
, 
howmuch
) == -1)

386 
p
 = 
buf
->
buf„r
 + buf->
off
;

388 #i‚de‡
WIN32


389 
n
 = 
	`ªad
(
fd
, 
p
, 
howmuch
);

391 
n
 = 
	`ªcv
(
fd
, 
p
, 
howmuch
, 0);

393 i‡(
n
 == -1)

395 i‡(
n
 == 0)

398 
buf
->
off
 +
n
;

401 i‡(
buf
->
off
 !
ﬁdoff
 && buf->
cb
 !
NULL
)

402 (*
buf
->
cb
)(buf, 
ﬁdoff
, buf->
off
, buf->
cb¨g
);

404  (
n
);

405 
	}
}

408 
	$evbuf„r_wrôe
(
evbuf„r
 *
buf„r
, 
fd
)

410 
n
;

412 #i‚de‡
WIN32


413 
n
 = 
	`wrôe
(
fd
, 
buf„r
->buf„r, buf„r->
off
);

415 
n
 = 
	`£nd
(
fd
, 
buf„r
->buf„r, buf„r->
off
, 0);

417 i‡(
n
 == -1)

419 i‡(
n
 == 0)

421 
	`evbuf„r_døö
(
buf„r
, 
n
);

423  (
n
);

424 
	}
}

426 
u_ch¨
 *

427 
	$evbuf„r_föd
(
evbuf„r
 *
buf„r
, c⁄° 
u_ch¨
 *
wh©
, 
size_t
 
Àn
)

429 
u_ch¨
 *
£¨ch
 = 
buf„r
->buf„r, *
íd
 = sórch + buf„r->
off
;

430 
u_ch¨
 *
p
;

432 
£¨ch
 < 
íd
 &&

433 (
p
 = 
	`memchr
(
£¨ch
, *
wh©
, 
íd
 - sórch)Ë!
NULL
) {

434 i‡(
p
 + 
Àn
 > 
íd
)

436 i‡(
	`memcmp
(
p
, 
wh©
, 
Àn
) == 0)

437  (
p
);

438 
£¨ch
 = 
p
 + 1;

441  (
NULL
);

442 
	}
}

444 
evbuf„r_£tcb
(
evbuf„r
 *
buf„r
,

445 (*
cb
)(
evbuf„r
 *, 
size_t
, size_t, *),

446 *
cb¨g
)

448 
buf„r
->
cb
 = cb;

449 
buf„r
->
cb¨g
 = cbarg;

450 
	}
}

	@compat/sys/_libevent_time.h

35 #i‚de‡
_SYS_TIME_H_


36 
	#_SYS_TIME_H_


	)

38 
	~<sys/ty≥s.h
>

44 
	stimevÆ
 {

45 
	mtv_£c
;

46 
	mtv_u£c
;

52 
	stime•ec
 {

53 
time_t
 
	mtv_£c
;

54 
	mtv_n£c
;

57 
	#TIMEVAL_TO_TIMESPEC
(
tv
, 
ts
) { \

58 (
ts
)->
tv_£c
 = (
tv
)->tv_sec; \

59 (
ts
)->
tv_n£c
 = (
tv
)->
tv_u£c
 * 1000; \

60 }

	)

61 
	#TIMESPEC_TO_TIMEVAL
(
tv
, 
ts
) { \

62 (
tv
)->
tv_£c
 = (
ts
)->tv_sec; \

63 (
tv
)->
tv_u£c
 = (
ts
)->
tv_n£c
 / 1000; \

64 }

	)

66 
	stimez⁄e
 {

67 
	mtz_möuãswe°
;

68 
	mtz_d°time
;

70 
	#DST_NONE
 0

	)

71 
	#DST_USA
 1

	)

72 
	#DST_AUST
 2

	)

73 
	#DST_WET
 3

	)

74 
	#DST_MET
 4

	)

75 
	#DST_EET
 5

	)

76 
	#DST_CAN
 6

	)

79 
	#timî˛ór
(
tvp
Ë—vp)->
tv_£c
 = (tvp)->
tv_u£c
 = 0

	)

80 
	#timîis£t
(
tvp
Ë(—vp)->
tv_£c
 || (tvp)->
tv_u£c
)

	)

81 
	#timîcmp
(
tvp
, 
uvp
, 
cmp
) \

82 (((
tvp
)->
tv_£c
 =(
uvp
)->tv_sec) ? \

83 ((
tvp
)->
tv_u£c
 
	`cmp
 (
uvp
)->tv_usec) : \

84 ((
tvp
)->
tv_£c
 
	`cmp
 (
uvp
)->tv_£c))

	)

85 
	#timîadd
(
tvp
, 
uvp
, 
vvp
) \

87 (
vvp
)->
tv_£c
 = (
tvp
)->tv_£¯+ (
uvp
)->tv_sec; \

88 (
vvp
)->
tv_u£c
 = (
tvp
)->tv_u£¯+ (
uvp
)->tv_usec; \

89 i‡((
vvp
)->
tv_u£c
 >= 1000000) { \

90 (
vvp
)->
tv_£c
++; \

91 (
vvp
)->
tv_u£c
 -= 1000000; \

93 } 0)

	)

94 
	#timîsub
(
tvp
, 
uvp
, 
vvp
) \

96 (
vvp
)->
tv_£c
 = (
tvp
)->tv_£¯- (
uvp
)->tv_sec; \

97 (
vvp
)->
tv_u£c
 = (
tvp
)->tv_u£¯- (
uvp
)->tv_usec; \

98 i‡((
vvp
)->
tv_u£c
 < 0) { \

99 (
vvp
)->
tv_£c
--; \

100 (
vvp
)->
tv_u£c
 += 1000000; \

102 } 0)

	)

105 
	#time•ec˛ór
(
t•
Ë—•)->
tv_£c
 = (t•)->
tv_n£c
 = 0

	)

106 
	#time•ecis£t
(
t•
Ë(—•)->
tv_£c
 || (t•)->
tv_n£c
)

	)

107 
	#time•eccmp
(
t•
, 
u•
, 
cmp
) \

108 (((
t•
)->
tv_£c
 =(
u•
)->tv_sec) ? \

109 ((
t•
)->
tv_n£c
 
	`cmp
 (
u•
)->tv_nsec) : \

110 ((
t•
)->
tv_£c
 
	`cmp
 (
u•
)->tv_£c))

	)

111 
	#time•eˇdd
(
t•
, 
u•
, 
v•
) \

113 (
v•
)->
tv_£c
 = (
t•
)->tv_£¯+ (
u•
)->tv_sec; \

114 (
v•
)->
tv_n£c
 = (
t•
)->tv_n£¯+ (
u•
)->tv_nsec; \

115 i‡((
v•
)->
tv_n£c
 >= 1000000000L) { \

116 (
v•
)->
tv_£c
++; \

117 (
v•
)->
tv_n£c
 -= 1000000000L; \

119 } 0)

	)

120 
	#time•ecsub
(
t•
, 
u•
, 
v•
) \

122 (
v•
)->
tv_£c
 = (
t•
)->tv_£¯- (
u•
)->tv_sec; \

123 (
v•
)->
tv_n£c
 = (
t•
)->tv_n£¯- (
u•
)->tv_nsec; \

124 i‡((
v•
)->
tv_n£c
 < 0) { \

125 (
v•
)->
tv_£c
--; \

126 (
v•
)->
tv_n£c
 += 1000000000L; \

128 } 0)

	)

134 
	#ITIMER_REAL
 0

	)

135 
	#ITIMER_VIRTUAL
 1

	)

136 
	#ITIMER_PROF
 2

	)

138 
	sôimîvÆ
 {

139 
timevÆ
 
	mô_öãrvÆ
;

140 
timevÆ
 
	mô_vÆue
;

146 
	s˛ocköfo
 {

147 
	mhz
;

148 
	mtick
;

149 
	mtickadj
;

150 
	m°©hz
;

151 
	m¥ofhz
;

154 
	#CLOCK_REALTIME
 0

	)

155 
	#CLOCK_VIRTUAL
 1

	)

156 
	#CLOCK_PROF
 2

	)

158 
	#TIMER_RELTIME
 0x0

	)

159 
	#TIMER_ABSTIME
 0x1

	)

	@compat/sys/queue.h

35 #i‚def 
_SYS_QUEUE_H_


36 
	#_SYS_QUEUE_H_


	)

88 
	#SLIST_HEAD
(
«me
, 
ty≥
) \

89 
	s«me
 { \

90 
ty≥
 *
¶h_fú°
; \

91 }

	)

93 
	#SLIST_HEAD_INITIALIZER
(
hód
) \

94 { 
NULL
 }

	)

96 #i‚de‡
WIN32


97 
	#SLIST_ENTRY
(
ty≥
) \

99 
ty≥
 *
¶e_√xt
; \

100 }

	)

106 
	#SLIST_FIRST
(
hód
Ë((hód)->
¶h_fú°
)

	)

107 
	#SLIST_END
(
hód
Ë
NULL


	)

108 
	#SLIST_EMPTY
(
hód
Ë(
	`SLIST_FIRST
(hódË=
	`SLIST_END
(hód))

	)

109 
	#SLIST_NEXT
(
ñm
, 
fõld
Ë(”lm)->fõld.
¶e_√xt
)

	)

111 
	#SLIST_FOREACH
(
v¨
, 
hód
, 
fõld
) \

112 (
v¨
Ë
	`SLIST_FIRST
(
hód
); \

113 (
v¨
Ë!
	`SLIST_END
(
hód
); \

114 (
v¨
Ë
	`SLIST_NEXT
(v¨, 
fõld
))

	)

119 
	#SLIST_INIT
(
hód
) { \

120 
	`SLIST_FIRST
(
hód
Ë
	`SLIST_END
(head); \

121 }

	)

123 
	#SLIST_INSERT_AFTER
(
¶i°ñm
, 
ñm
, 
fõld
) do { \

124 (
ñm
)->
fõld
.
¶e_√xt
 = (
¶i°ñm
)->field.sle_next; \

125 (
¶i°ñm
)->
fõld
.
¶e_√xt
 = (
ñm
); \

126 } 0)

	)

128 
	#SLIST_INSERT_HEAD
(
hód
, 
ñm
, 
fõld
) do { \

129 (
ñm
)->
fõld
.
¶e_√xt
 = (
hód
)->
¶h_fú°
; \

130 (
hód
)->
¶h_fú°
 = (
ñm
); \

131 } 0)

	)

133 
	#SLIST_REMOVE_HEAD
(
hód
, 
fõld
) do { \

134 (
hód
)->
¶h_fú°
 = (hód)->¶h_fú°->
fõld
.
¶e_√xt
; \

135 } 0)

	)

140 
	#LIST_HEAD
(
«me
, 
ty≥
) \

141 
	s«me
 { \

142 
ty≥
 *
lh_fú°
; \

143 }

	)

145 
	#LIST_HEAD_INITIALIZER
(
hód
) \

146 { 
NULL
 }

	)

148 
	#LIST_ENTRY
(
ty≥
) \

150 
ty≥
 *
À_√xt
; \

151 
ty≥
 **
À_¥ev
; \

152 }

	)

157 
	#LIST_FIRST
(
hód
Ë((hód)->
lh_fú°
)

	)

158 
	#LIST_END
(
hód
Ë
NULL


	)

159 
	#LIST_EMPTY
(
hód
Ë(
	`LIST_FIRST
(hódË=
	`LIST_END
(hód))

	)

160 
	#LIST_NEXT
(
ñm
, 
fõld
Ë(”lm)->fõld.
À_√xt
)

	)

162 
	#LIST_FOREACH
(
v¨
, 
hód
, 
fõld
) \

163 (
v¨
Ë
	`LIST_FIRST
(
hód
); \

164 (
v¨
)!
	`LIST_END
(
hód
); \

165 (
v¨
Ë
	`LIST_NEXT
(v¨, 
fõld
))

	)

170 
	#LIST_INIT
(
hód
) do { \

171 
	`LIST_FIRST
(
hód
Ë
	`LIST_END
(head); \

172 } 0)

	)

174 
	#LIST_INSERT_AFTER
(
li°ñm
, 
ñm
, 
fõld
) do { \

175 i‡(((
ñm
)->
fõld
.
À_√xt
 = (
li°ñm
)->fõld.À_√xtË!
NULL
) \

176 (
li°ñm
)->
fõld
.
À_√xt
->fõld.
À_¥ev
 = \

177 &(
ñm
)->
fõld
.
À_√xt
; \

178 (
li°ñm
)->
fõld
.
À_√xt
 = (
ñm
); \

179 (
ñm
)->
fõld
.
À_¥ev
 = &(
li°ñm
)->fõld.
À_√xt
; \

180 } 0)

	)

182 
	#LIST_INSERT_BEFORE
(
li°ñm
, 
ñm
, 
fõld
) do { \

183 (
ñm
)->
fõld
.
À_¥ev
 = (
li°ñm
)->field.le_prev; \

184 (
ñm
)->
fõld
.
À_√xt
 = (
li°ñm
); \

185 *(
li°ñm
)->
fõld
.
À_¥ev
 = (
ñm
); \

186 (
li°ñm
)->
fõld
.
À_¥ev
 = &(
ñm
)->fõld.
À_√xt
; \

187 } 0)

	)

189 
	#LIST_INSERT_HEAD
(
hód
, 
ñm
, 
fõld
) do { \

190 i‡(((
ñm
)->
fõld
.
À_√xt
 = (
hód
)->
lh_fú°
Ë!
NULL
) \

191 (
hód
)->
lh_fú°
->
fõld
.
À_¥ev
 = &(
ñm
)->fõld.
À_√xt
;\

192 (
hód
)->
lh_fú°
 = (
ñm
); \

193 (
ñm
)->
fõld
.
À_¥ev
 = &(
hód
)->
lh_fú°
; \

194 } 0)

	)

196 
	#LIST_REMOVE
(
ñm
, 
fõld
) do { \

197 i‡((
ñm
)->
fõld
.
À_√xt
 !
NULL
) \

198 (
ñm
)->
fõld
.
À_√xt
->fõld.
À_¥ev
 = \

199 (
ñm
)->
fõld
.
À_¥ev
; \

200 *(
ñm
)->
fõld
.
À_¥ev
 = (ñm)->fõld.
À_√xt
; \

201 } 0)

	)

203 
	#LIST_REPLACE
(
ñm
, 
ñm2
, 
fõld
) do { \

204 i‡(((
ñm2
)->
fõld
.
À_√xt
 = (
ñm
)->fõld.À_√xtË!
NULL
) \

205 (
ñm2
)->
fõld
.
À_√xt
->fõld.
À_¥ev
 = \

206 &(
ñm2
)->
fõld
.
À_√xt
; \

207 (
ñm2
)->
fõld
.
À_¥ev
 = (
ñm
)->field.le_prev; \

208 *(
ñm2
)->
fõld
.
À_¥ev
 = (elm2); \

209 } 0)

	)

214 
	#SIMPLEQ_HEAD
(
«me
, 
ty≥
) \

215 
	s«me
 { \

216 
ty≥
 *
sqh_fú°
; \

217 
ty≥
 **
sqh_œ°
; \

218 }

	)

220 
	#SIMPLEQ_HEAD_INITIALIZER
(
hód
) \

221 { 
NULL
, &(
hód
).
sqh_fú°
 }

	)

223 
	#SIMPLEQ_ENTRY
(
ty≥
) \

225 
ty≥
 *
sqe_√xt
; \

226 }

	)

231 
	#SIMPLEQ_FIRST
(
hód
Ë((hód)->
sqh_fú°
)

	)

232 
	#SIMPLEQ_END
(
hód
Ë
NULL


	)

233 
	#SIMPLEQ_EMPTY
(
hód
Ë(
	`SIMPLEQ_FIRST
(hódË=
	`SIMPLEQ_END
(hód))

	)

234 
	#SIMPLEQ_NEXT
(
ñm
, 
fõld
Ë(”lm)->fõld.
sqe_√xt
)

	)

236 
	#SIMPLEQ_FOREACH
(
v¨
, 
hód
, 
fõld
) \

237 (
v¨
Ë
	`SIMPLEQ_FIRST
(
hód
); \

238 (
v¨
Ë!
	`SIMPLEQ_END
(
hód
); \

239 (
v¨
Ë
	`SIMPLEQ_NEXT
(v¨, 
fõld
))

	)

244 
	#SIMPLEQ_INIT
(
hód
) do { \

245 (
hód
)->
sqh_fú°
 = 
NULL
; \

246 (
hód
)->
sqh_œ°
 = &(hód)->
sqh_fú°
; \

247 } 0)

	)

249 
	#SIMPLEQ_INSERT_HEAD
(
hód
, 
ñm
, 
fõld
) do { \

250 i‡(((
ñm
)->
fõld
.
sqe_√xt
 = (
hód
)->
sqh_fú°
Ë=
NULL
) \

251 (
hód
)->
sqh_œ°
 = &(
ñm
)->
fõld
.
sqe_√xt
; \

252 (
hód
)->
sqh_fú°
 = (
ñm
); \

253 } 0)

	)

255 
	#SIMPLEQ_INSERT_TAIL
(
hód
, 
ñm
, 
fõld
) do { \

256 (
ñm
)->
fõld
.
sqe_√xt
 = 
NULL
; \

257 *(
hód
)->
sqh_œ°
 = (
ñm
); \

258 (
hód
)->
sqh_œ°
 = &(
ñm
)->
fõld
.
sqe_√xt
; \

259 } 0)

	)

261 
	#SIMPLEQ_INSERT_AFTER
(
hód
, 
li°ñm
, 
ñm
, 
fõld
) do { \

262 i‡(((
ñm
)->
fõld
.
sqe_√xt
 = (
li°ñm
)->fõld.sqe_√xtË=
NULL
)\

263 (
hód
)->
sqh_œ°
 = &(
ñm
)->
fõld
.
sqe_√xt
; \

264 (
li°ñm
)->
fõld
.
sqe_√xt
 = (
ñm
); \

265 } 0)

	)

267 
	#SIMPLEQ_REMOVE_HEAD
(
hód
, 
ñm
, 
fõld
) do { \

268 i‡(((
hód
)->
sqh_fú°
 = (
ñm
)->
fõld
.
sqe_√xt
Ë=
NULL
) \

269 (
hód
)->
sqh_œ°
 = &(hód)->
sqh_fú°
; \

270 } 0)

	)

275 
	#TAILQ_HEAD
(
«me
, 
ty≥
) \

276 
	s«me
 { \

277 
ty≥
 *
tqh_fú°
; \

278 
ty≥
 **
tqh_œ°
; \

279 }

	)

281 
	#TAILQ_HEAD_INITIALIZER
(
hód
) \

282 { 
NULL
, &(
hód
).
tqh_fú°
 }

	)

284 
	#TAILQ_ENTRY
(
ty≥
) \

286 
ty≥
 *
tqe_√xt
; \

287 
ty≥
 **
tqe_¥ev
; \

288 }

	)

293 
	#TAILQ_FIRST
(
hód
Ë((hód)->
tqh_fú°
)

	)

294 
	#TAILQ_END
(
hód
Ë
NULL


	)

295 
	#TAILQ_NEXT
(
ñm
, 
fõld
Ë(”lm)->fõld.
tqe_√xt
)

	)

296 
	#TAILQ_LAST
(
hód
, 
hód«me
) \

297 (*(((
hód«me
 *)((
hód
)->
tqh_œ°
))->tqh_œ°))

	)

299 
	#TAILQ_PREV
(
ñm
, 
hód«me
, 
fõld
) \

300 (*(((
hód«me
 *)((
ñm
)->
fõld
.
tqe_¥ev
))->
tqh_œ°
))

	)

301 
	#TAILQ_EMPTY
(
hód
) \

302 (
	`TAILQ_FIRST
(
hód
Ë=
	`TAILQ_END
(hód))

	)

304 
	#TAILQ_FOREACH
(
v¨
, 
hód
, 
fõld
) \

305 (
v¨
Ë
	`TAILQ_FIRST
(
hód
); \

306 (
v¨
Ë!
	`TAILQ_END
(
hód
); \

307 (
v¨
Ë
	`TAILQ_NEXT
(v¨, 
fõld
))

	)

309 
	#TAILQ_FOREACH_REVERSE
(
v¨
, 
hód
, 
fõld
, 
hód«me
) \

310 (
v¨
Ë
	`TAILQ_LAST
(
hód
, 
hód«me
); \

311 (
v¨
Ë!
	`TAILQ_END
(
hód
); \

312 (
v¨
Ë
	`TAILQ_PREV
(v¨, 
hód«me
, 
fõld
))

	)

317 
	#TAILQ_INIT
(
hód
) do { \

318 (
hód
)->
tqh_fú°
 = 
NULL
; \

319 (
hód
)->
tqh_œ°
 = &(hód)->
tqh_fú°
; \

320 } 0)

	)

322 
	#TAILQ_INSERT_HEAD
(
hód
, 
ñm
, 
fõld
) do { \

323 i‡(((
ñm
)->
fõld
.
tqe_√xt
 = (
hód
)->
tqh_fú°
Ë!
NULL
) \

324 (
hód
)->
tqh_fú°
->
fõld
.
tqe_¥ev
 = \

325 &(
ñm
)->
fõld
.
tqe_√xt
; \

327 (
hód
)->
tqh_œ°
 = &(
ñm
)->
fõld
.
tqe_√xt
; \

328 (
hód
)->
tqh_fú°
 = (
ñm
); \

329 (
ñm
)->
fõld
.
tqe_¥ev
 = &(
hód
)->
tqh_fú°
; \

330 } 0)

	)

332 
	#TAILQ_INSERT_TAIL
(
hód
, 
ñm
, 
fõld
) do { \

333 (
ñm
)->
fõld
.
tqe_√xt
 = 
NULL
; \

334 (
ñm
)->
fõld
.
tqe_¥ev
 = (
hód
)->
tqh_œ°
; \

335 *(
hód
)->
tqh_œ°
 = (
ñm
); \

336 (
hód
)->
tqh_œ°
 = &(
ñm
)->
fõld
.
tqe_√xt
; \

337 } 0)

	)

339 
	#TAILQ_INSERT_AFTER
(
hód
, 
li°ñm
, 
ñm
, 
fõld
) do { \

340 i‡(((
ñm
)->
fõld
.
tqe_√xt
 = (
li°ñm
)->fõld.tqe_√xtË!
NULL
)\

341 (
ñm
)->
fõld
.
tqe_√xt
->fõld.
tqe_¥ev
 = \

342 &(
ñm
)->
fõld
.
tqe_√xt
; \

344 (
hód
)->
tqh_œ°
 = &(
ñm
)->
fõld
.
tqe_√xt
; \

345 (
li°ñm
)->
fõld
.
tqe_√xt
 = (
ñm
); \

346 (
ñm
)->
fõld
.
tqe_¥ev
 = &(
li°ñm
)->fõld.
tqe_√xt
; \

347 } 0)

	)

349 
	#TAILQ_INSERT_BEFORE
(
li°ñm
, 
ñm
, 
fõld
) do { \

350 (
ñm
)->
fõld
.
tqe_¥ev
 = (
li°ñm
)->field.tqe_prev; \

351 (
ñm
)->
fõld
.
tqe_√xt
 = (
li°ñm
); \

352 *(
li°ñm
)->
fõld
.
tqe_¥ev
 = (
ñm
); \

353 (
li°ñm
)->
fõld
.
tqe_¥ev
 = &(
ñm
)->fõld.
tqe_√xt
; \

354 } 0)

	)

356 
	#TAILQ_REMOVE
(
hód
, 
ñm
, 
fõld
) do { \

357 i‡(((
ñm
)->
fõld
.
tqe_√xt
Ë!
NULL
) \

358 (
ñm
)->
fõld
.
tqe_√xt
->fõld.
tqe_¥ev
 = \

359 (
ñm
)->
fõld
.
tqe_¥ev
; \

361 (
hód
)->
tqh_œ°
 = (
ñm
)->
fõld
.
tqe_¥ev
; \

362 *(
ñm
)->
fõld
.
tqe_¥ev
 = (ñm)->fõld.
tqe_√xt
; \

363 } 0)

	)

365 
	#TAILQ_REPLACE
(
hód
, 
ñm
, 
ñm2
, 
fõld
) do { \

366 i‡(((
ñm2
)->
fõld
.
tqe_√xt
 = (
ñm
)->fõld.tqe_√xtË!
NULL
) \

367 (
ñm2
)->
fõld
.
tqe_√xt
->fõld.
tqe_¥ev
 = \

368 &(
ñm2
)->
fõld
.
tqe_√xt
; \

370 (
hód
)->
tqh_œ°
 = &(
ñm2
)->
fõld
.
tqe_√xt
; \

371 (
ñm2
)->
fõld
.
tqe_¥ev
 = (
ñm
)->field.tqe_prev; \

372 *(
ñm2
)->
fõld
.
tqe_¥ev
 = (elm2); \

373 } 0)

	)

378 
	#CIRCLEQ_HEAD
(
«me
, 
ty≥
) \

379 
	s«me
 { \

380 
ty≥
 *
cqh_fú°
; \

381 
ty≥
 *
cqh_œ°
; \

382 }

	)

384 
	#CIRCLEQ_HEAD_INITIALIZER
(
hód
) \

385 { 
	`CIRCLEQ_END
(&
hód
), CIRCLEQ_END(&hódË}

	)

387 
	#CIRCLEQ_ENTRY
(
ty≥
) \

389 
ty≥
 *
cqe_√xt
; \

390 
ty≥
 *
cqe_¥ev
; \

391 }

	)

396 
	#CIRCLEQ_FIRST
(
hód
Ë((hód)->
cqh_fú°
)

	)

397 
	#CIRCLEQ_LAST
(
hód
Ë((hód)->
cqh_œ°
)

	)

398 
	#CIRCLEQ_END
(
hód
Ë((*)(hód))

	)

399 
	#CIRCLEQ_NEXT
(
ñm
, 
fõld
Ë(”lm)->fõld.
cqe_√xt
)

	)

400 
	#CIRCLEQ_PREV
(
ñm
, 
fõld
Ë(”lm)->fõld.
cqe_¥ev
)

	)

401 
	#CIRCLEQ_EMPTY
(
hód
) \

402 (
	`CIRCLEQ_FIRST
(
hód
Ë=
	`CIRCLEQ_END
(hód))

	)

404 
	#CIRCLEQ_FOREACH
(
v¨
, 
hód
, 
fõld
) \

405 (
v¨
Ë
	`CIRCLEQ_FIRST
(
hód
); \

406 (
v¨
Ë!
	`CIRCLEQ_END
(
hód
); \

407 (
v¨
Ë
	`CIRCLEQ_NEXT
(v¨, 
fõld
))

	)

409 
	#CIRCLEQ_FOREACH_REVERSE
(
v¨
, 
hód
, 
fõld
) \

410 (
v¨
Ë
	`CIRCLEQ_LAST
(
hód
); \

411 (
v¨
Ë!
	`CIRCLEQ_END
(
hód
); \

412 (
v¨
Ë
	`CIRCLEQ_PREV
(v¨, 
fõld
))

	)

417 
	#CIRCLEQ_INIT
(
hód
) do { \

418 (
hód
)->
cqh_fú°
 = 
	`CIRCLEQ_END
(head); \

419 (
hód
)->
cqh_œ°
 = 
	`CIRCLEQ_END
(head); \

420 } 0)

	)

422 
	#CIRCLEQ_INSERT_AFTER
(
hód
, 
li°ñm
, 
ñm
, 
fõld
) do { \

423 (
ñm
)->
fõld
.
cqe_√xt
 = (
li°ñm
)->field.cqe_next; \

424 (
ñm
)->
fõld
.
cqe_¥ev
 = (
li°ñm
); \

425 i‡((
li°ñm
)->
fõld
.
cqe_√xt
 =
	`CIRCLEQ_END
(
hód
)) \

426 (
hód
)->
cqh_œ°
 = (
ñm
); \

428 (
li°ñm
)->
fõld
.
cqe_√xt
->fõld.
cqe_¥ev
 = (
ñm
); \

429 (
li°ñm
)->
fõld
.
cqe_√xt
 = (
ñm
); \

430 } 0)

	)

432 
	#CIRCLEQ_INSERT_BEFORE
(
hód
, 
li°ñm
, 
ñm
, 
fõld
) do { \

433 (
ñm
)->
fõld
.
cqe_√xt
 = (
li°ñm
); \

434 (
ñm
)->
fõld
.
cqe_¥ev
 = (
li°ñm
)->field.cqe_prev; \

435 i‡((
li°ñm
)->
fõld
.
cqe_¥ev
 =
	`CIRCLEQ_END
(
hód
)) \

436 (
hód
)->
cqh_fú°
 = (
ñm
); \

438 (
li°ñm
)->
fõld
.
cqe_¥ev
->fõld.
cqe_√xt
 = (
ñm
); \

439 (
li°ñm
)->
fõld
.
cqe_¥ev
 = (
ñm
); \

440 } 0)

	)

442 
	#CIRCLEQ_INSERT_HEAD
(
hód
, 
ñm
, 
fõld
) do { \

443 (
ñm
)->
fõld
.
cqe_√xt
 = (
hód
)->
cqh_fú°
; \

444 (
ñm
)->
fõld
.
cqe_¥ev
 = 
	`CIRCLEQ_END
(
hód
); \

445 i‡((
hód
)->
cqh_œ°
 =
	`CIRCLEQ_END
(head)) \

446 (
hód
)->
cqh_œ°
 = (
ñm
); \

448 (
hód
)->
cqh_fú°
->
fõld
.
cqe_¥ev
 = (
ñm
); \

449 (
hód
)->
cqh_fú°
 = (
ñm
); \

450 } 0)

	)

452 
	#CIRCLEQ_INSERT_TAIL
(
hód
, 
ñm
, 
fõld
) do { \

453 (
ñm
)->
fõld
.
cqe_√xt
 = 
	`CIRCLEQ_END
(
hód
); \

454 (
ñm
)->
fõld
.
cqe_¥ev
 = (
hód
)->
cqh_œ°
; \

455 i‡((
hód
)->
cqh_fú°
 =
	`CIRCLEQ_END
(head)) \

456 (
hód
)->
cqh_fú°
 = (
ñm
); \

458 (
hód
)->
cqh_œ°
->
fõld
.
cqe_√xt
 = (
ñm
); \

459 (
hód
)->
cqh_œ°
 = (
ñm
); \

460 } 0)

	)

462 
	#CIRCLEQ_REMOVE
(
hód
, 
ñm
, 
fõld
) do { \

463 i‡((
ñm
)->
fõld
.
cqe_√xt
 =
	`CIRCLEQ_END
(
hód
)) \

464 (
hód
)->
cqh_œ°
 = (
ñm
)->
fõld
.
cqe_¥ev
; \

466 (
ñm
)->
fõld
.
cqe_√xt
->fõld.
cqe_¥ev
 = \

467 (
ñm
)->
fõld
.
cqe_¥ev
; \

468 i‡((
ñm
)->
fõld
.
cqe_¥ev
 =
	`CIRCLEQ_END
(
hód
)) \

469 (
hód
)->
cqh_fú°
 = (
ñm
)->
fõld
.
cqe_√xt
; \

471 (
ñm
)->
fõld
.
cqe_¥ev
->fõld.
cqe_√xt
 = \

472 (
ñm
)->
fõld
.
cqe_√xt
; \

473 } 0)

	)

475 
	#CIRCLEQ_REPLACE
(
hód
, 
ñm
, 
ñm2
, 
fõld
) do { \

476 i‡(((
ñm2
)->
fõld
.
cqe_√xt
 = (
ñm
)->field.cqe_next) == \

477 
	`CIRCLEQ_END
(
hód
)) \

478 (
hód
).
cqh_œ°
 = (
ñm2
); \

480 (
ñm2
)->
fõld
.
cqe_√xt
->fõld.
cqe_¥ev
 = (elm2); \

481 i‡(((
ñm2
)->
fõld
.
cqe_¥ev
 = (
ñm
)->field.cqe_prev) == \

482 
	`CIRCLEQ_END
(
hód
)) \

483 (
hód
).
cqh_fú°
 = (
ñm2
); \

485 (
ñm2
)->
fõld
.
cqe_¥ev
->fõld.
cqe_√xt
 = (elm2); \

486 } 0)

	)

	@devpoll.c

27 #ifde‡
HAVE_CONFIG_H


28 
	~"c⁄fig.h
"

31 
	~<sys/ty≥s.h
>

32 
	~<sys/ªsour˚.h
>

33 #ifde‡
HAVE_SYS_TIME_H


34 
	~<sys/time.h
>

36 
	~<sys/_libevít_time.h
>

38 
	~<sys/queue.h
>

39 
	~<sys/devpﬁl.h
>

40 
	~<sig«l.h
>

41 
	~<°dio.h
>

42 
	~<°dlib.h
>

43 
	~<°rög.h
>

44 
	~<uni°d.h
>

45 
	~<f˙é.h
>

46 
	~<î∫o.h
>

47 
	~<as£π.h
>

49 
	~"evít.h
"

50 
	~"evít-öã∫Æ.h
"

51 
	~"evsig«l.h
"

52 
	~"log.h
"

57 
	sevdevpﬁl
 {

58 
evít
 *
	mevªad
;

59 
evít
 *
	mevwrôe
;

62 
	sdevpﬁl›
 {

63 
evdevpﬁl
 *
	mfds
;

64 
	mnfds
;

65 
pﬁlfd
 *
	mevíts
;

66 
	m√víts
;

67 
	mdpfd
;

68 
pﬁlfd
 *
	mch™ges
;

69 
	mnch™ges
;

72 *
devpﬁl_öô
 (
evít_ba£
 *);

73 
devpﬁl_add
 (*, 
evít
 *);

74 
devpﬁl_dñ
 (*, 
evít
 *);

75 
devpﬁl_di•©ch
 (
evít_ba£
 *, *, 
timevÆ
 *);

76 
devpﬁl_dóŒoc
 (
evít_ba£
 *, *);

78 c⁄° 
evít›
 
	gdevpﬁl›s
 = {

80 
devpﬁl_öô
,

81 
devpﬁl_add
,

82 
devpﬁl_dñ
,

83 
devpﬁl_di•©ch
,

84 
devpﬁl_dóŒoc
,

88 
	#NEVENT
 32000

	)

91 
	$devpﬁl_commô
(
devpﬁl›
 *devpollop)

97 i‡(
	`pwrôe
(
devpﬁl›
->
dpfd
, devpﬁl›->
ch™ges
,

98 (
pﬁlfd
Ë* 
devpﬁl›
->
nch™ges
, 0) == -1)

101 
devpﬁl›
->
nch™ges
 = 0;

103 
	}
}

106 
	$devpﬁl_queue
(
devpﬁl›
 *devpﬁl›, 
fd
, 
evíts
) {

107 
pﬁlfd
 *
pfd
;

109 i‡(
devpﬁl›
->
nch™ges
 >devpﬁl›->
√víts
) {

114 i‡(
	`devpﬁl_commô
(
devpﬁl›
) != 0)

118 
pfd
 = &
devpﬁl›
->
ch™ges
[devpﬁl›->
nch™ges
++];

119 
pfd
->
fd
 = fd;

120 
pfd
->
evíts
 =Évents;

121 
pfd
->
ªvíts
 = 0;

124 
	}
}

127 
	$devpﬁl_öô
(
evít_ba£
 *
ba£
)

129 
dpfd
, 
nfûes
 = 
NEVENT
;

130 
æimô
 
æ
;

131 
devpﬁl›
 *devpollop;

134 i‡(
	`evutû_gëív
("EVENT_NODEVPOLL"))

135  (
NULL
);

137 i‡(!(
devpﬁl›
 = 
	`ˇŒoc
(1, (devpollop))))

138  (
NULL
);

140 i‡(
	`gëæimô
(
RLIMIT_NOFILE
, &
æ
) == 0 &&

141 
æ
.
æim_cur
 !
RLIM_INFINITY
)

142 
nfûes
 = 
æ
.
æim_cur
;

145 i‡((
dpfd
 = 
	`›í
("/dev/pﬁl", 
O_RDWR
)) == -1) {

146 
	`evít_w¨n
("open: /dev/poll");

147 
	`‰ì
(
devpﬁl›
);

148  (
NULL
);

151 
devpﬁl›
->
dpfd
 = dpfd;

154 
devpﬁl›
->
evíts
 = 
	`ˇŒoc
(
nfûes
, (
pﬁlfd
));

155 i‡(
devpﬁl›
->
evíts
 =
NULL
) {

156 
	`‰ì
(
devpﬁl›
);

157 
	`˛o£
(
dpfd
);

158  (
NULL
);

160 
devpﬁl›
->
√víts
 = 
nfûes
;

162 
devpﬁl›
->
fds
 = 
	`ˇŒoc
(
nfûes
, (
evdevpﬁl
));

163 i‡(
devpﬁl›
->
fds
 =
NULL
) {

164 
	`‰ì
(
devpﬁl›
->
evíts
);

165 
	`‰ì
(
devpﬁl›
);

166 
	`˛o£
(
dpfd
);

167  (
NULL
);

169 
devpﬁl›
->
nfds
 = 
nfûes
;

171 
devpﬁl›
->
ch™ges
 = 
	`ˇŒoc
(
nfûes
, (
pﬁlfd
));

172 i‡(
devpﬁl›
->
ch™ges
 =
NULL
) {

173 
	`‰ì
(
devpﬁl›
->
fds
);

174 
	`‰ì
(
devpﬁl›
->
evíts
);

175 
	`‰ì
(
devpﬁl›
);

176 
	`˛o£
(
dpfd
);

177  (
NULL
);

180 
	`evsig«l_öô
(
ba£
);

182  (
devpﬁl›
);

183 
	}
}

186 
	$devpﬁl_ªˇlc
(
evít_ba£
 *
ba£
, *
¨g
, 
max
)

188 
devpﬁl›
 *devpﬁl› = 
¨g
;

190 i‡(
max
 >
devpﬁl›
->
nfds
) {

191 
evdevpﬁl
 *
fds
;

192 
nfds
;

194 
nfds
 = 
devpﬁl›
->nfds;

195 
nfds
 <
max
)

196 
nfds
 <<= 1;

198 
fds
 = 
	`ªÆloc
(
devpﬁl›
->fds, 
nfds
 * (
evdevpﬁl
));

199 i‡(
fds
 =
NULL
) {

200 
	`evít_w¨n
("realloc");

203 
devpﬁl›
->
fds
 = fds;

204 
	`mem£t
(
fds
 + 
devpﬁl›
->
nfds
, 0,

205 (
nfds
 - 
devpﬁl›
->nfdsË* (
evdevpﬁl
));

206 
devpﬁl›
->
nfds
 =Çfds;

210 
	}
}

213 
	$devpﬁl_di•©ch
(
evít_ba£
 *
ba£
, *
¨g
, 
timevÆ
 *
tv
)

215 
devpﬁl›
 *devpﬁl› = 
¨g
;

216 
pﬁlfd
 *
evíts
 = 
devpﬁl›
->events;

217 
dvpﬁl
 
dvp
;

218 
evdevpﬁl
 *
evdp
;

219 
i
, 
ªs
, 
timeout
 = -1;

221 i‡(
devpﬁl›
->
nch™ges
)

222 
	`devpﬁl_commô
(
devpﬁl›
);

224 i‡(
tv
 !
NULL
)

225 
timeout
 = 
tv
->
tv_£c
 * 1000 + (tv->
tv_u£c
 + 999) / 1000;

227 
dvp
.
dp_fds
 = 
devpﬁl›
->
evíts
;

228 
dvp
.
dp_nfds
 = 
devpﬁl›
->
√víts
;

229 
dvp
.
dp_timeout
 = 
timeout
;

231 
ªs
 = 
	`io˘l
(
devpﬁl›
->
dpfd
, 
DP_POLL
, &
dvp
);

233 i‡(
ªs
 == -1) {

234 i‡(
î∫o
 !
EINTR
) {

235 
	`evít_w¨n
("ioctl: DP_POLL");

239 
	`evsig«l_¥o˚ss
(
ba£
);

241 } i‡(
ba£
->
sig
.
evsig«l_ˇught
) {

242 
	`evsig«l_¥o˚ss
(
ba£
);

245 
	`evít_debug
(("%s: devpﬁl_waôÑï‹t†%d", 
__func__
, 
ªs
));

247 
i
 = 0; i < 
ªs
; i++) {

248 
which
 = 0;

249 
wh©
 = 
evíts
[
i
].
ªvíts
;

250 
evít
 *
evªad
 = 
NULL
, *
evwrôe
 = NULL;

252 
	`as£π
(
evíts
[
i
].
fd
 < 
devpﬁl›
->
nfds
);

253 
evdp
 = &
devpﬁl›
->
fds
[
evíts
[
i
].
fd
];

255 i‡(
wh©
 & 
POLLHUP
)

256 
wh©
 |
POLLIN
 | 
POLLOUT
;

257 i‡(
wh©
 & 
POLLERR
)

258 
wh©
 |
POLLIN
 | 
POLLOUT
;

260 i‡(
wh©
 & 
POLLIN
) {

261 
evªad
 = 
evdp
->evread;

262 
which
 |
EV_READ
;

265 i‡(
wh©
 & 
POLLOUT
) {

266 
evwrôe
 = 
evdp
->evwrite;

267 
which
 |
EV_WRITE
;

270 i‡(!
which
)

273 i‡(
evªad
 !
NULL
 && !”vªad->
ev_evíts
 & 
EV_PERSIST
))

274 
	`evít_dñ
(
evªad
);

275 i‡(
evwrôe
 !
NULL
 &&Évwrôê!
evªad
 &&

276 !(
evwrôe
->
ev_evíts
 & 
EV_PERSIST
))

277 
	`evít_dñ
(
evwrôe
);

279 i‡(
evªad
 !
NULL
)

280 
	`evít_a˘ive
(
evªad
, 
EV_READ
, 1);

281 i‡(
evwrôe
 !
NULL
)

282 
	`evít_a˘ive
(
evwrôe
, 
EV_WRITE
, 1);

286 
	}
}

290 
	$devpﬁl_add
(*
¨g
, 
evít
 *
ev
)

292 
devpﬁl›
 *devpﬁl› = 
¨g
;

293 
evdevpﬁl
 *
evdp
;

294 
fd
, 
evíts
;

296 i‡(
ev
->
ev_evíts
 & 
EV_SIGNAL
)

297  (
	`evsig«l_add
(
ev
));

299 
fd
 = 
ev
->
ev_fd
;

300 i‡(
fd
 >
devpﬁl›
->
nfds
) {

302 i‡(
	`devpﬁl_ªˇlc
(
ev
->
ev_ba£
, 
devpﬁl›
, 
fd
) == -1)

305 
evdp
 = &
devpﬁl›
->
fds
[
fd
];

314 
evíts
 = 0;

315 i‡(
ev
->
ev_evíts
 & 
EV_READ
) {

316 i‡(
evdp
->
evªad
 &&Évdp->evªad !
ev
) {

320 
evíts
 |
POLLIN
;

323 i‡(
ev
->
ev_evíts
 & 
EV_WRITE
) {

324 i‡(
evdp
->
evwrôe
 &&Évdp->evwrôê!
ev
) {

328 
evíts
 |
POLLOUT
;

331 i‡(
	`devpﬁl_queue
(
devpﬁl›
, 
fd
, 
evíts
) != 0)

335 i‡(
ev
->
ev_evíts
 & 
EV_READ
)

336 
evdp
->
evªad
 = 
ev
;

337 i‡(
ev
->
ev_evíts
 & 
EV_WRITE
)

338 
evdp
->
evwrôe
 = 
ev
;

341 
	}
}

344 
	$devpﬁl_dñ
(*
¨g
, 
evít
 *
ev
)

346 
devpﬁl›
 *devpﬁl› = 
¨g
;

347 
evdevpﬁl
 *
evdp
;

348 
fd
, 
evíts
;

349 
√edwrôedñëe
 = 1, 
√edªaddñëe
 = 1;

351 i‡(
ev
->
ev_evíts
 & 
EV_SIGNAL
)

352  (
	`evsig«l_dñ
(
ev
));

354 
fd
 = 
ev
->
ev_fd
;

355 i‡(
fd
 >
devpﬁl›
->
nfds
)

357 
evdp
 = &
devpﬁl›
->
fds
[
fd
];

359 
evíts
 = 0;

360 i‡(
ev
->
ev_evíts
 & 
EV_READ
)

361 
evíts
 |
POLLIN
;

362 i‡(
ev
->
ev_evíts
 & 
EV_WRITE
)

363 
evíts
 |
POLLOUT
;

372 i‡(
	`devpﬁl_queue
(
devpﬁl›
, 
fd
, 
POLLREMOVE
) != 0)

375 i‡((
evíts
 & (
POLLIN
|
POLLOUT
)) != (POLLIN|POLLOUT)) {

381 i‡((
evíts
 & 
POLLIN
Ë&& 
evdp
->
evwrôe
 !
NULL
) {

383 
	`devpﬁl_queue
(
devpﬁl›
, 
fd
, 
POLLOUT
);

384 
√edwrôedñëe
 = 0;

385 } i‡((
evíts
 & 
POLLOUT
Ë&& 
evdp
->
evªad
 !
NULL
) {

387 
	`devpﬁl_queue
(
devpﬁl›
, 
fd
, 
POLLIN
);

388 
√edªaddñëe
 = 0;

392 i‡(
√edªaddñëe
)

393 
evdp
->
evªad
 = 
NULL
;

394 i‡(
√edwrôedñëe
)

395 
evdp
->
evwrôe
 = 
NULL
;

398 
	}
}

401 
	$devpﬁl_dóŒoc
(
evít_ba£
 *
ba£
, *
¨g
)

403 
devpﬁl›
 *devpﬁl› = 
¨g
;

405 
	`evsig«l_dóŒoc
(
ba£
);

406 i‡(
devpﬁl›
->
fds
)

407 
	`‰ì
(
devpﬁl›
->
fds
);

408 i‡(
devpﬁl›
->
evíts
)

409 
	`‰ì
(
devpﬁl›
->
evíts
);

410 i‡(
devpﬁl›
->
ch™ges
)

411 
	`‰ì
(
devpﬁl›
->
ch™ges
);

412 i‡(
devpﬁl›
->
dpfd
 >= 0)

413 
	`˛o£
(
devpﬁl›
->
dpfd
);

415 
	`mem£t
(
devpﬁl›
, 0, (devpollop));

416 
	`‰ì
(
devpﬁl›
);

417 
	}
}

	@epoll.c

27 #ifde‡
HAVE_CONFIG_H


28 
	~"c⁄fig.h
"

31 
	~<°döt.h
>

32 
	~<sys/ty≥s.h
>

33 
	~<sys/ªsour˚.h
>

34 #ifde‡
HAVE_SYS_TIME_H


35 
	~<sys/time.h
>

37 
	~<sys/_libevít_time.h
>

39 
	~<sys/queue.h
>

40 
	~<sys/ïﬁl.h
>

41 
	~<sig«l.h
>

42 
	~<°dio.h
>

43 
	~<°dlib.h
>

44 
	~<°rög.h
>

45 
	~<uni°d.h
>

46 
	~<î∫o.h
>

47 #ifde‡
HAVE_FCNTL_H


48 
	~<f˙é.h
>

51 
	~"evít.h
"

52 
	~"evít-öã∫Æ.h
"

53 
	~"evsig«l.h
"

54 
	~"log.h
"

59 
	sevïﬁl
 {

60 
evít
 *
	mevªad
;

61 
evít
 *
	mevwrôe
;

64 
	sïﬁl›
 {

65 
evïﬁl
 *
	mfds
;

66 
	mnfds
;

67 
ïﬁl_evít
 *
	mevíts
;

68 
	m√víts
;

69 
	mïfd
;

72 *
ïﬁl_öô
 (
evít_ba£
 *);

73 
ïﬁl_add
 (*, 
evít
 *);

74 
ïﬁl_dñ
 (*, 
evít
 *);

75 
ïﬁl_di•©ch
 (
evít_ba£
 *, *, 
timevÆ
 *);

76 
ïﬁl_dóŒoc
 (
evít_ba£
 *, *);

78 c⁄° 
evít›
 
	gïﬁl›s
 = {

80 
ïﬁl_öô
,

81 
ïﬁl_add
,

82 
ïﬁl_dñ
,

83 
ïﬁl_di•©ch
,

84 
ïﬁl_dóŒoc
,

88 #ifde‡
HAVE_SETFD


89 
	#FD_CLOSEONEXEC
(
x
) do { \

90 i‡(
	`f˙é
(
x
, 
F_SETFD
, 1) == -1) \

91 
	`evít_w¨n
("f˙é(%d, F_SETFD)", 
x
); \

92 } 0)

	)

94 
	#FD_CLOSEONEXEC
(
x
)

	)

103 
	#MAX_EPOLL_TIMEOUT_MSEC
 (35*60*1000)

	)

105 
	#INITIAL_NFILES
 32

	)

106 
	#INITIAL_NEVENTS
 32

	)

107 
	#MAX_NEVENTS
 4096

	)

110 
	$ïﬁl_öô
(
evít_ba£
 *
ba£
)

112 
ïfd
;

113 
ïﬁl›
 *epollop;

116 i‡(
	`evutû_gëív
("EVENT_NOEPOLL"))

117  (
NULL
);

120 i‡((
ïfd
 = 
	`ïﬁl_¸óã
(32000)) == -1) {

121 i‡(
î∫o
 !
ENOSYS
)

122 
	`evít_w¨n
("epoll_create");

123  (
NULL
);

126 
	`FD_CLOSEONEXEC
(
ïfd
);

128 i‡(!(
ïﬁl›
 = 
	`ˇŒoc
(1, (epollop))))

129  (
NULL
);

131 
ïﬁl›
->
ïfd
 =Épfd;

134 
ïﬁl›
->
evíts
 = 
	`mÆloc
(
INITIAL_NEVENTS
 * (
ïﬁl_evít
));

135 i‡(
ïﬁl›
->
evíts
 =
NULL
) {

136 
	`‰ì
(
ïﬁl›
);

137  (
NULL
);

139 
ïﬁl›
->
√víts
 = 
INITIAL_NEVENTS
;

141 
ïﬁl›
->
fds
 = 
	`ˇŒoc
(
INITIAL_NFILES
, (
evïﬁl
));

142 i‡(
ïﬁl›
->
fds
 =
NULL
) {

143 
	`‰ì
(
ïﬁl›
->
evíts
);

144 
	`‰ì
(
ïﬁl›
);

145  (
NULL
);

147 
ïﬁl›
->
nfds
 = 
INITIAL_NFILES
;

149 
	`evsig«l_öô
(
ba£
);

151  (
ïﬁl›
);

152 
	}
}

155 
	$ïﬁl_ªˇlc
(
evít_ba£
 *
ba£
, *
¨g
, 
max
)

157 
ïﬁl›
 *ïﬁl› = 
¨g
;

159 i‡(
max
 >
ïﬁl›
->
nfds
) {

160 
evïﬁl
 *
fds
;

161 
nfds
;

163 
nfds
 = 
ïﬁl›
->nfds;

164 
nfds
 <
max
)

165 
nfds
 <<= 1;

167 
fds
 = 
	`ªÆloc
(
ïﬁl›
->fds, 
nfds
 * (
evïﬁl
));

168 i‡(
fds
 =
NULL
) {

169 
	`evít_w¨n
("realloc");

172 
ïﬁl›
->
fds
 = fds;

173 
	`mem£t
(
fds
 + 
ïﬁl›
->
nfds
, 0,

174 (
nfds
 - 
ïﬁl›
->nfdsË* (
evïﬁl
));

175 
ïﬁl›
->
nfds
 =Çfds;

179 
	}
}

182 
	$ïﬁl_di•©ch
(
evít_ba£
 *
ba£
, *
¨g
, 
timevÆ
 *
tv
)

184 
ïﬁl›
 *ïﬁl› = 
¨g
;

185 
ïﬁl_evít
 *
evíts
 = 
ïﬁl›
->events;

186 
evïﬁl
 *
evï
;

187 
i
, 
ªs
, 
timeout
 = -1;

189 i‡(
tv
 !
NULL
)

190 
timeout
 = 
tv
->
tv_£c
 * 1000 + (tv->
tv_u£c
 + 999) / 1000;

192 i‡(
timeout
 > 
MAX_EPOLL_TIMEOUT_MSEC
) {

195 
timeout
 = 
MAX_EPOLL_TIMEOUT_MSEC
;

198 
ªs
 = 
	`ïﬁl_waô
(
ïﬁl›
->
ïfd
, 
evíts
,Épﬁl›->
√víts
, 
timeout
);

200 i‡(
ªs
 == -1) {

201 i‡(
î∫o
 !
EINTR
) {

202 
	`evít_w¨n
("epoll_wait");

206 
	`evsig«l_¥o˚ss
(
ba£
);

208 } i‡(
ba£
->
sig
.
evsig«l_ˇught
) {

209 
	`evsig«l_¥o˚ss
(
ba£
);

212 
	`evít_debug
(("%s:Épﬁl_waôÑï‹t†%d", 
__func__
, 
ªs
));

214 
i
 = 0; i < 
ªs
; i++) {

215 
wh©
 = 
evíts
[
i
].events;

216 
evít
 *
evªad
 = 
NULL
, *
evwrôe
 = NULL;

217 
fd
 = 
evíts
[
i
].
d©a
.fd;

219 i‡(
fd
 < 0 || fd >
ïﬁl›
->
nfds
)

221 
evï
 = &
ïﬁl›
->
fds
[
fd
];

223 i‡(
wh©
 & (
EPOLLHUP
|
EPOLLERR
)) {

224 
evªad
 = 
evï
->evread;

225 
evwrôe
 = 
evï
->evwrite;

227 i‡(
wh©
 & 
EPOLLIN
) {

228 
evªad
 = 
evï
->evread;

231 i‡(
wh©
 & 
EPOLLOUT
) {

232 
evwrôe
 = 
evï
->evwrite;

236 i‡(!(
evªad
||
evwrôe
))

239 i‡(
evªad
 !
NULL
)

240 
	`evít_a˘ive
(
evªad
, 
EV_READ
, 1);

241 i‡(
evwrôe
 !
NULL
)

242 
	`evít_a˘ive
(
evwrôe
, 
EV_WRITE
, 1);

245 i‡(
ªs
 =
ïﬁl›
->
√víts
 &&Épﬁl›->√vít†< 
MAX_NEVENTS
) {

248 
√w_√víts
 = 
ïﬁl›
->
√víts
 * 2;

249 
ïﬁl_evít
 *
√w_evíts
;

251 
√w_evíts
 = 
	`ªÆloc
(
ïﬁl›
->
evíts
,

252 
√w_√víts
 * (
ïﬁl_evít
));

253 i‡(
√w_evíts
) {

254 
ïﬁl›
->
evíts
 = 
√w_evíts
;

255 
ïﬁl›
->
√víts
 = 
√w_√víts
;

260 
	}
}

264 
	$ïﬁl_add
(*
¨g
, 
evít
 *
ev
)

266 
ïﬁl›
 *ïﬁl› = 
¨g
;

267 
ïﬁl_evít
 
ïev
 = {0, {0}};

268 
evïﬁl
 *
evï
;

269 
fd
, 
›
, 
evíts
;

271 i‡(
ev
->
ev_evíts
 & 
EV_SIGNAL
)

272  (
	`evsig«l_add
(
ev
));

274 
fd
 = 
ev
->
ev_fd
;

275 i‡(
fd
 >
ïﬁl›
->
nfds
) {

277 i‡(
	`ïﬁl_ªˇlc
(
ev
->
ev_ba£
, 
ïﬁl›
, 
fd
) == -1)

280 
evï
 = &
ïﬁl›
->
fds
[
fd
];

281 
›
 = 
EPOLL_CTL_ADD
;

282 
evíts
 = 0;

283 i‡(
evï
->
evªad
 !
NULL
) {

284 
evíts
 |
EPOLLIN
;

285 
›
 = 
EPOLL_CTL_MOD
;

287 i‡(
evï
->
evwrôe
 !
NULL
) {

288 
evíts
 |
EPOLLOUT
;

289 
›
 = 
EPOLL_CTL_MOD
;

292 i‡(
ev
->
ev_evíts
 & 
EV_READ
)

293 
evíts
 |
EPOLLIN
;

294 i‡(
ev
->
ev_evíts
 & 
EV_WRITE
)

295 
evíts
 |
EPOLLOUT
;

297 
ïev
.
d©a
.
fd
 = fd;

298 
ïev
.
evíts
 =Évents;

299 i‡(
	`ïﬁl_˘l
(
ïﬁl›
->
ïfd
, 
›
, 
ev
->
ev_fd
, &
ïev
) == -1)

303 i‡(
ev
->
ev_evíts
 & 
EV_READ
)

304 
evï
->
evªad
 = 
ev
;

305 i‡(
ev
->
ev_evíts
 & 
EV_WRITE
)

306 
evï
->
evwrôe
 = 
ev
;

309 
	}
}

312 
	$ïﬁl_dñ
(*
¨g
, 
evít
 *
ev
)

314 
ïﬁl›
 *ïﬁl› = 
¨g
;

315 
ïﬁl_evít
 
ïev
 = {0, {0}};

316 
evïﬁl
 *
evï
;

317 
fd
, 
evíts
, 
›
;

318 
√edwrôedñëe
 = 1, 
√edªaddñëe
 = 1;

320 i‡(
ev
->
ev_evíts
 & 
EV_SIGNAL
)

321  (
	`evsig«l_dñ
(
ev
));

323 
fd
 = 
ev
->
ev_fd
;

324 i‡(
fd
 >
ïﬁl›
->
nfds
)

326 
evï
 = &
ïﬁl›
->
fds
[
fd
];

328 
›
 = 
EPOLL_CTL_DEL
;

329 
evíts
 = 0;

331 i‡(
ev
->
ev_evíts
 & 
EV_READ
)

332 
evíts
 |
EPOLLIN
;

333 i‡(
ev
->
ev_evíts
 & 
EV_WRITE
)

334 
evíts
 |
EPOLLOUT
;

336 i‡((
evíts
 & (
EPOLLIN
|
EPOLLOUT
)) != (EPOLLIN|EPOLLOUT)) {

337 i‡((
evíts
 & 
EPOLLIN
Ë&& 
evï
->
evwrôe
 !
NULL
) {

338 
√edwrôedñëe
 = 0;

339 
evíts
 = 
EPOLLOUT
;

340 
›
 = 
EPOLL_CTL_MOD
;

341 } i‡((
evíts
 & 
EPOLLOUT
Ë&& 
evï
->
evªad
 !
NULL
) {

342 
√edªaddñëe
 = 0;

343 
evíts
 = 
EPOLLIN
;

344 
›
 = 
EPOLL_CTL_MOD
;

348 
ïev
.
evíts
 =Évents;

349 
ïev
.
d©a
.
fd
 = fd;

351 i‡(
√edªaddñëe
)

352 
evï
->
evªad
 = 
NULL
;

353 i‡(
√edwrôedñëe
)

354 
evï
->
evwrôe
 = 
NULL
;

356 i‡(
	`ïﬁl_˘l
(
ïﬁl›
->
ïfd
, 
›
, 
fd
, &
ïev
) == -1)

360 
	}
}

363 
	$ïﬁl_dóŒoc
(
evít_ba£
 *
ba£
, *
¨g
)

365 
ïﬁl›
 *ïﬁl› = 
¨g
;

367 
	`evsig«l_dóŒoc
(
ba£
);

368 i‡(
ïﬁl›
->
fds
)

369 
	`‰ì
(
ïﬁl›
->
fds
);

370 i‡(
ïﬁl›
->
evíts
)

371 
	`‰ì
(
ïﬁl›
->
evíts
);

372 i‡(
ïﬁl›
->
ïfd
 >= 0)

373 
	`˛o£
(
ïﬁl›
->
ïfd
);

375 
	`mem£t
(
ïﬁl›
, 0, (epollop));

376 
	`‰ì
(
ïﬁl›
);

377 
	}
}

	@epoll_sub.c

27 
	~<°döt.h
>

29 
	~<sys/∑øm.h
>

30 
	~<sys/ty≥s.h
>

31 
	~<sys/sysˇŒ.h
>

32 
	~<sys/ïﬁl.h
>

33 
	~<uni°d.h
>

36 
	$ïﬁl_¸óã
(
size
)

38  (
	`sysˇŒ
(
__NR_ïﬁl_¸óã
, 
size
));

39 
	}
}

42 
	$ïﬁl_˘l
(
ïfd
, 
›
, 
fd
, 
ïﬁl_evít
 *
evít
)

45  (
	`sysˇŒ
(
__NR_ïﬁl_˘l
, 
ïfd
, 
›
, 
fd
, 
evít
));

46 
	}
}

49 
	$ïﬁl_waô
(
ïfd
, 
ïﬁl_evít
 *
evíts
, 
maxevíts
, 
timeout
)

51  (
	`sysˇŒ
(
__NR_ïﬁl_waô
, 
ïfd
, 
evíts
, 
maxevíts
, 
timeout
));

52 
	}
}

	@evbuffer.c

28 
	~<sys/ty≥s.h
>

30 #ifde‡
HAVE_CONFIG_H


31 
	~"c⁄fig.h
"

34 #ifde‡
HAVE_SYS_TIME_H


35 
	~<sys/time.h
>

38 
	~<î∫o.h
>

39 
	~<°dio.h
>

40 
	~<°dlib.h
>

41 
	~<°rög.h
>

42 #ifde‡
HAVE_STDARG_H


43 
	~<°d¨g.h
>

46 #ifde‡
WIN32


47 
	~<wösock2.h
>

50 
	~"evutû.h
"

51 
	~"evít.h
"

55 
buf„ªvít_ªad_¥essuª_cb
(
evbuf„r
 *, 
size_t
, size_t, *);

58 
	$buf„ªvít_add
(
evít
 *
ev
, 
timeout
)

60 
timevÆ
 
tv
, *
±v
 = 
NULL
;

62 i‡(
timeout
) {

63 
	`evutû_timî˛ór
(&
tv
);

64 
tv
.
tv_£c
 = 
timeout
;

65 
±v
 = &
tv
;

68  (
	`evít_add
(
ev
, 
±v
));

69 
	}
}

77 
	$buf„ªvít_ªad_¥essuª_cb
(
evbuf„r
 *
buf
, 
size_t
 
ﬁd
, size_à
now
,

78 *
¨g
) {

79 
buf„ªvít
 *
bu„v
 = 
¨g
;

84 i‡(
bu„v
->
wm_ªad
.
high
 =0 || 
now
 < bufev->wm_read.high) {

85 
	`evbuf„r_£tcb
(
buf
, 
NULL
, NULL);

87 i‡(
bu„v
->
íabÀd
 & 
EV_READ
)

88 
	`buf„ªvít_add
(&
bu„v
->
ev_ªad
, bu„v->
timeout_ªad
);

90 
	}
}

93 
	$buf„ªvít_ªadcb
(
fd
, 
evít
, *
¨g
)

95 
buf„ªvít
 *
bu„v
 = 
¨g
;

96 
ªs
 = 0;

97 
wh©
 = 
EVBUFFER_READ
;

98 
size_t
 
Àn
;

99 
howmuch
 = -1;

101 i‡(
evít
 =
EV_TIMEOUT
) {

102 
wh©
 |
EVBUFFER_TIMEOUT
;

103 
îr‹
;

110 i‡(
bu„v
->
wm_ªad
.
high
 != 0) {

111 
howmuch
 = 
bu„v
->
wm_ªad
.
high
 - 
	`EVBUFFER_LENGTH
(bu„v->
öput
);

113 i‡(
howmuch
 <= 0) {

114 
evbuf„r
 *
buf
 = 
bu„v
->
öput
;

115 
	`evít_dñ
(&
bu„v
->
ev_ªad
);

116 
	`evbuf„r_£tcb
(
buf
,

117 
buf„ªvít_ªad_¥essuª_cb
, 
bu„v
);

122 
ªs
 = 
	`evbuf„r_ªad
(
bu„v
->
öput
, 
fd
, 
howmuch
);

123 i‡(
ªs
 == -1) {

124 i‡(
î∫o
 =
EAGAIN
 ||Éºnÿ=
EINTR
)

125 
ªscheduÀ
;

127 
wh©
 |
EVBUFFER_ERROR
;

128 } i‡(
ªs
 == 0) {

130 
wh©
 |
EVBUFFER_EOF
;

133 i‡(
ªs
 <= 0)

134 
îr‹
;

136 
	`buf„ªvít_add
(&
bu„v
->
ev_ªad
, bu„v->
timeout_ªad
);

139 
Àn
 = 
	`EVBUFFER_LENGTH
(
bu„v
->
öput
);

140 i‡(
bu„v
->
wm_ªad
.
low
 !0 && 
Àn
 < bufev->wm_read.low)

142 i‡(
bu„v
->
wm_ªad
.
high
 !0 && 
Àn
 >= bufev->wm_read.high) {

143 
evbuf„r
 *
buf
 = 
bu„v
->
öput
;

144 
	`evít_dñ
(&
bu„v
->
ev_ªad
);

147 
	`evbuf„r_£tcb
(
buf
, 
buf„ªvít_ªad_¥essuª_cb
, 
bu„v
);

151 i‡(
bu„v
->
ªadcb
 !
NULL
)

152 (*
bu„v
->
ªadcb
)(bu„v, bu„v->
cb¨g
);

155 
ªscheduÀ
:

156 
	`buf„ªvít_add
(&
bu„v
->
ev_ªad
, bu„v->
timeout_ªad
);

159 
îr‹
:

160 (*
bu„v
->
îr‹cb
)(bu„v, 
wh©
, bu„v->
cb¨g
);

161 
	}
}

164 
	$buf„ªvít_wrôecb
(
fd
, 
evít
, *
¨g
)

166 
buf„ªvít
 *
bu„v
 = 
¨g
;

167 
ªs
 = 0;

168 
wh©
 = 
EVBUFFER_WRITE
;

170 i‡(
evít
 =
EV_TIMEOUT
) {

171 
wh©
 |
EVBUFFER_TIMEOUT
;

172 
îr‹
;

175 i‡(
	`EVBUFFER_LENGTH
(
bu„v
->
ouçut
)) {

176 
ªs
 = 
	`evbuf„r_wrôe
(
bu„v
->
ouçut
, 
fd
);

177 i‡(
ªs
 == -1) {

178 #i‚de‡
WIN32


181 i‡(
î∫o
 =
EAGAIN
 ||

182 
î∫o
 =
EINTR
 ||

183 
î∫o
 =
EINPROGRESS
)

184 
ªscheduÀ
;

186 
wh©
 |
EVBUFFER_ERROR
;

189 
ªscheduÀ
;

192 } i‡(
ªs
 == 0) {

194 
wh©
 |
EVBUFFER_EOF
;

196 i‡(
ªs
 <= 0)

197 
îr‹
;

200 i‡(
	`EVBUFFER_LENGTH
(
bu„v
->
ouçut
) != 0)

201 
	`buf„ªvít_add
(&
bu„v
->
ev_wrôe
, bu„v->
timeout_wrôe
);

207 i‡(
bu„v
->
wrôecb
 !
NULL
 &&

208 
	`EVBUFFER_LENGTH
(
bu„v
->
ouçut
Ë<bu„v->
wm_wrôe
.
low
)

209 (*
bu„v
->
wrôecb
)(bu„v, bu„v->
cb¨g
);

213 
ªscheduÀ
:

214 i‡(
	`EVBUFFER_LENGTH
(
bu„v
->
ouçut
) != 0)

215 
	`buf„ªvít_add
(&
bu„v
->
ev_wrôe
, bu„v->
timeout_wrôe
);

218 
îr‹
:

219 (*
bu„v
->
îr‹cb
)(bu„v, 
wh©
, bu„v->
cb¨g
);

220 
	}
}

233 
buf„ªvít
 *

234 
	$buf„ªvít_√w
(
fd
, 
evbuf„rcb
 
ªadcb
,Évbuf„rcb 
wrôecb
,

235 
evîr‹cb
 
îr‹cb
, *
cb¨g
)

237 
buf„ªvít
 *
bu„v
;

239 i‡((
bu„v
 = 
	`ˇŒoc
(1, (
buf„ªvít
))Ë=
NULL
)

240  (
NULL
);

242 i‡((
bu„v
->
öput
 = 
	`evbuf„r_√w
()Ë=
NULL
) {

243 
	`‰ì
(
bu„v
);

244  (
NULL
);

247 i‡((
bu„v
->
ouçut
 = 
	`evbuf„r_√w
()Ë=
NULL
) {

248 
	`evbuf„r_‰ì
(
bu„v
->
öput
);

249 
	`‰ì
(
bu„v
);

250  (
NULL
);

253 
	`evít_£t
(&
bu„v
->
ev_ªad
, 
fd
, 
EV_READ
, 
buf„ªvít_ªadcb
, bufev);

254 
	`evít_£t
(&
bu„v
->
ev_wrôe
, 
fd
, 
EV_WRITE
, 
buf„ªvít_wrôecb
, bufev);

256 
	`buf„ªvít_£tcb
(
bu„v
, 
ªadcb
, 
wrôecb
, 
îr‹cb
, 
cb¨g
);

263 
bu„v
->
íabÀd
 = 
EV_WRITE
;

265  (
bu„v
);

266 
	}
}

269 
	$buf„ªvít_£tcb
(
buf„ªvít
 *
bu„v
,

270 
evbuf„rcb
 
ªadcb
,Évbuf„rcb 
wrôecb
, 
evîr‹cb
 
îr‹cb
, *
cb¨g
)

272 
bu„v
->
ªadcb
 =Ñeadcb;

273 
bu„v
->
wrôecb
 = writecb;

274 
bu„v
->
îr‹cb
 =Érrorcb;

276 
bu„v
->
cb¨g
 = cbarg;

277 
	}
}

280 
	$buf„ªvít_£tfd
(
buf„ªvít
 *
bu„v
, 
fd
)

282 
	`evít_dñ
(&
bu„v
->
ev_ªad
);

283 
	`evít_dñ
(&
bu„v
->
ev_wrôe
);

285 
	`evít_£t
(&
bu„v
->
ev_ªad
, 
fd
, 
EV_READ
, 
buf„ªvít_ªadcb
, bufev);

286 
	`evít_£t
(&
bu„v
->
ev_wrôe
, 
fd
, 
EV_WRITE
, 
buf„ªvít_wrôecb
, bufev);

287 i‡(
bu„v
->
ev_ba£
 !
NULL
) {

288 
	`evít_ba£_£t
(
bu„v
->
ev_ba£
, &bu„v->
ev_ªad
);

289 
	`evít_ba£_£t
(
bu„v
->
ev_ba£
, &bu„v->
ev_wrôe
);

293 
	}
}

296 
	$buf„ªvít_¥i‹ôy_£t
(
buf„ªvít
 *
bu„v
, 
¥i‹ôy
)

298 i‡(
	`evít_¥i‹ôy_£t
(&
bu„v
->
ev_ªad
, 
¥i‹ôy
) == -1)

300 i‡(
	`evít_¥i‹ôy_£t
(&
bu„v
->
ev_wrôe
, 
¥i‹ôy
) == -1)

304 
	}
}

309 
	$buf„ªvít_‰ì
(
buf„ªvít
 *
bu„v
)

311 
	`evít_dñ
(&
bu„v
->
ev_ªad
);

312 
	`evít_dñ
(&
bu„v
->
ev_wrôe
);

314 
	`evbuf„r_‰ì
(
bu„v
->
öput
);

315 
	`evbuf„r_‰ì
(
bu„v
->
ouçut
);

317 
	`‰ì
(
bu„v
);

318 
	}
}

326 
	$buf„ªvít_wrôe
(
buf„ªvít
 *
bu„v
, c⁄° *
d©a
, 
size_t
 
size
)

328 
ªs
;

330 
ªs
 = 
	`evbuf„r_add
(
bu„v
->
ouçut
, 
d©a
, 
size
);

332 i‡(
ªs
 == -1)

333  (
ªs
);

336 i‡(
size
 > 0 && (
bu„v
->
íabÀd
 & 
EV_WRITE
))

337 
	`buf„ªvít_add
(&
bu„v
->
ev_wrôe
, bu„v->
timeout_wrôe
);

339  (
ªs
);

340 
	}
}

343 
	$buf„ªvít_wrôe_buf„r
(
buf„ªvít
 *
bu„v
, 
evbuf„r
 *
buf
)

345 
ªs
;

347 
ªs
 = 
	`buf„ªvít_wrôe
(
bu„v
, 
buf
->
buf„r
, buf->
off
);

348 i‡(
ªs
 != -1)

349 
	`evbuf„r_døö
(
buf
, buf->
off
);

351  (
ªs
);

352 
	}
}

354 
size_t


355 
	$buf„ªvít_ªad
(
buf„ªvít
 *
bu„v
, *
d©a
, 
size_t
 
size
)

357 
evbuf„r
 *
buf
 = 
bu„v
->
öput
;

359 i‡(
buf
->
off
 < 
size
)

360 
size
 = 
buf
->
off
;

363 
	`mem˝y
(
d©a
, 
buf
->
buf„r
, 
size
);

365 i‡(
size
)

366 
	`evbuf„r_døö
(
buf
, 
size
);

368  (
size
);

369 
	}
}

372 
	$buf„ªvít_íabÀ
(
buf„ªvít
 *
bu„v
, 
evít
)

374 i‡(
evít
 & 
EV_READ
) {

375 i‡(
	`buf„ªvít_add
(&
bu„v
->
ev_ªad
, bu„v->
timeout_ªad
) == -1)

378 i‡(
evít
 & 
EV_WRITE
) {

379 i‡(
	`buf„ªvít_add
(&
bu„v
->
ev_wrôe
, bu„v->
timeout_wrôe
) == -1)

383 
bu„v
->
íabÀd
 |
evít
;

385 
	}
}

388 
	$buf„ªvít_dißbÀ
(
buf„ªvít
 *
bu„v
, 
evít
)

390 i‡(
evít
 & 
EV_READ
) {

391 i‡(
	`evít_dñ
(&
bu„v
->
ev_ªad
) == -1)

394 i‡(
evít
 & 
EV_WRITE
) {

395 i‡(
	`evít_dñ
(&
bu„v
->
ev_wrôe
) == -1)

399 
bu„v
->
íabÀd
 &~
evít
;

401 
	}
}

408 
	$buf„ªvít_£âimeout
(
buf„ªvít
 *
bu„v
,

409 
timeout_ªad
, 
timeout_wrôe
) {

410 
bu„v
->
timeout_ªad
 =Åimeout_read;

411 
bu„v
->
timeout_wrôe
 =Åimeout_write;

413 i‡(
	`evít_≥ndög
(&
bu„v
->
ev_ªad
, 
EV_READ
, 
NULL
))

414 
	`buf„ªvít_add
(&
bu„v
->
ev_ªad
, 
timeout_ªad
);

415 i‡(
	`evít_≥ndög
(&
bu„v
->
ev_wrôe
, 
EV_WRITE
, 
NULL
))

416 
	`buf„ªvít_add
(&
bu„v
->
ev_wrôe
, 
timeout_wrôe
);

417 
	}
}

424 
	$buf„ªvít_£tw©îm¨k
(
buf„ªvít
 *
bu„v
, 
evíts
,

425 
size_t
 
lowm¨k
, size_à
highm¨k
)

427 i‡(
evíts
 & 
EV_READ
) {

428 
bu„v
->
wm_ªad
.
low
 = 
lowm¨k
;

429 
bu„v
->
wm_ªad
.
high
 = 
highm¨k
;

432 i‡(
evíts
 & 
EV_WRITE
) {

433 
bu„v
->
wm_wrôe
.
low
 = 
lowm¨k
;

434 
bu„v
->
wm_wrôe
.
high
 = 
highm¨k
;

438 
	`buf„ªvít_ªad_¥essuª_cb
(
bu„v
->
öput
,

439 0, 
	`EVBUFFER_LENGTH
(
bu„v
->
öput
), bufev);

440 
	}
}

443 
	$buf„ªvít_ba£_£t
(
evít_ba£
 *
ba£
, 
buf„ªvít
 *
bu„v
)

445 
ªs
;

447 
bu„v
->
ev_ba£
 = 
ba£
;

449 
ªs
 = 
	`evít_ba£_£t
(
ba£
, &
bu„v
->
ev_ªad
);

450 i‡(
ªs
 == -1)

451  (
ªs
);

453 
ªs
 = 
	`evít_ba£_£t
(
ba£
, &
bu„v
->
ev_wrôe
);

454  (
ªs
);

455 
	}
}

	@evdns.c

37 
	~<sys/ty≥s.h
>

38 #ifde‡
HAVE_CONFIG_H


39 
	~"c⁄fig.h
"

42 #ifde‡
DNS_USE_FTIME_FOR_ID


43 
	~<sys/timeb.h
>

46 #i‚de‡
DNS_USE_CPU_CLOCK_FOR_ID


47 #i‚de‡
DNS_USE_GETTIMEOFDAY_FOR_ID


48 #i‚de‡
DNS_USE_OPENSSL_FOR_ID


49 #i‚de‡
DNS_USE_FTIME_FOR_ID


50 #îr‹ 
Mu°
 
c⁄figuª
 
©
 
Àa°
 
⁄e
 
id
 
gíî©i⁄
 
mëhod
.

51 #îr‹ 
PÀa£
 
£e
 
the
 
documíèti⁄
.

58 
	#_GNU_SOURCE


	)

60 #ifde‡
DNS_USE_CPU_CLOCK_FOR_ID


61 #ifde‡
DNS_USE_OPENSSL_FOR_ID


62 #îr‹ 
Mu…ùÀ
 
id
 
›ti⁄s
 
£À˘ed


64 #ifde‡
DNS_USE_GETTIMEOFDAY_FOR_ID


65 #îr‹ 
Mu…ùÀ
 
id
 
›ti⁄s
 
£À˘ed


67 
	~<time.h
>

70 #ifde‡
DNS_USE_OPENSSL_FOR_ID


71 #ifde‡
DNS_USE_GETTIMEOFDAY_FOR_ID


72 #îr‹ 
Mu…ùÀ
 
id
 
›ti⁄s
 
£À˘ed


74 
	~<›ís¶/ønd.h
>

77 #i‚de‡
_FORTIFY_SOURCE


78 
	#_FORTIFY_SOURCE
 3

	)

81 
	~<°rög.h
>

82 
	~<f˙é.h
>

83 #ifde‡
HAVE_SYS_TIME_H


84 
	~<sys/time.h
>

86 #ifde‡
HAVE_STDINT_H


87 
	~<°döt.h
>

89 
	~<°dlib.h
>

90 
	~<°rög.h
>

91 
	~<î∫o.h
>

92 
	~<as£π.h
>

93 #ifde‡
HAVE_UNISTD_H


94 
	~<uni°d.h
>

96 
	~<limôs.h
>

97 
	~<sys/°©.h
>

98 
	~<˘y≥.h
>

99 
	~<°dio.h
>

100 
	~<°d¨g.h
>

102 
	~"evdns.h
"

103 
	~"evutû.h
"

104 
	~"log.h
"

105 #ifde‡
WIN32


106 
	~<wösock2.h
>

107 
	~<wödows.h
>

108 
	~<ùhÕ≠i.h
>

109 
	~<io.h
>

111 
	~<sys/sockë.h
>

112 
	~<√töë/ö.h
>

113 
	~<¨∑/öë.h
>

116 #ifde‡
HAVE_NETINET_IN6_H


117 
	~<√töë/ö6.h
>

120 
	#EVDNS_LOG_DEBUG
 0

	)

121 
	#EVDNS_LOG_WARN
 1

	)

123 #i‚de‡
HOST_NAME_MAX


124 
	#HOST_NAME_MAX
 255

	)

127 
	~<°dio.h
>

129 #unde‡
MIN


130 
	#MIN
(
a
,
b
Ë(◊)<(b)?◊):(b))

	)

132 #ifde‡
__USE_ISOC99B


134 
ev_uöt8_t
 
	tu_ch¨
;

135 
	tuöt
;

137 
	~<evít.h
>

139 
	#u64
 
ev_uöt64_t


	)

140 
	#u32
 
ev_uöt32_t


	)

141 
	#u16
 
ev_uöt16_t


	)

142 
	#u8
 
ev_uöt8_t


	)

144 #ifde‡
WIN32


145 
	#›í
 
_›í


	)

146 
	#ªad
 
_ªad


	)

147 
	#˛o£
 
_˛o£


	)

148 
	#°rdup
 
_°rdup


	)

151 
	#MAX_ADDRS
 32

	)

154 
	#TYPE_A
 
EVDNS_TYPE_A


	)

155 
	#TYPE_CNAME
 5

	)

156 
	#TYPE_PTR
 
EVDNS_TYPE_PTR


	)

157 
	#TYPE_AAAA
 
EVDNS_TYPE_AAAA


	)

159 
	#CLASS_INET
 
EVDNS_CLASS_INET


	)

161 
	sªque°
 {

162 
u8
 *
	mªque°
;

163 
	mªque°_Àn
;

164 
	mªissue_cou¡
;

165 
	mtx_cou¡
;

166 
	mªque°_ty≥
;

167 *
	mu£r_poöãr
;

168 
evdns_ˇŒback_ty≥
 
	mu£r_ˇŒback
;

169 
«me£rvî
 *
	mns
;

172 
	m£¨ch_ödex
;

173 
£¨ch_°©e
 *
	m£¨ch_°©e
;

174 *
	m£¨ch_‹ig«me
;

175 
	m£¨ch_Êags
;

178 
ªque°
 *
	m√xt
, *
	m¥ev
;

180 
evít
 
	mtimeout_evít
;

182 
u16
 
	må™s_id
;

183 
	mªque°_≠≥nded
;

184 
	må™smô_me
;

187 #i‚de‡
HAVE_STRUCT_IN6_ADDR


188 
	sö6_addr
 {

189 
u8
 
	ms6_addr
[16];

193 
	sª∂y
 {

194 
	mty≥
;

195 
	mhave_™swî
;

198 
u32
 
	maddrcou¡
;

199 
u32
 
	maddªs£s
[
MAX_ADDRS
];

200 } 
	ma
;

202 
u32
 
	maddrcou¡
;

203 
ö6_addr
 
	maddªs£s
[
MAX_ADDRS
];

204 } 
	mØØ
;

206 
	m«me
[
HOST_NAME_MAX
];

207 } 
	m±r
;

208 } 
	md©a
;

211 
	s«me£rvî
 {

212 
	msockë
;

213 
u32
 
	maddªss
;

214 
u16
 
	mp‹t
;

215 
	mÁûed_times
;

216 
	mtimedout
;

217 
evít
 
	mevít
;

219 
«me£rvî
 *
	m√xt
, *
	m¥ev
;

220 
evít
 
	mtimeout_evít
;

223 
	m°©e
;

224 
	mchoked
;

225 
	mwrôe_waôög
;

228 
ªque°
 *
	gªq_hód
 = 
NULL
, *
	gªq_waôög_hód
 = NULL;

229 
«me£rvî
 *
	g£rvî_hód
 = 
NULL
;

233 
	sevdns_£rvî_p‹t
 {

234 
	msockë
;

235 
	mªf˙t
;

236 
	mchoked
;

237 
	m˛osög
;

238 
evdns_ªque°_ˇŒback_‚_ty≥
 
	mu£r_ˇŒback
;

239 *
	mu£r_d©a
;

240 
evít
 
	mevít
;

242 
£rvî_ªque°
 *
	m≥ndög_ª∂õs
;

246 
	s£rvî_ª∂y_ôem
 {

247 
£rvî_ª∂y_ôem
 *
	m√xt
;

248 *
	m«me
;

249 
u16
 
	mty≥
 : 16;

250 
u16
 
	m˛ass
 : 16;

251 
u32
 
	mâl
;

252 
	mis_«me
;

253 
u16
 
	md©Æí
;

254 *
	md©a
;

259 
	s£rvî_ªque°
 {

263 
£rvî_ªque°
 *
	m√xt_≥ndög
;

264 
£rvî_ªque°
 *
	m¥ev_≥ndög
;

266 
u16
 
	må™s_id
;

267 
evdns_£rvî_p‹t
 *
	mp‹t
;

268 
sockaddr_°‹age
 
	maddr
;

269 
sockÀn_t
 
	maddæí
;

271 
	mn_™swî
;

272 
	mn_auth‹ôy
;

273 
	mn_addôi⁄Æ
;

275 
£rvî_ª∂y_ôem
 *
	m™swî
;

276 
£rvî_ª∂y_ôem
 *
	mauth‹ôy
;

277 
£rvî_ª∂y_ôem
 *
	maddôi⁄Æ
;

281 *
	mª•⁄£
;

282 
size_t
 
	mª•⁄£_Àn
;

285 
evdns_£rvî_ªque°
 
	mba£
;

289 
	#OFFSET_OF
(
°
, 
membî
Ë((
off_t
Ë(((*)&((°*)0)->membî)-(*)0))

	)

293 
	#TO_SERVER_REQUEST
(
ba£_±r
) \

294 ((
£rvî_ªque°
*) \

295 (((*)(
ba£_±r
Ë- 
	`OFFSET_OF
(
£rvî_ªque°
, 
ba£
))))

	)

298 
	gglobÆ_good_«me£rvîs
 = 0;

302 
	gglobÆ_ªque°s_öÊight
 = 0;

305 
	gglobÆ_ªque°s_waôög
 = 0;

307 
	gglobÆ_max_ªque°s_öÊight
 = 64;

309 
timevÆ
 
	gglobÆ_timeout
 = {5, 0};

310 
	gglobÆ_max_ªissues
 = 1;

311 
	gglobÆ_max_ªå™smôs
 = 3;

313 
	gglobÆ_max_«me£rvî_timeout
 = 3;

317 c⁄° 
timevÆ
 
	gglobÆ_«me£rvî_timeouts
[] = {{10, 0}, {60, 0}, {300, 0}, {900, 0}, {3600, 0}};

318 c⁄° 
	gglobÆ_«me£rvî_timeouts_Àngth
 = (
globÆ_«me£rvî_timeouts
)/(
timevÆ
);

320 
«me£rvî
 *
«me£rvî_pick
();

321 
evdns_ªque°_ö£π
(
ªque°
 *
ªq
, ªque° **
hód
);

322 
«me£rvî_ªady_ˇŒback
(
fd
, 
evíts
, *
¨g
);

323 
evdns_å™smô
();

324 
evdns_ªque°_å™smô
(
ªque°
 *
ªq
);

325 
«me£rvî_£nd_¥obe
(
«me£rvî
 *c⁄° 
ns
);

326 
£¨ch_ªque°_föished
(
ªque°
 *const);

327 
£¨ch_åy_√xt
(
ªque°
 *c⁄° 
ªq
);

328 
£¨ch_ªque°_√w
(
ty≥
, c⁄° *c⁄° 
«me
, 
Êags
, 
evdns_ˇŒback_ty≥
 
u£r_ˇŒback
, *
u£r_¨g
);

329 
evdns_ªque°s_pump_waôög_queue
();

330 
u16
 
å™ß˘i⁄_id_pick
();

331 
ªque°
 *
ªque°_√w
(
ty≥
, c⁄° *
«me
, 
Êags
, 
evdns_ˇŒback_ty≥
 
ˇŒback
, *
±r
);

332 
ªque°_submô
(
ªque°
 *c⁄° 
ªq
);

334 
£rvî_ªque°_‰ì
(
£rvî_ªque°
 *
ªq
);

335 
£rvî_ªque°_‰ì_™swîs
(
£rvî_ªque°
 *
ªq
);

336 
£rvî_p‹t_‰ì
(
evdns_£rvî_p‹t
 *
p‹t
);

337 
£rvî_p‹t_ªady_ˇŒback
(
fd
, 
evíts
, *
¨g
);

339 
°πoöt
(c⁄° *c⁄° 
°r
);

341 #ifde‡
WIN32


343 
	$œ°_îr‹
(
sock
)

345 
›tvÆ
, 
›tvÆÀn
=(optval);

346 
îr
 = 
	`WSAGëLa°Eº‹
();

347 i‡(
îr
 =
WSAEWOULDBLOCK
 && 
sock
 >= 0) {

348 i‡(
	`gësock›t
(
sock
, 
SOL_SOCKET
, 
SO_ERROR
, (*)&
›tvÆ
,

349 &
›tvÆÀn
))

350  
îr
;

351 i‡(
›tvÆ
)

352  
›tvÆ
;

354  
îr
;

356 
	}
}

358 
	$îr‹_is_ógaö
(
îr
)

360  
îr
 =
EAGAIN
 ||Éº =
WSAEWOULDBLOCK
;

361 
	}
}

363 
	$öë_©⁄
(c⁄° *
c
, 
ö_addr
 *
addr
)

365 
ev_uöt32_t
 
r
;

366 i‡(
	`°rcmp
(
c
, "255.255.255.255") == 0) {

367 
addr
->
s_addr
 = 0xffffffffu;

369 
r
 = 
	`öë_addr
(
c
);

370 i‡(
r
 =
INADDR_NONE
)

372 
addr
->
s_addr
 = 
r
;

375 
	}
}

377 
	#œ°_îr‹
(
sock
Ë(
î∫o
)

	)

378 
	#îr‹_is_ógaö
(
îr
Ë(”ºË=
EAGAIN
)

	)

380 
	#CLOSE_SOCKET
(
s
Ë
	`EVUTIL_CLOSESOCKET
(s)

	)

382 
	#ISSPACE
(
c
Ë
	`is•a˚
(()()(c))

	)

383 
	#ISDIGIT
(
c
Ë
	`isdigô
(()()(c))

	)

386 
	$debug_¡ﬂ
(
u32
 
addªss
)

388 
buf
[32];

389 
u32
 
a
 = 
	`¡ohl
(
addªss
);

390 
	`evutû_¢¥ötf
(
buf
, (buf), "%d.%d.%d.%d",

391 ()(
u8
)((
a
>>24)&0xff),

392 ()(
u8
)((
a
>>16)&0xff),

393 ()(
u8
)((
a
>>8 )&0xff),

394 ()(
u8
)((
a
 )&0xff));

395  
buf
;

396 
	}
}

398 
evdns_debug_log_‚_ty≥
 
	gevdns_log_‚
 = 
NULL
;

401 
	$evdns_£t_log_‚
(
evdns_debug_log_‚_ty≥
 
‚
)

403 
evdns_log_‚
 = 
‚
;

404 
	}
}

406 #ifde‡
__GNUC__


407 
	#EVDNS_LOG_CHECK
 
	`__©åibuã__
 ((
	`f‹m©
(
¥ötf
, 2, 3)))

	)

409 
	#EVDNS_LOG_CHECK


	)

412 
	$_evdns_log
(
w¨n
, c⁄° *
fmt
, ...Ë
EVDNS_LOG_CHECK
;

414 
	$_evdns_log
(
w¨n
, c⁄° *
fmt
, ...)

416 
va_li°
 
¨gs
;

417 
buf
[512];

418 i‡(!
evdns_log_‚
)

420 
	`va_°¨t
(
¨gs
,
fmt
);

421 
	`evutû_v¢¥ötf
(
buf
, (buf), 
fmt
, 
¨gs
);

422 
buf
[(buf)-1] = '\0';

423 
	`evdns_log_‚
(
w¨n
, 
buf
);

424 
	`va_íd
(
¨gs
);

425 
	}
}

427 
	#log
 
_evdns_log


	)

432 
ªque°
 *

433 
	$ªque°_föd_‰om_å™s_id
(
u16
 
å™s_id
) {

434 
ªque°
 *
ªq
 = 
ªq_hód
, *c⁄° 
°¨ãd_©
 =Ñeq_head;

436 i‡(
ªq
) {

438 i‡(
ªq
->
å™s_id
 ==Årans_id) Ñeq;

439 
ªq
 =Ñeq->
√xt
;

440 } 
ªq
 !
°¨ãd_©
);

443  
NULL
;

444 
	}
}

449 
	$«me£rvî_¥od_ˇŒback
(
fd
, 
evíts
, *
¨g
) {

450 
«me£rvî
 *c⁄° 
ns
 = («me£rvî *Ë
¨g
;

451 ()
fd
;

452 ()
evíts
;

454 
	`«me£rvî_£nd_¥obe
(
ns
);

455 
	}
}

461 
	$«me£rvî_¥obe_Áûed
(
«me£rvî
 *c⁄° 
ns
) {

462 c⁄° 
timevÆ
 * 
timeout
;

463 (Ë
	`evtimî_dñ
(&
ns
->
timeout_evít
);

464 i‡(
ns
->
°©e
 == 1) {

470 
timeout
 =

471 &
globÆ_«me£rvî_timeouts
[
	`MIN
(
ns
->
Áûed_times
,

472 
globÆ_«me£rvî_timeouts_Àngth
 - 1)];

473 
ns
->
Áûed_times
++;

475 i‡(
	`evtimî_add
(&
ns
->
timeout_evít
, (
timevÆ
 *Ë
timeout
) < 0) {

476 
	`log
(
EVDNS_LOG_WARN
,

478 
	`debug_¡ﬂ
(
ns
->
addªss
));

481 
	}
}

486 
	$«me£rvî_Áûed
(
«me£rvî
 *c⁄° 
ns
, c⁄° *
msg
) {

487 
ªque°
 *
ªq
, *
°¨ãd_©
;

490 i‡(!
ns
->
°©e
) ;

492 
	`log
(
EVDNS_LOG_WARN
, "Nameserver %s has failed: %s",

493 
	`debug_¡ﬂ
(
ns
->
addªss
), 
msg
);

494 
globÆ_good_«me£rvîs
--;

495 
	`as£π
(
globÆ_good_«me£rvîs
 >= 0);

496 i‡(
globÆ_good_«me£rvîs
 == 0) {

497 
	`log
(
EVDNS_LOG_WARN
, "AllÇameservers have failed");

500 
ns
->
°©e
 = 0;

501 
ns
->
Áûed_times
 = 1;

503 i‡(
	`evtimî_add
(&
ns
->
timeout_evít
, (
timevÆ
 *Ë&
globÆ_«me£rvî_timeouts
[0]) < 0) {

504 
	`log
(
EVDNS_LOG_WARN
,

506 
	`debug_¡ﬂ
(
ns
->
addªss
));

516 i‡(!
globÆ_good_«me£rvîs
) ;

518 
ªq
 = 
ªq_hód
;

519 
°¨ãd_©
 = 
ªq_hód
;

520 i‡(
ªq
) {

522 i‡(
ªq
->
tx_cou¡
 =0 &&Ñeq->
ns
 ==Çs) {

525 
ªq
->
ns
 = 
	`«me£rvî_pick
();

527 
ªq
 =Ñeq->
√xt
;

528 } 
ªq
 !
°¨ãd_©
);

530 
	}
}

533 
	$«me£rvî_up
(
«me£rvî
 *c⁄° 
ns
) {

534 i‡(
ns
->
°©e
) ;

535 
	`log
(
EVDNS_LOG_WARN
, "Nameserver %s is back up",

536 
	`debug_¡ﬂ
(
ns
->
addªss
));

537 
	`evtimî_dñ
(&
ns
->
timeout_evít
);

538 
ns
->
°©e
 = 1;

539 
ns
->
Áûed_times
 = 0;

540 
ns
->
timedout
 = 0;

541 
globÆ_good_«me£rvîs
++;

542 
	}
}

545 
	$ªque°_å™s_id_£t
(
ªque°
 *c⁄° 
ªq
, c⁄° 
u16
 
å™s_id
) {

546 
ªq
->
å™s_id
 =Årans_id;

547 *((
u16
 *Ë
ªq
->
ªque°
Ë
	`ht⁄s
(
å™s_id
);

548 
	}
}

554 
	$ªque°_föished
(
ªque°
 *c⁄° 
ªq
, ªque° **
hód
) {

555 i‡(
hód
) {

556 i‡(
ªq
->
√xt
 ==Ñeq) {

558 *
hód
 = 
NULL
;

560 
ªq
->
√xt
->
¥ev
 =Ñeq->prev;

561 
ªq
->
¥ev
->
√xt
 =Ñeq->next;

562 i‡(*
hód
 =
ªq
Ë*hód =Ñeq->
√xt
;

566 
	`log
(
EVDNS_LOG_DEBUG
, "RemovingÅimeout forÑequest %lx",

567 (Ë
ªq
);

568 
	`evtimî_dñ
(&
ªq
->
timeout_evít
);

570 
	`£¨ch_ªque°_föished
(
ªq
);

571 
globÆ_ªque°s_öÊight
--;

573 i‡(!
ªq
->
ªque°_≠≥nded
) {

575 
	`‰ì
(
ªq
->
ªque°
);

581 
	`‰ì
(
ªq
);

583 
	`evdns_ªque°s_pump_waôög_queue
();

584 
	}
}

593 
	$ªque°_ªissue
(
ªque°
 *
ªq
) {

594 c⁄° 
«me£rvî
 *c⁄° 
œ°_ns
 = 
ªq
->
ns
;

598 
ªq
->
ns
 = 
	`«me£rvî_pick
();

599 i‡(
ªq
->
ns
 =
œ°_ns
) {

606 
ªq
->
ªissue_cou¡
++;

607 
ªq
->
tx_cou¡
 = 0;

608 
ªq
->
å™smô_me
 = 1;

611 
	}
}

616 
	$evdns_ªque°s_pump_waôög_queue
() {

617 
globÆ_ªque°s_öÊight
 < 
globÆ_max_ªque°s_öÊight
 &&

618 
globÆ_ªque°s_waôög
) {

619 
ªque°
 *
ªq
;

621 
	`as£π
(
ªq_waôög_hód
);

622 i‡(
ªq_waôög_hód
->
√xt
 ==Ñeq_waiting_head) {

624 
ªq
 = 
ªq_waôög_hód
;

625 
ªq_waôög_hód
 = 
NULL
;

627 
ªq
 = 
ªq_waôög_hód
;

628 
ªq
->
√xt
->
¥ev
 =Ñeq->prev;

629 
ªq
->
¥ev
->
√xt
 =Ñeq->next;

630 
ªq_waôög_hód
 = 
ªq
->
√xt
;

633 
globÆ_ªque°s_waôög
--;

634 
globÆ_ªque°s_öÊight
++;

636 
ªq
->
ns
 = 
	`«me£rvî_pick
();

637 
	`ªque°_å™s_id_£t
(
ªq
, 
	`å™ß˘i⁄_id_pick
());

639 
	`evdns_ªque°_ö£π
(
ªq
, &
ªq_hód
);

640 
	`evdns_ªque°_å™smô
(
ªq
);

641 
	`evdns_å™smô
();

643 
	}
}

646 
	$ª∂y_ˇŒback
(
ªque°
 *c⁄° 
ªq
, 
u32
 
âl
, u32 
îr
, 
ª∂y
 *reply) {

647 
ªq
->
ªque°_ty≥
) {

648 
TYPE_A
:

649 i‡(
ª∂y
)

650 
ªq
->
	`u£r_ˇŒback
(
DNS_ERR_NONE
, 
DNS_IPv4_A
,

651 
ª∂y
->
d©a
.
a
.
addrcou¡
, 
âl
,

652 
ª∂y
->
d©a
.
a
.
addªs£s
,

653 
ªq
->
u£r_poöãr
);

655 
ªq
->
	`u£r_ˇŒback
(
îr
, 0, 0, 0, 
NULL
,Ñeq->
u£r_poöãr
);

657 
TYPE_PTR
:

658 i‡(
ª∂y
) {

659 *
«me
 = 
ª∂y
->
d©a
.
±r
.name;

660 
ªq
->
	`u£r_ˇŒback
(
DNS_ERR_NONE
, 
DNS_PTR
, 1, 
âl
,

661 &
«me
, 
ªq
->
u£r_poöãr
);

663 
ªq
->
	`u£r_ˇŒback
(
îr
, 0, 0, 0, 
NULL
,

664 
ªq
->
u£r_poöãr
);

667 
TYPE_AAAA
:

668 i‡(
ª∂y
)

669 
ªq
->
	`u£r_ˇŒback
(
DNS_ERR_NONE
, 
DNS_IPv6_AAAA
,

670 
ª∂y
->
d©a
.
ØØ
.
addrcou¡
, 
âl
,

671 
ª∂y
->
d©a
.
ØØ
.
addªs£s
,

672 
ªq
->
u£r_poöãr
);

674 
ªq
->
	`u£r_ˇŒback
(
îr
, 0, 0, 0, 
NULL
,Ñeq->
u£r_poöãr
);

677 
	`as£π
(0);

678 
	}
}

682 
	$ª∂y_h™dÀ
(
ªque°
 *c⁄° 
ªq
, 
u16
 
Êags
, 
u32
 
âl
, 
ª∂y
 *reply) {

683 
îr‹
;

684 c⁄° 
îr‹_codes
[] = {

685 
DNS_ERR_FORMAT
, 
DNS_ERR_SERVERFAILED
, 
DNS_ERR_NOTEXIST
,

686 
DNS_ERR_NOTIMPL
, 
DNS_ERR_REFUSED


689 i‡(
Êags
 & 0x020‡|| !
ª∂y
 || !ª∂y->
have_™swî
) {

691 i‡(
Êags
 & 0x0200) {

692 
îr‹
 = 
DNS_ERR_TRUNCATED
;

694 
u16
 
îr‹_code
 = (
Êags
 & 0x000f) - 1;

695 i‡(
îr‹_code
 > 4) {

696 
îr‹
 = 
DNS_ERR_UNKNOWN
;

698 
îr‹
 = 
îr‹_codes
[
îr‹_code
];

702 
îr‹
) {

703 
DNS_ERR_NOTIMPL
:

704 
DNS_ERR_REFUSED
:

706 i‡(
ªq
->
ªissue_cou¡
 < 
globÆ_max_ªissues
) {

707 
msg
[64];

708 
	`evutû_¢¥ötf
(
msg
, (msg),

710 
îr‹
, 
	`evdns_îr_to_°rög
(error));

711 
	`«me£rvî_Áûed
(
ªq
->
ns
, 
msg
);

712 i‡(!
	`ªque°_ªissue
(
ªq
)) ;

715 
DNS_ERR_SERVERFAILED
:

721 
	`log
(
EVDNS_LOG_DEBUG
, "Gotá SERVERFAILED fromÇameserver %s; "

723 
	`debug_¡ﬂ
(
ªq
->
ns
->
addªss
));

727 
	`«me£rvî_up
(
ªq
->
ns
);

730 i‡(
ªq
->
£¨ch_°©e
 &&Ñeq->
ªque°_ty≥
 !
TYPE_PTR
) {

733 i‡(!
	`£¨ch_åy_√xt
(
ªq
)) {

739 
	`ªque°_föished
(
ªq
, &
ªq_hód
);

745 
	`ª∂y_ˇŒback
(
ªq
, 0, 
îr‹
, 
NULL
);

746 
	`ªque°_föished
(
ªq
, &
ªq_hód
);

749 
	`ª∂y_ˇŒback
(
ªq
, 
âl
, 0, 
ª∂y
);

750 
	`«me£rvî_up
(
ªq
->
ns
);

751 
	`ªque°_föished
(
ªq
, &
ªq_hód
);

753 
	}
}

756 
	$«me_∑r£
(
u8
 *
∑ckë
, 
Àngth
, *
idx
, *
«me_out
, 
«me_out_Àn
) {

757 
«me_íd
 = -1;

758 
j
 = *
idx
;

759 
±r_cou¡
 = 0;

760 
	#GET32
(
x
Ëdÿ{ i‡(
j
 + 4 > 
Àngth
Ë
îr
; 
	`mem˝y
(&
_t32
, 
∑ckë
 + j, 4); j +4; x = 
	`¡ohl
(_t32); } 0)

	)

761 
	#GET16
(
x
Ëdÿ{ i‡(
j
 + 2 > 
Àngth
Ë
îr
; 
	`mem˝y
(&
_t
, 
∑ckë
 + j, 2); j +2; x = 
	`¡ohs
(_t); } 0)

	)

762 
	#GET8
(
x
Ëdÿ{ i‡(
j
 >
Àngth
Ë
îr
; x = 
∑ckë
[j++]; } 0)

	)

764 *
˝
 = 
«me_out
;

765 c⁄° *c⁄° 
íd
 = 
«me_out
 + 
«me_out_Àn
;

774 
u8
 
œbñ_Àn
;

775 i‡(
j
 >
Àngth
)  -1;

776 
	`GET8
(
œbñ_Àn
);

777 i‡(!
œbñ_Àn
) ;

778 i‡(
œbñ_Àn
 & 0xc0) {

779 
u8
 
±r_low
;

780 
	`GET8
(
±r_low
);

781 i‡(
«me_íd
 < 0Ë«me_íd = 
j
;

782 
j
 = ((()
œbñ_Àn
 & 0x3fË<< 8Ë+ 
±r_low
;

784 i‡(
j
 < 0 || j >
Àngth
)  -1;

787 i‡(++
±r_cou¡
 > 
Àngth
)  -1;

790 i‡(
œbñ_Àn
 > 63)  -1;

791 i‡(
˝
 !
«me_out
) {

792 i‡(
˝
 + 1 >
íd
)  -1;

793 *
˝
++ = '.';

795 i‡(
˝
 + 
œbñ_Àn
 >
íd
)  -1;

796 
	`mem˝y
(
˝
, 
∑ckë
 + 
j
, 
œbñ_Àn
);

797 
˝
 +
œbñ_Àn
;

798 
j
 +
œbñ_Àn
;

800 i‡(
˝
 >
íd
)  -1;

801 *
˝
 = '\0';

802 i‡(
«me_íd
 < 0)

803 *
idx
 = 
j
;

805 *
idx
 = 
«me_íd
;

807 
îr
:

809 
	}
}

813 
	$ª∂y_∑r£
(
u8
 *
∑ckë
, 
Àngth
) {

814 
j
 = 0, 
k
 = 0;

815 
u16
 
_t
;

816 
u32
 
_t32
;

817 
tmp_«me
[256], 
cmp_«me
[256];

819 
u16
 
å™s_id
, 
que°i⁄s
, 
™swîs
, 
auth‹ôy
, 
addôi⁄Æ
, 
d©Æígth
;

820 
u16
 
Êags
 = 0;

821 
u32
 
âl
, 
âl_r
 = 0xffffffff;

822 
ª∂y
Ñeply;

823 
ªque°
 *
ªq
 = 
NULL
;

824 
i
;

826 
	`GET16
(
å™s_id
);

827 
	`GET16
(
Êags
);

828 
	`GET16
(
que°i⁄s
);

829 
	`GET16
(
™swîs
);

830 
	`GET16
(
auth‹ôy
);

831 
	`GET16
(
addôi⁄Æ
);

832 (Ë
auth‹ôy
;

833 (Ë
addôi⁄Æ
;

835 
ªq
 = 
	`ªque°_föd_‰om_å™s_id
(
å™s_id
);

836 i‡(!
ªq
)  -1;

838 
	`mem£t
(&
ª∂y
, 0, (reply));

841 i‡(!(
Êags
 & 0x8000))  -1;

842 i‡(
Êags
 & 0x020f) {

844 
îr
;

849 
	#SKIP_NAME
 \

850 dÿ{ 
tmp_«me
[0] = '\0'; \

851 i‡(
	`«me_∑r£
(
∑ckë
, 
Àngth
, &
j
, 
tmp_«me
, (tmp_name))<0)\

852 
îr
; \

853 } 0)

	)

854 
	#TEST_NAME
 \

855 dÿ{ 
tmp_«me
[0] = '\0'; \

856 
cmp_«me
[0] = '\0'; \

857 
k
 = 
j
; \

858 i‡(
	`«me_∑r£
(
∑ckë
, 
Àngth
, &
j
, 
tmp_«me
, (tmp_name))<0)\

859 
îr
; \

860 i‡(
	`«me_∑r£
(
ªq
->
ªque°
,Ñeq->
ªque°_Àn
, &
k
, 
cmp_«me
, (cmp_name))<0) \

861 
îr
; \

862 i‡(
	`memcmp
(
tmp_«me
, 
cmp_«me
, 
	`°æí
 (tmp_name)) != 0) \

864 } 0)

	)

866 
ª∂y
.
ty≥
 = 
ªq
->
ªque°_ty≥
;

869 
i
 = 0; i < 
que°i⁄s
; ++i) {

873 
TEST_NAME
;

874 
j
 += 4;

875 i‡(
j
 > 
Àngth
Ë
îr
;

882 
i
 = 0; i < 
™swîs
; ++i) {

883 
u16
 
ty≥
, 
˛ass
;

885 
SKIP_NAME
;

886 
	`GET16
(
ty≥
);

887 
	`GET16
(
˛ass
);

888 
	`GET32
(
âl
);

889 
	`GET16
(
d©Æígth
);

891 i‡(
ty≥
 =
TYPE_A
 && 
˛ass
 =
CLASS_INET
) {

892 
addrcou¡
, 
addπoc›y
;

893 i‡(
ªq
->
ªque°_ty≥
 !
TYPE_A
) {

894 
j
 +
d©Æígth
; ;

896 i‡((
d©Æígth
 & 3) != 0)

897 
îr
;

898 
addrcou¡
 = 
d©Æígth
 >> 2;

899 
addπoc›y
 = 
	`MIN
(
MAX_ADDRS
 - 
ª∂y
.
d©a
.
a
.
addrcou¡
, ()addrcount);

901 
âl_r
 = 
	`MIN
—é_r, 
âl
);

903 i‡(
j
 + 4*
addπoc›y
 > 
Àngth
Ë
îr
;

904 
	`mem˝y
(&
ª∂y
.
d©a
.
a
.
addªs£s
[ª∂y.d©a.a.
addrcou¡
],

905 
∑ckë
 + 
j
, 4*
addπoc›y
);

906 
j
 +4*
addπoc›y
;

907 
ª∂y
.
d©a
.
a
.
addrcou¡
 +
addπoc›y
;

908 
ª∂y
.
have_™swî
 = 1;

909 i‡(
ª∂y
.
d©a
.
a
.
addrcou¡
 =
MAX_ADDRS
) ;

910 } i‡(
ty≥
 =
TYPE_PTR
 && 
˛ass
 =
CLASS_INET
) {

911 i‡(
ªq
->
ªque°_ty≥
 !
TYPE_PTR
) {

912 
j
 +
d©Æígth
; ;

914 i‡(
	`«me_∑r£
(
∑ckë
, 
Àngth
, &
j
, 
ª∂y
.
d©a
.
±r
.
«me
,

915 (
ª∂y
.
d©a
.
±r
.
«me
))<0)

916 
îr
;

917 
âl_r
 = 
	`MIN
—é_r, 
âl
);

918 
ª∂y
.
have_™swî
 = 1;

920 } i‡(
ty≥
 =
TYPE_AAAA
 && 
˛ass
 =
CLASS_INET
) {

921 
addrcou¡
, 
addπoc›y
;

922 i‡(
ªq
->
ªque°_ty≥
 !
TYPE_AAAA
) {

923 
j
 +
d©Æígth
; ;

925 i‡((
d©Æígth
 & 15) != 0)

926 
îr
;

927 
addrcou¡
 = 
d©Æígth
 >> 4;

928 
addπoc›y
 = 
	`MIN
(
MAX_ADDRS
 - 
ª∂y
.
d©a
.
ØØ
.
addrcou¡
, ()addrcount);

929 
âl_r
 = 
	`MIN
—é_r, 
âl
);

932 i‡(
j
 + 16*
addπoc›y
 > 
Àngth
Ë
îr
;

933 
	`mem˝y
(&
ª∂y
.
d©a
.
ØØ
.
addªs£s
[ª∂y.d©a.ØØ.
addrcou¡
],

934 
∑ckë
 + 
j
, 16*
addπoc›y
);

935 
ª∂y
.
d©a
.
ØØ
.
addrcou¡
 +
addπoc›y
;

936 
j
 +16*
addπoc›y
;

937 
ª∂y
.
have_™swî
 = 1;

938 i‡(
ª∂y
.
d©a
.
ØØ
.
addrcou¡
 =
MAX_ADDRS
) ;

941 
j
 +
d©Æígth
;

945 
	`ª∂y_h™dÀ
(
ªq
, 
Êags
, 
âl_r
, &
ª∂y
);

947 
îr
:

948 i‡(
ªq
)

949 
	`ª∂y_h™dÀ
(
ªq
, 
Êags
, 0, 
NULL
);

951 
	}
}

957 
	$ªque°_∑r£
(
u8
 *
∑ckë
, 
Àngth
, 
evdns_£rvî_p‹t
 *
p‹t
, 
sockaddr
 *
addr
, 
sockÀn_t
 
addæí
)

959 
j
 = 0;

960 
u16
 
_t
;

961 
tmp_«me
[256];

963 
i
;

964 
u16
 
å™s_id
, 
Êags
, 
que°i⁄s
, 
™swîs
, 
auth‹ôy
, 
addôi⁄Æ
;

965 
£rvî_ªque°
 *
£rvî_ªq
 = 
NULL
;

968 
	`GET16
(
å™s_id
);

969 
	`GET16
(
Êags
);

970 
	`GET16
(
que°i⁄s
);

971 
	`GET16
(
™swîs
);

972 
	`GET16
(
auth‹ôy
);

973 
	`GET16
(
addôi⁄Æ
);

975 i‡(
Êags
 & 0x8000)  -1;

976 
Êags
 &= 0x0110;

978 
£rvî_ªq
 = 
	`mÆloc
((
£rvî_ªque°
));

979 i‡(
£rvî_ªq
 =
NULL
)  -1;

980 
	`mem£t
(
£rvî_ªq
, 0, (
£rvî_ªque°
));

982 
£rvî_ªq
->
å™s_id
 =Årans_id;

983 
	`mem˝y
(&
£rvî_ªq
->
addr
,áddr, 
addæí
);

984 
£rvî_ªq
->
addæí
 =áddrlen;

986 
£rvî_ªq
->
ba£
.
Êags
 = flags;

987 
£rvî_ªq
->
ba£
.
nque°i⁄s
 = 0;

988 
£rvî_ªq
->
ba£
.
que°i⁄s
 = 
	`mÆloc
((
evdns_£rvî_que°i⁄
 *) * questions);

989 i‡(
£rvî_ªq
->
ba£
.
que°i⁄s
 =
NULL
)

990 
îr
;

992 
i
 = 0; i < 
que°i⁄s
; ++i) {

993 
u16
 
ty≥
, 
˛ass
;

994 
evdns_£rvî_que°i⁄
 *
q
;

995 
«mñí
;

996 i‡(
	`«me_∑r£
(
∑ckë
, 
Àngth
, &
j
, 
tmp_«me
, (tmp_name))<0)

997 
îr
;

998 
	`GET16
(
ty≥
);

999 
	`GET16
(
˛ass
);

1000 
«mñí
 = 
	`°æí
(
tmp_«me
);

1001 
q
 = 
	`mÆloc
((
evdns_£rvî_que°i⁄
Ë+ 
«mñí
);

1002 i‡(!
q
)

1003 
îr
;

1004 
q
->
ty≥
 =Åype;

1005 
q
->
dns_que°i⁄_˛ass
 = 
˛ass
;

1006 
	`mem˝y
(
q
->
«me
, 
tmp_«me
, 
«mñí
+1);

1007 
£rvî_ªq
->
ba£
.
que°i⁄s
[£rvî_ªq->ba£.
nque°i⁄s
++] = 
q
;

1012 
£rvî_ªq
->
p‹t
 =Öort;

1013 
p‹t
->
ªf˙t
++;

1016 i‡(
Êags
 & 0x7800) {

1017 
	`evdns_£rvî_ªque°_ª•⁄d
(&(
£rvî_ªq
->
ba£
), 
DNS_ERR_NOTIMPL
);

1021 
p‹t
->
	`u£r_ˇŒback
(&(
£rvî_ªq
->
ba£
),Ö‹t->
u£r_d©a
);

1024 
îr
:

1025 i‡(
£rvî_ªq
) {

1026 i‡(
£rvî_ªq
->
ba£
.
que°i⁄s
) {

1027 
i
 = 0; i < 
£rvî_ªq
->
ba£
.
nque°i⁄s
; ++i)

1028 
	`‰ì
(
£rvî_ªq
->
ba£
.
que°i⁄s
[
i
]);

1029 
	`‰ì
(
£rvî_ªq
->
ba£
.
que°i⁄s
);

1031 
	`‰ì
(
£rvî_ªq
);

1035 #unde‡
SKIP_NAME


1036 #unde‡
GET32


1037 #unde‡
GET16


1038 #unde‡
GET8


1039 
	}
}

1041 
u16


1042 
	$deÁu…_å™ß˘i⁄_id_‚
()

1044 
u16
 
å™s_id
;

1045 #ifde‡
DNS_USE_CPU_CLOCK_FOR_ID


1046 
time•ec
 
ts
;

1047 
˛kid
 = -1;

1048 i‡(
˛kid
 == -1) {

1049 
˛kid
 = 
CLOCK_REALTIME
;

1050 #ifde‡
CLOCK_MONOTONIC


1051 i‡(
	`˛ock_gëtime
(
CLOCK_MONOTONIC
, &
ts
) != -1)

1052 
˛kid
 = 
CLOCK_MONOTONIC
;

1055 i‡(
	`˛ock_gëtime
(
˛kid
, &
ts
) == -1)

1056 
	`evít_îr
(1, "clock_gettime");

1057 
å™s_id
 = 
ts
.
tv_n£c
 & 0xffff;

1060 #ifde‡
DNS_USE_FTIME_FOR_ID


1061 
_timeb
 
tb
;

1062 
	`_·ime
(&
tb
);

1063 
å™s_id
 = 
tb
.
mûlôm
 & 0xffff;

1066 #ifde‡
DNS_USE_GETTIMEOFDAY_FOR_ID


1067 
timevÆ
 
tv
;

1068 
	`evutû_gëtimeofday
(&
tv
, 
NULL
);

1069 
å™s_id
 = 
tv
.
tv_u£c
 & 0xffff;

1072 #ifde‡
DNS_USE_OPENSSL_FOR_ID


1073 i‡(
	`RAND_p£udo_byãs
((
u8
 *Ë&
å™s_id
, 2) == -1) {

1081 
	`ab‹t
();

1084  
å™s_id
;

1085 
	}
}

1087 
	$ev_uöt16_t
 (*
å™s_id_fun˘i⁄
)(Ë
deÁu…_å™ß˘i⁄_id_‚
;

1090 
	`evdns_£t_å™ß˘i⁄_id_‚
(
	$ev_uöt16_t
 (*
‚
)())

1092 i‡(
‚
)

1093 
å™s_id_fun˘i⁄
 = 
‚
;

1095 
å™s_id_fun˘i⁄
 = 
deÁu…_å™ß˘i⁄_id_‚
;

1096 
	}
}

1099 
u16


1100 
	$å™ß˘i⁄_id_pick
() {

1102 c⁄° 
ªque°
 *
ªq
 = 
ªq_hód
, *
°¨ãd_©
;

1103 
u16
 
å™s_id
 = 
	`å™s_id_fun˘i⁄
();

1105 i‡(
å™s_id
 == 0xffff) ;

1107 
ªq
 = 
°¨ãd_©
 = 
ªq_hód
;

1108 i‡(
ªq
) {

1110 i‡(
ªq
->
å™s_id
 ==Årans_id) ;

1111 
ªq
 =Ñeq->
√xt
;

1112 } 
ªq
 !
°¨ãd_©
);

1115 i‡(
ªq
 =
°¨ãd_©
Ë 
å™s_id
;

1117 
	}
}

1122 
«me£rvî
 *

1123 
	$«me£rvî_pick
() {

1124 
«me£rvî
 *
°¨ãd_©
 = 
£rvî_hód
, *
picked
;

1125 i‡(!
£rvî_hód
Ë 
NULL
;

1129 i‡(!
globÆ_good_«me£rvîs
) {

1130 
£rvî_hód
 = sîvî_hód->
√xt
;

1131  
£rvî_hód
;

1136 i‡(
£rvî_hód
->
°©e
) {

1138 
picked
 = 
£rvî_hód
;

1139 
£rvî_hód
 = sîvî_hód->
√xt
;

1140  
picked
;

1143 
£rvî_hód
 = sîvî_hód->
√xt
;

1144 i‡(
£rvî_hód
 =
°¨ãd_©
) {

1148 
	`as£π
(
globÆ_good_«me£rvîs
 == 0);

1149 
picked
 = 
£rvî_hód
;

1150 
£rvî_hód
 = sîvî_hód->
√xt
;

1151  
picked
;

1154 
	}
}

1157 
	$addªss_is_c‹ª˘
(
«me£rvî
 *
ns
, 
sockaddr
 *
ß
, 
sockÀn_t
 
¶í
)

1159 
sockaddr_ö
 *
sö
 = (sockaddr_ö*Ë
ß
;

1160 i‡(
ß
->
ß_Ámûy
 !
AF_INET
 || 
¶í
 !(
sockaddr_ö
))

1162 i‡(
sö
->
sö_addr
.
s_addr
 !
ns
->
addªss
)

1165 
	}
}

1169 
	$«me£rvî_ªad
(
«me£rvî
 *
ns
) {

1170 
u8
 
∑ckë
[1500];

1171 
sockaddr_°‹age
 
ss
;

1172 
sockÀn_t
 
addæí
 = (
ss
);

1175 c⁄° 
r
 = 
	`ªcv‰om
(
ns
->
sockë
, 
∑ckë
, (packet), 0,

1176 (
sockaddr
*)&
ss
, &
addæí
);

1177 i‡(
r
 < 0) {

1178 
îr
 = 
	`œ°_îr‹
(
ns
->
sockë
);

1179 i‡(
	`îr‹_is_ógaö
(
îr
)) ;

1180 
	`«me£rvî_Áûed
(
ns
, 
	`°ªº‹
(
îr
));

1183 i‡(!
	`addªss_is_c‹ª˘
(
ns
, (
sockaddr
*)&
ss
, 
addæí
)) {

1184 
	`log
(
EVDNS_LOG_WARN
, "Address mismatch onÑeceived "

1188 
ns
->
timedout
 = 0;

1189 
	`ª∂y_∑r£
(
∑ckë
, 
r
);

1191 
	}
}

1196 
	$£rvî_p‹t_ªad
(
evdns_£rvî_p‹t
 *
s
) {

1197 
u8
 
∑ckë
[1500];

1198 
sockaddr_°‹age
 
addr
;

1199 
sockÀn_t
 
addæí
;

1200 
r
;

1203 
addæí
 = (
sockaddr_°‹age
);

1204 
r
 = 
	`ªcv‰om
(
s
->
sockë
, 
∑ckë
, (packet), 0,

1205 (
sockaddr
*Ë&
addr
, &
addæí
);

1206 i‡(
r
 < 0) {

1207 
îr
 = 
	`œ°_îr‹
(
s
->
sockë
);

1208 i‡(
	`îr‹_is_ógaö
(
îr
)) ;

1209 
	`log
(
EVDNS_LOG_WARN
, "Error %s (%d) whileÑeadingÑequest.",

1210 
	`°ªº‹
(
îr
),Érr);

1213 
	`ªque°_∑r£
(
∑ckë
, 
r
, 
s
, (
sockaddr
*Ë&
addr
, 
addæí
);

1215 
	}
}

1219 
	$£rvî_p‹t_Êush
(
evdns_£rvî_p‹t
 *
p‹t
)

1221 
p‹t
->
≥ndög_ª∂õs
) {

1222 
£rvî_ªque°
 *
ªq
 = 
p‹t
->
≥ndög_ª∂õs
;

1223 
r
 = 
	`£ndto
(
p‹t
->
sockë
, 
ªq
->
ª•⁄£
,Ñeq->
ª•⁄£_Àn
, 0,

1224 (
sockaddr
*Ë&
ªq
->
addr
,Ñeq->
addæí
);

1225 i‡(
r
 < 0) {

1226 
îr
 = 
	`œ°_îr‹
(
p‹t
->
sockë
);

1227 i‡(
	`îr‹_is_ógaö
(
îr
))

1229 
	`log
(
EVDNS_LOG_WARN
, "Eº‹ %†(%dËwhûêwrôögÑe•⁄£Åÿp‹t; dr›pög", 
	`°ªº‹
(
îr
),Érr);

1231 i‡(
	`£rvî_ªque°_‰ì
(
ªq
)) {

1238 (Ë
	`evít_dñ
(&
p‹t
->
evít
);

1239 
	`evít_£t
(&
p‹t
->
evít
,Ö‹t->
sockë
, 
EV_READ
 | 
EV_PERSIST
,

1240 
£rvî_p‹t_ªady_ˇŒback
, 
p‹t
);

1241 i‡(
	`evít_add
(&
p‹t
->
evít
, 
NULL
) < 0) {

1242 
	`log
(
EVDNS_LOG_WARN
, "Error fromÜibevent whenáddingÉvent for DNS server.");

1245 
	}
}

1251 
	$«me£rvî_wrôe_waôög
(
«me£rvî
 *
ns
, 
waôög
) {

1252 i‡(
ns
->
wrôe_waôög
 =
waôög
) ;

1254 
ns
->
wrôe_waôög
 = 
waôög
;

1255 (Ë
	`evít_dñ
(&
ns
->
evít
);

1256 
	`evít_£t
(&
ns
->
evít
,Çs->
sockë
, 
EV_READ
 | (
waôög
 ? 
EV_WRITE
 : 0Ë| 
EV_PERSIST
,

1257 
«me£rvî_ªady_ˇŒback
, 
ns
);

1258 i‡(
	`evít_add
(&
ns
->
evít
, 
NULL
) < 0) {

1259 
	`log
(
EVDNS_LOG_WARN
, "Error fromÜibevent whenáddingÉvent for %s",

1260 
	`debug_¡ﬂ
(
ns
->
addªss
));

1263 
	}
}

1268 
	$«me£rvî_ªady_ˇŒback
(
fd
, 
evíts
, *
¨g
) {

1269 
«me£rvî
 *
ns
 = («me£rvî *Ë
¨g
;

1270 ()
fd
;

1272 i‡(
evíts
 & 
EV_WRITE
) {

1273 
ns
->
choked
 = 0;

1274 i‡(!
	`evdns_å™smô
()) {

1275 
	`«me£rvî_wrôe_waôög
(
ns
, 0);

1278 i‡(
evíts
 & 
EV_READ
) {

1279 
	`«me£rvî_ªad
(
ns
);

1281 
	}
}

1286 
	$£rvî_p‹t_ªady_ˇŒback
(
fd
, 
evíts
, *
¨g
) {

1287 
evdns_£rvî_p‹t
 *
p‹t
 = (evdns_£rvî_p‹à*Ë
¨g
;

1288 (Ë
fd
;

1290 i‡(
evíts
 & 
EV_WRITE
) {

1291 
p‹t
->
choked
 = 0;

1292 
	`£rvî_p‹t_Êush
(
p‹t
);

1294 i‡(
evíts
 & 
EV_READ
) {

1295 
	`£rvî_p‹t_ªad
(
p‹t
);

1297 
	}
}

1301 
	#MAX_LABELS
 128

	)

1303 
	sdn¶abñ_íåy
 { *
	mv
; 
off_t
 
	mpos
; };

1304 
	sdn¶abñ_èbÀ
 {

1305 
	mn_œbñs
;

1307 
dn¶abñ_íåy
 
	mœbñs
[
MAX_LABELS
];

1312 
	$dn¶abñ_èbÀ_öô
(
dn¶abñ_èbÀ
 *
èbÀ
)

1314 
èbÀ
->
n_œbñs
 = 0;

1315 
	}
}

1319 
	$dn¶abñ_˛ór
(
dn¶abñ_èbÀ
 *
èbÀ
)

1321 
i
;

1322 
i
 = 0; i < 
èbÀ
->
n_œbñs
; ++i)

1323 
	`‰ì
(
èbÀ
->
œbñs
[
i
].
v
);

1324 
èbÀ
->
n_œbñs
 = 0;

1325 
	}
}

1330 
	$dn¶abñ_èbÀ_gë_pos
(c⁄° 
dn¶abñ_èbÀ
 *
èbÀ
, c⁄° *
œbñ
)

1332 
i
;

1333 
i
 = 0; i < 
èbÀ
->
n_œbñs
; ++i) {

1334 i‡(!
	`°rcmp
(
œbñ
, 
èbÀ
->
œbñs
[
i
].
v
))

1335  
èbÀ
->
œbñs
[
i
].
pos
;

1338 
	}
}

1342 
	$dn¶abñ_èbÀ_add
(
dn¶abñ_èbÀ
 *
èbÀ
, c⁄° *
œbñ
, 
off_t
 
pos
)

1344 *
v
;

1345 
p
;

1346 i‡(
èbÀ
->
n_œbñs
 =
MAX_LABELS
)

1348 
v
 = 
	`°rdup
(
œbñ
);

1349 i‡(
v
 =
NULL
)

1351 
p
 = 
èbÀ
->
n_œbñs
++;

1352 
èbÀ
->
œbñs
[
p
].
v
 = v;

1353 
èbÀ
->
œbñs
[
p
].
pos
 =Öos;

1356 
	}
}

1369 
off_t


1370 
	$dn¢ame_to_œbñs
(
u8
 *c⁄° 
buf
, 
size_t
 
buf_Àn
, 
off_t
 
j
,

1371 c⁄° *
«me
, c⁄° 
«me_Àn
,

1372 
dn¶abñ_èbÀ
 *
èbÀ
) {

1373 c⁄° *
íd
 = 
«me
 + 
«me_Àn
;

1374 
ªf
 = 0;

1375 
u16
 
_t
;

1377 
	#APPEND16
(
x
) do { \

1378 i‡(
j
 + 2 > (
off_t
)
buf_Àn
) \

1379 
ovîÊow
; \

1380 
_t
 = 
	`ht⁄s
(
x
); \

1381 
	`mem˝y
(
buf
 + 
j
, &
_t
, 2); \

1382 
j
 += 2; \

1383 } 0)

	)

1384 
	#APPEND32
(
x
) do { \

1385 i‡(
j
 + 4 > (
off_t
)
buf_Àn
) \

1386 
ovîÊow
; \

1387 
_t32
 = 
	`ht⁄l
(
x
); \

1388 
	`mem˝y
(
buf
 + 
j
, &
_t32
, 4); \

1389 
j
 += 4; \

1390 } 0)

	)

1392 i‡(
«me_Àn
 > 255)  -2;

1395 c⁄° *c⁄° 
°¨t
 = 
«me
;

1396 i‡(
èbÀ
 && (
ªf
 = 
	`dn¶abñ_èbÀ_gë_pos
—abÀ, 
«me
)) >= 0) {

1397 
	`APPEND16
(
ªf
 | 0xc000);

1398  
j
;

1400 
«me
 = 
	`°rchr
(name, '.');

1401 i‡(!
«me
) {

1402 c⁄° 
œbñ_Àn
 = 
íd
 - 
°¨t
;

1403 i‡(
œbñ_Àn
 > 63)  -1;

1404 i‡((
size_t
)(
j
+
œbñ_Àn
+1Ë> 
buf_Àn
)  -2;

1405 i‡(
èbÀ
Ë
	`dn¶abñ_èbÀ_add
—abÀ, 
°¨t
, 
j
);

1406 
buf
[
j
++] = 
œbñ_Àn
;

1408 
	`mem˝y
(
buf
 + 
j
, 
°¨t
, 
íd
 - start);

1409 
j
 +
íd
 - 
°¨t
;

1413 c⁄° 
œbñ_Àn
 = 
«me
 - 
°¨t
;

1414 i‡(
œbñ_Àn
 > 63)  -1;

1415 i‡((
size_t
)(
j
+
œbñ_Àn
+1Ë> 
buf_Àn
)  -2;

1416 i‡(
èbÀ
Ë
	`dn¶abñ_èbÀ_add
—abÀ, 
°¨t
, 
j
);

1417 
buf
[
j
++] = 
œbñ_Àn
;

1419 
	`mem˝y
(
buf
 + 
j
, 
°¨t
, 
«me
 - start);

1420 
j
 +
«me
 - 
°¨t
;

1422 
«me
++;

1429 i‡(!
j
 || 
buf
[j-1]) buf[j++] = 0;

1430  
j
;

1431 
ovîÊow
:

1433 
	}
}

1439 
	$evdns_ªque°_Àn
(c⁄° 
«me_Àn
) {

1441 
«me_Àn
 + 2 +

1443 
	}
}

1450 
	$evdns_ªque°_d©a_buûd
(c⁄° *c⁄° 
«me
, c⁄° 
«me_Àn
,

1451 c⁄° 
u16
 
å™s_id
, c⁄° u16 
ty≥
, c⁄° u16 
˛ass
,

1452 
u8
 *c⁄° 
buf
, 
size_t
 
buf_Àn
) {

1453 
off_t
 
j
 = 0;

1454 
u16
 
_t
;

1456 
	`APPEND16
(
å™s_id
);

1457 
	`APPEND16
(0x0100);

1458 
	`APPEND16
(1);

1459 
	`APPEND16
(0);

1460 
	`APPEND16
(0);

1461 
	`APPEND16
(0);

1463 
j
 = 
	`dn¢ame_to_œbñs
(
buf
, 
buf_Àn
, j, 
«me
, 
«me_Àn
, 
NULL
);

1464 i‡(
j
 < 0) {

1465  ()
j
;

1468 
	`APPEND16
(
ty≥
);

1469 
	`APPEND16
(
˛ass
);

1471  ()
j
;

1472 
ovîÊow
:

1474 
	}
}

1477 
evdns_£rvî_p‹t
 *

1478 
	$evdns_add_£rvî_p‹t
(
sockë
, 
is_t˝
, 
evdns_ªque°_ˇŒback_‚_ty≥
 
cb
, *
u£r_d©a
)

1480 
evdns_£rvî_p‹t
 *
p‹t
;

1481 i‡(!(
p‹t
 = 
	`mÆloc
((
evdns_£rvî_p‹t
))))

1482  
NULL
;

1483 
	`mem£t
(
p‹t
, 0, (
evdns_£rvî_p‹t
));

1485 
	`as£π
(!
is_t˝
);

1486 
p‹t
->
sockë
 = socket;

1487 
p‹t
->
ªf˙t
 = 1;

1488 
p‹t
->
choked
 = 0;

1489 
p‹t
->
˛osög
 = 0;

1490 
p‹t
->
u£r_ˇŒback
 = 
cb
;

1491 
p‹t
->
u£r_d©a
 = user_data;

1492 
p‹t
->
≥ndög_ª∂õs
 = 
NULL
;

1494 
	`evít_£t
(&
p‹t
->
evít
,Ö‹t->
sockë
, 
EV_READ
 | 
EV_PERSIST
,

1495 
£rvî_p‹t_ªady_ˇŒback
, 
p‹t
);

1496 
	`evít_add
(&
p‹t
->
evít
, 
NULL
);

1497  
p‹t
;

1498 
	}
}

1502 
	$evdns_˛o£_£rvî_p‹t
(
evdns_£rvî_p‹t
 *
p‹t
)

1504 i‡(--
p‹t
->
ªf˙t
 == 0)

1505 
	`£rvî_p‹t_‰ì
(
p‹t
);

1506 
p‹t
->
˛osög
 = 1;

1507 
	}
}

1511 
	$evdns_£rvî_ªque°_add_ª∂y
(
evdns_£rvî_ªque°
 *
_ªq
, 
£˘i⁄
, c⁄° *
«me
, 
ty≥
, 
˛ass
, 
âl
, 
d©Æí
, 
is_«me
, c⁄° *
d©a
)

1513 
£rvî_ªque°
 *
ªq
 = 
	`TO_SERVER_REQUEST
(
_ªq
);

1514 
£rvî_ª∂y_ôem
 **
ôemp
, *
ôem
;

1515 *
cou¡p
;

1517 i‡(
ªq
->
ª•⁄£
)

1520 
£˘i⁄
) {

1521 
EVDNS_ANSWER_SECTION
:

1522 
ôemp
 = &
ªq
->
™swî
;

1523 
cou¡p
 = &
ªq
->
n_™swî
;

1525 
EVDNS_AUTHORITY_SECTION
:

1526 
ôemp
 = &
ªq
->
auth‹ôy
;

1527 
cou¡p
 = &
ªq
->
n_auth‹ôy
;

1529 
EVDNS_ADDITIONAL_SECTION
:

1530 
ôemp
 = &
ªq
->
addôi⁄Æ
;

1531 
cou¡p
 = &
ªq
->
n_addôi⁄Æ
;

1536 *
ôemp
) {

1537 
ôemp
 = &((*ôemp)->
√xt
);

1539 
ôem
 = 
	`mÆloc
((
£rvî_ª∂y_ôem
));

1540 i‡(!
ôem
)

1542 
ôem
->
√xt
 = 
NULL
;

1543 i‡(!(
ôem
->
«me
 = 
	`°rdup
(name))) {

1544 
	`‰ì
(
ôem
);

1547 
ôem
->
ty≥
 =Åype;

1548 
ôem
->
dns_que°i⁄_˛ass
 = 
˛ass
;

1549 
ôem
->
âl
 =Åtl;

1550 
ôem
->
is_«me
 = is_name != 0;

1551 
ôem
->
d©Æí
 = 0;

1552 
ôem
->
d©a
 = 
NULL
;

1553 i‡(
d©a
) {

1554 i‡(
ôem
->
is_«me
) {

1555 i‡(!(
ôem
->
d©a
 = 
	`°rdup
(data))) {

1556 
	`‰ì
(
ôem
->
«me
);

1557 
	`‰ì
(
ôem
);

1560 
ôem
->
d©Æí
 = (
u16
)-1;

1562 i‡(!(
ôem
->
d©a
 = 
	`mÆloc
(
d©Æí
))) {

1563 
	`‰ì
(
ôem
->
«me
);

1564 
	`‰ì
(
ôem
);

1567 
ôem
->
d©Æí
 = datalen;

1568 
	`mem˝y
(
ôem
->
d©a
, d©a, 
d©Æí
);

1572 *
ôemp
 = 
ôem
;

1573 ++(*
cou¡p
);

1575 
	}
}

1579 
	$evdns_£rvî_ªque°_add_a_ª∂y
(
evdns_£rvî_ªque°
 *
ªq
, c⁄° *
«me
, 
n
, *
addrs
, 
âl
)

1581  
	`evdns_£rvî_ªque°_add_ª∂y
(

1582 
ªq
, 
EVDNS_ANSWER_SECTION
, 
«me
, 
TYPE_A
, 
CLASS_INET
,

1583 
âl
, 
n
*4, 0, 
addrs
);

1584 
	}
}

1588 
	$evdns_£rvî_ªque°_add_ØØ_ª∂y
(
evdns_£rvî_ªque°
 *
ªq
, c⁄° *
«me
, 
n
, *
addrs
, 
âl
)

1590  
	`evdns_£rvî_ªque°_add_ª∂y
(

1591 
ªq
, 
EVDNS_ANSWER_SECTION
, 
«me
, 
TYPE_AAAA
, 
CLASS_INET
,

1592 
âl
, 
n
*16, 0, 
addrs
);

1593 
	}
}

1597 
	$evdns_£rvî_ªque°_add_±r_ª∂y
(
evdns_£rvî_ªque°
 *
ªq
, 
ö_addr
 *
ö
, c⁄° *
öaddr_«me
, c⁄° *
ho°«me
, 
âl
)

1599 
u32
 
a
;

1600 
buf
[32];

1601 
	`as£π
(
ö
 || 
öaddr_«me
);

1602 
	`as£π
(!(
ö
 && 
öaddr_«me
));

1603 i‡(
ö
) {

1604 
a
 = 
	`¡ohl
(
ö
->
s_addr
);

1605 
	`evutû_¢¥ötf
(
buf
, (buf), "%d.%d.%d.%d.in-addr.arpa",

1606 ()(
u8
)((
a
 )&0xff),

1607 ()(
u8
)((
a
>>8 )&0xff),

1608 ()(
u8
)((
a
>>16)&0xff),

1609 ()(
u8
)((
a
>>24)&0xff));

1610 
öaddr_«me
 = 
buf
;

1612  
	`evdns_£rvî_ªque°_add_ª∂y
(

1613 
ªq
, 
EVDNS_ANSWER_SECTION
, 
öaddr_«me
, 
TYPE_PTR
, 
CLASS_INET
,

1614 
âl
, -1, 1, 
ho°«me
);

1615 
	}
}

1619 
	$evdns_£rvî_ªque°_add_˙ame_ª∂y
(
evdns_£rvî_ªque°
 *
ªq
, c⁄° *
«me
, c⁄° *
˙ame
, 
âl
)

1621  
	`evdns_£rvî_ªque°_add_ª∂y
(

1622 
ªq
, 
EVDNS_ANSWER_SECTION
, 
«me
, 
TYPE_CNAME
, 
CLASS_INET
,

1623 
âl
, -1, 1, 
˙ame
);

1624 
	}
}

1628 
	$evdns_£rvî_ªque°_f‹m©_ª•⁄£
(
£rvî_ªque°
 *
ªq
, 
îr
)

1630 
buf
[1500];

1631 
size_t
 
buf_Àn
 = (
buf
);

1632 
off_t
 
j
 = 0, 
r
;

1633 
u16
 
_t
;

1634 
u32
 
_t32
;

1635 
i
;

1636 
u16
 
Êags
;

1637 
dn¶abñ_èbÀ
 
èbÀ
;

1639 i‡(
îr
 < 0 ||Érr > 15)  -1;

1643 
Êags
 = 
ªq
->
ba£
.flags;

1644 
Êags
 |(0x8000 | 
îr
);

1646 
	`dn¶abñ_èbÀ_öô
(&
èbÀ
);

1647 
	`APPEND16
(
ªq
->
å™s_id
);

1648 
	`APPEND16
(
Êags
);

1649 
	`APPEND16
(
ªq
->
ba£
.
nque°i⁄s
);

1650 
	`APPEND16
(
ªq
->
n_™swî
);

1651 
	`APPEND16
(
ªq
->
n_auth‹ôy
);

1652 
	`APPEND16
(
ªq
->
n_addôi⁄Æ
);

1655 
i
=0; i < 
ªq
->
ba£
.
nque°i⁄s
; ++i) {

1656 c⁄° *
s
 = 
ªq
->
ba£
.
que°i⁄s
[
i
]->
«me
;

1657 
j
 = 
	`dn¢ame_to_œbñs
(
buf
, 
buf_Àn
, j, 
s
, 
	`°æí
(s), &
èbÀ
);

1658 i‡(
j
 < 0) {

1659 
	`dn¶abñ_˛ór
(&
èbÀ
);

1660  (Ë
j
;

1662 
	`APPEND16
(
ªq
->
ba£
.
que°i⁄s
[
i
]->
ty≥
);

1663 
	`APPEND16
(
ªq
->
ba£
.
que°i⁄s
[
i
]->
dns_que°i⁄_˛ass
);

1667 
i
=0; i<3; ++i) {

1668 
£rvî_ª∂y_ôem
 *
ôem
;

1669 i‡(
i
==0)

1670 
ôem
 = 
ªq
->
™swî
;

1671 i‡(
i
==1)

1672 
ôem
 = 
ªq
->
auth‹ôy
;

1674 
ôem
 = 
ªq
->
addôi⁄Æ
;

1675 
ôem
) {

1676 
r
 = 
	`dn¢ame_to_œbñs
(
buf
, 
buf_Àn
, 
j
, 
ôem
->
«me
, 
	`°æí
(ôem->«me), &
èbÀ
);

1677 i‡(
r
 < 0)

1678 
ovîÊow
;

1679 
j
 = 
r
;

1681 
	`APPEND16
(
ôem
->
ty≥
);

1682 
	`APPEND16
(
ôem
->
dns_que°i⁄_˛ass
);

1683 
	`APPEND32
(
ôem
->
âl
);

1684 i‡(
ôem
->
is_«me
) {

1685 
off_t
 
Àn_idx
 = 
j
, 
«me_°¨t
;

1686 
j
 += 2;

1687 
«me_°¨t
 = 
j
;

1688 
r
 = 
	`dn¢ame_to_œbñs
(
buf
, 
buf_Àn
, 
j
, 
ôem
->
d©a
, 
	`°æí
(ôem->d©a), &
èbÀ
);

1689 i‡(
r
 < 0)

1690 
ovîÊow
;

1691 
j
 = 
r
;

1692 
_t
 = 
	`ht⁄s
–(Ë(
j
-
«me_°¨t
) );

1693 
	`mem˝y
(
buf
+
Àn_idx
, &
_t
, 2);

1695 
	`APPEND16
(
ôem
->
d©Æí
);

1696 i‡(
j
+
ôem
->
d©Æí
 > (
off_t
)
buf_Àn
)

1697 
ovîÊow
;

1698 
	`mem˝y
(
buf
+
j
, 
ôem
->
d©a
, iãm->
d©Æí
);

1699 
j
 +
ôem
->
d©Æí
;

1701 
ôem
 = iãm->
√xt
;

1705 i‡(
j
 > 512) {

1706 
ovîÊow
:

1707 
j
 = 512;

1708 
buf
[2] |= 0x02;

1711 
ªq
->
ª•⁄£_Àn
 = 
j
;

1713 i‡(!(
ªq
->
ª•⁄£
 = 
	`mÆloc
‘eq->
ª•⁄£_Àn
))) {

1714 
	`£rvî_ªque°_‰ì_™swîs
(
ªq
);

1715 
	`dn¶abñ_˛ór
(&
èbÀ
);

1718 
	`mem˝y
(
ªq
->
ª•⁄£
, 
buf
,Ñeq->
ª•⁄£_Àn
);

1719 
	`£rvî_ªque°_‰ì_™swîs
(
ªq
);

1720 
	`dn¶abñ_˛ór
(&
èbÀ
);

1722 
	}
}

1726 
	$evdns_£rvî_ªque°_ª•⁄d
(
evdns_£rvî_ªque°
 *
_ªq
, 
îr
)

1728 
£rvî_ªque°
 *
ªq
 = 
	`TO_SERVER_REQUEST
(
_ªq
);

1729 
evdns_£rvî_p‹t
 *
p‹t
 = 
ªq
->port;

1730 
r
;

1731 i‡(!
ªq
->
ª•⁄£
) {

1732 i‡((
r
 = 
	`evdns_£rvî_ªque°_f‹m©_ª•⁄£
(
ªq
, 
îr
))<0)

1733  
r
;

1736 
r
 = 
	`£ndto
(
p‹t
->
sockë
, 
ªq
->
ª•⁄£
,Ñeq->
ª•⁄£_Àn
, 0,

1737 (
sockaddr
*Ë&
ªq
->
addr
,Ñeq->
addæí
);

1738 i‡(
r
<0) {

1739 
sock_îr
 = 
	`œ°_îr‹
(
p‹t
->
sockë
);

1740 i‡(! 
	`îr‹_is_ógaö
(
sock_îr
))

1743 i‡(
p‹t
->
≥ndög_ª∂õs
) {

1744 
ªq
->
¥ev_≥ndög
 = 
p‹t
->
≥ndög_ª∂õs
->prev_pending;

1745 
ªq
->
√xt_≥ndög
 = 
p‹t
->
≥ndög_ª∂õs
;

1746 
ªq
->
¥ev_≥ndög
->
√xt_≥ndög
 =

1747 
ªq
->
√xt_≥ndög
->
¥ev_≥ndög
 =Ñeq;

1749 
ªq
->
¥ev_≥ndög
 =Ñeq->
√xt_≥ndög
 =Ñeq;

1750 
p‹t
->
≥ndög_ª∂õs
 = 
ªq
;

1751 
p‹t
->
choked
 = 1;

1753 (Ë
	`evít_dñ
(&
p‹t
->
evít
);

1754 
	`evít_£t
(&
p‹t
->
evít
,Ö‹t->
sockë
, (p‹t->
˛osög
?0:
EV_READ
Ë| 
EV_WRITE
 | 
EV_PERSIST
, 
£rvî_p‹t_ªady_ˇŒback
,Öort);

1756 i‡(
	`evít_add
(&
p‹t
->
evít
, 
NULL
) < 0) {

1757 
	`log
(
EVDNS_LOG_WARN
, "Error fromÜibevent whenáddingÉvent for DNS server");

1764 i‡(
	`£rvî_ªque°_‰ì
(
ªq
))

1767 i‡(
p‹t
->
≥ndög_ª∂õs
)

1768 
	`£rvî_p‹t_Êush
(
p‹t
);

1771 
	}
}

1775 
	$£rvî_ªque°_‰ì_™swîs
(
£rvî_ªque°
 *
ªq
)

1777 
£rvî_ª∂y_ôem
 *
vi˘im
, *
√xt
, **
li°
;

1778 
i
;

1779 
i
 = 0; i < 3; ++i) {

1780 i‡(
i
==0)

1781 
li°
 = &
ªq
->
™swî
;

1782 i‡(
i
==1)

1783 
li°
 = &
ªq
->
auth‹ôy
;

1785 
li°
 = &
ªq
->
addôi⁄Æ
;

1787 
vi˘im
 = *
li°
;

1788 
vi˘im
) {

1789 
√xt
 = 
vi˘im
->next;

1790 
	`‰ì
(
vi˘im
->
«me
);

1791 i‡(
vi˘im
->
d©a
)

1792 
	`‰ì
(
vi˘im
->
d©a
);

1793 
	`‰ì
(
vi˘im
);

1794 
vi˘im
 = 
√xt
;

1796 *
li°
 = 
NULL
;

1798 
	}
}

1803 
	$£rvî_ªque°_‰ì
(
£rvî_ªque°
 *
ªq
)

1805 
i
, 
rc
=1;

1806 i‡(
ªq
->
ba£
.
que°i⁄s
) {

1807 
i
 = 0; i < 
ªq
->
ba£
.
nque°i⁄s
; ++i)

1808 
	`‰ì
(
ªq
->
ba£
.
que°i⁄s
[
i
]);

1809 
	`‰ì
(
ªq
->
ba£
.
que°i⁄s
);

1812 i‡(
ªq
->
p‹t
) {

1813 i‡(
ªq
->
p‹t
->
≥ndög_ª∂õs
 ==Ñeq) {

1814 i‡(
ªq
->
√xt_≥ndög
)

1815 
ªq
->
p‹t
->
≥ndög_ª∂õs
 =Ñeq->
√xt_≥ndög
;

1817 
ªq
->
p‹t
->
≥ndög_ª∂õs
 = 
NULL
;

1819 
rc
 = --
ªq
->
p‹t
->
ªf˙t
;

1822 i‡(
ªq
->
ª•⁄£
) {

1823 
	`‰ì
(
ªq
->
ª•⁄£
);

1826 
	`£rvî_ªque°_‰ì_™swîs
(
ªq
);

1828 i‡(
ªq
->
√xt_≥ndög
 &&Ñeq->next_pending !=Ñeq) {

1829 
ªq
->
√xt_≥ndög
->
¥ev_≥ndög
 =Ñeq->prev_pending;

1830 
ªq
->
¥ev_≥ndög
->
√xt_≥ndög
 =Ñeq->next_pending;

1833 i‡(
rc
 == 0) {

1834 
	`£rvî_p‹t_‰ì
(
ªq
->
p‹t
);

1835 
	`‰ì
(
ªq
);

1838 
	`‰ì
(
ªq
);

1840 
	}
}

1844 
	$£rvî_p‹t_‰ì
(
evdns_£rvî_p‹t
 *
p‹t
)

1846 
	`as£π
(
p‹t
);

1847 
	`as£π
(!
p‹t
->
ªf˙t
);

1848 
	`as£π
(!
p‹t
->
≥ndög_ª∂õs
);

1849 i‡(
p‹t
->
sockë
 > 0) {

1850 
	`CLOSE_SOCKET
(
p‹t
->
sockë
);

1851 
p‹t
->
sockë
 = -1;

1853 (Ë
	`evít_dñ
(&
p‹t
->
evít
);

1855 
	}
}

1859 
	$evdns_£rvî_ªque°_dr›
(
evdns_£rvî_ªque°
 *
_ªq
)

1861 
£rvî_ªque°
 *
ªq
 = 
	`TO_SERVER_REQUEST
(
_ªq
);

1862 
	`£rvî_ªque°_‰ì
(
ªq
);

1864 
	}
}

1868 
	$evdns_£rvî_ªque°_gë_ªque°ög_addr
(
evdns_£rvî_ªque°
 *
_ªq
, 
sockaddr
 *
ß
, 
addr_Àn
)

1870 
£rvî_ªque°
 *
ªq
 = 
	`TO_SERVER_REQUEST
(
_ªq
);

1871 i‡(
addr_Àn
 < ()
ªq
->
addæí
)

1873 
	`mem˝y
(
ß
, &(
ªq
->
addr
),Ñeq->
addæí
);

1874  
ªq
->
addæí
;

1875 
	}
}

1877 #unde‡
APPEND16


1878 #unde‡
APPEND32


1883 
	$evdns_ªque°_timeout_ˇŒback
(
fd
, 
evíts
, *
¨g
) {

1884 
ªque°
 *c⁄° 
ªq
 = (ªque° *Ë
¨g
;

1885 (Ë
fd
;

1886 (Ë
evíts
;

1888 
	`log
(
EVDNS_LOG_DEBUG
, "Reque° %lxÅimed out", (Ë
¨g
);

1890 
ªq
->
ns
->
timedout
++;

1891 i‡(
ªq
->
ns
->
timedout
 > 
globÆ_max_«me£rvî_timeout
) {

1892 
ªq
->
ns
->
timedout
 = 0;

1893 
	`«me£rvî_Áûed
(
ªq
->
ns
, "requestÅimed out.");

1896 (Ë
	`evtimî_dñ
(&
ªq
->
timeout_evít
);

1897 i‡(
ªq
->
tx_cou¡
 >
globÆ_max_ªå™smôs
) {

1899 
	`ª∂y_ˇŒback
(
ªq
, 0, 
DNS_ERR_TIMEOUT
, 
NULL
);

1900 
	`ªque°_föished
(
ªq
, &
ªq_hód
);

1903 
	`evdns_ªque°_å™smô
(
ªq
);

1905 
	}
}

1914 
	$evdns_ªque°_å™smô_to
(
ªque°
 *
ªq
, 
«me£rvî
 *
£rvî
) {

1915 
sockaddr_ö
 
sö
;

1916 
r
;

1917 
	`mem£t
(&
sö
, 0, (sin));

1918 
sö
.
sö_addr
.
s_addr
 = 
ªq
->
ns
->
addªss
;

1919 
sö
.
sö_p‹t
 = 
ªq
->
ns
->
p‹t
;

1920 
sö
.
sö_Ámûy
 = 
AF_INET
;

1922 
r
 = 
	`£ndto
(
£rvî
->
sockë
, 
ªq
->
ªque°
,Ñeq->
ªque°_Àn
, 0,

1923 (
sockaddr
*)&
sö
, (sin));

1924 i‡(
r
 < 0) {

1925 
îr
 = 
	`œ°_îr‹
(
£rvî
->
sockë
);

1926 i‡(
	`îr‹_is_ógaö
(
îr
))  1;

1927 
	`«me£rvî_Áûed
(
ªq
->
ns
, 
	`°ªº‹
(
îr
));

1929 } i‡(
r
 !()
ªq
->
ªque°_Àn
) {

1934 
	}
}

1943 
	$evdns_ªque°_å™smô
(
ªque°
 *
ªq
) {

1944 
ªtcode
 = 0, 
r
;

1948 
ªq
->
å™smô_me
 = 1;

1949 i‡(
ªq
->
å™s_id
 =0xffffË
	`ab‹t
();

1951 i‡(
ªq
->
ns
->
choked
) {

1957 
r
 = 
	`evdns_ªque°_å™smô_to
(
ªq
,Ñeq->
ns
);

1958 
r
) {

1961 
ªq
->
ns
->
choked
 = 1;

1962 
	`«me£rvî_wrôe_waôög
(
ªq
->
ns
, 1);

1966 
ªtcode
 = 1;

1970 
	`log
(
EVDNS_LOG_DEBUG
,

1971 "SëtögÅimeouàf‹Ñeque° %lx", (Ë
ªq
);

1972 i‡(
	`evtimî_add
(&
ªq
->
timeout_evít
, &
globÆ_timeout
) < 0) {

1973 
	`log
(
EVDNS_LOG_WARN
,

1975 (Ë
ªq
);

1978 
ªq
->
tx_cou¡
++;

1979 
ªq
->
å™smô_me
 = 0;

1980  
ªtcode
;

1982 
	}
}

1985 
	$«me£rvî_¥obe_ˇŒback
(
ªsu…
, 
ty≥
, 
cou¡
, 
âl
, *
addªs£s
, *
¨g
) {

1986 
«me£rvî
 *c⁄° 
ns
 = («me£rvî *Ë
¨g
;

1987 (Ë
ty≥
;

1988 (Ë
cou¡
;

1989 (Ë
âl
;

1990 (Ë
addªs£s
;

1992 i‡(
ªsu…
 =
DNS_ERR_NONE
 ||Ñesu… =
DNS_ERR_NOTEXIST
) {

1994 
	`«me£rvî_up
(
ns
);

1995 } 
	`«me£rvî_¥obe_Áûed
(
ns
);

1996 
	}
}

1999 
	$«me£rvî_£nd_¥obe
(
«me£rvî
 *c⁄° 
ns
) {

2000 
ªque°
 *
ªq
;

2004 
	`log
(
EVDNS_LOG_DEBUG
, "SídögÖrobêtÿ%s", 
	`debug_¡ﬂ
(
ns
->
addªss
));

2006 
ªq
 = 
	`ªque°_√w
(
TYPE_A
, "www.googÀ.com", 
DNS_QUERY_NO_SEARCH
, 
«me£rvî_¥obe_ˇŒback
, 
ns
);

2007 i‡(!
ªq
) ;

2009 
	`ªque°_å™s_id_£t
(
ªq
, 
	`å™ß˘i⁄_id_pick
());

2010 
ªq
->
ns
 =Çs;

2011 
	`ªque°_submô
(
ªq
);

2012 
	}
}

2018 
	$evdns_å™smô
() {

2019 
did_åy_to_å™smô
 = 0;

2021 i‡(
ªq_hód
) {

2022 
ªque°
 *c⁄° 
°¨ãd_©
 = 
ªq_hód
, *
ªq
 =Ñeq_head;

2025 i‡(
ªq
->
å™smô_me
) {

2026 
did_åy_to_å™smô
 = 1;

2027 
	`evdns_ªque°_å™smô
(
ªq
);

2030 
ªq
 =Ñeq->
√xt
;

2031 } 
ªq
 !
°¨ãd_©
);

2034  
did_åy_to_å™smô
;

2035 
	}
}

2039 
	$evdns_cou¡_«me£rvîs
()

2041 c⁄° 
«me£rvî
 *
£rvî
 = 
£rvî_hód
;

2042 
n
 = 0;

2043 i‡(!
£rvî
)

2046 ++
n
;

2047 
£rvî
 = sîvî->
√xt
;

2048 } 
£rvî
 !
£rvî_hód
);

2049  
n
;

2050 
	}
}

2054 
	$evdns_˛ór_«me£rvîs_™d_su•íd
()

2056 
«me£rvî
 *
£rvî
 = 
£rvî_hód
, *
°¨ãd_©
 = server_head;

2057 
ªque°
 *
ªq
 = 
ªq_hód
, *
ªq_°¨ãd_©
 =Ñeq_head;

2059 i‡(!
£rvî
)

2062 
«me£rvî
 *
√xt
 = 
£rvî
->next;

2063 (Ë
	`evít_dñ
(&
£rvî
->
evít
);

2064 i‡(
	`evtimî_öôülized
(&
£rvî
->
timeout_evít
))

2065 (Ë
	`evtimî_dñ
(&
£rvî
->
timeout_evít
);

2066 i‡(
£rvî
->
sockë
 >= 0)

2067 
	`CLOSE_SOCKET
(
£rvî
->
sockë
);

2068 
	`‰ì
(
£rvî
);

2069 i‡(
√xt
 =
°¨ãd_©
)

2071 
£rvî
 = 
√xt
;

2073 
£rvî_hód
 = 
NULL
;

2074 
globÆ_good_«me£rvîs
 = 0;

2076 
ªq
) {

2077 
ªque°
 *
√xt
 = 
ªq
->next;

2078 
ªq
->
tx_cou¡
 =Ñeq->
ªissue_cou¡
 = 0;

2079 
ªq
->
ns
 = 
NULL
;

2081 (Ë
	`evtimî_dñ
(&
ªq
->
timeout_evít
);

2082 
ªq
->
å™s_id
 = 0;

2083 
ªq
->
å™smô_me
 = 0;

2085 
globÆ_ªque°s_waôög
++;

2086 
	`evdns_ªque°_ö£π
(
ªq
, &
ªq_waôög_hód
);

2091 
ªq_waôög_hód
 =Ñeq_waôög_hód->
¥ev
;

2093 i‡(
√xt
 =
ªq_°¨ãd_©
)

2095 
ªq
 = 
√xt
;

2097 
ªq_hód
 = 
NULL
;

2098 
globÆ_ªque°s_öÊight
 = 0;

2101 
	}
}

2106 
	$evdns_ªsume
()

2108 
	`evdns_ªque°s_pump_waôög_queue
();

2110 
	}
}

2113 
	$_evdns_«me£rvî_add_im∂
(
addªss
, 
p‹t
) {

2116 c⁄° 
«me£rvî
 *
£rvî
 = 
£rvî_hód
, *c⁄° 
°¨ãd_©
 = server_head;

2117 
«me£rvî
 *
ns
;

2118 
îr
 = 0;

2119 i‡(
£rvî
) {

2121 i‡(
£rvî
->
addªss
 ==áddress)  3;

2122 
£rvî
 = sîvî->
√xt
;

2123 } 
£rvî
 !
°¨ãd_©
);

2126 
ns
 = (
«me£rvî
 *Ë
	`mÆloc
((nameserver));

2127 i‡(!
ns
)  -1;

2129 
	`mem£t
(
ns
, 0, (
«me£rvî
));

2131 
	`evtimî_£t
(&
ns
->
timeout_evít
, 
«me£rvî_¥od_ˇŒback
,Çs);

2133 
ns
->
sockë
 = 
	`sockë
(
PF_INET
, 
SOCK_DGRAM
, 0);

2134 i‡(
ns
->
sockë
 < 0Ë{ 
îr
 = 1; 
out1
; }

2135 
	`evutû_make_sockë_n⁄blockög
(
ns
->
sockë
);

2137 
ns
->
addªss
 =áddress;

2138 
ns
->
p‹t
 = 
	`ht⁄s
(port);

2139 
ns
->
°©e
 = 1;

2140 
	`evít_£t
(&
ns
->
evít
,Çs->
sockë
, 
EV_READ
 | 
EV_PERSIST
, 
«me£rvî_ªady_ˇŒback
,Çs);

2141 i‡(
	`evít_add
(&
ns
->
evít
, 
NULL
) < 0) {

2142 
îr
 = 2;

2143 
out2
;

2146 
	`log
(
EVDNS_LOG_DEBUG
, "AddedÇame£rvî %s", 
	`debug_¡ﬂ
(
addªss
));

2149 i‡(!
£rvî_hód
) {

2150 
ns
->
√xt
 =Çs->
¥ev
 =Çs;

2151 
£rvî_hód
 = 
ns
;

2153 
ns
->
√xt
 = 
£rvî_hód
->next;

2154 
ns
->
¥ev
 = 
£rvî_hód
;

2155 
£rvî_hód
->
√xt
 = 
ns
;

2156 i‡(
£rvî_hód
->
¥ev
 == server_head) {

2157 
£rvî_hód
->
¥ev
 = 
ns
;

2161 
globÆ_good_«me£rvîs
++;

2165 
out2
:

2166 
	`CLOSE_SOCKET
(
ns
->
sockë
);

2167 
out1
:

2168 
	`‰ì
(
ns
);

2169 
	`log
(
EVDNS_LOG_WARN
, "U«bÀÅÿaddÇame£rvî %s:Éº‹ %d", 
	`debug_¡ﬂ
(
addªss
), 
îr
);

2170  
îr
;

2171 
	}
}

2175 
	$evdns_«me£rvî_add
(
addªss
) {

2176  
	`_evdns_«me£rvî_add_im∂
(
addªss
, 53);

2177 
	}
}

2181 
	$evdns_«me£rvî_ù_add
(c⁄° *
ù_as_°rög
) {

2182 
ö_addr
 
öa
;

2183 
p‹t
;

2184 
buf
[20];

2185 c⁄° *
˝
;

2186 
˝
 = 
	`°rchr
(
ù_as_°rög
, ':');

2187 i‡(! 
˝
) {

2188 
˝
 = 
ù_as_°rög
;

2189 
p‹t
 = 53;

2191 
p‹t
 = 
	`°πoöt
(
˝
+1);

2192 i‡(
p‹t
 < 0 ||Öort > 65535) {

2195 i‡((
˝
-
ù_as_°rög
Ë>()(
buf
)) {

2198 
	`mem˝y
(
buf
, 
ù_as_°rög
, 
˝
-ip_as_string);

2199 
buf
[
˝
-
ù_as_°rög
] = '\0';

2200 
˝
 = 
buf
;

2202 i‡(!
	`öë_©⁄
(
˝
, &
öa
)) {

2205  
	`_evdns_«me£rvî_add_im∂
(
öa
.
s_addr
, 
p‹t
);

2206 
	}
}

2210 
	$evdns_ªque°_ö£π
(
ªque°
 *
ªq
, ªque° **
hód
) {

2211 i‡(!*
hód
) {

2212 *
hód
 = 
ªq
;

2213 
ªq
->
√xt
 =Ñeq->
¥ev
 =Ñeq;

2217 
ªq
->
¥ev
 = (*
hód
)->prev;

2218 
ªq
->
¥ev
->
√xt
 =Ñeq;

2219 
ªq
->
√xt
 = *
hód
;

2220 (*
hód
)->
¥ev
 = 
ªq
;

2221 
	}
}

2224 
	$°rög_num_dŸs
(c⁄° *
s
) {

2225 
cou¡
 = 0;

2226 (
s
 = 
	`°rchr
(s, '.'))) {

2227 
s
++;

2228 
cou¡
++;

2230  
cou¡
;

2231 
	}
}

2233 
ªque°
 *

2234 
	$ªque°_√w
(
ty≥
, c⁄° *
«me
, 
Êags
,

2235 
evdns_ˇŒback_ty≥
 
ˇŒback
, *
u£r_±r
) {

2236 c⁄° 
issuög_now
 =

2237 (
globÆ_ªque°s_öÊight
 < 
globÆ_max_ªque°s_öÊight
) ? 1 : 0;

2239 c⁄° 
«me_Àn
 = 
	`°æí
(
«me
);

2240 c⁄° 
ªque°_max_Àn
 = 
	`evdns_ªque°_Àn
(
«me_Àn
);

2241 c⁄° 
u16
 
å™s_id
 = 
issuög_now
 ? 
	`å™ß˘i⁄_id_pick
() : 0xffff;

2243 
ªque°
 *c⁄° 
ªq
 =

2244 (
ªque°
 *Ë
	`mÆloc
((ªque°Ë+ 
ªque°_max_Àn
);

2245 
æí
;

2246 (Ë
Êags
;

2248 i‡(!
ªq
Ë 
NULL
;

2249 
	`mem£t
(
ªq
, 0, (
ªque°
));

2251 
	`evtimî_£t
(&
ªq
->
timeout_evít
, 
evdns_ªque°_timeout_ˇŒback
,Ñeq);

2254 
ªq
->
ªque°
 = ((
u8
 *)Ñeq) + (request);

2256 
ªq
->
ªque°_≠≥nded
 = 1;

2257 
æí
 = 
	`evdns_ªque°_d©a_buûd
(
«me
, 
«me_Àn
, 
å™s_id
,

2258 
ty≥
, 
CLASS_INET
, 
ªq
->
ªque°
, 
ªque°_max_Àn
);

2259 i‡(
æí
 < 0)

2260 
îr1
;

2261 
ªq
->
ªque°_Àn
 = 
æí
;

2262 
ªq
->
å™s_id
 =Årans_id;

2263 
ªq
->
tx_cou¡
 = 0;

2264 
ªq
->
ªque°_ty≥
 = 
ty≥
;

2265 
ªq
->
u£r_poöãr
 = 
u£r_±r
;

2266 
ªq
->
u£r_ˇŒback
 = 
ˇŒback
;

2267 
ªq
->
ns
 = 
issuög_now
 ? 
	`«me£rvî_pick
(Ë: 
NULL
;

2268 
ªq
->
√xt
 =Ñeq->
¥ev
 = 
NULL
;

2270  
ªq
;

2271 
îr1
:

2272 
	`‰ì
(
ªq
);

2273  
NULL
;

2274 
	}
}

2277 
	$ªque°_submô
(
ªque°
 *c⁄° 
ªq
) {

2278 i‡(
ªq
->
ns
) {

2281 
	`evdns_ªque°_ö£π
(
ªq
, &
ªq_hód
);

2282 
globÆ_ªque°s_öÊight
++;

2283 
	`evdns_ªque°_å™smô
(
ªq
);

2285 
	`evdns_ªque°_ö£π
(
ªq
, &
ªq_waôög_hód
);

2286 
globÆ_ªque°s_waôög
++;

2288 
	}
}

2291 
	$evdns_ªsﬁve_ùv4
(c⁄° *
«me
, 
Êags
,

2292 
evdns_ˇŒback_ty≥
 
ˇŒback
, *
±r
) {

2293 
	`log
(
EVDNS_LOG_DEBUG
, "Resﬁvêªque°ed f‹ %s", 
«me
);

2294 i‡(
Êags
 & 
DNS_QUERY_NO_SEARCH
) {

2295 
ªque°
 *c⁄° 
ªq
 =

2296 
	`ªque°_√w
(
TYPE_A
, 
«me
, 
Êags
, 
ˇŒback
, 
±r
);

2297 i‡(
ªq
 =
NULL
)

2299 
	`ªque°_submô
(
ªq
);

2302  (
	`£¨ch_ªque°_√w
(
TYPE_A
, 
«me
, 
Êags
, 
ˇŒback
, 
±r
));

2304 
	}
}

2307 
	$evdns_ªsﬁve_ùv6
(c⁄° *
«me
, 
Êags
,

2308 
evdns_ˇŒback_ty≥
 
ˇŒback
, *
±r
) {

2309 
	`log
(
EVDNS_LOG_DEBUG
, "Resﬁvêªque°ed f‹ %s", 
«me
);

2310 i‡(
Êags
 & 
DNS_QUERY_NO_SEARCH
) {

2311 
ªque°
 *c⁄° 
ªq
 =

2312 
	`ªque°_√w
(
TYPE_AAAA
, 
«me
, 
Êags
, 
ˇŒback
, 
±r
);

2313 i‡(
ªq
 =
NULL
)

2315 
	`ªque°_submô
(
ªq
);

2318  (
	`£¨ch_ªque°_√w
(
TYPE_AAAA
, 
«me
, 
Êags
, 
ˇŒback
, 
±r
));

2320 
	}
}

2322 
	$evdns_ªsﬁve_ªvî£
(c⁄° 
ö_addr
 *
ö
, 
Êags
, 
evdns_ˇŒback_ty≥
 
ˇŒback
, *
±r
) {

2323 
buf
[32];

2324 
ªque°
 *
ªq
;

2325 
u32
 
a
;

2326 
	`as£π
(
ö
);

2327 
a
 = 
	`¡ohl
(
ö
->
s_addr
);

2328 
	`evutû_¢¥ötf
(
buf
, (buf), "%d.%d.%d.%d.in-addr.arpa",

2329 ()(
u8
)((
a
 )&0xff),

2330 ()(
u8
)((
a
>>8 )&0xff),

2331 ()(
u8
)((
a
>>16)&0xff),

2332 ()(
u8
)((
a
>>24)&0xff));

2333 
	`log
(
EVDNS_LOG_DEBUG
, "Resﬁvêªque°ed f‹ %†‘evî£)", 
buf
);

2334 
ªq
 = 
	`ªque°_√w
(
TYPE_PTR
, 
buf
, 
Êags
, 
ˇŒback
, 
±r
);

2335 i‡(!
ªq
)  1;

2336 
	`ªque°_submô
(
ªq
);

2338 
	}
}

2340 
	$evdns_ªsﬁve_ªvî£_ùv6
(c⁄° 
ö6_addr
 *
ö
, 
Êags
, 
evdns_ˇŒback_ty≥
 
ˇŒback
, *
±r
) {

2342 
buf
[73];

2343 *
˝
;

2344 
ªque°
 *
ªq
;

2345 
i
;

2346 
	`as£π
(
ö
);

2347 
˝
 = 
buf
;

2348 
i
=15; i >= 0; --i) {

2349 
u8
 
byã
 = 
ö
->
s6_addr
[
i
];

2350 *
˝
++ = "0123456789abcdef"[
byã
 & 0x0f];

2351 *
˝
++ = '.';

2352 *
˝
++ = "0123456789abcdef"[
byã
 >> 4];

2353 *
˝
++ = '.';

2355 
	`as£π
(
˝
 + 
	`°æí
("ù6.¨∑"Ë< 
buf
+(buf));

2356 
	`mem˝y
(
˝
, "ù6.¨∑", 
	`°æí
("ip6.arpa")+1);

2357 
	`log
(
EVDNS_LOG_DEBUG
, "Resﬁvêªque°ed f‹ %†‘evî£)", 
buf
);

2358 
ªq
 = 
	`ªque°_√w
(
TYPE_PTR
, 
buf
, 
Êags
, 
ˇŒback
, 
±r
);

2359 i‡(!
ªq
)  1;

2360 
	`ªque°_submô
(
ªq
);

2362 
	}
}

2377 
	s£¨ch_domaö
 {

2378 
	mÀn
;

2379 
£¨ch_domaö
 *
	m√xt
;

2383 
	s£¨ch_°©e
 {

2384 
	mªfcou¡
;

2385 
	mndŸs
;

2386 
	mnum_domaös
;

2387 
£¨ch_domaö
 *
	mhód
;

2390 
£¨ch_°©e
 *
	gglobÆ_£¨ch_°©e
 = 
NULL
;

2393 
	$£¨ch_°©e_de¸ef
(
£¨ch_°©e
 *c⁄° 
°©e
) {

2394 i‡(!
°©e
) ;

2395 
°©e
->
ªfcou¡
--;

2396 i‡(!
°©e
->
ªfcou¡
) {

2397 
£¨ch_domaö
 *
√xt
, *
dom
;

2398 
dom
 = 
°©e
->
hód
; dom; dom = 
√xt
) {

2399 
√xt
 = 
dom
->next;

2400 
	`‰ì
(
dom
);

2402 
	`‰ì
(
°©e
);

2404 
	}
}

2406 
£¨ch_°©e
 *

2407 
	$£¨ch_°©e_√w
() {

2408 
£¨ch_°©e
 *
°©e
 = (£¨ch_°©ê*Ë
	`mÆloc
((search_state));

2409 i‡(!
°©e
Ë 
NULL
;

2410 
	`mem£t
(
°©e
, 0, (
£¨ch_°©e
));

2411 
°©e
->
ªfcou¡
 = 1;

2412 
°©e
->
ndŸs
 = 1;

2414  
°©e
;

2415 
	}
}

2418 
	$£¨ch_po°fix_˛ór
() {

2419 
	`£¨ch_°©e_de¸ef
(
globÆ_£¨ch_°©e
);

2421 
globÆ_£¨ch_°©e
 = 
	`£¨ch_°©e_√w
();

2422 
	}
}

2426 
	$evdns_£¨ch_˛ór
() {

2427 
	`£¨ch_po°fix_˛ór
();

2428 
	}
}

2431 
	$£¨ch_po°fix_add
(c⁄° *
domaö
) {

2432 
domaö_Àn
;

2433 
£¨ch_domaö
 *
sdomaö
;

2434 
domaö
[0] == '.') domain++;

2435 
domaö_Àn
 = 
	`°æí
(
domaö
);

2437 i‡(!
globÆ_£¨ch_°©e
ËglobÆ_£¨ch_°©ê
	`£¨ch_°©e_√w
();

2438 i‡(!
globÆ_£¨ch_°©e
) ;

2439 
globÆ_£¨ch_°©e
->
num_domaös
++;

2441 
sdomaö
 = (
£¨ch_domaö
 *Ë
	`mÆloc
((£¨ch_domaöË+ 
domaö_Àn
);

2442 i‡(!
sdomaö
) ;

2443 
	`mem˝y
–((
u8
 *Ë
sdomaö
Ë+ (
£¨ch_domaö
), 
domaö
, 
domaö_Àn
);

2444 
sdomaö
->
√xt
 = 
globÆ_£¨ch_°©e
->
hód
;

2445 
sdomaö
->
Àn
 = 
domaö_Àn
;

2447 
globÆ_£¨ch_°©e
->
hód
 = 
sdomaö
;

2448 
	}
}

2453 
	$£¨ch_ªvî£
() {

2454 
£¨ch_domaö
 *
cur
, *
¥ev
 = 
NULL
, *
√xt
;

2455 
cur
 = 
globÆ_£¨ch_°©e
->
hód
;

2456 
cur
) {

2457 
√xt
 = 
cur
->next;

2458 
cur
->
√xt
 = 
¥ev
;

2459 
¥ev
 = 
cur
;

2460 
cur
 = 
√xt
;

2463 
globÆ_£¨ch_°©e
->
hód
 = 
¥ev
;

2464 
	}
}

2468 
	$evdns_£¨ch_add
(c⁄° *
domaö
) {

2469 
	`£¨ch_po°fix_add
(
domaö
);

2470 
	}
}

2474 
	$evdns_£¨ch_ndŸs_£t
(c⁄° 
ndŸs
) {

2475 i‡(!
globÆ_£¨ch_°©e
ËglobÆ_£¨ch_°©ê
	`£¨ch_°©e_√w
();

2476 i‡(!
globÆ_£¨ch_°©e
) ;

2477 
globÆ_£¨ch_°©e
->
ndŸs
 =Çdots;

2478 
	}
}

2481 
	$£¨ch_£t_‰om_ho°«me
() {

2482 
ho°«me
[
HOST_NAME_MAX
 + 1], *
domaö«me
;

2484 
	`£¨ch_po°fix_˛ór
();

2485 i‡(
	`gëho°«me
(
ho°«me
, (hostname))) ;

2486 
domaö«me
 = 
	`°rchr
(
ho°«me
, '.');

2487 i‡(!
domaö«me
) ;

2488 
	`£¨ch_po°fix_add
(
domaö«me
);

2489 
	}
}

2493 
	$£¨ch_make_√w
(c⁄° 
£¨ch_°©e
 *c⁄° 
°©e
, 
n
, c⁄° *c⁄° 
ba£_«me
) {

2494 c⁄° 
ba£_Àn
 = 
	`°æí
(
ba£_«me
);

2495 c⁄° 
√ed_to_≠≥nd_dŸ
 = 
ba£_«me
[
ba£_Àn
 - 1] == '.' ? 0 : 1;

2496 
£¨ch_domaö
 *
dom
;

2498 
dom
 = 
°©e
->
hód
; dom; dom = dom->
√xt
) {

2499 i‡(!
n
--) {

2502 c⁄° 
u8
 *c⁄° 
po°fix
 = ((u8 *Ë
dom
Ë+ (
£¨ch_domaö
);

2503 c⁄° 
po°fix_Àn
 = 
dom
->
Àn
;

2504 *c⁄° 
√w«me
 = (*Ë
	`mÆloc
(
ba£_Àn
 + 
√ed_to_≠≥nd_dŸ
 + 
po°fix_Àn
 + 1);

2505 i‡(!
√w«me
Ë 
NULL
;

2506 
	`mem˝y
(
√w«me
, 
ba£_«me
, 
ba£_Àn
);

2507 i‡(
√ed_to_≠≥nd_dŸ
Ë
√w«me
[
ba£_Àn
] = '.';

2508 
	`mem˝y
(
√w«me
 + 
ba£_Àn
 + 
√ed_to_≠≥nd_dŸ
, 
po°fix
, 
po°fix_Àn
);

2509 
√w«me
[
ba£_Àn
 + 
√ed_to_≠≥nd_dŸ
 + 
po°fix_Àn
] = 0;

2510  
√w«me
;

2515 
	`ab‹t
();

2516  
NULL
;

2517 
	}
}

2520 
	$£¨ch_ªque°_√w
(
ty≥
, c⁄° *c⁄° 
«me
, 
Êags
, 
evdns_ˇŒback_ty≥
 
u£r_ˇŒback
, *
u£r_¨g
) {

2521 
	`as£π
(
ty≥
 =
TYPE_A
 ||Åy≥ =
TYPE_AAAA
);

2522 i‡–((
Êags
 & 
DNS_QUERY_NO_SEARCH
) == 0) &&

2523 
globÆ_£¨ch_°©e
 &&

2524 
globÆ_£¨ch_°©e
->
num_domaös
) {

2526 
ªque°
 *
ªq
;

2527 i‡(
	`°rög_num_dŸs
(
«me
Ë>
globÆ_£¨ch_°©e
->
ndŸs
) {

2528 
ªq
 = 
	`ªque°_√w
(
ty≥
, 
«me
, 
Êags
, 
u£r_ˇŒback
, 
u£r_¨g
);

2529 i‡(!
ªq
)  1;

2530 
ªq
->
£¨ch_ödex
 = -1;

2532 *c⁄° 
√w_«me
 = 
	`£¨ch_make_√w
(
globÆ_£¨ch_°©e
, 0, 
«me
);

2533 i‡(!
√w_«me
)  1;

2534 
ªq
 = 
	`ªque°_√w
(
ty≥
, 
√w_«me
, 
Êags
, 
u£r_ˇŒback
, 
u£r_¨g
);

2535 
	`‰ì
(
√w_«me
);

2536 i‡(!
ªq
)  1;

2537 
ªq
->
£¨ch_ödex
 = 0;

2539 
ªq
->
£¨ch_‹ig«me
 = 
	`°rdup
(
«me
);

2540 
ªq
->
£¨ch_°©e
 = 
globÆ_£¨ch_°©e
;

2541 
ªq
->
£¨ch_Êags
 = 
Êags
;

2542 
globÆ_£¨ch_°©e
->
ªfcou¡
++;

2543 
	`ªque°_submô
(
ªq
);

2546 
ªque°
 *c⁄° 
ªq
 = 
	`ªque°_√w
(
ty≥
, 
«me
, 
Êags
, 
u£r_ˇŒback
, 
u£r_¨g
);

2547 i‡(!
ªq
)  1;

2548 
	`ªque°_submô
(
ªq
);

2551 
	}
}

2559 
	$£¨ch_åy_√xt
(
ªque°
 *c⁄° 
ªq
) {

2560 i‡(
ªq
->
£¨ch_°©e
) {

2562 *
√w_«me
;

2563 
ªque°
 *
√wªq
;

2564 
ªq
->
£¨ch_ödex
++;

2565 i‡(
ªq
->
£¨ch_ödex
 >ªq->
£¨ch_°©e
->
num_domaös
) {

2568 i‡(
	`°rög_num_dŸs
(
ªq
->
£¨ch_‹ig«me
Ë<Ñeq->
£¨ch_°©e
->
ndŸs
) {

2570 
√wªq
 = 
	`ªque°_√w
(
ªq
->
ªque°_ty≥
,Ñeq->
£¨ch_‹ig«me
,Ñeq->
£¨ch_Êags
,Ñeq->
u£r_ˇŒback
,Ñeq->
u£r_poöãr
);

2571 
	`log
(
EVDNS_LOG_DEBUG
, "Sórch:ÅryögÑaw quîy %s", 
ªq
->
£¨ch_‹ig«me
);

2572 i‡(
√wªq
) {

2573 
	`ªque°_submô
(
√wªq
);

2580 
√w_«me
 = 
	`£¨ch_make_√w
(
ªq
->
£¨ch_°©e
,Ñeq->
£¨ch_ödex
,Ñeq->
£¨ch_‹ig«me
);

2581 i‡(!
√w_«me
)  1;

2582 
	`log
(
EVDNS_LOG_DEBUG
, "Sórch:ÇowÅryög %†(%d)", 
√w_«me
, 
ªq
->
£¨ch_ödex
);

2583 
√wªq
 = 
	`ªque°_√w
(
ªq
->
ªque°_ty≥
, 
√w_«me
,Ñeq->
£¨ch_Êags
,Ñeq->
u£r_ˇŒback
,Ñeq->
u£r_poöãr
);

2584 
	`‰ì
(
√w_«me
);

2585 i‡(!
√wªq
)  1;

2586 
√wªq
->
£¨ch_‹ig«me
 = 
ªq
->search_origname;

2587 
ªq
->
£¨ch_‹ig«me
 = 
NULL
;

2588 
√wªq
->
£¨ch_°©e
 = 
ªq
->search_state;

2589 
√wªq
->
£¨ch_Êags
 = 
ªq
->search_flags;

2590 
√wªq
->
£¨ch_ödex
 = 
ªq
->search_index;

2591 
√wªq
->
£¨ch_°©e
->
ªfcou¡
++;

2592 
	`ªque°_submô
(
√wªq
);

2596 
	}
}

2599 
	$£¨ch_ªque°_föished
(
ªque°
 *c⁄° 
ªq
) {

2600 i‡(
ªq
->
£¨ch_°©e
) {

2601 
	`£¨ch_°©e_de¸ef
(
ªq
->
£¨ch_°©e
);

2602 
ªq
->
£¨ch_°©e
 = 
NULL
;

2604 i‡(
ªq
->
£¨ch_‹ig«me
) {

2605 
	`‰ì
(
ªq
->
£¨ch_‹ig«me
);

2606 
ªq
->
£¨ch_‹ig«me
 = 
NULL
;

2608 
	}
}

2614 
	$evdns_ªsﬁv_£t_deÁu…s
(
Êags
) {

2616 i‡(
Êags
 & 
DNS_OPTION_SEARCH
Ë
	`£¨ch_£t_‰om_ho°«me
();

2617 i‡(
Êags
 & 
DNS_OPTION_NAMESERVERS
Ë
	`evdns_«me£rvî_ù_add
("127.0.0.1");

2618 
	}
}

2620 #i‚de‡
HAVE_STRTOK_R


2622 
	$°πok_r
(*
s
, c⁄° *
dñim
, **
°©e
) {

2623  
	`°πok
(
s
, 
dñim
);

2624 
	}
}

2629 
	$°πoöt
(c⁄° *c⁄° 
°r
) {

2630 *
íd±r
;

2631 c⁄° 
r
 = 
	`°πﬁ
(
°r
, &
íd±r
, 10);

2632 i‡(*
íd±r
)  -1;

2633  
r
;

2634 
	}
}

2638 
	$°πoöt_˛ù≥d
(c⁄° *c⁄° 
°r
, 
mö
, 
max
)

2640 
r
 = 
	`°πoöt
(
°r
);

2641 i‡(
r
 == -1)

2642  
r
;

2643 i‡(
r
<
mö
)

2644  
mö
;

2645 i‡(
r
>
max
)

2646  
max
;

2648  
r
;

2649 
	}
}

2653 
	$evdns_£t_›ti⁄
(c⁄° *
›ti⁄
, c⁄° *
vÆ
, 
Êags
)

2655 i‡(!
	`°∫cmp
(
›ti⁄
, "ndots:", 6)) {

2656 c⁄° 
ndŸs
 = 
	`°πoöt
(
vÆ
);

2657 i‡(
ndŸs
 == -1)  -1;

2658 i‡(!(
Êags
 & 
DNS_OPTION_SEARCH
))  0;

2659 
	`log
(
EVDNS_LOG_DEBUG
, "SëtögÇdŸ†tÿ%d", 
ndŸs
);

2660 i‡(!
globÆ_£¨ch_°©e
ËglobÆ_£¨ch_°©ê
	`£¨ch_°©e_√w
();

2661 i‡(!
globÆ_£¨ch_°©e
)  -1;

2662 
globÆ_£¨ch_°©e
->
ndŸs
 =Çdots;

2663 } i‡(!
	`°∫cmp
(
›ti⁄
, "timeout:", 8)) {

2664 c⁄° 
timeout
 = 
	`°πoöt
(
vÆ
);

2665 i‡(
timeout
 == -1)  -1;

2666 i‡(!(
Êags
 & 
DNS_OPTION_MISC
))  0;

2667 
	`log
(
EVDNS_LOG_DEBUG
, "SëtögÅimeouàtÿ%d", 
timeout
);

2668 
globÆ_timeout
.
tv_£c
 = 
timeout
;

2669 } i‡(!
	`°∫cmp
(
›ti⁄
, "max-timeouts:", 12)) {

2670 c⁄° 
maxtimeout
 = 
	`°πoöt_˛ù≥d
(
vÆ
, 1, 255);

2671 i‡(
maxtimeout
 == -1)  -1;

2672 i‡(!(
Êags
 & 
DNS_OPTION_MISC
))  0;

2673 
	`log
(
EVDNS_LOG_DEBUG
, "Setting maximumállowedÅimeoutsÅo %d",

2674 
maxtimeout
);

2675 
globÆ_max_«me£rvî_timeout
 = 
maxtimeout
;

2676 } i‡(!
	`°∫cmp
(
›ti⁄
, "max-inflight:", 13)) {

2677 c⁄° 
maxöÊight
 = 
	`°πoöt_˛ù≥d
(
vÆ
, 1, 65000);

2678 i‡(
maxöÊight
 == -1)  -1;

2679 i‡(!(
Êags
 & 
DNS_OPTION_MISC
))  0;

2680 
	`log
(
EVDNS_LOG_DEBUG
, "Setting maximum inflightÑequestsÅo %d",

2681 
maxöÊight
);

2682 
globÆ_max_ªque°s_öÊight
 = 
maxöÊight
;

2683 } i‡(!
	`°∫cmp
(
›ti⁄
, "attempts:", 9)) {

2684 
ªåõs
 = 
	`°πoöt
(
vÆ
);

2685 i‡(
ªåõs
 == -1)  -1;

2686 i‡(
ªåõs
 > 255)Ñetries = 255;

2687 i‡(!(
Êags
 & 
DNS_OPTION_MISC
))  0;

2688 
	`log
(
EVDNS_LOG_DEBUG
, "SëtögÑërõ†tÿ%d", 
ªåõs
);

2689 
globÆ_max_ªå™smôs
 = 
ªåõs
;

2692 
	}
}

2695 
	$ªsﬁv_c⁄f_∑r£_löe
(*c⁄° 
°¨t
, 
Êags
) {

2696 *
°πok_°©e
;

2697 c⁄° *c⁄° 
dñims
 = " \t";

2698 
	#NEXT_TOKEN
 
	`°πok_r
(
NULL
, 
dñims
, &
°πok_°©e
)

	)

2700 *c⁄° 
fú°_tokí
 = 
	`°πok_r
(
°¨t
, 
dñims
, &
°πok_°©e
);

2701 i‡(!
fú°_tokí
) ;

2703 i‡(!
	`°rcmp
(
fú°_tokí
, "«me£rvî"Ë&& (
Êags
 & 
DNS_OPTION_NAMESERVERS
)) {

2704 c⁄° *c⁄° 
«me£rvî
 = 
NEXT_TOKEN
;

2705 
ö_addr
 
öa
;

2707 i‡(
	`öë_©⁄
(
«me£rvî
, &
öa
)) {

2709 
	`evdns_«me£rvî_add
(
öa
.
s_addr
);

2711 } i‡(!
	`°rcmp
(
fú°_tokí
, "domaö"Ë&& (
Êags
 & 
DNS_OPTION_SEARCH
)) {

2712 c⁄° *c⁄° 
domaö
 = 
NEXT_TOKEN
;

2713 i‡(
domaö
) {

2714 
	`£¨ch_po°fix_˛ór
();

2715 
	`£¨ch_po°fix_add
(
domaö
);

2717 } i‡(!
	`°rcmp
(
fú°_tokí
, "£¨ch"Ë&& (
Êags
 & 
DNS_OPTION_SEARCH
)) {

2718 c⁄° *
domaö
;

2719 
	`£¨ch_po°fix_˛ór
();

2721 (
domaö
 = 
NEXT_TOKEN
)) {

2722 
	`£¨ch_po°fix_add
(
domaö
);

2724 
	`£¨ch_ªvî£
();

2725 } i‡(!
	`°rcmp
(
fú°_tokí
, "options")) {

2726 c⁄° *
›ti⁄
;

2727 (
›ti⁄
 = 
NEXT_TOKEN
)) {

2728 c⁄° *
vÆ
 = 
	`°rchr
(
›ti⁄
, ':');

2729 
	`evdns_£t_›ti⁄
(
›ti⁄
, 
vÆ
 ? vÆ+1 : "", 
Êags
);

2732 #unde‡
NEXT_TOKEN


2733 
	}
}

2744 
	$evdns_ªsﬁv_c⁄f_∑r£
(
Êags
, c⁄° *c⁄° 
fûíame
) {

2745 
°©
 
°
;

2746 
fd
, 
n
, 
r
;

2747 
u8
 *
ªsﬁv
;

2748 *
°¨t
;

2749 
îr
 = 0;

2751 
	`log
(
EVDNS_LOG_DEBUG
, "P¨sögÑesﬁv.c⁄‡fûê%s", 
fûíame
);

2753 
fd
 = 
	`›í
(
fûíame
, 
O_RDONLY
);

2754 i‡(
fd
 < 0) {

2755 
	`evdns_ªsﬁv_£t_deÁu…s
(
Êags
);

2759 i‡(
	`f°©
(
fd
, &
°
)Ë{ 
îr
 = 2; 
out1
; }

2760 i‡(!
°
.
°_size
) {

2761 
	`evdns_ªsﬁv_£t_deÁu…s
(
Êags
);

2762 
îr
 = (
Êags
 & 
DNS_OPTION_NAMESERVERS
) ? 6 : 0;

2763 
out1
;

2765 i‡(
°
.
°_size
 > 65535Ë{ 
îr
 = 3; 
out1
; }

2767 
ªsﬁv
 = (
u8
 *Ë
	`mÆloc
((
size_t
)
°
.
°_size
 + 1);

2768 i‡(!
ªsﬁv
Ë{ 
îr
 = 4; 
out1
; }

2770 
n
 = 0;

2771 (
r
 = 
	`ªad
(
fd
, 
ªsﬁv
+
n
, (
size_t
)
°
.
°_size
-n)) > 0) {

2772 
n
 +
r
;

2773 i‡(
n
 =
°
.
°_size
)

2775 
	`as£π
(
n
 < 
°
.
°_size
);

2777 i‡(
r
 < 0Ë{ 
îr
 = 5; 
out2
; }

2778 
ªsﬁv
[
n
] = 0;

2780 
°¨t
 = (*Ë
ªsﬁv
;

2782 *c⁄° 
√wlöe
 = 
	`°rchr
(
°¨t
, '\n');

2783 i‡(!
√wlöe
) {

2784 
	`ªsﬁv_c⁄f_∑r£_löe
(
°¨t
, 
Êags
);

2787 *
√wlöe
 = 0;

2788 
	`ªsﬁv_c⁄f_∑r£_löe
(
°¨t
, 
Êags
);

2789 
°¨t
 = 
√wlöe
 + 1;

2793 i‡(!
£rvî_hód
 && (
Êags
 & 
DNS_OPTION_NAMESERVERS
)) {

2795 
	`evdns_«me£rvî_ù_add
("127.0.0.1");

2796 
îr
 = 6;

2798 i‡(
Êags
 & 
DNS_OPTION_SEARCH
 && (!
globÆ_£¨ch_°©e
 || globÆ_£¨ch_°©e->
num_domaös
 == 0)) {

2799 
	`£¨ch_£t_‰om_ho°«me
();

2802 
out2
:

2803 
	`‰ì
(
ªsﬁv
);

2804 
out1
:

2805 
	`˛o£
(
fd
);

2806  
îr
;

2807 
	}
}

2809 #ifde‡
WIN32


2812 
	$evdns_«me£rvî_ù_add_löe
(c⁄° *
ùs
) {

2813 c⁄° *
addr
;

2814 *
buf
;

2815 
r
;

2816 *
ùs
) {

2817 
	`ISSPACE
(*
ùs
) || *ips == ',' || *ips == '\t')

2818 ++
ùs
;

2819 
addr
 = 
ùs
;

2820 
	`ISDIGIT
(*
ùs
) || *ips == '.' || *ips == ':')

2821 ++
ùs
;

2822 
buf
 = 
	`mÆloc
(
ùs
-
addr
+1);

2823 i‡(!
buf
)  4;

2824 
	`mem˝y
(
buf
, 
addr
, 
ùs
-addr);

2825 
buf
[
ùs
-
addr
] = '\0';

2826 
r
 = 
	`evdns_«me£rvî_ù_add
(
buf
);

2827 
	`‰ì
(
buf
);

2828 i‡(
r
) Ñ;

2831 
	}
}

2833 
	$DWORD
(
	tWINAPI
 *
	tGëNëw‹kP¨ams_‚_t
)(
	tFIXED_INFO
 *, 
	tDWORD
*);

2838 
	$lﬂd_«me£rvîs_wôh_gë√tw‹k∑øms
()

2841 
FIXED_INFO
 *
fixed
;

2842 
HMODULE
 
h™dÀ
 = 0;

2843 
ULONG
 
size
 = (
FIXED_INFO
);

2844 *
buf
 = 
NULL
;

2845 
°©us
 = 0, 
r
, 
added_™y
;

2846 
IP_ADDR_STRING
 *
ns
;

2847 
GëNëw‹kP¨ams_‚_t
 
‚
;

2849 i‡(!(
h™dÀ
 = 
	`LﬂdLibøry
("iphlpapi.dll"))) {

2850 
	`log
(
EVDNS_LOG_WARN
, "CouldÇot open iphlpapi.dll");

2851 
°©us
 = -1;

2852 
d⁄e
;

2854 i‡(!(
‚
 = (
GëNëw‹kP¨ams_‚_t
Ë
	`GëProcAddªss
(
h™dÀ
, "GetNetworkParams"))) {

2855 
	`log
(
EVDNS_LOG_WARN
, "CouldÇot getáddress of function.");

2856 
°©us
 = -1;

2857 
d⁄e
;

2860 
buf
 = 
	`mÆloc
(
size
);

2861 i‡(!
buf
Ë{ 
°©us
 = 4; 
d⁄e
; }

2862 
fixed
 = 
buf
;

2863 
r
 = 
	`‚
(
fixed
, &
size
);

2864 i‡(
r
 !
ERROR_SUCCESS
 &&Ñ !
ERROR_BUFFER_OVERFLOW
) {

2865 
°©us
 = -1;

2866 
d⁄e
;

2868 i‡(
r
 !
ERROR_SUCCESS
) {

2869 
	`‰ì
(
buf
);

2870 
buf
 = 
	`mÆloc
(
size
);

2871 i‡(!
buf
Ë{ 
°©us
 = 4; 
d⁄e
; }

2872 
fixed
 = 
buf
;

2873 
r
 = 
	`‚
(
fixed
, &
size
);

2874 i‡(
r
 !
ERROR_SUCCESS
) {

2875 
	`log
(
EVDNS_LOG_DEBUG
, "fn() failed.");

2876 
°©us
 = -1;

2877 
d⁄e
;

2881 
	`as£π
(
fixed
);

2882 
added_™y
 = 0;

2883 
ns
 = &(
fixed
->
DnsSîvîLi°
);

2884 
ns
) {

2885 
r
 = 
	`evdns_«me£rvî_ù_add_löe
(
ns
->
IpAddªss
.
Såög
);

2886 i‡(
r
) {

2887 
	`log
(
EVDNS_LOG_DEBUG
,"CouldÇotáddÇameserver %sÅoÜist,error: %d",

2888 (
ns
->
IpAddªss
.
Såög
),()
	`GëLa°Eº‹
());

2889 
°©us
 = 
r
;

2890 
d⁄e
;

2892 
	`log
(
EVDNS_LOG_DEBUG
,"Suc˚sfuŒyádded %†a†«me£rvî",
ns
->
IpAddªss
.
Såög
);

2895 
added_™y
++;

2896 
ns
 =Çs->
Next
;

2899 i‡(!
added_™y
) {

2900 
	`log
(
EVDNS_LOG_DEBUG
, "NoÇameserversádded.");

2901 
°©us
 = -1;

2904 
d⁄e
:

2905 i‡(
buf
)

2906 
	`‰ì
(
buf
);

2907 i‡(
h™dÀ
)

2908 
	`FªeLibøry
(
h™dÀ
);

2909  
°©us
;

2910 
	}
}

2913 
	$c⁄fig_«me£rvî_‰om_ªg_key
(
HKEY
 
key
, c⁄° *
subkey
)

2915 *
buf
;

2916 
DWORD
 
bufsz
 = 0, 
ty≥
 = 0;

2917 
°©us
 = 0;

2919 i‡(
	`RegQuîyVÆueEx
(
key
, 
subkey
, 0, &
ty≥
, 
NULL
, &
bufsz
)

2920 !
ERROR_MORE_DATA
)

2922 i‡(!(
buf
 = 
	`mÆloc
(
bufsz
)))

2925 i‡(
	`RegQuîyVÆueEx
(
key
, 
subkey
, 0, &
ty≥
, (
LPBYTE
)
buf
, &
bufsz
)

2926 =
ERROR_SUCCESS
 && 
bufsz
 > 1) {

2927 
°©us
 = 
	`evdns_«me£rvî_ù_add_löe
(
buf
);

2930 
	`‰ì
(
buf
);

2931  
°©us
;

2932 
	}
}

2934 
	#SERVICES_KEY
 "Sy°em\\CuºítC⁄åﬁSë\\Sîvi˚s\\"

	)

2935 
	#WIN_NS_9X_KEY
 
SERVICES_KEY
 "VxD\\MSTCP"

	)

2936 
	#WIN_NS_NT_KEY
 
SERVICES_KEY
 "T˝ù\\P¨amëîs"

	)

2939 
	$lﬂd_«me£rvîs_‰om_ªgi°ry
()

2941 
found
 = 0;

2942 
r
;

2943 
	#TRY
(
k
, 
«me
) \

2944 i‡(!
found
 && 
	`c⁄fig_«me£rvî_‰om_ªg_key
(
k
,
«me
) == 0) { \

2945 
	`log
(
EVDNS_LOG_DEBUG
,"FoundÇame£rvî†ö %s/%s",#k,
«me
); \

2946 
found
 = 1; \

2947 } i‡(!
found
) { \

2948 
	`log
(
EVDNS_LOG_DEBUG
,"Didn't findÇameservers in %s/%s", \

2950 }

	)

2952 i‡((()
	`GëVîsi⁄
()) > 0) {

2953 
HKEY
 
¡_key
 = 0, 
öãrÁ˚s_key
 = 0;

2955 i‡(
	`RegO≥nKeyEx
(
HKEY_LOCAL_MACHINE
, 
WIN_NS_NT_KEY
, 0,

2956 
KEY_READ
, &
¡_key
Ë!
ERROR_SUCCESS
) {

2957 
	`log
(
EVDNS_LOG_DEBUG
,"Couldn'à›íÇàkey, %d",()
	`GëLa°Eº‹
());

2960 
r
 = 
	`RegO≥nKeyEx
(
¡_key
, "Interfaces", 0,

2961 
KEY_QUERY_VALUE
|
KEY_ENUMERATE_SUB_KEYS
,

2962 &
öãrÁ˚s_key
);

2963 i‡(
r
 !
ERROR_SUCCESS
) {

2964 
	`log
(
EVDNS_LOG_DEBUG
,"Couldn'à›í i¡îÁ˚†key, %d",()
	`GëLa°Eº‹
());

2967 
	`TRY
(
¡_key
, "NameServer");

2968 
	`TRY
(
¡_key
, "DhcpNameServer");

2969 
	`TRY
(
öãrÁ˚s_key
, "NameServer");

2970 
	`TRY
(
öãrÁ˚s_key
, "DhcpNameServer");

2971 
	`RegClo£Key
(
öãrÁ˚s_key
);

2972 
	`RegClo£Key
(
¡_key
);

2974 
HKEY
 
wö_key
 = 0;

2975 i‡(
	`RegO≥nKeyEx
(
HKEY_LOCAL_MACHINE
, 
WIN_NS_9X_KEY
, 0,

2976 
KEY_READ
, &
wö_key
Ë!
ERROR_SUCCESS
) {

2977 
	`log
(
EVDNS_LOG_DEBUG
, "Couldn'à›íÑegi°ry key, %d", ()
	`GëLa°Eº‹
());

2980 
	`TRY
(
wö_key
, "NameServer");

2981 
	`RegClo£Key
(
wö_key
);

2984 i‡(
found
 == 0) {

2985 
	`log
(
EVDNS_LOG_WARN
,"Didn't findányÇameservers.");

2988  
found
 ? 0 : -1;

2989 #unde‡
TRY


2990 
	}
}

2993 
	$evdns_c⁄fig_wödows_«me£rvîs
()

2995 i‡(
	`lﬂd_«me£rvîs_wôh_gë√tw‹k∑øms
() == 0)

2997  
	`lﬂd_«me£rvîs_‰om_ªgi°ry
();

2998 
	}
}

3002 
	$evdns_öô
()

3004 
ªs
 = 0;

3005 #ifde‡
WIN32


3006 
ªs
 = 
	`evdns_c⁄fig_wödows_«me£rvîs
();

3008 
ªs
 = 
	`evdns_ªsﬁv_c⁄f_∑r£
(
DNS_OPTIONS_ALL
, "/etc/resolv.conf");

3011  (
ªs
);

3012 
	}
}

3015 
	$evdns_îr_to_°rög
(
îr
)

3017 
îr
) {

3018 
DNS_ERR_NONE
:  "noÉrror";

3019 
DNS_ERR_FORMAT
:  "misformatted query";

3020 
DNS_ERR_SERVERFAILED
:  "server failed";

3021 
DNS_ERR_NOTEXIST
:  "name doesÇotÉxist";

3022 
DNS_ERR_NOTIMPL
:  "queryÇot implemented";

3023 
DNS_ERR_REFUSED
:  "refused";

3025 
DNS_ERR_TRUNCATED
:  "replyÅruncated or ill-formed";

3026 
DNS_ERR_UNKNOWN
:  "unknown";

3027 
DNS_ERR_TIMEOUT
:  "requestÅimed out";

3028 
DNS_ERR_SHUTDOWN
:  "dns subsystem shut down";

3031 
	}
}

3034 
	$evdns_shutdown
(
Áû_ªque°s
)

3036 
«me£rvî
 *
£rvî
, *
£rvî_√xt
;

3037 
£¨ch_domaö
 *
dom
, *
dom_√xt
;

3039 
ªq_hód
) {

3040 i‡(
Áû_ªque°s
)

3041 
	`ª∂y_ˇŒback
(
ªq_hód
, 0, 
DNS_ERR_SHUTDOWN
, 
NULL
);

3042 
	`ªque°_föished
(
ªq_hód
, &req_head);

3044 
ªq_waôög_hód
) {

3045 i‡(
Áû_ªque°s
)

3046 
	`ª∂y_ˇŒback
(
ªq_waôög_hód
, 0, 
DNS_ERR_SHUTDOWN
, 
NULL
);

3047 
	`ªque°_föished
(
ªq_waôög_hód
, &req_waiting_head);

3049 
globÆ_ªque°s_öÊight
 = 
globÆ_ªque°s_waôög
 = 0;

3051 
£rvî
 = 
£rvî_hód
; sîvî; sîvî = 
£rvî_√xt
) {

3052 
£rvî_√xt
 = 
£rvî
->
√xt
;

3053 i‡(
£rvî
->
sockë
 >= 0)

3054 
	`CLOSE_SOCKET
(
£rvî
->
sockë
);

3055 (Ë
	`evít_dñ
(&
£rvî
->
evít
);

3056 i‡(
£rvî
->
°©e
 == 0)

3057 (Ë
	`evít_dñ
(&
£rvî
->
timeout_evít
);

3058 
	`‰ì
(
£rvî
);

3059 i‡(
£rvî_√xt
 =
£rvî_hód
)

3062 
£rvî_hód
 = 
NULL
;

3063 
globÆ_good_«me£rvîs
 = 0;

3065 i‡(
globÆ_£¨ch_°©e
) {

3066 
dom
 = 
globÆ_£¨ch_°©e
->
hód
; dom; dom = 
dom_√xt
) {

3067 
dom_√xt
 = 
dom
->
√xt
;

3068 
	`‰ì
(
dom
);

3070 
	`‰ì
(
globÆ_£¨ch_°©e
);

3071 
globÆ_£¨ch_°©e
 = 
NULL
;

3073 
evdns_log_‚
 = 
NULL
;

3074 
	}
}

3076 #ifde‡
EVDNS_MAIN


3078 
	$maö_ˇŒback
(
ªsu…
, 
ty≥
, 
cou¡
, 
âl
,

3079 *
addrs
, *
‹ig
) {

3080 *
n
 = (*)
‹ig
;

3081 
i
;

3082 
i
 = 0; i < 
cou¡
; ++i) {

3083 i‡(
ty≥
 =
DNS_IPv4_A
) {

3084 
	`¥ötf
("%s: %s\n", 
n
, 
	`debug_¡ﬂ
(((
u32
*)
addrs
)[
i
]));

3085 } i‡(
ty≥
 =
DNS_PTR
) {

3086 
	`¥ötf
("%s: %s\n", 
n
, ((**)
addrs
)[
i
]);

3089 i‡(!
cou¡
) {

3090 
	`¥ötf
("%s: Nÿ™swî (%d)\n", 
n
, 
ªsu…
);

3092 
	`fÊush
(
°dout
);

3093 
	}
}

3095 
	$evdns_£rvî_ˇŒback
(
evdns_£rvî_ªque°
 *
ªq
, *
d©a
)

3097 
i
, 
r
;

3098 ()
d©a
;

3101 
i
 = 0; i < 
ªq
->
nque°i⁄s
; ++i) {

3102 
u32
 
™s
 = 
	`ht⁄l
(0xc0a80b0bUL);

3103 i‡(
ªq
->
que°i⁄s
[
i
]->
ty≥
 =
EVDNS_TYPE_A
 &&

3104 
ªq
->
que°i⁄s
[
i
]->
dns_que°i⁄_˛ass
 =
EVDNS_CLASS_INET
) {

3105 
	`¥ötf
(" --Ñïlyög f‹ %†(A)\n", 
ªq
->
que°i⁄s
[
i
]->
«me
);

3106 
r
 = 
	`evdns_£rvî_ªque°_add_a_ª∂y
(
ªq
,Ñeq->
que°i⁄s
[
i
]->
«me
,

3107 1, &
™s
, 10);

3108 i‡(
r
<0)

3109 
	`¥ötf
("eeep, didn't work.\n");

3110 } i‡(
ªq
->
que°i⁄s
[
i
]->
ty≥
 =
EVDNS_TYPE_PTR
 &&

3111 
ªq
->
que°i⁄s
[
i
]->
dns_que°i⁄_˛ass
 =
EVDNS_CLASS_INET
) {

3112 
	`¥ötf
(" --Ñïlyög f‹ %†(PTR)\n", 
ªq
->
que°i⁄s
[
i
]->
«me
);

3113 
r
 = 
	`evdns_£rvî_ªque°_add_±r_ª∂y
(
ªq
, 
NULL
,Ñeq->
que°i⁄s
[
i
]->
«me
,

3116 
	`¥ötf
(" -- skùpög %†[%d %d]\n", 
ªq
->
que°i⁄s
[
i
]->
«me
,

3117 
ªq
->
que°i⁄s
[
i
]->
ty≥
,Ñeq->que°i⁄s[i]->
dns_que°i⁄_˛ass
);

3121 
r
 = 
	`evdns_ªque°_ª•⁄d
(
ªq
, 0);

3122 i‡(
r
<0)

3123 
	`¥ötf
("eeek, couldn't sendÑeply.\n");

3124 
	}
}

3127 
	$log‚
(
is_w¨n
, c⁄° *
msg
) {

3128 (Ë
is_w¨n
;

3129 
	`Ârötf
(
°dîr
, "%s\n", 
msg
);

3130 
	}
}

3132 
	$maö
(
c
, **
v
) {

3133 
idx
;

3134 
ªvî£
 = 0, 
vîbo£
 = 1, 
£rvîã°
 = 0;

3135 i‡(
c
<2) {

3136 
	`Ârötf
(
°dîr
, "sy¡ax: %†[-x] [-v] ho°«me\n", 
v
[0]);

3137 
	`Ârötf
(
°dîr
, "sy¡ax: %†[-£rvîã°]\n", 
v
[0]);

3140 
idx
 = 1;

3141 
idx
 < 
c
 && 
v
[idx][0] == '-') {

3142 i‡(!
	`°rcmp
(
v
[
idx
], "-x"))

3143 
ªvî£
 = 1;

3144 i‡(!
	`°rcmp
(
v
[
idx
], "-v"))

3145 
vîbo£
 = 1;

3146 i‡(!
	`°rcmp
(
v
[
idx
], "-servertest"))

3147 
£rvîã°
 = 1;

3149 
	`Ârötf
(
°dîr
, "Unknow¿›ti⁄ %s\n", 
v
[
idx
]);

3150 ++
idx
;

3152 
	`evít_öô
();

3153 i‡(
vîbo£
)

3154 
	`evdns_£t_log_‚
(
log‚
);

3155 
	`evdns_ªsﬁv_c⁄f_∑r£
(
DNS_OPTION_NAMESERVERS
, "/etc/resolv.conf");

3156 i‡(
£rvîã°
) {

3157 
sock
;

3158 
sockaddr_ö
 
my_addr
;

3159 
sock
 = 
	`sockë
(
PF_INET
, 
SOCK_DGRAM
, 0);

3160 
	`evutû_make_sockë_n⁄blockög
(
sock
);

3161 
my_addr
.
sö_Ámûy
 = 
AF_INET
;

3162 
my_addr
.
sö_p‹t
 = 
	`ht⁄s
(10053);

3163 
my_addr
.
sö_addr
.
s_addr
 = 
INADDR_ANY
;

3164 i‡(
	`böd
(
sock
, (
sockaddr
*)&
my_addr
, (my_addr))<0) {

3165 
	`≥º‹
("bind");

3166 
	`exô
(1);

3168 
	`evdns_add_£rvî_p‹t
(
sock
, 0, 
evdns_£rvî_ˇŒback
, 
NULL
);

3170 ; 
idx
 < 
c
; ++idx) {

3171 i‡(
ªvî£
) {

3172 
ö_addr
 
addr
;

3173 i‡(!
	`öë_©⁄
(
v
[
idx
], &
addr
)) {

3174 
	`Ârötf
(
°dîr
, "SkùpögÇ⁄-IP %s\n", 
v
[
idx
]);

3177 
	`Ârötf
(
°dîr
, "ªsﬁvög %s...\n",
v
[
idx
]);

3178 
	`evdns_ªsﬁve_ªvî£
(&
addr
, 0, 
maö_ˇŒback
, 
v
[
idx
]);

3180 
	`Ârötf
(
°dîr
, "ªsﬁvög (fwdË%s...\n",
v
[
idx
]);

3181 
	`evdns_ªsﬁve_ùv4
(
v
[
idx
], 0, 
maö_ˇŒback
, v[idx]);

3184 
	`fÊush
(
°dout
);

3185 
	`evít_di•©ch
();

3187 
	}
}

	@evdns.h

160 #i‚de‡
EVENTDNS_H


161 
	#EVENTDNS_H


	)

163 #ifde‡
__˝lu•lus


168 
	~<evutû.h
>

171 
	#DNS_ERR_NONE
 0

	)

173 
	#DNS_ERR_FORMAT
 1

	)

176 
	#DNS_ERR_SERVERFAILED
 2

	)

178 
	#DNS_ERR_NOTEXIST
 3

	)

180 
	#DNS_ERR_NOTIMPL
 4

	)

183 
	#DNS_ERR_REFUSED
 5

	)

185 
	#DNS_ERR_TRUNCATED
 65

	)

187 
	#DNS_ERR_UNKNOWN
 66

	)

189 
	#DNS_ERR_TIMEOUT
 67

	)

191 
	#DNS_ERR_SHUTDOWN
 68

	)

193 
	#DNS_IPv4_A
 1

	)

194 
	#DNS_PTR
 2

	)

195 
	#DNS_IPv6_AAAA
 3

	)

197 
	#DNS_QUERY_NO_SEARCH
 1

	)

199 
	#DNS_OPTION_SEARCH
 1

	)

200 
	#DNS_OPTION_NAMESERVERS
 2

	)

201 
	#DNS_OPTION_MISC
 4

	)

202 
	#DNS_OPTIONS_ALL
 7

	)

211 (*
evdns_ˇŒback_ty≥
Ë(
	tªsu…
, 
	tty≥
, 
	tcou¡
, 
	tâl
, *
	taddªs£s
, *
	t¨g
);

223 
evdns_öô
();

237 
evdns_shutdown
(
Áû_ªque°s
);

246 c⁄° *
evdns_îr_to_°rög
(
îr
);

259 
evdns_«me£rvî_add
(
addªss
);

273 
evdns_cou¡_«me£rvîs
();

284 
evdns_˛ór_«me£rvîs_™d_su•íd
();

296 
evdns_ªsume
();

308 
evdns_«me£rvî_ù_add
(c⁄° *
ù_as_°rög
);

321 
evdns_ªsﬁve_ùv4
(c⁄° *
«me
, 
Êags
, 
evdns_ˇŒback_ty≥
 
ˇŒback
, *
±r
);

334 
evdns_ªsﬁve_ùv6
(c⁄° *
«me
, 
Êags
, 
evdns_ˇŒback_ty≥
 
ˇŒback
, *
±r
);

336 
ö_addr
;

337 
ö6_addr
;

349 
evdns_ªsﬁve_ªvî£
(c⁄° 
ö_addr
 *
ö
, 
Êags
, 
evdns_ˇŒback_ty≥
 
ˇŒback
, *
±r
);

362 
evdns_ªsﬁve_ªvî£_ùv6
(c⁄° 
ö6_addr
 *
ö
, 
Êags
, 
evdns_ˇŒback_ty≥
 
ˇŒback
, *
±r
);

377 
evdns_£t_›ti⁄
(c⁄° *
›ti⁄
, c⁄° *
vÆ
, 
Êags
);

401 
evdns_ªsﬁv_c⁄f_∑r£
(
Êags
, c⁄° *c⁄° 
fûíame
);

414 #ifde‡
WIN32


415 
evdns_c⁄fig_wödows_«me£rvîs
();

422 
evdns_£¨ch_˛ór
();

430 
evdns_£¨ch_add
(c⁄° *
domaö
);

441 
evdns_£¨ch_ndŸs_£t
(c⁄° 
ndŸs
);

449 (*
evdns_debug_log_‚_ty≥
)(
	tis_w¨nög
, c⁄° *
	tmsg
);

457 
evdns_£t_log_‚
(
evdns_debug_log_‚_ty≥
 
‚
);

465 
evdns_£t_å™ß˘i⁄_id_‚
(
ev_uöt16_t
 (*
‚
)());

467 
	#DNS_NO_SEARCH
 1

	)

473 
	sevdns_£rvî_ªque°
 {

474 
Êags
;

475 
nque°i⁄s
;

476 
evdns_£rvî_que°i⁄
 **
que°i⁄s
;

478 
	sevdns_£rvî_que°i⁄
 {

479 
ty≥
;

480 #ifde‡
__˝lu•lus


481 
dns_que°i⁄_˛ass
;

486 
˛ass
;

487 
	#dns_que°i⁄_˛ass
 
˛ass


	)

489 
«me
[1];

491 (*
evdns_ªque°_ˇŒback_‚_ty≥
)(
	tevdns_£rvî_ªque°
 *, *);

492 
	#EVDNS_ANSWER_SECTION
 0

	)

493 
	#EVDNS_AUTHORITY_SECTION
 1

	)

494 
	#EVDNS_ADDITIONAL_SECTION
 2

	)

496 
	#EVDNS_TYPE_A
 1

	)

497 
	#EVDNS_TYPE_NS
 2

	)

498 
	#EVDNS_TYPE_CNAME
 5

	)

499 
	#EVDNS_TYPE_SOA
 6

	)

500 
	#EVDNS_TYPE_PTR
 12

	)

501 
	#EVDNS_TYPE_MX
 15

	)

502 
	#EVDNS_TYPE_TXT
 16

	)

503 
	#EVDNS_TYPE_AAAA
 28

	)

505 
	#EVDNS_QTYPE_AXFR
 252

	)

506 
	#EVDNS_QTYPE_ALL
 255

	)

508 
	#EVDNS_CLASS_INET
 1

	)

510 
evdns_£rvî_p‹t
 *
evdns_add_£rvî_p‹t
(
sockë
, 
is_t˝
, 
evdns_ªque°_ˇŒback_‚_ty≥
 
ˇŒback
, *
u£r_d©a
);

511 
evdns_˛o£_£rvî_p‹t
(
evdns_£rvî_p‹t
 *
p‹t
);

513 
evdns_£rvî_ªque°_add_ª∂y
(
evdns_£rvî_ªque°
 *
ªq
, 
£˘i⁄
, c⁄° *
«me
, 
ty≥
, 
dns_˛ass
, 
âl
, 
d©Æí
, 
is_«me
, c⁄° *
d©a
);

514 
evdns_£rvî_ªque°_add_a_ª∂y
(
evdns_£rvî_ªque°
 *
ªq
, c⁄° *
«me
, 
n
, *
addrs
, 
âl
);

515 
evdns_£rvî_ªque°_add_ØØ_ª∂y
(
evdns_£rvî_ªque°
 *
ªq
, c⁄° *
«me
, 
n
, *
addrs
, 
âl
);

516 
evdns_£rvî_ªque°_add_±r_ª∂y
(
evdns_£rvî_ªque°
 *
ªq
, 
ö_addr
 *
ö
, c⁄° *
öaddr_«me
, c⁄° *
ho°«me
, 
âl
);

517 
evdns_£rvî_ªque°_add_˙ame_ª∂y
(
evdns_£rvî_ªque°
 *
ªq
, c⁄° *
«me
, c⁄° *
˙ame
, 
âl
);

519 
evdns_£rvî_ªque°_ª•⁄d
(
evdns_£rvî_ªque°
 *
ªq
, 
îr
);

520 
evdns_£rvî_ªque°_dr›
(
evdns_£rvî_ªque°
 *
ªq
);

521 
sockaddr
;

522 
evdns_£rvî_ªque°_gë_ªque°ög_addr
(
evdns_£rvî_ªque°
 *
_ªq
, 
sockaddr
 *
ß
, 
addr_Àn
);

524 #ifde‡
__˝lu•lus


	@event-internal.h

27 #i‚de‡
_EVENT_INTERNAL_H_


28 
	#_EVENT_INTERNAL_H_


	)

30 #ifde‡
__˝lu•lus


34 
	~"c⁄fig.h
"

35 
	~"mö_hóp.h
"

36 
	~"evsig«l.h
"

38 
	sevít›
 {

39 c⁄° *
«me
;

40 *(*
öô
)(
evít_ba£
 *);

41 (*
add
)(*, 
evít
 *);

42 (*
dñ
)(*, 
evít
 *);

43 (*
di•©ch
)(
evít_ba£
 *, *, 
timevÆ
 *);

44 (*
dóŒoc
)(
evít_ba£
 *, *);

46 
√ed_ªöô
;

49 
	sevít_ba£
 {

50 c⁄° 
evít›
 *
ev£l
;

51 *
evba£
;

52 
evít_cou¡
;

53 
evít_cou¡_a˘ive
;

55 
evít_gŸãrm
;

56 
evít_bªak
;

59 
evít_li°
 **
a˘ivequeues
;

60 
«˘ivequeues
;

63 
evsig«l_öfo
 
sig
;

65 
evít_li°
 
evítqueue
;

66 
timevÆ
 
evít_tv
;

68 
mö_hóp
 
timehóp
;

70 
timevÆ
 
tv_ˇche
;

74 #i‚de‡
HAVE_TAILQFOREACH


75 
	#TAILQ_FIRST
(
hód
Ë((hód)->
tqh_fú°
)

	)

76 
	#TAILQ_END
(
hód
Ë
NULL


	)

77 
	#TAILQ_NEXT
(
ñm
, 
fõld
Ë(”lm)->fõld.
tqe_√xt
)

	)

78 
	#TAILQ_FOREACH
(
v¨
, 
hód
, 
fõld
) \

79 (
v¨
Ë
	`TAILQ_FIRST
(
hód
); \

80 (
v¨
Ë!
	`TAILQ_END
(
hód
); \

81 (
v¨
Ë
	`TAILQ_NEXT
(v¨, 
fõld
))

	)

82 
	#TAILQ_INSERT_BEFORE
(
li°ñm
, 
ñm
, 
fõld
) do { \

83 (
ñm
)->
fõld
.
tqe_¥ev
 = (
li°ñm
)->field.tqe_prev; \

84 (
ñm
)->
fõld
.
tqe_√xt
 = (
li°ñm
); \

85 *(
li°ñm
)->
fõld
.
tqe_¥ev
 = (
ñm
); \

86 (
li°ñm
)->
fõld
.
tqe_¥ev
 = &(
ñm
)->fõld.
tqe_√xt
; \

87 } 0)

	)

90 
_evsig«l_£t_h™dÀr
(
evít_ba£
 *
ba£
, 
evsig«l
,

91 (*
‚
)());

92 
_evsig«l_ª°‹e_h™dÀr
(
evít_ba£
 *
ba£
, 
evsig«l
);

95 c⁄° *
evutû_gëív
(c⁄° *
v¨«me
);

97 #ifde‡
__˝lu•lus


	@event.c

27 #ifde‡
HAVE_CONFIG_H


28 
	~"c⁄fig.h
"

31 #ifde‡
WIN32


32 
	#WIN32_LEAN_AND_MEAN


	)

33 
	~<wödows.h
>

34 #unde‡
WIN32_LEAN_AND_MEAN


36 
	~<sys/ty≥s.h
>

37 #ifde‡
HAVE_SYS_TIME_H


38 
	~<sys/time.h
>

40 
	~<sys/_libevít_time.h
>

42 
	~<sys/queue.h
>

43 
	~<°dio.h
>

44 
	~<°dlib.h
>

45 #i‚de‡
WIN32


46 
	~<uni°d.h
>

48 
	~<î∫o.h
>

49 
	~<sig«l.h
>

50 
	~<°rög.h
>

51 
	~<as£π.h
>

52 
	~<time.h
>

54 
	~"evít.h
"

55 
	~"evít-öã∫Æ.h
"

56 
	~"evutû.h
"

57 
	~"log.h
"

59 #ifde‡
HAVE_EVENT_PORTS


60 c⁄° 
evít›
 
evp‹t›s
;

62 #ifde‡
HAVE_SELECT


63 c⁄° 
evít›
 
£À˘›s
;

65 #ifde‡
HAVE_POLL


66 c⁄° 
evít›
 
pﬁl›s
;

68 #ifde‡
HAVE_EPOLL


69 c⁄° 
evít›
 
ïﬁl›s
;

71 #ifde‡
HAVE_WORKING_KQUEUE


72 c⁄° 
evít›
 
kq›s
;

74 #ifde‡
HAVE_DEVPOLL


75 c⁄° 
evít›
 
devpﬁl›s
;

77 #ifde‡
WIN32


78 c⁄° 
evít›
 
wö32›s
;

82 c⁄° 
evít›
 *
	gevít›s
[] = {

83 #ifde‡
HAVE_EVENT_PORTS


84 &
evp‹t›s
,

86 #ifde‡
HAVE_WORKING_KQUEUE


87 &
kq›s
,

89 #ifde‡
HAVE_EPOLL


90 &
ïﬁl›s
,

92 #ifde‡
HAVE_DEVPOLL


93 &
devpﬁl›s
,

95 #ifde‡
HAVE_POLL


96 &
pﬁl›s
,

98 #ifde‡
HAVE_SELECT


99 &
£À˘›s
,

101 #ifde‡
WIN32


102 &
wö32›s
,

104 
NULL


108 
evít_ba£
 *
	gcuºít_ba£
 = 
NULL
;

109 
evít_ba£
 *
evsig«l_ba£
;

110 
	gu£_m⁄Ÿ⁄ic
;

113 
evít_queue_ö£π
(
evít_ba£
 *, 
evít
 *, );

114 
evít_queue_ªmove
(
evít_ba£
 *, 
evít
 *, );

115 
evít_havìvíts
(
evít_ba£
 *);

117 
evít_¥o˚ss_a˘ive
(
evít_ba£
 *);

119 
timeout_√xt
(
evít_ba£
 *, 
timevÆ
 **);

120 
timeout_¥o˚ss
(
evít_ba£
 *);

121 
timeout_c‹ª˘
(
evít_ba£
 *, 
timevÆ
 *);

124 
	$dëe˘_m⁄Ÿ⁄ic
()

126 #i‡
	`deföed
(
HAVE_CLOCK_GETTIME
Ë&& deföed(
CLOCK_MONOTONIC
)

127 
time•ec
 
ts
;

129 i‡(
	`˛ock_gëtime
(
CLOCK_MONOTONIC
, &
ts
) == 0)

130 
u£_m⁄Ÿ⁄ic
 = 1;

132 
	}
}

135 
	$gëtime
(
evít_ba£
 *
ba£
, 
timevÆ
 *
ç
)

137 i‡(
ba£
->
tv_ˇche
.
tv_£c
) {

138 *
ç
 = 
ba£
->
tv_ˇche
;

142 #i‡
	`deföed
(
HAVE_CLOCK_GETTIME
Ë&& deföed(
CLOCK_MONOTONIC
)

143 i‡(
u£_m⁄Ÿ⁄ic
) {

144 
time•ec
 
ts
;

146 i‡(
	`˛ock_gëtime
(
CLOCK_MONOTONIC
, &
ts
) == -1)

149 
ç
->
tv_£c
 = 
ts
.tv_sec;

150 
ç
->
tv_u£c
 = 
ts
.
tv_n£c
 / 1000;

155  (
	`evutû_gëtimeofday
(
ç
, 
NULL
));

156 
	}
}

158 
evít_ba£
 *

159 
	$evít_öô
()

161 
evít_ba£
 *
ba£
 = 
	`evít_ba£_√w
();

163 i‡(
ba£
 !
NULL
)

164 
cuºít_ba£
 = 
ba£
;

166  (
ba£
);

167 
	}
}

169 
evít_ba£
 *

170 
	$evít_ba£_√w
()

172 
i
;

173 
evít_ba£
 *
ba£
;

175 i‡((
ba£
 = 
	`ˇŒoc
(1, (
evít_ba£
))Ë=
NULL
)

176 
	`evít_îr
(1, "%s: cÆloc", 
__func__
);

178 
	`dëe˘_m⁄Ÿ⁄ic
();

179 
	`gëtime
(
ba£
, &ba£->
evít_tv
);

181 
	`mö_hóp_˘‹
(&
ba£
->
timehóp
);

182 
	`TAILQ_INIT
(&
ba£
->
evítqueue
);

183 
ba£
->
sig
.
ev_sig«l_∑ú
[0] = -1;

184 
ba£
->
sig
.
ev_sig«l_∑ú
[1] = -1;

186 
ba£
->
evba£
 = 
NULL
;

187 
i
 = 0; 
evít›s
[i] && !
ba£
->
evba£
; i++) {

188 
ba£
->
ev£l
 = 
evít›s
[
i
];

190 
ba£
->
evba£
 = ba£->
ev£l
->
	`öô
(base);

193 i‡(
ba£
->
evba£
 =
NULL
)

194 
	`evít_îrx
(1, "%s:Çÿevíàmech™ismávaûabÀ", 
__func__
);

196 i‡(
	`evutû_gëív
("EVENT_SHOW_METHOD"))

197 
	`evít_msgx
("libevent using: %s\n",

198 
ba£
->
ev£l
->
«me
);

201 
	`evít_ba£_¥i‹ôy_öô
(
ba£
, 1);

203  (
ba£
);

204 
	}
}

207 
	$evít_ba£_‰ì
(
evít_ba£
 *
ba£
)

209 
i
, 
n_dñëed
=0;

210 
evít
 *
ev
;

212 i‡(
ba£
 =
NULL
 && 
cuºít_ba£
)

213 
ba£
 = 
cuºít_ba£
;

214 i‡(
ba£
 =
cuºít_ba£
)

215 
cuºít_ba£
 = 
NULL
;

218 
	`as£π
(
ba£
);

220 
ev
 = 
	`TAILQ_FIRST
(&
ba£
->
evítqueue
);Év; ) {

221 
evít
 *
√xt
 = 
	`TAILQ_NEXT
(
ev
, 
ev_√xt
);

222 i‡(!(
ev
->
ev_Êags
 & 
EVLIST_INTERNAL
)) {

223 
	`evít_dñ
(
ev
);

224 ++
n_dñëed
;

226 
ev
 = 
√xt
;

228 (
ev
 = 
	`mö_hóp_t›
(&
ba£
->
timehóp
)Ë!
NULL
) {

229 
	`evít_dñ
(
ev
);

230 ++
n_dñëed
;

233 
i
 = 0; i < 
ba£
->
«˘ivequeues
; ++i) {

234 
ev
 = 
	`TAILQ_FIRST
(
ba£
->
a˘ivequeues
[
i
]);Év; ) {

235 
evít
 *
√xt
 = 
	`TAILQ_NEXT
(
ev
, 
ev_a˘ive_√xt
);

236 i‡(!(
ev
->
ev_Êags
 & 
EVLIST_INTERNAL
)) {

237 
	`evít_dñ
(
ev
);

238 ++
n_dñëed
;

240 
ev
 = 
√xt
;

244 i‡(
n_dñëed
)

245 
	`evít_debug
(("%s: %dÉvents were still set in base",

246 
__func__
, 
n_dñëed
));

248 i‡(
ba£
->
ev£l
->
dóŒoc
 !
NULL
)

249 
ba£
->
ev£l
->
	`dóŒoc
(ba£, ba£->
evba£
);

251 
i
 = 0; i < 
ba£
->
«˘ivequeues
; ++i)

252 
	`as£π
(
	`TAILQ_EMPTY
(
ba£
->
a˘ivequeues
[
i
]));

254 
	`as£π
(
	`mö_hóp_em±y
(&
ba£
->
timehóp
));

255 
	`mö_hóp_dt‹
(&
ba£
->
timehóp
);

257 
i
 = 0; i < 
ba£
->
«˘ivequeues
; ++i)

258 
	`‰ì
(
ba£
->
a˘ivequeues
[
i
]);

259 
	`‰ì
(
ba£
->
a˘ivequeues
);

261 
	`as£π
(
	`TAILQ_EMPTY
(&
ba£
->
evítqueue
));

263 
	`‰ì
(
ba£
);

264 
	}
}

268 
	$evít_ªöô
(
evít_ba£
 *
ba£
)

270 c⁄° 
evít›
 *
ev£l
 = 
ba£
->evsel;

271 *
evba£
 = 
ba£
->evbase;

272 
ªs
 = 0;

273 
evít
 *
ev
;

276 i‡(!
ev£l
->
√ed_ªöô
)

280 i‡(
ba£
->
sig
.
ev_sig«l_added
) {

283 
	`evít_queue_ªmove
(
ba£
, &ba£->
sig
.
ev_sig«l
,

284 
EVLIST_INSERTED
);

285 i‡(
ba£
->
sig
.
ev_sig«l
.
ev_Êags
 & 
EVLIST_ACTIVE
)

286 
	`evít_queue_ªmove
(
ba£
, &ba£->
sig
.
ev_sig«l
,

287 
EVLIST_ACTIVE
);

288 
ba£
->
sig
.
ev_sig«l_added
 = 0;

291 i‡(
ba£
->
ev£l
->
dóŒoc
 !
NULL
)

292 
ba£
->
ev£l
->
	`dóŒoc
(ba£, ba£->
evba£
);

293 
evba£
 = 
ba£
->evba£ = 
ev£l
->
	`öô
(base);

294 i‡(
ba£
->
evba£
 =
NULL
)

295 
	`evít_îrx
(1, "%s: couldÇotÑeinitializeÉvent mechanism",

296 
__func__
);

298 
	`TAILQ_FOREACH
(
ev
, &
ba£
->
evítqueue
, 
ev_√xt
) {

299 i‡(
ev£l
->
	`add
(
evba£
, 
ev
) == -1)

300 
ªs
 = -1;

303  (
ªs
);

304 
	}
}

307 
	$evít_¥i‹ôy_öô
(
≈ri‹ôõs
)

309  
	`evít_ba£_¥i‹ôy_öô
(
cuºít_ba£
, 
≈ri‹ôõs
);

310 
	}
}

313 
	$evít_ba£_¥i‹ôy_öô
(
evít_ba£
 *
ba£
, 
≈ri‹ôõs
)

315 
i
;

317 i‡(
ba£
->
evít_cou¡_a˘ive
)

320 i‡(
ba£
->
«˘ivequeues
 && 
≈ri‹ôõs
 != base->nactivequeues) {

321 
i
 = 0; i < 
ba£
->
«˘ivequeues
; ++i) {

322 
	`‰ì
(
ba£
->
a˘ivequeues
[
i
]);

324 
	`‰ì
(
ba£
->
a˘ivequeues
);

328 
ba£
->
«˘ivequeues
 = 
≈ri‹ôõs
;

329 
ba£
->
a˘ivequeues
 = (
evít_li°
 **)

330 
	`ˇŒoc
(
ba£
->
«˘ivequeues
, (
evít_li°
 *));

331 i‡(
ba£
->
a˘ivequeues
 =
NULL
)

332 
	`evít_îr
(1, "%s: cÆloc", 
__func__
);

334 
i
 = 0; i < 
ba£
->
«˘ivequeues
; ++i) {

335 
ba£
->
a˘ivequeues
[
i
] = 
	`mÆloc
((
evít_li°
));

336 i‡(
ba£
->
a˘ivequeues
[
i
] =
NULL
)

337 
	`evít_îr
(1, "%s: mÆloc", 
__func__
);

338 
	`TAILQ_INIT
(
ba£
->
a˘ivequeues
[
i
]);

342 
	}
}

345 
	$evít_havìvíts
(
evít_ba£
 *
ba£
)

347  (
ba£
->
evít_cou¡
 > 0);

348 
	}
}

357 
	$evít_¥o˚ss_a˘ive
(
evít_ba£
 *
ba£
)

359 
evít
 *
ev
;

360 
evít_li°
 *
a˘iveq
 = 
NULL
;

361 
i
;

362 
nˇŒs
;

364 
i
 = 0; i < 
ba£
->
«˘ivequeues
; ++i) {

365 i‡(
	`TAILQ_FIRST
(
ba£
->
a˘ivequeues
[
i
]Ë!
NULL
) {

366 
a˘iveq
 = 
ba£
->
a˘ivequeues
[
i
];

371 
	`as£π
(
a˘iveq
 !
NULL
);

373 
ev
 = 
	`TAILQ_FIRST
(
a˘iveq
);Év;Év = TAILQ_FIRST(activeq)) {

374 i‡(
ev
->
ev_evíts
 & 
EV_PERSIST
)

375 
	`evít_queue_ªmove
(
ba£
, 
ev
, 
EVLIST_ACTIVE
);

377 
	`evít_dñ
(
ev
);

380 
nˇŒs
 = 
ev
->
ev_nˇŒs
;

381 
ev
->
ev_≤ˇŒs
 = &
nˇŒs
;

382 
nˇŒs
) {

383 
nˇŒs
--;

384 
ev
->
ev_nˇŒs
 = 
nˇŒs
;

385 (*
ev
->
ev_ˇŒback
)((Îv->
ev_fd
,Év->
ev_ªs
,Év->
ev_¨g
);

386 i‡(
ba£
->
evít_bªak
)

390 
	}
}

397 
	$evít_di•©ch
()

399  (
	`evít_lo›
(0));

400 
	}
}

403 
	$evít_ba£_di•©ch
(
evít_ba£
 *event_base)

405  (
	`evít_ba£_lo›
(
evít_ba£
, 0));

406 
	}
}

409 
	$evít_ba£_gë_mëhod
(
evít_ba£
 *
ba£
)

411 
	`as£π
(
ba£
);

412  (
ba£
->
ev£l
->
«me
);

413 
	}
}

416 
	$evít_lo›exô_cb
(
fd
, 
wh©
, *
¨g
)

418 
evít_ba£
 *
ba£
 = 
¨g
;

419 
ba£
->
evít_gŸãrm
 = 1;

420 
	}
}

424 
	$evít_lo›exô
(c⁄° 
timevÆ
 *
tv
)

426  (
	`evít_⁄˚
(-1, 
EV_TIMEOUT
, 
evít_lo›exô_cb
,

427 
cuºít_ba£
, 
tv
));

428 
	}
}

431 
	$evít_ba£_lo›exô
(
evít_ba£
 *evít_ba£, c⁄° 
timevÆ
 *
tv
)

433  (
	`evít_ba£_⁄˚
(
evít_ba£
, -1, 
EV_TIMEOUT
, 
evít_lo›exô_cb
,

434 
evít_ba£
, 
tv
));

435 
	}
}

439 
	$evít_lo›bªak
()

441  (
	`evít_ba£_lo›bªak
(
cuºít_ba£
));

442 
	}
}

445 
	$evít_ba£_lo›bªak
(
evít_ba£
 *event_base)

447 i‡(
evít_ba£
 =
NULL
)

450 
evít_ba£
->
evít_bªak
 = 1;

452 
	}
}

459 
	$evít_lo›
(
Êags
)

461  
	`evít_ba£_lo›
(
cuºít_ba£
, 
Êags
);

462 
	}
}

465 
	$evít_ba£_lo›
(
evít_ba£
 *
ba£
, 
Êags
)

467 c⁄° 
evít›
 *
ev£l
 = 
ba£
->evsel;

468 *
evba£
 = 
ba£
->evbase;

469 
timevÆ
 
tv
;

470 
timevÆ
 *
tv_p
;

471 
ªs
, 
d⁄e
;

474 
ba£
->
tv_ˇche
.
tv_£c
 = 0;

476 i‡(
ba£
->
sig
.
ev_sig«l_added
)

477 
evsig«l_ba£
 = 
ba£
;

478 
d⁄e
 = 0;

479 !
d⁄e
) {

481 i‡(
ba£
->
evít_gŸãrm
) {

482 
ba£
->
evít_gŸãrm
 = 0;

486 i‡(
ba£
->
evít_bªak
) {

487 
ba£
->
evít_bªak
 = 0;

491 
	`timeout_c‹ª˘
(
ba£
, &
tv
);

493 
tv_p
 = &
tv
;

494 i‡(!
ba£
->
evít_cou¡_a˘ive
 && !(
Êags
 & 
EVLOOP_NONBLOCK
)) {

495 
	`timeout_√xt
(
ba£
, &
tv_p
);

501 
	`evutû_timî˛ór
(&
tv
);

505 i‡(!
	`evít_havìvíts
(
ba£
)) {

506 
	`evít_debug
(("%s:Çÿevít†ªgi°îed.", 
__func__
));

511 
	`gëtime
(
ba£
, &ba£->
evít_tv
);

514 
ba£
->
tv_ˇche
.
tv_£c
 = 0;

516 
ªs
 = 
ev£l
->
	`di•©ch
(
ba£
, 
evba£
, 
tv_p
);

518 i‡(
ªs
 == -1)

520 
	`gëtime
(
ba£
, &ba£->
tv_ˇche
);

522 
	`timeout_¥o˚ss
(
ba£
);

524 i‡(
ba£
->
evít_cou¡_a˘ive
) {

525 
	`evít_¥o˚ss_a˘ive
(
ba£
);

526 i‡(!
ba£
->
evít_cou¡_a˘ive
 && (
Êags
 & 
EVLOOP_ONCE
))

527 
d⁄e
 = 1;

528 } i‡(
Êags
 & 
EVLOOP_NONBLOCK
)

529 
d⁄e
 = 1;

533 
ba£
->
tv_ˇche
.
tv_£c
 = 0;

535 
	`evít_debug
(("%s:áskedÅÿãrmö©êlo›.", 
__func__
));

537 
	}
}

541 
	sevít_⁄˚
 {

542 
evít
 
	mev
;

544 (*
	mcb
)(, , *);

545 *
	m¨g
;

551 
	$evít_⁄˚_cb
(
fd
, 
evíts
, *
¨g
)

553 
evít_⁄˚
 *
e⁄˚
 = 
¨g
;

555 (*
e⁄˚
->
cb
)(
fd
, 
evíts
,É⁄˚->
¨g
);

556 
	`‰ì
(
e⁄˚
);

557 
	}
}

561 
evít_⁄˚
(
fd
, 
evíts
,

562 (*
ˇŒback
)(, , *), *
¨g
, c⁄° 
timevÆ
 *
tv
)

564  
	`evít_ba£_⁄˚
(
cuºít_ba£
, 
fd
, 
evíts
, 
ˇŒback
, 
¨g
, 
tv
);

565 
	}
}

569 
evít_ba£_⁄˚
(
evít_ba£
 *
ba£
, 
fd
, 
evíts
,

570 (*
ˇŒback
)(, , *), *
¨g
, c⁄° 
timevÆ
 *
tv
)

572 
evít_⁄˚
 *
e⁄˚
;

573 
timevÆ
 
ëv
;

574 
ªs
;

577 i‡(
evíts
 & 
EV_SIGNAL
)

580 i‡((
e⁄˚
 = 
	`ˇŒoc
(1, (
evít_⁄˚
))Ë=
NULL
)

583 
e⁄˚
->
cb
 = 
ˇŒback
;

584 
e⁄˚
->
¨g
 =árg;

586 i‡(
evíts
 =
EV_TIMEOUT
) {

587 i‡(
tv
 =
NULL
) {

588 
	`evutû_timî˛ór
(&
ëv
);

589 
tv
 = &
ëv
;

592 
	`evtimî_£t
(&
e⁄˚
->
ev
, 
evít_⁄˚_cb
,Éonce);

593 } i‡(
evíts
 & (
EV_READ
|
EV_WRITE
)) {

594 
evíts
 &
EV_READ
|
EV_WRITE
;

596 
	`evít_£t
(&
e⁄˚
->
ev
, 
fd
, 
evíts
, 
evít_⁄˚_cb
,Éonce);

599 
	`‰ì
(
e⁄˚
);

603 
ªs
 = 
	`evít_ba£_£t
(
ba£
, &
e⁄˚
->
ev
);

604 i‡(
ªs
 == 0)

605 
ªs
 = 
	`evít_add
(&
e⁄˚
->
ev
, 
tv
);

606 i‡(
ªs
 != 0) {

607 
	`‰ì
(
e⁄˚
);

608  (
ªs
);

612 
	}
}

617 
evít_£t
(
evít
 *
ev
, 
fd
, 
evíts
,

618 (*
ˇŒback
)(, , *), *
¨g
)

621 
ev
->
ev_ba£
 = 
cuºít_ba£
;

623 
ev
->
ev_ˇŒback
 = 
ˇŒback
;

624 
ev
->
ev_¨g
 = 
¨g
;

625 
ev
->
ev_fd
 = 
fd
;

626 
ev
->
ev_evíts
 = 
evíts
;

627 
ev
->
ev_ªs
 = 0;

628 
ev
->
ev_Êags
 = 
EVLIST_INIT
;

629 
ev
->
ev_nˇŒs
 = 0;

630 
ev
->
ev_≤ˇŒs
 = 
NULL
;

632 
	`mö_hóp_ñem_öô
(
ev
);

635 if(
cuºít_ba£
)

636 
ev
->
ev_¥i
 = 
cuºít_ba£
->
«˘ivequeues
/2;

637 
	}
}

640 
	$evít_ba£_£t
(
evít_ba£
 *
ba£
, 
evít
 *
ev
)

643 i‡(
ev
->
ev_Êags
 !
EVLIST_INIT
)

646 
ev
->
ev_ba£
 = 
ba£
;

647 
ev
->
ev_¥i
 = 
ba£
->
«˘ivequeues
/2;

650 
	}
}

658 
	$evít_¥i‹ôy_£t
(
evít
 *
ev
, 
¥i
)

660 i‡(
ev
->
ev_Êags
 & 
EVLIST_ACTIVE
)

662 i‡(
¥i
 < 0 ||Örò>
ev
->
ev_ba£
->
«˘ivequeues
)

665 
ev
->
ev_¥i
 = 
¥i
;

668 
	}
}

675 
	$evít_≥ndög
(
evít
 *
ev
, evít, 
timevÆ
 *
tv
)

677 
timevÆ
 
now
, 
ªs
;

678 
Êags
 = 0;

680 i‡(
ev
->
ev_Êags
 & 
EVLIST_INSERTED
)

681 
Êags
 |(
ev
->
ev_evíts
 & (
EV_READ
|
EV_WRITE
|
EV_SIGNAL
));

682 i‡(
ev
->
ev_Êags
 & 
EVLIST_ACTIVE
)

683 
Êags
 |
ev
->
ev_ªs
;

684 i‡(
ev
->
ev_Êags
 & 
EVLIST_TIMEOUT
)

685 
Êags
 |
EV_TIMEOUT
;

687 
evít
 &(
EV_TIMEOUT
|
EV_READ
|
EV_WRITE
|
EV_SIGNAL
);

690 i‡(
tv
 !
NULL
 && (
Êags
 & 
evít
 & 
EV_TIMEOUT
)) {

691 
	`gëtime
(
ev
->
ev_ba£
, &
now
);

692 
	`evutû_timîsub
(&
ev
->
ev_timeout
, &
now
, &
ªs
);

694 
	`evutû_gëtimeofday
(&
now
, 
NULL
);

695 
	`evutû_timîadd
(&
now
, &
ªs
, 
tv
);

698  (
Êags
 & 
evít
);

699 
	}
}

702 
	$evít_add
(
evít
 *
ev
, c⁄° 
timevÆ
 *
tv
)

704 
evít_ba£
 *
ba£
 = 
ev
->
ev_ba£
;

705 c⁄° 
evít›
 *
ev£l
 = 
ba£
->evsel;

706 *
evba£
 = 
ba£
->evbase;

707 
ªs
 = 0;

709 
	`evít_debug
((

711 
ev
,

712 
ev
->
ev_evíts
 & 
EV_READ
 ? "EV_READ " : " ",

713 
ev
->
ev_evíts
 & 
EV_WRITE
 ? "EV_WRITE " : " ",

714 
tv
 ? "EV_TIMEOUT " : " ",

715 
ev
->
ev_ˇŒback
));

717 
	`as£π
(!(
ev
->
ev_Êags
 & ~
EVLIST_ALL
));

723 i‡(
tv
 !
NULL
 && !(
ev
->
ev_Êags
 & 
EVLIST_TIMEOUT
)) {

724 i‡(
	`mö_hóp_ª£rve
(&
ba£
->
timehóp
,

725 1 + 
	`mö_hóp_size
(&
ba£
->
timehóp
)) == -1)

729 i‡((
ev
->
ev_evíts
 & (
EV_READ
|
EV_WRITE
|
EV_SIGNAL
)) &&

730 !(
ev
->
ev_Êags
 & (
EVLIST_INSERTED
|
EVLIST_ACTIVE
))) {

731 
ªs
 = 
ev£l
->
	`add
(
evba£
, 
ev
);

732 i‡(
ªs
 != -1)

733 
	`evít_queue_ö£π
(
ba£
, 
ev
, 
EVLIST_INSERTED
);

740 i‡(
ªs
 !-1 && 
tv
 !
NULL
) {

741 
timevÆ
 
now
;

747 i‡(
ev
->
ev_Êags
 & 
EVLIST_TIMEOUT
)

748 
	`evít_queue_ªmove
(
ba£
, 
ev
, 
EVLIST_TIMEOUT
);

753 i‡((
ev
->
ev_Êags
 & 
EVLIST_ACTIVE
) &&

754 (
ev
->
ev_ªs
 & 
EV_TIMEOUT
)) {

758 i‡(
ev
->
ev_nˇŒs
 &&Év->
ev_≤ˇŒs
) {

760 *
ev
->
ev_≤ˇŒs
 = 0;

763 
	`evít_queue_ªmove
(
ba£
, 
ev
, 
EVLIST_ACTIVE
);

766 
	`gëtime
(
ba£
, &
now
);

768 
	`evutû_timîadd
(&
now
, 
tv
, &
ev
->
ev_timeout
);

770 
	`evít_debug
((

772 
tv
->
tv_£c
, 
ev
->
ev_ˇŒback
));

774 
	`evít_queue_ö£π
(
ba£
, 
ev
, 
EVLIST_TIMEOUT
);

777  (
ªs
);

778 
	}
}

781 
	$evít_dñ
(
evít
 *
ev
)

783 
evít_ba£
 *
ba£
;

784 c⁄° 
evít›
 *
ev£l
;

785 *
evba£
;

787 
	`evít_debug
(("event_del: %p, callback %p",

788 
ev
,Év->
ev_ˇŒback
));

791 i‡(
ev
->
ev_ba£
 =
NULL
)

794 
ba£
 = 
ev
->
ev_ba£
;

795 
ev£l
 = 
ba£
->evsel;

796 
evba£
 = 
ba£
->evbase;

798 
	`as£π
(!(
ev
->
ev_Êags
 & ~
EVLIST_ALL
));

801 i‡(
ev
->
ev_nˇŒs
 &&Év->
ev_≤ˇŒs
) {

803 *
ev
->
ev_≤ˇŒs
 = 0;

806 i‡(
ev
->
ev_Êags
 & 
EVLIST_TIMEOUT
)

807 
	`evít_queue_ªmove
(
ba£
, 
ev
, 
EVLIST_TIMEOUT
);

809 i‡(
ev
->
ev_Êags
 & 
EVLIST_ACTIVE
)

810 
	`evít_queue_ªmove
(
ba£
, 
ev
, 
EVLIST_ACTIVE
);

812 i‡(
ev
->
ev_Êags
 & 
EVLIST_INSERTED
) {

813 
	`evít_queue_ªmove
(
ba£
, 
ev
, 
EVLIST_INSERTED
);

814  (
ev£l
->
	`dñ
(
evba£
, 
ev
));

818 
	}
}

821 
	$evít_a˘ive
(
evít
 *
ev
, 
ªs
, 
nˇŒs
)

824 i‡(
ev
->
ev_Êags
 & 
EVLIST_ACTIVE
) {

825 
ev
->
ev_ªs
 |
ªs
;

829 
ev
->
ev_ªs
 = 
ªs
;

830 
ev
->
ev_nˇŒs
 = 
nˇŒs
;

831 
ev
->
ev_≤ˇŒs
 = 
NULL
;

832 
	`evít_queue_ö£π
(
ev
->
ev_ba£
,Év, 
EVLIST_ACTIVE
);

833 
	}
}

836 
	$timeout_√xt
(
evít_ba£
 *
ba£
, 
timevÆ
 **
tv_p
)

838 
timevÆ
 
now
;

839 
evít
 *
ev
;

840 
timevÆ
 *
tv
 = *
tv_p
;

842 i‡((
ev
 = 
	`mö_hóp_t›
(&
ba£
->
timehóp
)Ë=
NULL
) {

844 *
tv_p
 = 
NULL
;

848 i‡(
	`gëtime
(
ba£
, &
now
) == -1)

851 i‡(
	`evutû_timîcmp
(&
ev
->
ev_timeout
, &
now
, <=)) {

852 
	`evutû_timî˛ór
(
tv
);

856 
	`evutû_timîsub
(&
ev
->
ev_timeout
, &
now
, 
tv
);

858 
	`as£π
(
tv
->
tv_£c
 >= 0);

859 
	`as£π
(
tv
->
tv_u£c
 >= 0);

861 
	`evít_debug
(("timeout_√xt: i¿%ld sec⁄ds", 
tv
->
tv_£c
));

863 
	}
}

872 
	$timeout_c‹ª˘
(
evít_ba£
 *
ba£
, 
timevÆ
 *
tv
)

874 
evít
 **
≥v
;

875 
size
;

876 
timevÆ
 
off
;

878 i‡(
u£_m⁄Ÿ⁄ic
)

882 
	`gëtime
(
ba£
, 
tv
);

883 i‡(
	`evutû_timîcmp
(
tv
, &
ba£
->
evít_tv
, >=)) {

884 
ba£
->
evít_tv
 = *
tv
;

888 
	`evít_debug
(("%s:Åime isÑunning backwards, corrected",

889 
__func__
));

890 
	`evutû_timîsub
(&
ba£
->
evít_tv
, 
tv
, &
off
);

896 
≥v
 = 
ba£
->
timehóp
.
p
;

897 
size
 = 
ba£
->
timehóp
.
n
;

898 ; 
size
-- > 0; ++
≥v
) {

899 
timevÆ
 *
ev_tv
 = &(**
≥v
).
ev_timeout
;

900 
	`evutû_timîsub
(
ev_tv
, &
off
,Év_tv);

903 
ba£
->
evít_tv
 = *
tv
;

904 
	}
}

907 
	$timeout_¥o˚ss
(
evít_ba£
 *
ba£
)

909 
timevÆ
 
now
;

910 
evít
 *
ev
;

912 i‡(
	`mö_hóp_em±y
(&
ba£
->
timehóp
))

915 
	`gëtime
(
ba£
, &
now
);

917 (
ev
 = 
	`mö_hóp_t›
(&
ba£
->
timehóp
))) {

918 i‡(
	`evutû_timîcmp
(&
ev
->
ev_timeout
, &
now
, >))

922 
	`evít_dñ
(
ev
);

924 
	`evít_debug
(("timeout_process: call %p",

925 
ev
->
ev_ˇŒback
));

926 
	`evít_a˘ive
(
ev
, 
EV_TIMEOUT
, 1);

928 
	}
}

931 
	$evít_queue_ªmove
(
evít_ba£
 *
ba£
, 
evít
 *
ev
, 
queue
)

933 i‡(!(
ev
->
ev_Êags
 & 
queue
))

934 
	`evít_îrx
(1, "%s: %p(fd %dËnŸ o¿queuê%x", 
__func__
,

935 
ev
,Év->
ev_fd
, 
queue
);

937 i‡(~
ev
->
ev_Êags
 & 
EVLIST_INTERNAL
)

938 
ba£
->
evít_cou¡
--;

940 
ev
->
ev_Êags
 &~
queue
;

941 
queue
) {

942 
EVLIST_INSERTED
:

943 
	`TAILQ_REMOVE
(&
ba£
->
evítqueue
, 
ev
, 
ev_√xt
);

945 
EVLIST_ACTIVE
:

946 
ba£
->
evít_cou¡_a˘ive
--;

947 
	`TAILQ_REMOVE
(
ba£
->
a˘ivequeues
[
ev
->
ev_¥i
],

948 
ev
, 
ev_a˘ive_√xt
);

950 
EVLIST_TIMEOUT
:

951 
	`mö_hóp_îa£
(&
ba£
->
timehóp
, 
ev
);

954 
	`evít_îrx
(1, "%s: unknow¿queuê%x", 
__func__
, 
queue
);

956 
	}
}

959 
	$evít_queue_ö£π
(
evít_ba£
 *
ba£
, 
evít
 *
ev
, 
queue
)

961 i‡(
ev
->
ev_Êags
 & 
queue
) {

963 i‡(
queue
 & 
EVLIST_ACTIVE
)

966 
	`evít_îrx
(1, "%s: %p(fd %dËÆªady o¿queuê%x", 
__func__
,

967 
ev
,Év->
ev_fd
, 
queue
);

970 i‡(~
ev
->
ev_Êags
 & 
EVLIST_INTERNAL
)

971 
ba£
->
evít_cou¡
++;

973 
ev
->
ev_Êags
 |
queue
;

974 
queue
) {

975 
EVLIST_INSERTED
:

976 
	`TAILQ_INSERT_TAIL
(&
ba£
->
evítqueue
, 
ev
, 
ev_√xt
);

978 
EVLIST_ACTIVE
:

979 
ba£
->
evít_cou¡_a˘ive
++;

980 
	`TAILQ_INSERT_TAIL
(
ba£
->
a˘ivequeues
[
ev
->
ev_¥i
],

981 
ev
,
ev_a˘ive_√xt
);

983 
EVLIST_TIMEOUT
: {

984 
	`mö_hóp_push
(&
ba£
->
timehóp
, 
ev
);

988 
	`evít_îrx
(1, "%s: unknow¿queuê%x", 
__func__
, 
queue
);

990 
	}
}

995 
	$evít_gë_vîsi⁄
()

997  (
VERSION
);

998 
	}
}

1006 
	$evít_gë_mëhod
()

1008  (
cuºít_ba£
->
ev£l
->
«me
);

1009 
	}
}

	@event.h

27 #i‚de‡
_EVENT_H_


28 
	#_EVENT_H_


	)

158 #ifde‡
__˝lu•lus


162 
	~<evít-c⁄fig.h
>

163 #ifde‡
_EVENT_HAVE_SYS_TYPES_H


164 
	~<sys/ty≥s.h
>

166 #ifde‡
_EVENT_HAVE_SYS_TIME_H


167 
	~<sys/time.h
>

169 #ifde‡
_EVENT_HAVE_STDINT_H


170 
	~<°döt.h
>

172 
	~<°d¨g.h
>

175 
	~<evutû.h
>

177 #ifde‡
WIN32


178 
	#WIN32_LEAN_AND_MEAN


	)

179 
	~<wödows.h
>

180 #unde‡
WIN32_LEAN_AND_MEAN


181 
	tu_ch¨
;

182 
	tu_sh‹t
;

185 
	#EVLIST_TIMEOUT
 0x01

	)

186 
	#EVLIST_INSERTED
 0x02

	)

187 
	#EVLIST_SIGNAL
 0x04

	)

188 
	#EVLIST_ACTIVE
 0x08

	)

189 
	#EVLIST_INTERNAL
 0x10

	)

190 
	#EVLIST_INIT
 0x80

	)

193 
	#EVLIST_ALL
 (0xf000 | 0x9f)

	)

195 
	#EV_TIMEOUT
 0x01

	)

196 
	#EV_READ
 0x02

	)

197 
	#EV_WRITE
 0x04

	)

198 
	#EV_SIGNAL
 0x08

	)

199 
	#EV_PERSIST
 0x10

	)

202 #i‚de‡
TAILQ_ENTRY


203 
	#_EVENT_DEFINED_TQENTRY


	)

204 
	#TAILQ_ENTRY
(
ty≥
) \

206 
ty≥
 *
tqe_√xt
; \

207 
ty≥
 **
tqe_¥ev
; \

208 }

	)

211 
evít_ba£
;

212 #i‚de‡
EVENT_NO_STRUCT


213 
	sevít
 {

214 
TAILQ_ENTRY
 (
evít
Ë
ev_√xt
;

215 
TAILQ_ENTRY
 (
evít
Ë
ev_a˘ive_√xt
;

216 
TAILQ_ENTRY
 (
evít
Ë
ev_sig«l_√xt
;

217 
mö_hóp_idx
;

219 
evít_ba£
 *
ev_ba£
;

221 
ev_fd
;

222 
ev_evíts
;

223 
ev_nˇŒs
;

224 *
ev_≤ˇŒs
;

226 
timevÆ
 
ev_timeout
;

228 
ev_¥i
;

230 (*
ev_ˇŒback
)(, , *
¨g
);

231 *
ev_¨g
;

233 
ev_ªs
;

234 
ev_Êags
;

237 
evít
;

240 
	#EVENT_SIGNAL
(
ev
Ë()”v)->
ev_fd


	)

241 
	#EVENT_FD
(
ev
Ë()”v)->
ev_fd


	)

247 
	sevkeyvÆ
 {

248 
TAILQ_ENTRY
(
evkeyvÆ
Ë
√xt
;

250 *
key
;

251 *
vÆue
;

254 #ifde‡
_EVENT_DEFINED_TQENTRY


255 #unde‡
TAILQ_ENTRY


256 
evít_li°
;

257 
evkeyvÆq
;

258 #unde‡
_EVENT_DEFINED_TQENTRY


260 
TAILQ_HEAD
 (
evít_li°
, 
evít
);

261 
TAILQ_HEAD
 (
evkeyvÆq
, 
evkeyvÆ
);

273 
evít_ba£
 *
evít_ba£_√w
();

284 
evít_ba£
 *
evít_öô
();

296 
evít_ªöô
(
evít_ba£
 *
ba£
);

307 
evít_di•©ch
();

316 
evít_ba£_di•©ch
(
evít_ba£
 *);

325 c⁄° *
evít_ba£_gë_mëhod
(
evít_ba£
 *);

336 
evít_ba£_‰ì
(
evít_ba£
 *);

339 
	#_EVENT_LOG_DEBUG
 0

	)

340 
	#_EVENT_LOG_MSG
 1

	)

341 
	#_EVENT_LOG_WARN
 2

	)

342 
	#_EVENT_LOG_ERR
 3

	)

343 (*
evít_log_cb
)(
	t£vîôy
, c⁄° *
	tmsg
);

351 
evít_£t_log_ˇŒback
(
evít_log_cb
 
cb
);

359 
evít_ba£_£t
(
evít_ba£
 *, 
evít
 *);

365 
	#EVLOOP_ONCE
 0x01

	)

366 
	#EVLOOP_NONBLOCK
 0x02

	)

379 
evít_lo›
();

392 
evít_ba£_lo›
(
evít_ba£
 *, );

407 
evít_lo›exô
(c⁄° 
timevÆ
 *);

424 
evít_ba£_lo›exô
(
evít_ba£
 *, c⁄° 
timevÆ
 *);

438 
evít_lo›bªak
();

453 
evít_ba£_lo›bªak
(
evít_ba£
 *);

462 
	#evtimî_add
(
ev
, 
tv
Ë
	`evít_add
”v,Åv)

	)

472 
	#evtimî_£t
(
ev
, 
cb
, 
¨g
Ë
	`evít_£t
”v, -1, 0, cb,árg)

	)

480 
	#evtimî_dñ
(
ev
Ë
	`evít_dñ
”v)

	)

481 
	#evtimî_≥ndög
(
ev
, 
tv
Ë
	`evít_≥ndög
”v, 
EV_TIMEOUT
,Åv)

	)

482 
	#evtimî_öôülized
(
ev
Ë(”v)->
ev_Êags
 & 
EVLIST_INIT
)

	)

490 
	#timeout_add
(
ev
, 
tv
Ë
	`evít_add
”v,Åv)

	)

500 
	#timeout_£t
(
ev
, 
cb
, 
¨g
Ë
	`evít_£t
”v, -1, 0, cb,árg)

	)

508 
	#timeout_dñ
(
ev
Ë
	`evít_dñ
”v)

	)

510 
	#timeout_≥ndög
(
ev
, 
tv
Ë
	`evít_≥ndög
”v, 
EV_TIMEOUT
,Åv)

	)

511 
	#timeout_öôülized
(
ev
Ë(”v)->
ev_Êags
 & 
EVLIST_INIT
)

	)

513 
	#sig«l_add
(
ev
, 
tv
Ë
	`evít_add
”v,Åv)

	)

514 
	#sig«l_£t
(
ev
, 
x
, 
cb
, 
¨g
) \

515 
	`evít_£t
(
ev
, 
x
, 
EV_SIGNAL
|
EV_PERSIST
, 
cb
, 
¨g
)

	)

516 
	#sig«l_dñ
(
ev
Ë
	`evít_dñ
”v)

	)

517 
	#sig«l_≥ndög
(
ev
, 
tv
Ë
	`evít_≥ndög
”v, 
EV_SIGNAL
,Åv)

	)

518 
	#sig«l_öôülized
(
ev
Ë(”v)->
ev_Êags
 & 
EVLIST_INIT
)

	)

546 
evít_£t
(
evít
 *, , , (*)(, , *), *);

566 
evít_⁄˚
(, , (*)(, , *), *,

567 c⁄° 
timevÆ
 *);

588 
evít_ba£_⁄˚
(
evít_ba£
 *
ba£
, 
fd
, 
evíts
,

589 (*
ˇŒback
)(, , *), *
¨g
,

590 c⁄° 
timevÆ
 *
timeout
);

611 
evít_add
(
evít
 *
ev
, c⁄° 
timevÆ
 *
timeout
);

625 
evít_dñ
(
evít
 *);

627 
evít_a˘ive
(
evít
 *, , );

641 
evít_≥ndög
(
evít
 *
ev
, evít, 
timevÆ
 *
tv
);

654 #ifde‡
WIN32


655 
	#evít_öôülized
(
ev
Ë(”v)->
ev_Êags
 & 
EVLIST_INIT
 && (ev)->
ev_fd
 !()
INVALID_HANDLE_VALUE
)

	)

657 
	#evít_öôülized
(
ev
Ë(”v)->
ev_Êags
 & 
EVLIST_INIT
)

	)

666 c⁄° *
evít_gë_vîsi⁄
();

674 c⁄° *
evít_gë_mëhod
();

697 
evít_¥i‹ôy_öô
();

710 
evít_ba£_¥i‹ôy_öô
(
evít_ba£
 *, );

721 
evít_¥i‹ôy_£t
(
evít
 *, );

726 
	sevbuf„r
 {

727 
u_ch¨
 *
buf„r
;

728 
u_ch¨
 *
‹ig_buf„r
;

730 
size_t
 
mißlign
;

731 
size_t
 
tŸÆÀn
;

732 
size_t
 
off
;

734 (*
cb
)(
evbuf„r
 *, 
size_t
, size_t, *);

735 *
cb¨g
;

739 
	#EVBUFFER_READ
 0x01

	)

740 
	#EVBUFFER_WRITE
 0x02

	)

741 
	#EVBUFFER_EOF
 0x10

	)

742 
	#EVBUFFER_ERROR
 0x20

	)

743 
	#EVBUFFER_TIMEOUT
 0x40

	)

745 
buf„ªvít
;

746 (*
evbuf„rcb
)(
	tbuf„ªvít
 *, *);

747 (*
evîr‹cb
)(
	tbuf„ªvít
 *, 
	twh©
, *);

749 
	sevít_w©îm¨k
 {

750 
size_t
 
low
;

751 
size_t
 
high
;

754 #i‚de‡
EVENT_NO_STRUCT


755 
	sbuf„ªvít
 {

756 
evít_ba£
 *
ev_ba£
;

758 
evít
 
ev_ªad
;

759 
evít
 
ev_wrôe
;

761 
evbuf„r
 *
öput
;

762 
evbuf„r
 *
ouçut
;

764 
evít_w©îm¨k
 
wm_ªad
;

765 
evít_w©îm¨k
 
wm_wrôe
;

767 
evbuf„rcb
 
ªadcb
;

768 
evbuf„rcb
 
wrôecb
;

769 
evîr‹cb
 
îr‹cb
;

770 *
cb¨g
;

772 
timeout_ªad
;

773 
timeout_wrôe
;

775 
íabÀd
;

813 
buf„ªvít
 *
buf„ªvít_√w
(
fd
,

814 
evbuf„rcb
 
ªadcb
,Évbuf„rcb 
wrôecb
, 
evîr‹cb
 
îr‹cb
, *
cb¨g
);

825 
buf„ªvít_ba£_£t
(
evít_ba£
 *
ba£
, 
buf„ªvít
 *
bu„v
);

835 
buf„ªvít_¥i‹ôy_£t
(
buf„ªvít
 *
bu„v
, 
¥i
);

843 
buf„ªvít_‰ì
(
buf„ªvít
 *
bu„v
);

860 
buf„ªvít_£tcb
(
buf„ªvít
 *
bu„v
,

861 
evbuf„rcb
 
ªadcb
,Évbuf„rcb 
wrôecb
, 
evîr‹cb
 
îr‹cb
, *
cb¨g
);

869 
buf„ªvít_£tfd
(
buf„ªvít
 *
bu„v
, 
fd
);

884 
buf„ªvít_wrôe
(
buf„ªvít
 *
bu„v
,

885 c⁄° *
d©a
, 
size_t
 
size
);

897 
buf„ªvít_wrôe_buf„r
(
buf„ªvít
 *
bu„v
, 
evbuf„r
 *
buf
);

910 
size_t
 
buf„ªvít_ªad
(
buf„ªvít
 *
bu„v
, *
d©a
, size_à
size
);

920 
buf„ªvít_íabÀ
(
buf„ªvít
 *
bu„v
, 
evít
);

931 
buf„ªvít_dißbÀ
(
buf„ªvít
 *
bu„v
, 
evít
);

941 
buf„ªvít_£âimeout
(
buf„ªvít
 *
bu„v
,

942 
timeout_ªad
, 
timeout_wrôe
);

961 
buf„ªvít_£tw©îm¨k
(
buf„ªvít
 *
bu„v
, 
evíts
,

962 
size_t
 
lowm¨k
, size_à
highm¨k
);

964 
	#EVBUFFER_LENGTH
(
x
Ë(x)->
off


	)

965 
	#EVBUFFER_DATA
(
x
Ë(x)->
buf„r


	)

966 
	#EVBUFFER_INPUT
(
x
Ë(x)->
öput


	)

967 
	#EVBUFFER_OUTPUT
(
x
Ë(x)->
ouçut


	)

976 
evbuf„r
 *
evbuf„r_√w
();

984 
evbuf„r_‰ì
(
evbuf„r
 *);

996 
evbuf„r_ex∑nd
(
evbuf„r
 *, 
size_t
);

1006 
evbuf„r_add
(
evbuf„r
 *, c⁄° *, 
size_t
);

1018 
evbuf„r_ªmove
(
evbuf„r
 *, *, 
size_t
);

1030 *
evbuf„r_ªadlöe
(
evbuf„r
 *);

1043 
evbuf„r_add_buf„r
(
evbuf„r
 *, evbuffer *);

1054 
evbuf„r_add_¥ötf
(
evbuf„r
 *, c⁄° *
fmt
, ...)

1055 #ifde‡
__GNUC__


1056 
__©åibuã__
((
f‹m©
(
¥ötf
, 2, 3)))

1069 
evbuf„r_add_v¥ötf
(
evbuf„r
 *, c⁄° *
fmt
, 
va_li°
 
≠
);

1078 
evbuf„r_døö
(
evbuf„r
 *, 
size_t
);

1091 
evbuf„r_wrôe
(
evbuf„r
 *, );

1103 
evbuf„r_ªad
(
evbuf„r
 *, , );

1114 
u_ch¨
 *
evbuf„r_föd
(
evbuf„r
 *, c⁄° u_ch¨ *, 
size_t
);

1123 
evbuf„r_£tcb
(
evbuf„r
 *, (*)(evbuf„∏*, 
size_t
, size_t, *), *);

1131 
evèg_öô
();

1133 
evèg_m¨shÆ
(
evbuf„r
 *
evbuf
, 
ev_uöt32_t
 
èg
, c⁄° *
d©a
,

1134 
ev_uöt32_t
 
Àn
);

1146 
ícode_öt
(
evbuf„r
 *
evbuf
, 
ev_uöt32_t
 
numbî
);

1148 
evèg_m¨shÆ_öt
(
evbuf„r
 *
evbuf
, 
ev_uöt32_t
 
èg
,

1149 
ev_uöt32_t
 
öãgî
);

1151 
evèg_m¨shÆ_°rög
(
evbuf„r
 *
buf
, 
ev_uöt32_t
 
èg
,

1152 c⁄° *
°rög
);

1154 
evèg_m¨shÆ_timevÆ
(
evbuf„r
 *
evbuf
, 
ev_uöt32_t
 
èg
,

1155 
timevÆ
 *
tv
);

1157 
evèg_unm¨shÆ
(
evbuf„r
 *
§c
, 
ev_uöt32_t
 *
±ag
,

1158 
evbuf„r
 *
d°
);

1159 
evèg_≥ek
(
evbuf„r
 *
evbuf
, 
ev_uöt32_t
 *
±ag
);

1160 
evèg_≥ek_Àngth
(
evbuf„r
 *
evbuf
, 
ev_uöt32_t
 *
∂ígth
);

1161 
evèg_∑ylﬂd_Àngth
(
evbuf„r
 *
evbuf
, 
ev_uöt32_t
 *
∂ígth
);

1162 
evèg_c⁄sume
(
evbuf„r
 *
evbuf
);

1164 
evèg_unm¨shÆ_öt
(
evbuf„r
 *
evbuf
, 
ev_uöt32_t
 
√ed_èg
,

1165 
ev_uöt32_t
 *
pöãgî
);

1167 
evèg_unm¨shÆ_fixed
(
evbuf„r
 *
§c
, 
ev_uöt32_t
 
√ed_èg
,

1168 *
d©a
, 
size_t
 
Àn
);

1170 
evèg_unm¨shÆ_°rög
(
evbuf„r
 *
evbuf
, 
ev_uöt32_t
 
√ed_èg
,

1171 **
p°rög
);

1173 
evèg_unm¨shÆ_timevÆ
(
evbuf„r
 *
evbuf
, 
ev_uöt32_t
 
√ed_èg
,

1174 
timevÆ
 *
±v
);

1176 #ifde‡
__˝lu•lus


	@event_tagging.c

28 #ifde‡
HAVE_CONFIG_H


29 
	~"c⁄fig.h
"

32 #ifde‡
HAVE_SYS_TYPES_H


33 
	~<sys/ty≥s.h
>

35 #ifde‡
HAVE_SYS_PARAM_H


36 
	~<sys/∑øm.h
>

39 #ifde‡
WIN32


40 
	#WIN32_LEAN_AND_MEAN


	)

41 
	~<wösock2.h
>

42 
	~<wödows.h
>

43 #unde‡
WIN32_LEAN_AND_MEAN


45 
	~<sys/io˘l.h
>

48 
	~<sys/queue.h
>

49 #ifde‡
HAVE_SYS_TIME_H


50 
	~<sys/time.h
>

53 
	~<î∫o.h
>

54 
	~<°dio.h
>

55 
	~<°dlib.h
>

56 
	~<°rög.h
>

57 #i‚de‡
WIN32


58 
	~<sy¶og.h
>

60 #ifde‡
HAVE_UNISTD_H


61 
	~<uni°d.h
>

64 
	~"evít.h
"

65 
	~"evutû.h
"

66 
	~"log.h
"

68 
evèg_decode_öt
(
ev_uöt32_t
 *
≤umbî
, 
evbuf„r
 *
evbuf
);

69 
evèg_ícode_èg
(
evbuf„r
 *
evbuf
, 
ev_uöt32_t
 
èg
);

70 
evèg_decode_èg
(
ev_uöt32_t
 *
±ag
, 
evbuf„r
 *
evbuf
);

72 
evbuf„r
 *
	g_buf
;

75 
	$evèg_öô
()

77 i‡(
_buf
 !
NULL
)

80 i‡((
_buf
 = 
	`evbuf„r_√w
()Ë=
NULL
)

81 
	`evít_îr
(1, "%s: mÆloc", 
__func__
);

82 
	}
}

91 
	$ícode_öt
(
evbuf„r
 *
evbuf
, 
ev_uöt32_t
 
numbî
)

93 
off
 = 1, 
nibbÀs
 = 0;

94 
ev_uöt8_t
 
d©a
[5];

96 
	`mem£t
(
d©a
, 0, (
ev_uöt32_t
)+1);

97 
numbî
) {

98 i‡(
off
 & 0x1)

99 
d©a
[
off
/2] = (d©a[off/2] & 0xf0Ë| (
numbî
 & 0x0f);

101 
d©a
[
off
/2] = (data[off/2] & 0x0f) |

102 ((
numbî
 & 0x0f) << 4);

103 
numbî
 >>= 4;

104 
off
++;

107 i‡(
off
 > 2)

108 
nibbÀs
 = 
off
 - 2;

111 
d©a
[0] = (d©a[0] & 0x0fË| ((
nibbÀs
 & 0x0f) << 4);

113 
	`evbuf„r_add
(
evbuf
, 
d©a
, (
off
 + 1) / 2);

114 
	}
}

122 
	$evèg_ícode_èg
(
evbuf„r
 *
evbuf
, 
ev_uöt32_t
 
èg
)

124 
byãs
 = 0;

125 
ev_uöt8_t
 
d©a
[5];

127 
	`mem£t
(
d©a
, 0, (data));

129 
ev_uöt8_t
 
lowî
 = 
èg
 & 0x7f;

130 
èg
 >>= 7;

132 i‡(
èg
)

133 
lowî
 |= 0x80;

135 
d©a
[
byãs
++] = 
lowî
;

136 } 
èg
);

138 i‡(
evbuf
 !
NULL
)

139 
	`evbuf„r_add
(
evbuf
, 
d©a
, 
byãs
);

141  (
byãs
);

142 
	}
}

145 
	$decode_èg_öã∫Æ
(
ev_uöt32_t
 *
±ag
, 
evbuf„r
 *
evbuf
, 
dodøö
)

147 
ev_uöt32_t
 
numbî
 = 0;

148 
ev_uöt8_t
 *
d©a
 = 
	`EVBUFFER_DATA
(
evbuf
);

149 
Àn
 = 
	`EVBUFFER_LENGTH
(
evbuf
);

150 
cou¡
 = 0, 
shi·
 = 0, 
d⁄e
 = 0;

152 
cou¡
++ < 
Àn
) {

153 
ev_uöt8_t
 
lowî
 = *
d©a
++;

154 
numbî
 |(
lowî
 & 0x7fË<< 
shi·
;

155 
shi·
 += 7;

157 i‡(!(
lowî
 & 0x80)) {

158 
d⁄e
 = 1;

163 i‡(!
d⁄e
)

166 i‡(
dodøö
)

167 
	`evbuf„r_døö
(
evbuf
, 
cou¡
);

169 i‡(
±ag
 !
NULL
)

170 *
±ag
 = 
numbî
;

172  (
cou¡
);

173 
	}
}

176 
	$evèg_decode_èg
(
ev_uöt32_t
 *
±ag
, 
evbuf„r
 *
evbuf
)

178  (
	`decode_èg_öã∫Æ
(
±ag
, 
evbuf
, 1 ));

179 
	}
}

188 
	$evèg_m¨shÆ
(
evbuf„r
 *
evbuf
, 
ev_uöt32_t
 
èg
,

189 c⁄° *
d©a
, 
ev_uöt32_t
 
Àn
)

191 
	`evèg_ícode_èg
(
evbuf
, 
èg
);

192 
	`ícode_öt
(
evbuf
, 
Àn
);

193 
	`evbuf„r_add
(
evbuf
, (*)
d©a
, 
Àn
);

194 
	}
}

198 
	$evèg_m¨shÆ_öt
(
evbuf„r
 *
evbuf
, 
ev_uöt32_t
 
èg
,Év_uöt32_à
öãgî
)

200 
	`evbuf„r_døö
(
_buf
, 
	`EVBUFFER_LENGTH
(_buf));

201 
	`ícode_öt
(
_buf
, 
öãgî
);

203 
	`evèg_ícode_èg
(
evbuf
, 
èg
);

204 
	`ícode_öt
(
evbuf
, 
	`EVBUFFER_LENGTH
(
_buf
));

205 
	`evbuf„r_add_buf„r
(
evbuf
, 
_buf
);

206 
	}
}

209 
	$evèg_m¨shÆ_°rög
(
evbuf„r
 *
buf
, 
ev_uöt32_t
 
èg
, c⁄° *
°rög
)

211 
	`evèg_m¨shÆ
(
buf
, 
èg
, 
°rög
, 
	`°æí
(string));

212 
	}
}

215 
	$evèg_m¨shÆ_timevÆ
(
evbuf„r
 *
evbuf
, 
ev_uöt32_t
 
èg
, 
timevÆ
 *
tv
)

217 
	`evbuf„r_døö
(
_buf
, 
	`EVBUFFER_LENGTH
(_buf));

219 
	`ícode_öt
(
_buf
, 
tv
->
tv_£c
);

220 
	`ícode_öt
(
_buf
, 
tv
->
tv_u£c
);

222 
	`evèg_m¨shÆ
(
evbuf
, 
èg
, 
	`EVBUFFER_DATA
(
_buf
),

223 
	`EVBUFFER_LENGTH
(
_buf
));

224 
	}
}

227 
	$decode_öt_öã∫Æ
(
ev_uöt32_t
 *
≤umbî
, 
evbuf„r
 *
evbuf
, 
dodøö
)

229 
ev_uöt32_t
 
numbî
 = 0;

230 
ev_uöt8_t
 *
d©a
 = 
	`EVBUFFER_DATA
(
evbuf
);

231 
Àn
 = 
	`EVBUFFER_LENGTH
(
evbuf
);

232 
nibbÀs
 = 0;

234 i‡(!
Àn
)

237 
nibbÀs
 = ((
d©a
[0] & 0xf0) >> 4) + 1;

238 i‡(
nibbÀs
 > 8 || (nibbÀ†>> 1Ë+ 1 > 
Àn
)

240 
Àn
 = (
nibbÀs
 >> 1) + 1;

242 
nibbÀs
 > 0) {

243 
numbî
 <<= 4;

244 i‡(
nibbÀs
 & 0x1)

245 
numbî
 |
d©a
[
nibbÀs
 >> 1] & 0x0f;

247 
numbî
 |(
d©a
[
nibbÀs
 >> 1] & 0xf0) >> 4;

248 
nibbÀs
--;

251 i‡(
dodøö
)

252 
	`evbuf„r_døö
(
evbuf
, 
Àn
);

254 *
≤umbî
 = 
numbî
;

256  (
Àn
);

257 
	}
}

260 
	$evèg_decode_öt
(
ev_uöt32_t
 *
≤umbî
, 
evbuf„r
 *
evbuf
)

262  (
	`decode_öt_öã∫Æ
(
≤umbî
, 
evbuf
, 1) == -1 ? -1 : 0);

263 
	}
}

266 
	$evèg_≥ek
(
evbuf„r
 *
evbuf
, 
ev_uöt32_t
 *
±ag
)

268  (
	`decode_èg_öã∫Æ
(
±ag
, 
evbuf
, 0 ));

269 
	}
}

272 
	$evèg_≥ek_Àngth
(
evbuf„r
 *
evbuf
, 
ev_uöt32_t
 *
∂ígth
)

274 
evbuf„r
 
tmp
;

275 
ªs
, 
Àn
;

277 
Àn
 = 
	`decode_èg_öã∫Æ
(
NULL
, 
evbuf
, 0 );

278 i‡(
Àn
 == -1)

281 
tmp
 = *
evbuf
;

282 
tmp
.
buf„r
 +
Àn
;

283 
tmp
.
off
 -
Àn
;

285 
ªs
 = 
	`decode_öt_öã∫Æ
(
∂ígth
, &
tmp
, 0);

286 i‡(
ªs
 == -1)

289 *
∂ígth
 +
ªs
 + 
Àn
;

292 
	}
}

295 
	$evèg_∑ylﬂd_Àngth
(
evbuf„r
 *
evbuf
, 
ev_uöt32_t
 *
∂ígth
)

297 
evbuf„r
 
tmp
;

298 
ªs
, 
Àn
;

300 
Àn
 = 
	`decode_èg_öã∫Æ
(
NULL
, 
evbuf
, 0 );

301 i‡(
Àn
 == -1)

304 
tmp
 = *
evbuf
;

305 
tmp
.
buf„r
 +
Àn
;

306 
tmp
.
off
 -
Àn
;

308 
ªs
 = 
	`decode_öt_öã∫Æ
(
∂ígth
, &
tmp
, 0);

309 i‡(
ªs
 == -1)

313 
	}
}

316 
	$evèg_c⁄sume
(
evbuf„r
 *
evbuf
)

318 
ev_uöt32_t
 
Àn
;

319 i‡(
	`decode_èg_öã∫Æ
(
NULL
, 
evbuf
, 1 ) == -1)

321 i‡(
	`evèg_decode_öt
(&
Àn
, 
evbuf
) == -1)

323 
	`evbuf„r_døö
(
evbuf
, 
Àn
);

326 
	}
}

331 
	$evèg_unm¨shÆ
(
evbuf„r
 *
§c
, 
ev_uöt32_t
 *
±ag
, evbuf„∏*
d°
)

333 
ev_uöt32_t
 
Àn
;

334 
ev_uöt32_t
 
öãgî
;

336 i‡(
	`decode_èg_öã∫Æ
(
±ag
, 
§c
, 1 ) == -1)

338 i‡(
	`evèg_decode_öt
(&
öãgî
, 
§c
) == -1)

340 
Àn
 = 
öãgî
;

342 i‡(
	`EVBUFFER_LENGTH
(
§c
Ë< 
Àn
)

345 i‡(
	`evbuf„r_add
(
d°
, 
	`EVBUFFER_DATA
(
§c
), 
Àn
) == -1)

348 
	`evbuf„r_døö
(
§c
, 
Àn
);

350  (
Àn
);

351 
	}
}

356 
	$evèg_unm¨shÆ_öt
(
evbuf„r
 *
evbuf
, 
ev_uöt32_t
 
√ed_èg
,

357 
ev_uöt32_t
 *
pöãgî
)

359 
ev_uöt32_t
 
èg
;

360 
ev_uöt32_t
 
Àn
;

361 
ev_uöt32_t
 
öãgî
;

363 i‡(
	`decode_èg_öã∫Æ
(&
èg
, 
evbuf
, 1 ) == -1)

365 i‡(
√ed_èg
 !
èg
)

367 i‡(
	`evèg_decode_öt
(&
öãgî
, 
evbuf
) == -1)

369 
Àn
 = 
öãgî
;

371 i‡(
	`EVBUFFER_LENGTH
(
evbuf
Ë< 
Àn
)

374 
	`evbuf„r_døö
(
_buf
, 
	`EVBUFFER_LENGTH
(_buf));

375 i‡(
	`evbuf„r_add
(
_buf
, 
	`EVBUFFER_DATA
(
evbuf
), 
Àn
) == -1)

378 
	`evbuf„r_døö
(
evbuf
, 
Àn
);

380  (
	`evèg_decode_öt
(
pöãgî
, 
_buf
));

381 
	}
}

386 
	$evèg_unm¨shÆ_fixed
(
evbuf„r
 *
§c
, 
ev_uöt32_t
 
√ed_èg
, *
d©a
,

387 
size_t
 
Àn
)

389 
ev_uöt32_t
 
èg
;

392 
	`evbuf„r_døö
(
_buf
, 
	`EVBUFFER_LENGTH
(_buf));

395 i‡(
	`evèg_unm¨shÆ
(
§c
, &
èg
, 
_buf
Ë=-1 ||Åag !
√ed_èg
)

398 i‡(
	`EVBUFFER_LENGTH
(
_buf
Ë!
Àn
)

401 
	`mem˝y
(
d©a
, 
	`EVBUFFER_DATA
(
_buf
), 
Àn
);

403 
	}
}

406 
	$evèg_unm¨shÆ_°rög
(
evbuf„r
 *
evbuf
, 
ev_uöt32_t
 
√ed_èg
,

407 **
p°rög
)

409 
ev_uöt32_t
 
èg
;

411 
	`evbuf„r_døö
(
_buf
, 
	`EVBUFFER_LENGTH
(_buf));

413 i‡(
	`evèg_unm¨shÆ
(
evbuf
, &
èg
, 
_buf
Ë=-1 ||Åag !
√ed_èg
)

416 *
p°rög
 = 
	`ˇŒoc
(
	`EVBUFFER_LENGTH
(
_buf
) + 1, 1);

417 i‡(*
p°rög
 =
NULL
)

418 
	`evít_îr
(1, "%s: cÆloc", 
__func__
);

419 
	`evbuf„r_ªmove
(
_buf
, *
p°rög
, 
	`EVBUFFER_LENGTH
(_buf));

422 
	}
}

425 
	$evèg_unm¨shÆ_timevÆ
(
evbuf„r
 *
evbuf
, 
ev_uöt32_t
 
√ed_èg
,

426 
timevÆ
 *
±v
)

428 
ev_uöt32_t
 
èg
;

429 
ev_uöt32_t
 
öãgî
;

431 
	`evbuf„r_døö
(
_buf
, 
	`EVBUFFER_LENGTH
(_buf));

432 i‡(
	`evèg_unm¨shÆ
(
evbuf
, &
èg
, 
_buf
Ë=-1 ||Åag !
√ed_èg
)

435 i‡(
	`evèg_decode_öt
(&
öãgî
, 
_buf
) == -1)

437 
±v
->
tv_£c
 = 
öãgî
;

438 i‡(
	`evèg_decode_öt
(&
öãgî
, 
_buf
) == -1)

440 
±v
->
tv_u£c
 = 
öãgî
;

443 
	}
}

	@evhttp.h

27 #i‚de‡
_EVHTTP_H_


28 
	#_EVHTTP_H_


	)

30 
	~<evít.h
>

32 #ifde‡
__˝lu•lus


36 #ifde‡
WIN32


37 
	#WIN32_LEAN_AND_MEAN


	)

38 
	~<wösock2.h
>

39 
	~<wödows.h
>

40 #unde‡
WIN32_LEAN_AND_MEAN


55 
	#HTTP_OK
 200

	)

56 
	#HTTP_NOCONTENT
 204

	)

57 
	#HTTP_MOVEPERM
 301

	)

58 
	#HTTP_MOVETEMP
 302

	)

59 
	#HTTP_NOTMODIFIED
 304

	)

60 
	#HTTP_BADREQUEST
 400

	)

61 
	#HTTP_NOTFOUND
 404

	)

62 
	#HTTP_SERVUNAVAIL
 503

	)

64 
evhâp
;

65 
evhâp_ªque°
;

66 
evkeyvÆq
;

73 
evhâp
 *
evhâp_√w
(
evít_ba£
 *
ba£
);

87 
evhâp_böd_sockë
(
evhâp
 *
hâp
, c⁄° *
addªss
, 
u_sh‹t
 
p‹t
);

105 
evhâp_ac˚±_sockë
(
evhâp
 *
hâp
, 
fd
);

115 
evhâp_‰ì
(
evhâp
* 
hâp
);

118 
evhâp_£t_cb
(
evhâp
 *, const *,

119 (*)(
evhâp_ªque°
 *, *), *);

122 
evhâp_dñ_cb
(
evhâp
 *, const *);

126 
evhâp_£t_gícb
(
evhâp
 *,

127 (*)(
evhâp_ªque°
 *, *), *);

135 
evhâp_£t_timeout
(
evhâp
 *, 
timeout_ö_£cs
);

146 
evhâp_£nd_îr‹
(
evhâp_ªque°
 *
ªq
, 
îr‹
,

147 c⁄° *
ªas⁄
);

157 
evhâp_£nd_ª∂y
(
evhâp_ªque°
 *
ªq
, 
code
,

158 c⁄° *
ªas⁄
, 
evbuf„r
 *
d©abuf
);

161 
evhâp_£nd_ª∂y_°¨t
(
evhâp_ªque°
 *, , const *);

162 
evhâp_£nd_ª∂y_chunk
(
evhâp_ªque°
 *, 
evbuf„r
 *);

163 
evhâp_£nd_ª∂y_íd
(
evhâp_ªque°
 *);

174 
evhâp
 *
evhâp_°¨t
(c⁄° *
addªss
, 
u_sh‹t
 
p‹t
);

179 
	eevhâp_cmd_ty≥
 { 
EVHTTP_REQ_GET
, 
EVHTTP_REQ_POST
, 
EVHTTP_REQ_HEAD
 };

181 
	eevhâp_ªque°_köd
 { 
EVHTTP_REQUEST
, 
EVHTTP_RESPONSE
 };

188 
	sevhâp_ªque°
 {

189 #i‡
deföed
(
TAILQ_ENTRY
)

190 
TAILQ_ENTRY
(
evhâp_ªque°
Ë
√xt
;

193 
evhâp_ªque°
 *
tqe_√xt
;

194 
evhâp_ªque°
 **
tqe_¥ev
;

195 } 
√xt
;

199 
evhâp_c⁄√˘i⁄
 *
evc⁄
;

200 
Êags
;

201 
	#EVHTTP_REQ_OWN_CONNECTION
 0x0001

	)

202 
	#EVHTTP_PROXY_REQUEST
 0x0002

	)

204 
evkeyvÆq
 *
öput_hódîs
;

205 
evkeyvÆq
 *
ouçut_hódîs
;

208 *
ªmŸe_ho°
;

209 
u_sh‹t
 
ªmŸe_p‹t
;

211 
evhâp_ªque°_köd
 
köd
;

212 
evhâp_cmd_ty≥
 
ty≥
;

214 *
uri
;

216 
maj‹
;

217 
mö‹
;

219 
ª•⁄£_code
;

220 *
ª•⁄£_code_löe
;

222 
evbuf„r
 *
öput_buf„r
;

223 
ev_öt64_t
 
¡‹ód
;

224 
chunked
;

226 
evbuf„r
 *
ouçut_buf„r
;

229 (*
cb
)(
evhâp_ªque°
 *, *);

230 *
cb_¨g
;

237 (*
chunk_cb
)(
evhâp_ªque°
 *, *);

245 
evhâp_ªque°
 *
evhâp_ªque°_√w
(

246 (*
cb
)(
evhâp_ªque°
 *, *), *
¨g
);

249 
evhâp_ªque°_£t_chunked_cb
(
evhâp_ªque°
 *,

250 (*
cb
)(
evhâp_ªque°
 *, *));

253 
evhâp_ªque°_‰ì
(
evhâp_ªque°
 *
ªq
);

260 
evhâp_c⁄√˘i⁄
 *
evhâp_c⁄√˘i⁄_√w
(

261 c⁄° *
addªss
, 
p‹t
);

264 
evhâp_c⁄√˘i⁄_‰ì
(
evhâp_c⁄√˘i⁄
 *
evc⁄
);

267 
evhâp_c⁄√˘i⁄_£t_loˇl_addªss
(
evhâp_c⁄√˘i⁄
 *
evc⁄
,

268 c⁄° *
addªss
);

271 
evhâp_c⁄√˘i⁄_£t_loˇl_p‹t
(
evhâp_c⁄√˘i⁄
 *
evc⁄
,

272 
p‹t
);

275 
evhâp_c⁄√˘i⁄_£t_timeout
(
evhâp_c⁄√˘i⁄
 *
evc⁄
,

276 
timeout_ö_£cs
);

279 
evhâp_c⁄√˘i⁄_£t_ªåõs
(
evhâp_c⁄√˘i⁄
 *
evc⁄
,

280 
ªåy_max
);

283 
evhâp_c⁄√˘i⁄_£t_˛o£cb
(
evhâp_c⁄√˘i⁄
 *
evc⁄
,

284 (*)(
evhâp_c⁄√˘i⁄
 *, *), *);

290 
evhâp_c⁄√˘i⁄_£t_ba£
(
evhâp_c⁄√˘i⁄
 *
evc⁄
,

291 
evít_ba£
 *
ba£
);

294 
evhâp_c⁄√˘i⁄_gë_≥î
(
evhâp_c⁄√˘i⁄
 *
evc⁄
,

295 **
addªss
, 
u_sh‹t
 *
p‹t
);

298 
evhâp_make_ªque°
(
evhâp_c⁄√˘i⁄
 *
evc⁄
,

299 
evhâp_ªque°
 *
ªq
,

300 
evhâp_cmd_ty≥
 
ty≥
, c⁄° *
uri
);

302 c⁄° *
evhâp_ªque°_uri
(
evhâp_ªque°
 *
ªq
);

306 c⁄° *
evhâp_föd_hódî
(c⁄° 
evkeyvÆq
 *, const *);

307 
evhâp_ªmove_hódî
(
evkeyvÆq
 *, const *);

308 
evhâp_add_hódî
(
evkeyvÆq
 *, const *, const *);

309 
evhâp_˛ór_hódîs
(
evkeyvÆq
 *);

322 *
evhâp_ícode_uri
(c⁄° *
uri
);

333 *
evhâp_decode_uri
(c⁄° *
uri
);

351 
evhâp_∑r£_quîy
(c⁄° *
uri
, 
evkeyvÆq
 *
hódîs
);

365 *
evhâp_htmÀsˇ≥
(c⁄° *
html
);

367 #ifde‡
__˝lu•lus


	@evport.c

53 #ifde‡
HAVE_CONFIG_H


54 
	~"c⁄fig.h
"

57 
	~<sys/time.h
>

58 
	~<as£π.h
>

59 
	~<sys/queue.h
>

60 
	~<î∫o.h
>

61 
	~<pﬁl.h
>

62 
	~<p‹t.h
>

63 
	~<sig«l.h
>

64 
	~<°dio.h
>

65 
	~<°dlib.h
>

66 
	~<°rög.h
>

67 
	~<time.h
>

68 
	~<uni°d.h
>

69 #ifde‡
CHECK_INVARIANTS


70 
	~<as£π.h
>

73 
	~"evít.h
"

74 
	~"evít-öã∫Æ.h
"

75 
	~"log.h
"

76 
	~"evsig«l.h
"

84 
	#DEFAULT_NFDS
 16

	)

92 
	#EVENTS_PER_GETN
 8

	)

99 
	sfd_öfo
 {

100 
evít
* 
	mfdi_ªvt
;

101 
evít
* 
	mfdi_wevt
;

104 
	#FDI_HAS_READ
(
fdi
Ë((fdi)->
fdi_ªvt
 !
NULL
)

	)

105 
	#FDI_HAS_WRITE
(
fdi
Ë((fdi)->
fdi_wevt
 !
NULL
)

	)

106 
	#FDI_HAS_EVENTS
(
fdi
Ë(
	`FDI_HAS_READ
(fdiË|| 
	`FDI_HAS_WRITE
(fdi))

	)

107 
	#FDI_TO_SYSEVENTS
(
fdi
Ë(
	`FDI_HAS_READ
(fdiË? 
POLLIN
 : 0) | \

108 (
	`FDI_HAS_WRITE
(
fdi
Ë? 
POLLOUT
 : 0)

	)

110 
	sevp‹t_d©a
 {

111 
	med_p‹t
;

112 
	med_√víts
;

113 
fd_öfo
 *
	med_fds
;

115 
	med_≥ndög
[
EVENTS_PER_GETN
];

118 * 
evp‹t_öô
 (
evít_ba£
 *);

119 
evp‹t_add
 (*, 
evít
 *);

120 
evp‹t_dñ
 (*, 
evít
 *);

121 
evp‹t_di•©ch
 (
evít_ba£
 *, *, 
timevÆ
 *);

122 
evp‹t_dóŒoc
 (
evít_ba£
 *, *);

124 c⁄° 
evít›
 
	gevp‹t›s
 = {

126 
evp‹t_öô
,

127 
evp‹t_add
,

128 
evp‹t_dñ
,

129 
evp‹t_di•©ch
,

130 
evp‹t_dóŒoc
,

139 
	$evp‹t_öô
(
evít_ba£
 *
ba£
)

141 
evp‹t_d©a
 *
evpd
;

142 
i
;

146 i‡(
	`evutû_gëív
("EVENT_NOEVPORT"))

147  (
NULL
);

149 i‡(!(
evpd
 = 
	`ˇŒoc
(1, (
evp‹t_d©a
))))

150  (
NULL
);

152 i‡((
evpd
->
ed_p‹t
 = 
	`p‹t_¸óã
()) == -1) {

153 
	`‰ì
(
evpd
);

154  (
NULL
);

160 
evpd
->
ed_fds
 = 
	`ˇŒoc
(
DEFAULT_NFDS
, (
fd_öfo
));

161 i‡(
evpd
->
ed_fds
 =
NULL
) {

162 
	`˛o£
(
evpd
->
ed_p‹t
);

163 
	`‰ì
(
evpd
);

164  (
NULL
);

166 
evpd
->
ed_√víts
 = 
DEFAULT_NFDS
;

167 
i
 = 0; i < 
EVENTS_PER_GETN
; i++)

168 
evpd
->
ed_≥ndög
[
i
] = -1;

170 
	`evsig«l_öô
(
ba£
);

172  (
evpd
);

173 
	}
}

175 #ifde‡
CHECK_INVARIANTS


183 
	$check_evp‹t›
(
evp‹t_d©a
 *
evpd
)

185 
	`as£π
(
evpd
);

186 
	`as£π
(
evpd
->
ed_√víts
 > 0);

187 
	`as£π
(
evpd
->
ed_p‹t
 > 0);

188 
	`as£π
(
evpd
->
ed_fds
 > 0);

195 
i
;

196 
i
 = 0; i < 
evpd
->
ed_√víts
; ++i) {

197 
evít
 *
ev
;

198 
fd_öfo
 *
fdi
;

200 
fdi
 = &
evpd
->
ed_fds
[
i
];

201 i‡((
ev
 = 
fdi
->
fdi_ªvt
Ë!
NULL
) {

202 
	`as£π
(
ev
->
ev_fd
 =
i
);

204 i‡((
ev
 = 
fdi
->
fdi_wevt
Ë!
NULL
) {

205 
	`as£π
(
ev
->
ev_fd
 =
i
);

208 
	}
}

214 
	$check_evít
(
p‹t_evít_t
* 
≥vt
)

222 
	`as£π
(
≥vt
->
p‹ãv_sour˚
 =
PORT_SOURCE_FD
);

223 
	`as£π
(
≥vt
->
p‹ãv_u£r
 =
NULL
);

224 
	}
}

227 
	#check_evp‹t›
(
ï›
)

	)

228 
	#check_evít
(
≥vt
)

	)

235 
	$grow
(
evp‹t_d©a
 *
ïdp
, 
Á˘‹
)

237 
fd_öfo
 *
tmp
;

238 
ﬁdsize
 = 
ïdp
->
ed_√víts
;

239 
√wsize
 = 
Á˘‹
 * 
ﬁdsize
;

240 
	`as£π
(
Á˘‹
 > 1);

242 
	`check_evp‹t›
(
ïdp
);

244 
tmp
 = 
	`ªÆloc
(
ïdp
->
ed_fds
, (
fd_öfo
Ë* 
√wsize
);

245 i‡(
NULL
 =
tmp
)

247 
ïdp
->
ed_fds
 = 
tmp
;

248 
	`mem£t
((*Ë(
ïdp
->
ed_fds
 + 
ﬁdsize
), 0,

249 (
√wsize
 - 
ﬁdsize
)*(
fd_öfo
));

250 
ïdp
->
ed_√víts
 = 
√wsize
;

252 
	`check_evp‹t›
(
ïdp
);

255 
	}
}

263 
	$ªassocüã
(
evp‹t_d©a
 *
ïdp
, 
fd_öfo
 *
fdù
, 
fd
)

265 
sy£víts
 = 
	`FDI_TO_SYSEVENTS
(
fdù
);

267 i‡(
sy£víts
 != 0) {

268 i‡(
	`p‹t_assocüã
(
ïdp
->
ed_p‹t
, 
PORT_SOURCE_FD
,

269 
fd
, 
sy£víts
, 
NULL
) == -1) {

270 
	`evít_w¨n
("port_associate");

275 
	`check_evp‹t›
(
ïdp
);

278 
	}
}

286 
	$evp‹t_di•©ch
(
evít_ba£
 *
ba£
, *
¨g
, 
timevÆ
 *
tv
)

288 
i
, 
ªs
;

289 
evp‹t_d©a
 *
ïdp
 = 
¨g
;

290 
p‹t_evít_t
 
≥véi°
[
EVENTS_PER_GETN
];

298 
√víts
 = 1;

305 
time•ec
 
ts
;

306 
time•ec
 *
ts_p
 = 
NULL
;

307 i‡(
tv
 !
NULL
) {

308 
ts
.
tv_£c
 = 
tv
->tv_sec;

309 
ts
.
tv_n£c
 = 
tv
->
tv_u£c
 * 1000;

310 
ts_p
 = &
ts
;

318 
i
 = 0; i < 
EVENTS_PER_GETN
; ++i) {

319 
fd_öfo
 *
fdi
 = 
NULL
;

320 i‡(
ïdp
->
ed_≥ndög
[
i
] != -1) {

321 
fdi
 = &(
ïdp
->
ed_fds
[ïdp->
ed_≥ndög
[
i
]]);

324 i‡(
fdi
 !
NULL
 && 
	`FDI_HAS_EVENTS
(fdi)) {

325 
fd
 = 
	`FDI_HAS_READ
(
fdi
Ë? fdi->
fdi_ªvt
->
ev_fd
 :

326 
fdi
->
fdi_wevt
->
ev_fd
;

327 
	`ªassocüã
(
ïdp
, 
fdi
, 
fd
);

328 
ïdp
->
ed_≥ndög
[
i
] = -1;

332 i‡((
ªs
 = 
	`p‹t_gën
(
ïdp
->
ed_p‹t
, 
≥véi°
, 
EVENTS_PER_GETN
,

333 (*Ë&
√víts
, 
ts_p
)) == -1) {

334 i‡(
î∫o
 =
EINTR
 ||Éºnÿ=
EAGAIN
) {

335 
	`evsig«l_¥o˚ss
(
ba£
);

337 } i‡(
î∫o
 =
ETIME
) {

338 i‡(
√víts
 == 0)

341 
	`evít_w¨n
("port_getn");

344 } i‡(
ba£
->
sig
.
evsig«l_ˇught
) {

345 
	`evsig«l_¥o˚ss
(
ba£
);

348 
	`evít_debug
(("%s:Ö‹t_gë¿ªp‹t†%dÉvíts", 
__func__
, 
√víts
));

350 
i
 = 0; i < 
√víts
; ++i) {

351 
evít
 *
ev
;

352 
fd_öfo
 *
fdi
;

353 
p‹t_evít_t
 *
≥vt
 = &
≥véi°
[
i
];

354 
fd
 = (Ë
≥vt
->
p‹ãv_obje˘
;

356 
	`check_evp‹t›
(
ïdp
);

357 
	`check_evít
(
≥vt
);

358 
ïdp
->
ed_≥ndög
[
i
] = 
fd
;

364 
ªs
 = 0;

365 i‡(
≥vt
->
p‹ãv_evíts
 & 
POLLIN
)

366 
ªs
 |
EV_READ
;

367 i‡(
≥vt
->
p‹ãv_evíts
 & 
POLLOUT
)

368 
ªs
 |
EV_WRITE
;

370 
	`as£π
(
ïdp
->
ed_√víts
 > 
fd
);

371 
fdi
 = &(
ïdp
->
ed_fds
[
fd
]);

379 i‡((
ªs
 & 
EV_READ
Ë&& ((
ev
 = 
fdi
->
fdi_ªvt
Ë!
NULL
)) {

380 
	`evít_a˘ive
(
ev
, 
ªs
, 1);

383 i‡((
ªs
 & 
EV_WRITE
Ë&& ((
ev
 = 
fdi
->
fdi_wevt
Ë!
NULL
)) {

384 
	`evít_a˘ive
(
ev
, 
ªs
, 1);

388 
	`check_evp‹t›
(
ïdp
);

391 
	}
}

400 
	$evp‹t_add
(*
¨g
, 
evít
 *
ev
)

402 
evp‹t_d©a
 *
evpd
 = 
¨g
;

403 
fd_öfo
 *
fdi
;

404 
Á˘‹
;

406 
	`check_evp‹t›
(
evpd
);

411 i‡(
ev
->
ev_evíts
 & 
EV_SIGNAL
)

412  (
	`evsig«l_add
(
ev
));

418 
Á˘‹
 = 1;

419 
ev
->
ev_fd
 >
Á˘‹
 * 
evpd
->
ed_√víts
)

420 
Á˘‹
 *= 2;

422 i‡(
Á˘‹
 > 1) {

423 i‡(-1 =
	`grow
(
evpd
, 
Á˘‹
)) {

428 
fdi
 = &
evpd
->
ed_fds
[
ev
->
ev_fd
];

429 i‡(
ev
->
ev_evíts
 & 
EV_READ
)

430 
fdi
->
fdi_ªvt
 = 
ev
;

431 i‡(
ev
->
ev_evíts
 & 
EV_WRITE
)

432 
fdi
->
fdi_wevt
 = 
ev
;

434  
	`ªassocüã
(
evpd
, 
fdi
, 
ev
->
ev_fd
);

435 
	}
}

442 
	$evp‹t_dñ
(*
¨g
, 
evít
 *
ev
)

444 
evp‹t_d©a
 *
evpd
 = 
¨g
;

445 
fd_öfo
 *
fdi
;

446 
i
;

447 
assocüãd
 = 1;

449 
	`check_evp‹t›
(
evpd
);

454 i‡(
ev
->
ev_evíts
 & 
EV_SIGNAL
) {

455  (
	`evsig«l_dñ
(
ev
));

458 i‡(
evpd
->
ed_√víts
 < 
ev
->
ev_fd
) {

462 
i
 = 0; i < 
EVENTS_PER_GETN
; ++i) {

463 i‡(
evpd
->
ed_≥ndög
[
i
] =
ev
->
ev_fd
) {

464 
assocüãd
 = 0;

469 
fdi
 = &
evpd
->
ed_fds
[
ev
->
ev_fd
];

470 i‡(
ev
->
ev_evíts
 & 
EV_READ
)

471 
fdi
->
fdi_ªvt
 = 
NULL
;

472 i‡(
ev
->
ev_evíts
 & 
EV_WRITE
)

473 
fdi
->
fdi_wevt
 = 
NULL
;

475 i‡(
assocüãd
) {

476 i‡(!
	`FDI_HAS_EVENTS
(
fdi
) &&

477 
	`p‹t_dissocüã
(
evpd
->
ed_p‹t
, 
PORT_SOURCE_FD
,

478 
ev
->
ev_fd
) == -1) {

483 i‡(
î∫o
 !
EBADFD
) {

484 
	`evít_w¨n
("port_dissociate");

488 i‡(
	`FDI_HAS_EVENTS
(
fdi
)) {

489  (
	`ªassocüã
(
evpd
, 
fdi
, 
ev
->
ev_fd
));

493 i‡(
fdi
->
fdi_ªvt
 =
NULL
 && fdi->
fdi_wevt
 == NULL) {

494 
evpd
->
ed_≥ndög
[
i
] = -1;

498 
	}
}

502 
	$evp‹t_dóŒoc
(
evít_ba£
 *
ba£
, *
¨g
)

504 
evp‹t_d©a
 *
evpd
 = 
¨g
;

506 
	`evsig«l_dóŒoc
(
ba£
);

508 
	`˛o£
(
evpd
->
ed_p‹t
);

510 i‡(
evpd
->
ed_fds
)

511 
	`‰ì
(
evpd
->
ed_fds
);

512 
	`‰ì
(
evpd
);

513 
	}
}

	@evrpc-internal.h

27 #i‚de‡
_EVRPC_INTERNAL_H_


28 
	#_EVRPC_INTERNAL_H_


	)

30 
	~"hâp-öã∫Æ.h
"

32 
	gevΩc
;

34 
	#EVRPC_URI_PREFIX
 "/.Ωc."

	)

36 
	sevΩc_hook
 {

37 
TAILQ_ENTRY
(
evΩc_hook
Ë(
	m√xt
);

40 (*
	m¥o˚ss
)(
	mevhâp_ªque°
 *, 
	mevbuf„r
 *, *);

41 *
	m¥o˚ss_¨g
;

44 
TAILQ_HEAD
(
evΩc_hook_li°
, 
evΩc_hook
);

51 
	s_evΩc_hooks
 {

53 
evΩc_hook_li°
 
	mö_hooks
;

54 
evΩc_hook_li°
 
	mout_hooks
;

57 
	#öput_hooks
 
comm⁄
.
ö_hooks


	)

58 
	#ouçut_hooks
 
comm⁄
.
out_hooks


	)

60 
	sevΩc_ba£
 {

61 
_evΩc_hooks
 
	mcomm⁄
;

64 
evhâp
* 
	mhâp_£rvî
;

67 
TAILQ_HEAD
(
evΩc_li°
, 
evΩc
Ë
	mªgi°îed_Ωcs
;

70 
	gevΩc_ªq_gíîic
;

71 
evΩc_ªq°©e_‰ì
(
evΩc_ªq_gíîic
* 
Ωc_°©e
);

74 
	sevΩc_poﬁ
 {

75 
_evΩc_hooks
 
	mcomm⁄
;

77 
evít_ba£
 *
	mba£
;

79 
evc⁄q
 
	mc⁄√˘i⁄s
;

81 
	mtimeout
;

83 
TAILQ_HEAD
(
evΩc_ªque°q
, 
evΩc_ªque°_wøµî
Ë
	mªque°s
;

	@evrpc.c

27 #ifde‡
HAVE_CONFIG_H


28 
	~"c⁄fig.h
"

31 #ifde‡
WIN32


32 
	#WIN32_LEAN_AND_MEAN


	)

33 
	~<wösock2.h
>

34 
	~<wödows.h
>

35 #unde‡
WIN32_LEAN_AND_MEAN


38 
	~<sys/ty≥s.h
>

39 #i‚de‡
WIN32


40 
	~<sys/sockë.h
>

42 #ifde‡
HAVE_SYS_TIME_H


43 
	~<sys/time.h
>

45 
	~<sys/queue.h
>

46 
	~<°dio.h
>

47 
	~<°dlib.h
>

48 #i‚de‡
WIN32


49 
	~<uni°d.h
>

51 
	~<î∫o.h
>

52 
	~<sig«l.h
>

53 
	~<°rög.h
>

54 
	~<as£π.h
>

56 
	~"evít.h
"

57 
	~"evΩc.h
"

58 
	~"evΩc-öã∫Æ.h
"

59 
	~"evhâp.h
"

60 
	~"evutû.h
"

61 
	~"log.h
"

63 
evΩc_ba£
 *

64 
	$evΩc_öô
(
evhâp
 *
hâp_£rvî
)

66 
evΩc_ba£
* 
ba£
 = 
	`ˇŒoc
(1, (evrpc_base));

67 i‡(
ba£
 =
NULL
)

68  (
NULL
);

71 
	`evèg_öô
();

73 
	`TAILQ_INIT
(&
ba£
->
ªgi°îed_Ωcs
);

74 
	`TAILQ_INIT
(&
ba£
->
öput_hooks
);

75 
	`TAILQ_INIT
(&
ba£
->
ouçut_hooks
);

76 
ba£
->
hâp_£rvî
 = http_server;

78  (
ba£
);

79 
	}
}

82 
	$evΩc_‰ì
(
evΩc_ba£
 *
ba£
)

84 
evΩc
 *
Ωc
;

85 
evΩc_hook
 *
hook
;

87 (
Ωc
 = 
	`TAILQ_FIRST
(&
ba£
->
ªgi°îed_Ωcs
)Ë!
NULL
) {

88 
	`as£π
(
	`evΩc_uƒegi°î_Ωc
(
ba£
, 
Ωc
->
uri
));

90 (
hook
 = 
	`TAILQ_FIRST
(&
ba£
->
öput_hooks
)Ë!
NULL
) {

91 
	`as£π
(
	`evΩc_ªmove_hook
(
ba£
, 
EVRPC_INPUT
, 
hook
));

93 (
hook
 = 
	`TAILQ_FIRST
(&
ba£
->
ouçut_hooks
)Ë!
NULL
) {

94 
	`as£π
(
	`evΩc_ªmove_hook
(
ba£
, 
EVRPC_OUTPUT
, 
hook
));

96 
	`‰ì
(
ba£
);

97 
	}
}

100 
evΩc_add_hook
(*
vba£
,

101 
EVRPC_HOOK_TYPE
 
hook_ty≥
,

102 (*
cb
)(
evhâp_ªque°
 *, 
evbuf„r
 *, *),

103 *
cb_¨g
)

105 
_evΩc_hooks
 *
ba£
 = 
vba£
;

106 
evΩc_hook_li°
 *
hód
 = 
NULL
;

107 
evΩc_hook
 *
hook
 = 
NULL
;

108 
hook_ty≥
) {

109 
EVRPC_INPUT
:

110 
hód
 = &
ba£
->
ö_hooks
;

112 
EVRPC_OUTPUT
:

113 
hód
 = &
ba£
->
out_hooks
;

116 
	`as£π
(
hook_ty≥
 =
EVRPC_INPUT
 || hook_ty≥ =
EVRPC_OUTPUT
);

119 
hook
 = 
	`ˇŒoc
(1, (
evΩc_hook
));

120 
	`as£π
(
hook
 !
NULL
);

122 
hook
->
¥o˚ss
 = 
cb
;

123 
hook
->
¥o˚ss_¨g
 = 
cb_¨g
;

124 
	`TAILQ_INSERT_TAIL
(
hód
, 
hook
, 
√xt
);

126  (
hook
);

127 
	}
}

130 
	$evΩc_ªmove_hook_öã∫Æ
(
evΩc_hook_li°
 *
hód
, *
h™dÀ
)

132 
evΩc_hook
 *
hook
 = 
NULL
;

133 
	`TAILQ_FOREACH
(
hook
, 
hód
, 
√xt
) {

134 i‡(
hook
 =
h™dÀ
) {

135 
	`TAILQ_REMOVE
(
hód
, 
hook
, 
√xt
);

136 
	`‰ì
(
hook
);

142 
	}
}

149 
	$evΩc_ªmove_hook
(*
vba£
, 
EVRPC_HOOK_TYPE
 
hook_ty≥
, *
h™dÀ
)

151 
_evΩc_hooks
 *
ba£
 = 
vba£
;

152 
evΩc_hook_li°
 *
hód
 = 
NULL
;

153 
hook_ty≥
) {

154 
EVRPC_INPUT
:

155 
hód
 = &
ba£
->
ö_hooks
;

157 
EVRPC_OUTPUT
:

158 
hód
 = &
ba£
->
out_hooks
;

161 
	`as£π
(
hook_ty≥
 =
EVRPC_INPUT
 || hook_ty≥ =
EVRPC_OUTPUT
);

164  (
	`evΩc_ªmove_hook_öã∫Æ
(
hód
, 
h™dÀ
));

165 
	}
}

168 
	$evΩc_¥o˚ss_hooks
(
evΩc_hook_li°
 *
hód
,

169 
evhâp_ªque°
 *
ªq
, 
evbuf„r
 *
evbuf
)

171 
evΩc_hook
 *
hook
;

172 
	`TAILQ_FOREACH
(
hook
, 
hód
, 
√xt
) {

173 i‡(
hook
->
	`¥o˚ss
(
ªq
, 
evbuf
, hook->
¥o˚ss_¨g
) == -1)

178 
	}
}

180 
evΩc_poﬁ_scheduÀ
(
evΩc_poﬁ
 *
poﬁ
);

181 
evΩc_ªque°_cb
(
evhâp_ªque°
 *, *);

182 
evΩc_ªque°_d⁄e
(
evΩc_ªq_gíîic
*);

191 
	$evΩc_c⁄°ru˘_uri
(c⁄° *
uri
)

193 *
c⁄°ru˘ed_uri
;

194 
c⁄°ru˘ed_uri_Àn
;

196 
c⁄°ru˘ed_uri_Àn
 = 
	`°æí
(
EVRPC_URI_PREFIX
Ë+ såÀn(
uri
) + 1;

197 i‡((
c⁄°ru˘ed_uri
 = 
	`mÆloc
(
c⁄°ru˘ed_uri_Àn
)Ë=
NULL
)

198 
	`evít_îr
(1, "%s: failedÅoÑegisterÑpcát %s",

199 
__func__
, 
uri
);

200 
	`mem˝y
(
c⁄°ru˘ed_uri
, 
EVRPC_URI_PREFIX
, 
	`°æí
(EVRPC_URI_PREFIX));

201 
	`mem˝y
(
c⁄°ru˘ed_uri
 + 
	`°æí
(
EVRPC_URI_PREFIX
), 
uri
, strlen(uri));

202 
c⁄°ru˘ed_uri
[
c⁄°ru˘ed_uri_Àn
 - 1] = '\0';

204  (
c⁄°ru˘ed_uri
);

205 
	}
}

208 
evΩc_ªgi°î_Ωc
(
evΩc_ba£
 *
ba£
, 
evΩc
 *
Ωc
,

209 (*
cb
)(
evΩc_ªq_gíîic
 *, *), *
cb_¨g
)

211 *
c⁄°ru˘ed_uri
 = 
	`evΩc_c⁄°ru˘_uri
(
Ωc
->
uri
);

213 
Ωc
->
ba£
 = base;

214 
Ωc
->
cb
 = cb;

215 
Ωc
->
cb_¨g
 = cb_arg;

217 
	`TAILQ_INSERT_TAIL
(&
ba£
->
ªgi°îed_Ωcs
, 
Ωc
, 
√xt
);

219 
	`evhâp_£t_cb
(
ba£
->
hâp_£rvî
,

220 
c⁄°ru˘ed_uri
,

221 
evΩc_ªque°_cb
,

222 
Ωc
);

224 
	`‰ì
(
c⁄°ru˘ed_uri
);

227 
	}
}

230 
	$evΩc_uƒegi°î_Ωc
(
evΩc_ba£
 *
ba£
, c⁄° *
«me
)

232 *
ªgi°îed_uri
 = 
NULL
;

233 
evΩc
 *
Ωc
;

236 
	`TAILQ_FOREACH
(
Ωc
, &
ba£
->
ªgi°îed_Ωcs
, 
√xt
) {

237 i‡(
	`°rcmp
(
Ωc
->
uri
, 
«me
) == 0)

240 i‡(
Ωc
 =
NULL
) {

244 
	`TAILQ_REMOVE
(&
ba£
->
ªgi°îed_Ωcs
, 
Ωc
, 
√xt
);

246 
	`‰ì
((*)
Ωc
->
uri
);

247 
	`‰ì
(
Ωc
);

249 
ªgi°îed_uri
 = 
	`evΩc_c⁄°ru˘_uri
(
«me
);

252 
	`as£π
(
	`evhâp_dñ_cb
(
ba£
->
hâp_£rvî
, 
ªgi°îed_uri
) == 0);

254 
	`‰ì
(
ªgi°îed_uri
);

256 
	}
}

259 
	$evΩc_ªque°_cb
(
evhâp_ªque°
 *
ªq
, *
¨g
)

261 
evΩc
 *
Ωc
 = 
¨g
;

262 
evΩc_ªq_gíîic
 *
Ωc_°©e
 = 
NULL
;

265 i‡(
ªq
->
ty≥
 !
EVHTTP_REQ_POST
 ||

266 
	`EVBUFFER_LENGTH
(
ªq
->
öput_buf„r
) <= 0)

267 
îr‹
;

274 i‡(
	`evΩc_¥o˚ss_hooks
(&
Ωc
->
ba£
->
öput_hooks
,

275 
ªq
,Ñeq->
öput_buf„r
) == -1)

276 
îr‹
;

278 
Ωc_°©e
 = 
	`ˇŒoc
(1, (
evΩc_ªq_gíîic
));

279 i‡(
Ωc_°©e
 =
NULL
)

280 
îr‹
;

283 
Ωc_°©e
->
ªque°
 = 
Ωc
->
	`ªque°_√w
();

284 i‡(
Ωc_°©e
->
ªque°
 =
NULL
)

285 
îr‹
;

287 
Ωc_°©e
->
Ωc
 =Ñpc;

289 i‡(
Ωc
->
	`ªque°_unm¨shÆ
(

290 
Ωc_°©e
->
ªque°
, 
ªq
->
öput_buf„r
) == -1) {

292 
îr‹
;

297 
Ωc_°©e
->
ª∂y
 = 
Ωc
->
	`ª∂y_√w
();

298 i‡(
Ωc_°©e
->
ª∂y
 =
NULL
)

299 
îr‹
;

301 
Ωc_°©e
->
hâp_ªq
 = 
ªq
;

302 
Ωc_°©e
->
d⁄e
 = 
evΩc_ªque°_d⁄e
;

305 
Ωc
->
	`cb
(
Ωc_°©e
,Ñpc->
cb_¨g
);

309 
îr‹
:

310 
	`evΩc_ªq°©e_‰ì
(
Ωc_°©e
);

311 
	`evhâp_£nd_îr‹
(
ªq
, 
HTTP_SERVUNAVAIL
, "Service Error");

313 
	}
}

316 
	$evΩc_ªq°©e_‰ì
(
evΩc_ªq_gíîic
* 
Ωc_°©e
)

319 i‡(
Ωc_°©e
 !
NULL
) {

320 
evΩc
 *
Ωc
 = 
Ωc_°©e
->rpc;

322 i‡(
Ωc_°©e
->
ªque°
 !
NULL
)

323 
Ωc
->
	`ªque°_‰ì
(
Ωc_°©e
->
ªque°
);

324 i‡(
Ωc_°©e
->
ª∂y
 !
NULL
)

325 
Ωc
->
	`ª∂y_‰ì
(
Ωc_°©e
->
ª∂y
);

326 
	`‰ì
(
Ωc_°©e
);

328 
	}
}

331 
	$evΩc_ªque°_d⁄e
(
evΩc_ªq_gíîic
* 
Ωc_°©e
)

333 
evhâp_ªque°
 *
ªq
 = 
Ωc_°©e
->
hâp_ªq
;

334 
evΩc
 *
Ωc
 = 
Ωc_°©e
->rpc;

335 
evbuf„r
* 
d©a
 = 
NULL
;

337 i‡(
Ωc
->
	`ª∂y_com∂ëe
(
Ωc_°©e
->
ª∂y
) == -1) {

339 
îr‹
;

342 i‡((
d©a
 = 
	`evbuf„r_√w
()Ë=
NULL
) {

344 
îr‹
;

348 
Ωc
->
	`ª∂y_m¨shÆ
(
d©a
, 
Ωc_°©e
->
ª∂y
);

351 i‡(
	`evΩc_¥o˚ss_hooks
(&
Ωc
->
ba£
->
ouçut_hooks
,

352 
ªq
, 
d©a
) == -1)

353 
îr‹
;

356 i‡(
	`evhâp_föd_hódî
(
ªq
->
ouçut_hódîs
, "C⁄ã¡-Ty≥"Ë=
NULL
) {

357 
	`evhâp_add_hódî
(
ªq
->
ouçut_hódîs
,

361 
	`evhâp_£nd_ª∂y
(
ªq
, 
HTTP_OK
, "OK", 
d©a
);

363 
	`evbuf„r_‰ì
(
d©a
);

365 
	`evΩc_ªq°©e_‰ì
(
Ωc_°©e
);

369 
îr‹
:

370 i‡(
d©a
 !
NULL
)

371 
	`evbuf„r_‰ì
(
d©a
);

372 
	`evΩc_ªq°©e_‰ì
(
Ωc_°©e
);

373 
	`evhâp_£nd_îr‹
(
ªq
, 
HTTP_SERVUNAVAIL
, "Service Error");

375 
	}
}

379 
evΩc_scheduÀ_ªque°
(
evhâp_c⁄√˘i⁄
 *
c⁄√˘i⁄
,

380 
evΩc_ªque°_wøµî
 *
˘x
);

382 
evΩc_poﬁ
 *

383 
	$evΩc_poﬁ_√w
(
evít_ba£
 *
ba£
)

385 
evΩc_poﬁ
 *
poﬁ
 = 
	`ˇŒoc
(1, (evrpc_pool));

386 i‡(
poﬁ
 =
NULL
)

387  (
NULL
);

389 
	`TAILQ_INIT
(&
poﬁ
->
c⁄√˘i⁄s
);

390 
	`TAILQ_INIT
(&
poﬁ
->
ªque°s
);

392 
	`TAILQ_INIT
(&
poﬁ
->
öput_hooks
);

393 
	`TAILQ_INIT
(&
poﬁ
->
ouçut_hooks
);

395 
poﬁ
->
ba£
 = base;

396 
poﬁ
->
timeout
 = -1;

398  (
poﬁ
);

399 
	}
}

402 
	$evΩc_ªque°_wøµî_‰ì
(
evΩc_ªque°_wøµî
 *
ªque°
)

404 
	`‰ì
(
ªque°
->
«me
);

405 
	`‰ì
(
ªque°
);

406 
	}
}

409 
	$evΩc_poﬁ_‰ì
(
evΩc_poﬁ
 *
poﬁ
)

411 
evhâp_c⁄√˘i⁄
 *
c⁄√˘i⁄
;

412 
evΩc_ªque°_wøµî
 *
ªque°
;

413 
evΩc_hook
 *
hook
;

415 (
ªque°
 = 
	`TAILQ_FIRST
(&
poﬁ
->
ªque°s
)Ë!
NULL
) {

416 
	`TAILQ_REMOVE
(&
poﬁ
->
ªque°s
, 
ªque°
, 
√xt
);

418 
	`evΩc_ªque°_wøµî_‰ì
(
ªque°
);

421 (
c⁄√˘i⁄
 = 
	`TAILQ_FIRST
(&
poﬁ
->
c⁄√˘i⁄s
)Ë!
NULL
) {

422 
	`TAILQ_REMOVE
(&
poﬁ
->
c⁄√˘i⁄s
, 
c⁄√˘i⁄
, 
√xt
);

423 
	`evhâp_c⁄√˘i⁄_‰ì
(
c⁄√˘i⁄
);

426 (
hook
 = 
	`TAILQ_FIRST
(&
poﬁ
->
öput_hooks
)Ë!
NULL
) {

427 
	`as£π
(
	`evΩc_ªmove_hook
(
poﬁ
, 
EVRPC_INPUT
, 
hook
));

430 (
hook
 = 
	`TAILQ_FIRST
(&
poﬁ
->
ouçut_hooks
)Ë!
NULL
) {

431 
	`as£π
(
	`evΩc_ªmove_hook
(
poﬁ
, 
EVRPC_OUTPUT
, 
hook
));

434 
	`‰ì
(
poﬁ
);

435 
	}
}

443 
	$evΩc_poﬁ_add_c⁄√˘i⁄
(
evΩc_poﬁ
 *
poﬁ
,

444 
evhâp_c⁄√˘i⁄
 *
c⁄√˘i⁄
) {

445 
	`as£π
(
c⁄√˘i⁄
->
hâp_£rvî
 =
NULL
);

446 
	`TAILQ_INSERT_TAIL
(&
poﬁ
->
c⁄√˘i⁄s
, 
c⁄√˘i⁄
, 
√xt
);

451 i‡(
poﬁ
->
ba£
 !
NULL
)

452 
	`evhâp_c⁄√˘i⁄_£t_ba£
(
c⁄√˘i⁄
, 
poﬁ
->
ba£
);

458 i‡(
c⁄√˘i⁄
->
timeout
 == -1)

459 
c⁄√˘i⁄
->
timeout
 = 
poﬁ
->timeout;

466 i‡(
	`TAILQ_FIRST
(&
poﬁ
->
ªque°s
Ë!
NULL
) {

467 
evΩc_ªque°_wøµî
 *
ªque°
 =

468 
	`TAILQ_FIRST
(&
poﬁ
->
ªque°s
);

469 
	`TAILQ_REMOVE
(&
poﬁ
->
ªque°s
, 
ªque°
, 
√xt
);

470 
	`evΩc_scheduÀ_ªque°
(
c⁄√˘i⁄
, 
ªque°
);

472 
	}
}

475 
	$evΩc_poﬁ_£t_timeout
(
evΩc_poﬁ
 *
poﬁ
, 
timeout_ö_£cs
)

477 
evhâp_c⁄√˘i⁄
 *
evc⁄
;

478 
	`TAILQ_FOREACH
(
evc⁄
, &
poﬁ
->
c⁄√˘i⁄s
, 
√xt
) {

479 
evc⁄
->
timeout
 = 
timeout_ö_£cs
;

481 
poﬁ
->
timeout
 = 
timeout_ö_£cs
;

482 
	}
}

485 
evΩc_ª∂y_d⁄e
(
evhâp_ªque°
 *, *);

486 
evΩc_ªque°_timeout
(, , *);

492 
evhâp_c⁄√˘i⁄
 *

493 
	$evΩc_poﬁ_föd_c⁄√˘i⁄
(
evΩc_poﬁ
 *
poﬁ
)

495 
evhâp_c⁄√˘i⁄
 *
c⁄√˘i⁄
;

496 
	`TAILQ_FOREACH
(
c⁄√˘i⁄
, &
poﬁ
->
c⁄√˘i⁄s
, 
√xt
) {

497 i‡(
	`TAILQ_FIRST
(&
c⁄√˘i⁄
->
ªque°s
Ë=
NULL
)

498  (
c⁄√˘i⁄
);

501  (
NULL
);

502 
	}
}

508 
	$evΩc_scheduÀ_ªque°
(
evhâp_c⁄√˘i⁄
 *
c⁄√˘i⁄
,

509 
evΩc_ªque°_wøµî
 *
˘x
)

511 
evhâp_ªque°
 *
ªq
 = 
NULL
;

512 
evΩc_poﬁ
 *
poﬁ
 = 
˘x
->pool;

513 
evΩc_°©us
 
°©us
;

514 *
uri
 = 
NULL
;

515 
ªs
 = 0;

517 i‡((
ªq
 = 
	`evhâp_ªque°_√w
(
evΩc_ª∂y_d⁄e
, 
˘x
)Ë=
NULL
)

518 
îr‹
;

521 
˘x
->
	`ªque°_m¨shÆ
(
ªq
->
ouçut_buf„r
, ctx->
ªque°
);

523 
uri
 = 
	`evΩc_c⁄°ru˘_uri
(
˘x
->
«me
);

524 i‡(
uri
 =
NULL
)

525 
îr‹
;

528 
˘x
->
evc⁄
 = 
c⁄√˘i⁄
;

531 i‡(
	`evΩc_¥o˚ss_hooks
(&
poﬁ
->
ouçut_hooks
,

532 
ªq
,Ñeq->
ouçut_buf„r
) == -1)

533 
îr‹
;

535 i‡(
poﬁ
->
timeout
 > 0) {

539 
timevÆ
 
tv
;

540 
	`evutû_timî˛ór
(&
tv
);

541 
tv
.
tv_£c
 = 
poﬁ
->
timeout
;

542 
	`evtimî_add
(&
˘x
->
ev_timeout
, &
tv
);

546 
ªs
 = 
	`evhâp_make_ªque°
(
c⁄√˘i⁄
, 
ªq
, 
EVHTTP_REQ_POST
, 
uri
);

547 
	`‰ì
(
uri
);

549 i‡(
ªs
 == -1)

550 
îr‹
;

554 
îr‹
:

555 
	`mem£t
(&
°©us
, 0, (status));

556 
°©us
.
îr‹
 = 
EVRPC_STATUS_ERR_UNSTARTED
;

557 (*
˘x
->
cb
)(&
°©us
, ctx->
ªque°
, ctx->
ª∂y
, ctx->
cb_¨g
);

558 
	`evΩc_ªque°_wøµî_‰ì
(
˘x
);

560 
	}
}

563 
	$evΩc_make_ªque°
(
evΩc_ªque°_wøµî
 *
˘x
)

565 
evΩc_poﬁ
 *
poﬁ
 = 
˘x
->pool;

568 
	`evtimî_£t
(&
˘x
->
ev_timeout
, 
evΩc_ªque°_timeout
, ctx);

569 i‡(
poﬁ
->
ba£
 !
NULL
)

570 
	`evít_ba£_£t
(
poﬁ
->
ba£
, &
˘x
->
ev_timeout
);

573 
	`as£π
(
	`TAILQ_FIRST
(&
poﬁ
->
c⁄√˘i⁄s
Ë!
NULL
);

579 
	`TAILQ_INSERT_TAIL
(&
poﬁ
->
ªque°s
, 
˘x
, 
√xt
);

581 
	`evΩc_poﬁ_scheduÀ
(
poﬁ
);

584 
	}
}

587 
	$evΩc_ª∂y_d⁄e
(
evhâp_ªque°
 *
ªq
, *
¨g
)

589 
evΩc_ªque°_wøµî
 *
˘x
 = 
¨g
;

590 
evΩc_poﬁ
 *
poﬁ
 = 
˘x
->pool;

591 
evΩc_°©us
 
°©us
;

592 
ªs
 = -1;

595 
	`evít_dñ
(&
˘x
->
ev_timeout
);

597 
	`mem£t
(&
°©us
, 0, (status));

598 
°©us
.
hâp_ªq
 = 
ªq
;

601 i‡(
ªq
 !
NULL
) {

603 i‡(
	`evΩc_¥o˚ss_hooks
(&
poﬁ
->
öput_hooks
,

604 
ªq
,Ñeq->
öput_buf„r
) == -1) {

605 
°©us
.
îr‹
 = 
EVRPC_STATUS_ERR_HOOKABORTED
;

606 
ªs
 = -1;

608 
ªs
 = 
˘x
->
	`ª∂y_unm¨shÆ
(˘x->
ª∂y
,

609 
ªq
->
öput_buf„r
);

610 i‡(
ªs
 == -1) {

611 
°©us
.
îr‹
 = 
EVRPC_STATUS_ERR_BADPAYLOAD
;

615 
°©us
.
îr‹
 = 
EVRPC_STATUS_ERR_TIMEOUT
;

618 i‡(
ªs
 == -1) {

620 
˘x
->
	`ª∂y_˛ór
(˘x->
ª∂y
);

623 (*
˘x
->
cb
)(&
°©us
, ctx->
ªque°
, ctx->
ª∂y
, ctx->
cb_¨g
);

625 
	`evΩc_ªque°_wøµî_‰ì
(
˘x
);

630 
	`evΩc_poﬁ_scheduÀ
(
poﬁ
);

631 
	}
}

634 
	$evΩc_poﬁ_scheduÀ
(
evΩc_poﬁ
 *
poﬁ
)

636 
evΩc_ªque°_wøµî
 *
˘x
 = 
	`TAILQ_FIRST
(&
poﬁ
->
ªque°s
);

637 
evhâp_c⁄√˘i⁄
 *
evc⁄
;

640 i‡(
˘x
 =
NULL
)

643 i‡((
evc⁄
 = 
	`evΩc_poﬁ_föd_c⁄√˘i⁄
(
poﬁ
)Ë!
NULL
) {

644 
	`TAILQ_REMOVE
(&
poﬁ
->
ªque°s
, 
˘x
, 
√xt
);

645 
	`evΩc_scheduÀ_ªque°
(
evc⁄
, 
˘x
);

647 
	}
}

650 
	$evΩc_ªque°_timeout
(
fd
, 
wh©
, *
¨g
)

652 
evΩc_ªque°_wøµî
 *
˘x
 = 
¨g
;

653 
evhâp_c⁄√˘i⁄
 *
evc⁄
 = 
˘x
->evcon;

654 
	`as£π
(
evc⁄
 !
NULL
);

656 
	`evhâp_c⁄√˘i⁄_Áû
(
evc⁄
, 
EVCON_HTTP_TIMEOUT
);

657 
	}
}

	@evrpc.h

27 #i‚de‡
_EVRPC_H_


28 
	#_EVRPC_H_


	)

30 #ifde‡
__˝lu•lus


69 
evbuf„r
;

70 
evít_ba£
;

71 
evΩc_ªq_gíîic
;

74 
	sevΩc
 {

75 
TAILQ_ENTRY
(
evΩc
Ë
√xt
;

78 c⁄° * 
uri
;

81 *(*
ªque°_√w
)();

84 (*
ªque°_‰ì
)(*);

87 (*
ªque°_unm¨shÆ
)(*, 
evbuf„r
 *);

90 *(*
ª∂y_√w
)();

93 (*
ª∂y_‰ì
)(*);

96 (*
ª∂y_com∂ëe
)(*);

99 (*
ª∂y_m¨shÆ
)(
evbuf„r
*, *);

102 (*
cb
)(
evΩc_ªq_gíîic
 *, *);

103 *
cb_¨g
;

106 
evΩc_ba£
 *
ba£
;

113 
	#EVRPC_STRUCT
(
Ω˙ame
Ë
evΩc_ªq__
##
	)
Ω˙ame

115 
evhâp_ªque°
;

116 
evΩc_°©us
;

119 
	sevΩc_ªq_gíîic
 {

121 *
ªque°
;

124 *
ª∂y
;

130 
evΩc
 *
Ωc
;

135 
evhâp_ªque°
* 
hâp_ªq
;

140 (*
d⁄e
)(
evΩc_ªq_gíîic
* 
Ωc
);

154 
	#EVRPC_HEADER
(
Ω˙ame
, 
ªq°ru˘
, 
Ωly°ru˘
) \

155 
	`EVRPC_STRUCT
(
Ω˙ame
) { \

156 
ªq°ru˘
* 
ªque°
; \

157 
Ωly°ru˘
* 
ª∂y
; \

158 
evΩc
* 
Ωc
; \

159 
evhâp_ªque°
* 
hâp_ªq
; \

160 (*
d⁄e
)(
evΩc_°©us
 *, \

161 
evΩc
* 
Ωc
, *
ªque°
, *
ª∂y
); \

163 
evΩc_£nd_ªque°_
##
	`Ω˙ame
(
evΩc_poﬁ
 *, \

164 
ªq°ru˘
 *, 
Ωly°ru˘
 *, \

165 (*)(
evΩc_°©us
 *, \

166 
ªq°ru˘
 *, 
Ωly°ru˘
 *, *
cb¨g
), \

167 *);

	)

179 
	#EVRPC_GENERATE
(
Ω˙ame
, 
ªq°ru˘
, 
Ωly°ru˘
) \

180 
evΩc_£nd_ªque°_
##
	`Ω˙ame
(
evΩc_poﬁ
 *
poﬁ
, \

181 
ªq°ru˘
 *
ªque°
, 
Ωly°ru˘
 *
ª∂y
, \

182 (*
cb
)(
evΩc_°©us
 *, \

183 
ªq°ru˘
 *, 
Ωly°ru˘
 *, *
cb¨g
), \

184 *
cb¨g
) { \

185 
evΩc_°©us
 
°©us
; \

186 
evΩc_ªque°_wøµî
 *
˘x
; \

187 
˘x
 = (
evΩc_ªque°_wøµî
 *) \

188 
	`mÆloc
((
evΩc_ªque°_wøµî
)); \

189 i‡(
˘x
 =
NULL
) \

190 
îr‹
; \

191 
˘x
->
poﬁ
 =Öool; \

192 
˘x
->
evc⁄
 = 
NULL
; \

193 
˘x
->
«me
 = 
	`°rdup
(#rpcname); \

194 i‡(
˘x
->
«me
 =
NULL
) { \

195 
	`‰ì
(
˘x
); \

196 
îr‹
; \

198 
˘x
->
cb
 = ((*)(
evΩc_°©us
 *, \

199 *, *, *))
cb
; \

200 
˘x
->
cb_¨g
 = 
cb¨g
; \

201 
˘x
->
ªque°
 = (*)request; \

202 
˘x
->
ª∂y
 = (*)reply; \

203 
˘x
->
ªque°_m¨shÆ
 = ((*)(
evbuf„r
 *, *))
ªq°ru˘
##
_m¨shÆ
; \

204 
˘x
->
ª∂y_˛ór
 = ((*)(*))
Ωly°ru˘
##
_˛ór
; \

205 
˘x
->
ª∂y_unm¨shÆ
 = ((*)(*, 
evbuf„r
 *))
Ωly°ru˘
##
_unm¨shÆ
; \

206  (
	`evΩc_make_ªque°
(
˘x
)); \

207 
îr‹
: \

208 
	`mem£t
(&
°©us
, 0, (status)); \

209 
°©us
.
îr‹
 = 
EVRPC_STATUS_ERR_UNSTARTED
; \

210 (*(
cb
))(&
°©us
, 
ªque°
, 
ª∂y
, 
cb¨g
); \

212 }

	)

223 
	#EVRPC_REQUEST_HTTP
(
Ωc_ªq
Ë‘pc_ªq)->
hâp_ªq


	)

233 
	#EVRPC_REQUEST_DONE
(
Ωc_ªq
) do { \

234 
evΩc_ªq_gíîic
 *
_ªq
 = (evΩc_ªq_gíîi¯*)(
Ωc_ªq
); \

235 
_ªq
->
	`d⁄e
(_req); \

236 } 0)

	)

240 
	#EVRPC_REGISTER_OBJECT
(
Ωc
, 
«me
, 
ªque°
, 
ª∂y
) \

242 (
Ωc
)->
uri
 = 
	`°rdup
(#name); \

243 i‡((
Ωc
)->
uri
 =
NULL
) { \

244 
	`Ârötf
(
°dîr
, "failedÅoÑegister object\n"); \

245 
	`exô
(1); \

247 (
Ωc
)->
ªque°_√w
 = (*(*)())
ªque°
##
_√w
; \

248 (
Ωc
)->
ªque°_‰ì
 = ((*)(*))
ªque°
##
_‰ì
; \

249 (
Ωc
)->
ªque°_unm¨shÆ
 = ((*)(*, 
evbuf„r
 *))
ªque°
##
_unm¨shÆ
; \

250 (
Ωc
)->
ª∂y_√w
 = (*(*)())
ª∂y
##
_√w
; \

251 (
Ωc
)->
ª∂y_‰ì
 = ((*)(*))
ª∂y
##
_‰ì
; \

252 (
Ωc
)->
ª∂y_com∂ëe
 = ((*)(*))
ª∂y
##
_com∂ëe
; \

253 (
Ωc
)->
ª∂y_m¨shÆ
 = ((*)(
evbuf„r
*, *))
ª∂y
##
_m¨shÆ
; \

254 } 0)

	)

256 
evΩc_ba£
;

257 
evhâp
;

267 
evΩc_ba£
 *
evΩc_öô
(
evhâp
 *
£rvî
);

277 
evΩc_‰ì
(
evΩc_ba£
 *
ba£
);

295 
	#EVRPC_REGISTER
(
ba£
, 
«me
, 
ªque°
, 
ª∂y
, 
ˇŒback
, 
cb¨g
) \

297 
evΩc
* 
Ωc
 = (evΩ¯*)
	`ˇŒoc
(1, (evrpc)); \

298 
	`EVRPC_REGISTER_OBJECT
(
Ωc
, 
«me
, 
ªque°
, 
ª∂y
); \

299 
	`evΩc_ªgi°î_Ωc
(
ba£
, 
Ωc
, \

300 ((*)(
evΩc_ªq_gíîic
*, *))
ˇŒback
, 
cb¨g
); \

301 } 0)

	)

303 
evΩc_ªgi°î_Ωc
(
evΩc_ba£
 *, 
evΩc
 *,

304 (*)(
evΩc_ªq_gíîic
*, *), *);

314 
	#EVRPC_UNREGISTER
(
ba£
, 
«me
Ë
	`evΩc_uƒegi°î_Ωc
(ba£, #«me)

	)

316 
evΩc_uƒegi°î_Ωc
(
evΩc_ba£
 *
ba£
, c⁄° *
«me
);

322 
evΩc_poﬁ
;

323 
evhâp_c⁄√˘i⁄
;

328 
	sevΩc_°©us
 {

329 
	#EVRPC_STATUS_ERR_NONE
 0

	)

330 
	#EVRPC_STATUS_ERR_TIMEOUT
 1

	)

331 
	#EVRPC_STATUS_ERR_BADPAYLOAD
 2

	)

332 
	#EVRPC_STATUS_ERR_UNSTARTED
 3

	)

333 
	#EVRPC_STATUS_ERR_HOOKABORTED
 4

	)

334 
îr‹
;

337 
evhâp_ªque°
 *
hâp_ªq
;

340 
	sevΩc_ªque°_wøµî
 {

341 
TAILQ_ENTRY
(
evΩc_ªque°_wøµî
Ë
√xt
;

344 
evΩc_poﬁ
 *
poﬁ
;

347 
evhâp_c⁄√˘i⁄
 *
evc⁄
;

350 
evít
 
ev_timeout
;

353 *
«me
;

356 (*
cb
)(
evΩc_°©us
*, *
ªque°
, *
ª∂y
, *
¨g
);

357 *
cb_¨g
;

359 *
ªque°
;

360 *
ª∂y
;

363 (*
ªque°_m¨shÆ
)(
evbuf„r
 *, *);

366 (*
ª∂y_˛ór
)(*);

369 (*
ª∂y_unm¨shÆ
)(*, 
evbuf„r
*);

387 
	#EVRPC_MAKE_REQUEST
(
«me
, 
poﬁ
, 
ªque°
, 
ª∂y
, 
cb
, 
cb¨g
) \

388 
evΩc_£nd_ªque°_
##
	`«me
(
poﬁ
, 
ªque°
, 
ª∂y
, 
cb
, 
cb¨g
)

	)

390 
evΩc_make_ªque°
(
evΩc_ªque°_wøµî
 *);

402 
evΩc_poﬁ
 *
evΩc_poﬁ_√w
(
evít_ba£
 *
ba£
);

408 
evΩc_poﬁ_‰ì
(
evΩc_poﬁ
 *
poﬁ
);

413 
evΩc_poﬁ_add_c⁄√˘i⁄
(
evΩc_poﬁ
 *,

414 
evhâp_c⁄√˘i⁄
 *);

431 
evΩc_poﬁ_£t_timeout
(
evΩc_poﬁ
 *
poﬁ
, 
timeout_ö_£cs
);

438 
	eEVRPC_HOOK_TYPE
 {

439 
EVRPC_INPUT
,

440 
EVRPC_OUTPUT


443 #i‚de‡
WIN32


446 
	#INPUT
 
EVRPC_INPUT


	)

449 
	#OUTPUT
 
EVRPC_OUTPUT


	)

465 *
evΩc_add_hook
(*
vba£
,

466 
EVRPC_HOOK_TYPE
 
hook_ty≥
,

467 (*
cb
)(
evhâp_ªque°
 *, 
evbuf„r
 *, *),

468 *
cb_¨g
);

478 
evΩc_ªmove_hook
(*
vba£
,

479 
EVRPC_HOOK_TYPE
 
hook_ty≥
,

480 *
h™dÀ
);

482 #ifde‡
__˝lu•lus


	@evsignal.h

27 #i‚de‡
_EVSIGNAL_H_


28 
	#_EVSIGNAL_H_


	)

30 (*
	tev_sigh™dÀr_t
)();

32 
	sevsig«l_öfo
 {

33 
evít
 
ev_sig«l
;

34 
ev_sig«l_∑ú
[2];

35 
ev_sig«l_added
;

36 vﬁ©ûê
sig_©omic_t
 
evsig«l_ˇught
;

37 
evít_li°
 
evsigevíts
[
NSIG
];

38 
sig_©omic_t
 
evsigˇught
[
NSIG
];

39 #ifde‡
HAVE_SIGACTION


40 
siga˘i⁄
 **
sh_ﬁd
;

42 
ev_sigh™dÀr_t
 **
sh_ﬁd
;

44 
sh_ﬁd_max
;

46 
	`evsig«l_öô
(
evít_ba£
 *);

47 
	`evsig«l_¥o˚ss
(
evít_ba£
 *);

48 
	`evsig«l_add
(
evít
 *);

49 
	`evsig«l_dñ
(
evít
 *);

50 
	`evsig«l_dóŒoc
(
evít_ba£
 *);

	@evutil.c

27 #ifde‡
HAVE_CONFIG_H


28 
	~"c⁄fig.h
"

31 #ifde‡
WIN32


32 
	~<wösock2.h
>

33 
	#WIN32_LEAN_AND_MEAN


	)

34 
	~<wödows.h
>

35 #unde‡
WIN32_LEAN_AND_MEAN


38 
	~<sys/ty≥s.h
>

39 #ifde‡
HAVE_SYS_SOCKET_H


40 
	~<sys/sockë.h
>

42 #ifde‡
HAVE_UNISTD_H


43 
	~<uni°d.h
>

45 #ifde‡
HAVE_FCNTL_H


46 
	~<f˙é.h
>

48 #ifde‡
HAVE_STDLIB_H


49 
	~<°dlib.h
>

51 
	~<î∫o.h
>

52 #i‡
deföed
 
WIN32
 && !deföed(
HAVE_GETTIMEOFDAY_H
)

53 
	~<sys/timeb.h
>

55 
	~<°dio.h
>

56 
	~<sig«l.h
>

58 
	~<sys/queue.h
>

59 
	~"evít.h
"

60 
	~"evít-öã∫Æ.h
"

61 
	~"evutû.h
"

62 
	~"log.h
"

65 
	$evutû_sockë∑ú
(
Ámûy
, 
ty≥
, 
¥Ÿocﬁ
, 
fd
[2])

67 #i‚de‡
WIN32


68  
	`sockë∑ú
(
Ámûy
, 
ty≥
, 
¥Ÿocﬁ
, 
fd
);

77 
li°íî
 = -1;

78 
c⁄√˘‹
 = -1;

79 
ac˚±‹
 = -1;

80 
sockaddr_ö
 
li°í_addr
;

81 
sockaddr_ö
 
c⁄√˘_addr
;

82 
size
;

83 
ßved_î∫o
 = -1;

85 i‡(
¥Ÿocﬁ


86 #ifde‡
AF_UNIX


87 || 
Ámûy
 !
AF_UNIX


90 
	`EVUTIL_SET_SOCKET_ERROR
(
WSAEAFNOSUPPORT
);

93 i‡(!
fd
) {

94 
	`EVUTIL_SET_SOCKET_ERROR
(
WSAEINVAL
);

98 
li°íî
 = 
	`sockë
(
AF_INET
, 
ty≥
, 0);

99 i‡(
li°íî
 < 0)

101 
	`mem£t
(&
li°í_addr
, 0, (listen_addr));

102 
li°í_addr
.
sö_Ámûy
 = 
AF_INET
;

103 
li°í_addr
.
sö_addr
.
s_addr
 = 
	`ht⁄l
(
INADDR_LOOPBACK
);

104 
li°í_addr
.
sö_p‹t
 = 0;

105 i‡(
	`böd
(
li°íî
, (
sockaddr
 *Ë&
li°í_addr
,  (listen_addr))

107 
tidy_up_™d_Áû
;

108 i‡(
	`li°í
(
li°íî
, 1) == -1)

109 
tidy_up_™d_Áû
;

111 
c⁄√˘‹
 = 
	`sockë
(
AF_INET
, 
ty≥
, 0);

112 i‡(
c⁄√˘‹
 < 0)

113 
tidy_up_™d_Áû
;

115 
size
 = (
c⁄√˘_addr
);

116 i‡(
	`gësock«me
(
li°íî
, (
sockaddr
 *Ë&
c⁄√˘_addr
, &
size
) == -1)

117 
tidy_up_™d_Áû
;

118 i‡(
size
 ! (
c⁄√˘_addr
))

119 
ab‹t_tidy_up_™d_Áû
;

120 i‡(
	`c⁄√˘
(
c⁄√˘‹
, (
sockaddr
 *Ë&
c⁄√˘_addr
,

121 (
c⁄√˘_addr
)) == -1)

122 
tidy_up_™d_Áû
;

124 
size
 = (
li°í_addr
);

125 
ac˚±‹
 = 
	`ac˚±
(
li°íî
, (
sockaddr
 *Ë&
li°í_addr
, &
size
);

126 i‡(
ac˚±‹
 < 0)

127 
tidy_up_™d_Áû
;

128 i‡(
size
 !(
li°í_addr
))

129 
ab‹t_tidy_up_™d_Áû
;

130 
	`EVUTIL_CLOSESOCKET
(
li°íî
);

133 i‡(
	`gësock«me
(
c⁄√˘‹
, (
sockaddr
 *Ë&
c⁄√˘_addr
, &
size
) == -1)

134 
tidy_up_™d_Áû
;

135 i‡(
size
 ! (
c⁄√˘_addr
)

136 || 
li°í_addr
.
sö_Ámûy
 !
c⁄√˘_addr
.sin_family

137 || 
li°í_addr
.
sö_addr
.
s_addr
 !
c⁄√˘_addr
.sin_addr.s_addr

138 || 
li°í_addr
.
sö_p‹t
 !
c⁄√˘_addr
.sin_port)

139 
ab‹t_tidy_up_™d_Áû
;

140 
fd
[0] = 
c⁄√˘‹
;

141 
fd
[1] = 
ac˚±‹
;

145 
ab‹t_tidy_up_™d_Áû
:

146 
ßved_î∫o
 = 
WSAECONNABORTED
;

147 
tidy_up_™d_Áû
:

148 i‡(
ßved_î∫o
 < 0)

149 
ßved_î∫o
 = 
	`WSAGëLa°Eº‹
();

150 i‡(
li°íî
 != -1)

151 
	`EVUTIL_CLOSESOCKET
(
li°íî
);

152 i‡(
c⁄√˘‹
 != -1)

153 
	`EVUTIL_CLOSESOCKET
(
c⁄√˘‹
);

154 i‡(
ac˚±‹
 != -1)

155 
	`EVUTIL_CLOSESOCKET
(
ac˚±‹
);

157 
	`EVUTIL_SET_SOCKET_ERROR
(
ßved_î∫o
);

160 
	}
}

163 
	$evutû_make_sockë_n⁄blockög
(
fd
)

165 #ifde‡
WIN32


167 
n⁄blockög
 = 1;

168 
	`io˘lsockë
(
fd
, 
FIONBIO
, (*Ë&
n⁄blockög
);

171 i‡(
	`f˙é
(
fd
, 
F_SETFL
, 
O_NONBLOCK
) == -1) {

172 
	`evít_w¨n
("fcntl(O_NONBLOCK)");

177 
	}
}

179 
ev_öt64_t


180 
	$evutû_°πﬁl
(c⁄° *
s
, **
íd±r
, 
ba£
)

182 #ifde‡
HAVE_STRTOLL


183  (
ev_öt64_t
)
	`°πﬁl
(
s
, 
íd±r
, 
ba£
);

184 #ñi‡
SIZEOF_LONG
 == 8

185  (
ev_öt64_t
)
	`°πﬁ
(
s
, 
íd±r
, 
ba£
);

186 #ñi‡
	`deföed
(
WIN32
Ë&& deföed(
_MSC_VER
) && _MSC_VER < 1300

189 
ev_öt64_t
 
r
;

190 i‡(
ba£
 != 10)

192 
r
 = (
ev_öt64_t
Ë
	`_©oi64
(
s
);

193 
	`is•a˚
(*
s
))

194 ++
s
;

195 
	`isdigô
(*
s
))

196 ++
s
;

197 i‡(
íd±r
)

198 *
íd±r
 = (*Ë
s
;

199  
r
;

200 #ñi‡
	`deföed
(
WIN32
)

201  (
ev_öt64_t
Ë
	`_°πoi64
(
s
, 
íd±r
, 
ba£
);

205 
	}
}

207 #i‚de‡
_EVENT_HAVE_GETTIMEOFDAY


209 
	$evutû_gëtimeofday
(
timevÆ
 *
tv
, 
timez⁄e
 *
tz
)

211 
_timeb
 
tb
;

213 if(
tv
 =
NULL
)

216 
	`_·ime
(&
tb
);

217 
tv
->
tv_£c
 = (Ë
tb
.
time
;

218 
tv
->
tv_u£c
 = ((Ë
tb
.
mûlôm
) * 1000;

220 
	}
}

224 
	$evutû_¢¥ötf
(*
buf
, 
size_t
 
buÊí
, c⁄° *
f‹m©
, ...)

226 
r
;

227 
va_li°
 
≠
;

228 
	`va_°¨t
(
≠
, 
f‹m©
);

229 
r
 = 
	`evutû_v¢¥ötf
(
buf
, 
buÊí
, 
f‹m©
, 
≠
);

230 
	`va_íd
(
≠
);

231  
r
;

232 
	}
}

235 
	$evutû_v¢¥ötf
(*
buf
, 
size_t
 
buÊí
, c⁄° *
f‹m©
, 
va_li°
 
≠
)

237 #ifde‡
_MSC_VER


238 
r
 = 
	`_v¢¥ötf
(
buf
, 
buÊí
, 
f‹m©
, 
≠
);

239 
buf
[
buÊí
-1] = '\0';

240 i‡(
r
 >= 0)

241  
r
;

243  
	`_vs˝rötf
(
f‹m©
, 
≠
);

245 
r
 = 
	`v¢¥ötf
(
buf
, 
buÊí
, 
f‹m©
, 
≠
);

246 
buf
[
buÊí
-1] = '\0';

247  
r
;

249 
	}
}

252 
	$evutû_is£tugid
()

254 #ifde‡
_EVENT_HAVE_ISSETUGID


255  
	`is£tugid
();

258 #ifde‡
_EVENT_HAVE_GETEUID


259 i‡(
	`gëuid
(Ë!
	`gëeuid
())

262 #ifde‡
_EVENT_HAVE_GETEGID


263 i‡(
	`gëgid
(Ë!
	`gëegid
())

268 
	}
}

271 
	$evutû_gëív
(c⁄° *
v¨«me
)

273 i‡(
	`evutû_is£tugid
())

274  
NULL
;

276  
	`gëív
(
v¨«me
);

277 
	}
}

	@evutil.h

27 #i‚de‡
_EVUTIL_H_


28 
	#_EVUTIL_H_


	)

37 #ifde‡
__˝lu•lus


41 
	~<evít-c⁄fig.h
>

42 #ifde‡
_EVENT_HAVE_SYS_TIME_H


43 
	~<sys/time.h
>

45 #ifde‡
_EVENT_HAVE_STDINT_H


46 
	~<°döt.h
>

47 #ñi‡
deföed
(
_EVENT_HAVE_INTTYPES_H
)

48 
	~<öây≥s.h
>

50 #ifde‡
_EVENT_HAVE_SYS_TYPES_H


51 
	~<sys/ty≥s.h
>

53 
	~<°d¨g.h
>

55 #ifde‡
_EVENT_HAVE_UINT64_T


56 
	#ev_uöt64_t
 
uöt64_t


	)

57 
	#ev_öt64_t
 
öt64_t


	)

58 #ñi‡
deföed
(
WIN32
)

59 
	#ev_uöt64_t
 
__öt64


	)

60 
	#ev_öt64_t
 sig√d 
__öt64


	)

61 #ñi‡
_EVENT_SIZEOF_LONG_LONG
 == 8

62 
	#ev_uöt64_t
 

	)

63 
	#ev_öt64_t
 

	)

64 #ñi‡
_EVENT_SIZEOF_LONG
 == 8

65 
	#ev_uöt64_t
 

	)

66 
	#ev_öt64_t
 

	)

71 #ifde‡
_EVENT_HAVE_UINT32_T


72 
	#ev_uöt32_t
 
uöt32_t


	)

73 #ñi‡
deföed
(
WIN32
)

74 
	#ev_uöt32_t
 

	)

75 #ñi‡
_EVENT_SIZEOF_LONG
 == 4

76 
	#ev_uöt32_t
 

	)

77 #ñi‡
_EVENT_SIZEOF_INT
 == 4

78 
	#ev_uöt32_t
 

	)

83 #ifde‡
_EVENT_HAVE_UINT16_T


84 
	#ev_uöt16_t
 
uöt16_t


	)

85 #ñi‡
deföed
(
WIN32
)

86 
	#ev_uöt16_t
 

	)

87 #ñi‡
_EVENT_SIZEOF_INT
 == 2

88 
	#ev_uöt16_t
 

	)

89 #ñi‡
_EVENT_SIZEOF_SHORT
 == 2

90 
	#ev_uöt16_t
 

	)

95 #ifde‡
_EVENT_HAVE_UINT8_T


96 
	#ev_uöt8_t
 
uöt8_t


	)

98 
	#ev_uöt8_t
 

	)

101 
evutû_sockë∑ú
(
d
, 
ty≥
, 
¥Ÿocﬁ
, 
sv
[2]);

102 
evutû_make_sockë_n⁄blockög
(
sock
);

103 #ifde‡
WIN32


104 
	#EVUTIL_CLOSESOCKET
(
s
Ë
	`˛o£sockë
(s)

	)

106 
	#EVUTIL_CLOSESOCKET
(
s
Ë
	`˛o£
(s)

	)

109 #ifde‡
WIN32


110 
	#EVUTIL_SOCKET_ERROR
(Ë
	`WSAGëLa°Eº‹
()

	)

111 
	#EVUTIL_SET_SOCKET_ERROR
(
îrcode
) \

112 dÿ{ 
	`WSASëLa°Eº‹
(
îrcode
); } 0)

	)

114 
	#EVUTIL_SOCKET_ERROR
(Ë(
î∫o
)

	)

115 
	#EVUTIL_SET_SOCKET_ERROR
(
îrcode
) \

116 dÿ{ 
î∫o
 = (
îrcode
); } 0)

	)

122 #ifde‡
_EVENT_HAVE_TIMERADD


123 
	#evutû_timîadd
(
tvp
, 
uvp
, 
vvp
Ë
	`timîadd
(—vp), (uvp), (vvp))

	)

124 
	#evutû_timîsub
(
tvp
, 
uvp
, 
vvp
Ë
	`timîsub
(—vp), (uvp), (vvp))

	)

126 
	#evutû_timîadd
(
tvp
, 
uvp
, 
vvp
) \

128 (
vvp
)->
tv_£c
 = (
tvp
)->tv_£¯+ (
uvp
)->tv_sec; \

129 (
vvp
)->
tv_u£c
 = (
tvp
)->tv_u£¯+ (
uvp
)->tv_usec; \

130 i‡((
vvp
)->
tv_u£c
 >= 1000000) { \

131 (
vvp
)->
tv_£c
++; \

132 (
vvp
)->
tv_u£c
 -= 1000000; \

134 } 0)

	)

135 
	#evutû_timîsub
(
tvp
, 
uvp
, 
vvp
) \

137 (
vvp
)->
tv_£c
 = (
tvp
)->tv_£¯- (
uvp
)->tv_sec; \

138 (
vvp
)->
tv_u£c
 = (
tvp
)->tv_u£¯- (
uvp
)->tv_usec; \

139 i‡((
vvp
)->
tv_u£c
 < 0) { \

140 (
vvp
)->
tv_£c
--; \

141 (
vvp
)->
tv_u£c
 += 1000000; \

143 } 0)

	)

146 #ifde‡
_EVENT_HAVE_TIMERCLEAR


147 
	#evutû_timî˛ór
(
tvp
Ë
	`timî˛ór
—vp)

	)

149 
	#evutû_timî˛ór
(
tvp
Ë—vp)->
tv_£c
 = (tvp)->
tv_u£c
 = 0

	)

152 
	#evutû_timîcmp
(
tvp
, 
uvp
, 
cmp
) \

153 (((
tvp
)->
tv_£c
 =(
uvp
)->tv_sec) ? \

154 ((
tvp
)->
tv_u£c
 
	`cmp
 (
uvp
)->tv_usec) : \

155 ((
tvp
)->
tv_£c
 
	`cmp
 (
uvp
)->tv_£c))

	)

157 #ifde‡
_EVENT_HAVE_TIMERISSET


158 
	#evutû_timîis£t
(
tvp
Ë
	`timîis£t
—vp)

	)

160 
	#evutû_timîis£t
(
tvp
Ë(—vp)->
tv_£c
 || (tvp)->
tv_u£c
)

	)

165 
ev_öt64_t
 
evutû_°πﬁl
(c⁄° *
s
, **
íd±r
, 
ba£
);

168 #ifde‡
_EVENT_HAVE_GETTIMEOFDAY


169 
	#evutû_gëtimeofday
(
tv
, 
tz
Ë
	`gëtimeofday
(—v), (tz))

	)

171 
timez⁄e
;

172 
evutû_gëtimeofday
(
timevÆ
 *
tv
, 
timez⁄e
 *
tz
);

175 
evutû_¢¥ötf
(*
buf
, 
size_t
 
buÊí
, c⁄° *
f‹m©
, ...)

176 #ifde‡
__GNUC__


177 
__©åibuã__
((
f‹m©
(
¥ötf
, 3, 4)))

180 
evutû_v¢¥ötf
(*
buf
, 
size_t
 
buÊí
, c⁄° *
f‹m©
, 
va_li°
 
≠
);

182 #ifde‡
__˝lu•lus


	@http-internal.h

10 #i‚de‡
_HTTP_H_


11 
	#_HTTP_H_


	)

13 
	#HTTP_CONNECT_TIMEOUT
 45

	)

14 
	#HTTP_WRITE_TIMEOUT
 50

	)

15 
	#HTTP_READ_TIMEOUT
 50

	)

17 
	#HTTP_PREFIX
 "hâp://"

	)

18 
	#HTTP_DEFAULTPORT
 80

	)

20 
	emesßge_ªad_°©us
 {

21 
	mALL_DATA_READ
 = 1,

22 
	mMORE_DATA_EXPECTED
 = 0,

23 
	mDATA_CORRUPTED
 = -1,

24 
	mREQUEST_CANCELED
 = -2

27 
	eevhâp_c⁄√˘i⁄_îr‹
 {

28 
	mEVCON_HTTP_TIMEOUT
,

29 
	mEVCON_HTTP_EOF
,

30 
	mEVCON_HTTP_INVALID_HEADER


33 
	gevbuf„r
;

34 
	gaddröfo
;

35 
	gevhâp_ªque°
;

39 
	eevhâp_c⁄√˘i⁄_°©e
 {

40 
	mEVCON_DISCONNECTED
,

41 
	mEVCON_CONNECTING
,

42 
	mEVCON_IDLE
,

43 
	mEVCON_READING_FIRSTLINE
,

45 
	mEVCON_READING_HEADERS
,

46 
	mEVCON_READING_BODY
,

47 
	mEVCON_READING_TRAILER
,

48 
	mEVCON_WRITING


51 
	gevít_ba£
;

53 
	sevhâp_c⁄√˘i⁄
 {

55 
TAILQ_ENTRY
(
evhâp_c⁄√˘i⁄
Ë(
	m√xt
);

57 
	mfd
;

58 
evít
 
	mev
;

59 
evít
 
	m˛o£_ev
;

60 
evbuf„r
 *
	möput_buf„r
;

61 
evbuf„r
 *
	mouçut_buf„r
;

63 *
	mböd_addªss
;

64 
u_sh‹t
 
	mböd_p‹t
;

66 *
	maddªss
;

67 
u_sh‹t
 
	mp‹t
;

69 
	mÊags
;

70 
	#EVHTTP_CON_INCOMING
 0x0001

	)

71 
	#EVHTTP_CON_OUTGOING
 0x0002

	)

72 
	#EVHTTP_CON_CLOSEDETECT
 0x0004

	)

74 
	mtimeout
;

75 
	mªåy_˙t
;

76 
	mªåy_max
;

78 
evhâp_c⁄√˘i⁄_°©e
 
	m°©e
;

81 
evhâp
 *
	mhâp_£rvî
;

83 
TAILQ_HEAD
(
evc⁄_ªque°q
, 
evhâp_ªque°
Ë
	mªque°s
;

85 (*
	mcb
)(
	mevhâp_c⁄√˘i⁄
 *, *);

86 *
	mcb_¨g
;

88 (*
	m˛o£cb
)(
	mevhâp_c⁄√˘i⁄
 *, *);

89 *
	m˛o£cb_¨g
;

91 
evít_ba£
 *
	mba£
;

94 
	sevhâp_cb
 {

95 
TAILQ_ENTRY
(
evhâp_cb
Ë
	m√xt
;

97 *
	mwh©
;

99 (*
	mcb
)(
evhâp_ªque°
 *
	mªq
, *);

100 *
	mcb¨g
;

104 
TAILQ_HEAD
(
evc⁄q
, 
evhâp_c⁄√˘i⁄
);

107 
	sevhâp_bound_sockë
 {

108 
TAILQ_ENTRY
(
evhâp_bound_sockë
Ë(
	m√xt
);

110 
evít
 
	mböd_ev
;

113 
	sevhâp
 {

114 
TAILQ_HEAD
(
boundq
, 
evhâp_bound_sockë
Ë
	msockës
;

116 
TAILQ_HEAD
(
hâpcbq
, 
evhâp_cb
Ë
	mˇŒbacks
;

117 
evc⁄q
 
	mc⁄√˘i⁄s
;

119 
	mtimeout
;

121 (*
	mgícb
)(
evhâp_ªque°
 *
	mªq
, *);

122 *
	mgícb¨g
;

124 
evít_ba£
 *
	mba£
;

128 
evhâp_c⁄√˘i⁄_ª£t
(
evhâp_c⁄√˘i⁄
 *);

131 
evhâp_c⁄√˘i⁄_c⁄√˘
(
evhâp_c⁄√˘i⁄
 *);

134 
evhâp_c⁄√˘i⁄_Áû
(
evhâp_c⁄√˘i⁄
 *,

135 
evhâp_c⁄√˘i⁄_îr‹
 
îr‹
);

137 
evhâp_gë_ªque°
(
evhâp
 *, , 
sockaddr
 *, 
sockÀn_t
);

139 
evhâp_ho°p‹tfûe
(*, **, 
u_sh‹t
 *, **);

141 
evhâp_∑r£_fú°löe
(
evhâp_ªque°
 *, 
evbuf„r
*);

142 
evhâp_∑r£_hódîs
(
evhâp_ªque°
 *, 
evbuf„r
*);

144 
evhâp_°¨t_ªad
(
evhâp_c⁄√˘i⁄
 *);

145 
evhâp_make_hódî
(
evhâp_c⁄√˘i⁄
 *, 
evhâp_ªque°
 *);

147 
evhâp_wrôe_buf„r
(
evhâp_c⁄√˘i⁄
 *,

148 (*)(
evhâp_c⁄√˘i⁄
 *, *), *);

151 
	`evhâp_ª•⁄£_code
(
evhâp_ªque°
 *, , const *);

152 
	`evhâp_£nd_∑ge
(
evhâp_ªque°
 *, 
evbuf„r
 *);

	@http.c

28 #ifde‡
HAVE_CONFIG_H


29 
	~"c⁄fig.h
"

32 #ifde‡
HAVE_SYS_PARAM_H


33 
	~<sys/∑øm.h
>

35 #ifde‡
HAVE_SYS_TYPES_H


36 
	~<sys/ty≥s.h
>

39 #ifde‡
HAVE_SYS_TIME_H


40 
	~<sys/time.h
>

42 #ifde‡
HAVE_SYS_IOCCOM_H


43 
	~<sys/ioccom.h
>

46 #i‚de‡
WIN32


47 
	~<sys/ªsour˚.h
>

48 
	~<sys/sockë.h
>

49 
	~<sys/°©.h
>

50 
	~<sys/waô.h
>

53 
	~<sys/queue.h
>

55 #i‚de‡
WIN32


56 
	~<√töë/ö.h
>

57 
	~<√tdb.h
>

60 #ifde‡
WIN32


61 
	~<wösock2.h
>

64 
	~<as£π.h
>

65 
	~<˘y≥.h
>

66 
	~<î∫o.h
>

67 
	~<°dio.h
>

68 
	~<°dlib.h
>

69 
	~<°rög.h
>

70 #i‚de‡
WIN32


71 
	~<sy¶og.h
>

73 
	~<sig«l.h
>

74 
	~<time.h
>

75 #ifde‡
HAVE_UNISTD_H


76 
	~<uni°d.h
>

78 #ifde‡
HAVE_FCNTL_H


79 
	~<f˙é.h
>

82 #unde‡
timeout_≥ndög


83 #unde‡
timeout_öôülized


85 
	~"°æ˝y-öã∫Æ.h
"

86 
	~"evít.h
"

87 
	~"evhâp.h
"

88 
	~"evutû.h
"

89 
	~"log.h
"

90 
	~"hâp-öã∫Æ.h
"

92 #ifde‡
WIN32


93 
	#°rˇ£cmp
 
_°ricmp


	)

94 
	#°∫ˇ£cmp
 
_°∫icmp


	)

95 
	#°rdup
 
_°rdup


	)

98 #i‚de‡
HAVE_GETNAMEINFO


99 
	#NI_MAXSERV
 32

	)

100 
	#NI_MAXHOST
 1025

	)

102 
	#NI_NUMERICHOST
 1

	)

103 
	#NI_NUMERICSERV
 2

	)

106 
	$Áke_gë«meöfo
(c⁄° 
sockaddr
 *
ß
, 
size_t
 
ßÀn
, *
ho°
,

107 
size_t
 
ho°Àn
, *
£rv
, size_à
£rvÀn
, 
Êags
)

109 
sockaddr_ö
 *
sö
 = (sockaddr_ö *)
ß
;

111 i‡(
£rv
 !
NULL
) {

112 
tmp£rv
[16];

113 
	`evutû_¢¥ötf
(
tmp£rv
, (tmpserv),

114 "%d", 
	`¡ohs
(
sö
->
sö_p‹t
));

115 i‡(
	`°æ˝y
(
£rv
, 
tmp£rv
, 
£rvÀn
) >= servlen)

119 i‡(
ho°
 !
NULL
) {

120 i‡(
Êags
 & 
NI_NUMERICHOST
) {

121 i‡(
	`°æ˝y
(
ho°
, 
	`öë_¡ﬂ
(
sö
->
sö_addr
),

122 
ho°Àn
) >= hostlen)

127 
ho°ít
 *
hp
;

128 
hp
 = 
	`gëho°byaddr
((*)&
sö
->
sö_addr
,

129 (
ö_addr
), 
AF_INET
);

130 i‡(
hp
 =
NULL
)

133 i‡(
	`°æ˝y
(
ho°
, 
hp
->
h_«me
, 
ho°Àn
) >= hostlen)

140 
	}
}

144 #i‚de‡
HAVE_GETADDRINFO


145 
	saddröfo
 {

146 
	mai_Ámûy
;

147 
	mai_sockty≥
;

148 
	mai_¥Ÿocﬁ
;

149 
size_t
 
	mai_addæí
;

150 
sockaddr
 *
	mai_addr
;

151 
addröfo
 *
	mai_√xt
;

154 
	$Áke_gëaddröfo
(c⁄° *
ho°«me
, 
addröfo
 *
ai
)

156 
ho°ít
 *
he
 = 
NULL
;

157 
sockaddr_ö
 *
ß
;

158 i‡(
ho°«me
) {

159 
he
 = 
	`gëho°by«me
(
ho°«me
);

160 i‡(!
he
)

163 
ai
->
ai_Ámûy
 = 
he
 ? he->
h_addπy≥
 : 
AF_INET
;

164 
ai
->
ai_sockty≥
 = 
SOCK_STREAM
;

165 
ai
->
ai_¥Ÿocﬁ
 = 0;

166 
ai
->
ai_addæí
 = (
sockaddr_ö
);

167 i‡(
NULL
 =(
ai
->
ai_addr
 = 
	`mÆloc
◊i->
ai_addæí
)))

169 
ß
 = (
sockaddr_ö
*)
ai
->
ai_addr
;

170 
	`mem£t
(
ß
, 0, 
ai
->
ai_addæí
);

171 i‡(
he
) {

172 
ß
->
sö_Ámûy
 = 
he
->
h_addπy≥
;

173 
	`mem˝y
(&
ß
->
sö_addr
, 
he
->
h_addr_li°
[0], he->
h_Àngth
);

175 
ß
->
sö_Ámûy
 = 
AF_INET
;

176 
ß
->
sö_addr
.
s_addr
 = 
INADDR_ANY
;

178 
ai
->
ai_√xt
 = 
NULL
;

180 
	}
}

182 
	$Áke_‰ìaddröfo
(
addröfo
 *
ai
)

184 
	`‰ì
(
ai
->
ai_addr
);

185 
	}
}

188 #i‚de‡
MIN


189 
	#MIN
(
a
,
b
Ë((◊)<(b))?◊):(b))

	)

193 
	#EVHTTP_BASE_SET
(
x
, 
y
) do { \

194 i‡((
x
)->
ba£
 !
NULL
Ë
	`evít_ba£_£t
((x)->ba£, 
y
); \

195 } 0)

	)

197 
debug
;

199 
sockë_c⁄√˘
(
fd
, c⁄° *
addªss
, 
p‹t
);

200 
böd_sockë_ai
(
addröfo
 *, 
ªu£
);

201 
böd_sockë
(c⁄° *, 
u_sh‹t
, 
ªu£
);

202 
«me_‰om_addr
(
sockaddr
 *, 
sockÀn_t
, **, **);

203 
evhâp_assocüã_√w_ªque°_wôh_c⁄√˘i⁄
(

204 
evhâp_c⁄√˘i⁄
 *
evc⁄
);

205 
evhâp_c⁄√˘i⁄_°¨t_dëe˘˛o£
(

206 
evhâp_c⁄√˘i⁄
 *
evc⁄
);

207 
evhâp_c⁄√˘i⁄_°›_dëe˘˛o£
(

208 
evhâp_c⁄√˘i⁄
 *
evc⁄
);

209 
evhâp_ªque°_di•©ch
(
evhâp_c⁄√˘i⁄
* 
evc⁄
);

210 
evhâp_ªad_fú°löe
(
evhâp_c⁄√˘i⁄
 *
evc⁄
,

211 
evhâp_ªque°
 *
ªq
);

212 
evhâp_ªad_hódî
(
evhâp_c⁄√˘i⁄
 *
evc⁄
,

213 
evhâp_ªque°
 *
ªq
);

214 
evhâp_add_hódî_öã∫Æ
(
evkeyvÆq
 *
hódîs
,

215 c⁄° *
key
, c⁄° *
vÆue
);

216 
evhâp_decode_uri_öã∫Æ
(c⁄° *
uri
, 
size_t
 
Àngth
,

217 *
ªt
, 
Æways_decode_∂us
);

219 
evhâp_ªad
(, , *);

220 
evhâp_wrôe
(, , *);

222 #i‚de‡
HAVE_STRSEP


226 
	$°r£p
(**
s
, c⁄° *
dñ
)

228 *
d
, *
tok
;

229 
	`as£π
(
	`°æí
(
dñ
) == 1);

230 i‡(!
s
 || !*s)

231  
NULL
;

232 
tok
 = *
s
;

233 
d
 = 
	`°r°r
(
tok
, 
dñ
);

234 i‡(
d
) {

235 *
d
 = '\0';

236 *
s
 = 
d
 + 1;

238 *
s
 = 
NULL
;

239  
tok
;

240 
	}
}

244 
	$html_ª∂a˚
(
ch
, *
buf
)

246 
ch
) {

262 
buf
[0] = 
ch
;

263 
buf
[1] = '\0';

265  
buf
;

266 
	}
}

276 
	$evhâp_htmÀsˇ≥
(c⁄° *
html
)

278 
i
, 
√w_size
 = 0, 
ﬁd_size
 = 
	`°æí
(
html
);

279 *
esˇ≥d_html
, *
p
;

280 
s¸©ch_•a˚
[2];

282 
i
 = 0; i < 
ﬁd_size
; ++i)

283 
√w_size
 +
	`°æí
(
	`html_ª∂a˚
(
html
[
i
], 
s¸©ch_•a˚
));

285 
p
 = 
esˇ≥d_html
 = 
	`mÆloc
(
√w_size
 + 1);

286 i‡(
esˇ≥d_html
 =
NULL
)

287 
	`evít_îr
(1, "%s: mÆloc(%d)", 
__func__
, 
√w_size
 + 1);

288 
i
 = 0; i < 
ﬁd_size
; ++i) {

289 c⁄° *
ª∂a˚d
 = 
	`html_ª∂a˚
(
html
[
i
], 
s¸©ch_•a˚
);

291 
	`°r˝y
(
p
, 
ª∂a˚d
);

292 
p
 +
	`°æí
(
ª∂a˚d
);

295 *
p
 = '\0';

297  (
esˇ≥d_html
);

298 
	}
}

301 
	$evhâp_mëhod
(
evhâp_cmd_ty≥
 
ty≥
)

303 c⁄° *
mëhod
;

305 
ty≥
) {

306 
EVHTTP_REQ_GET
:

307 
mëhod
 = "GET";

309 
EVHTTP_REQ_POST
:

310 
mëhod
 = "POST";

312 
EVHTTP_REQ_HEAD
:

313 
mëhod
 = "HEAD";

316 
mëhod
 = 
NULL
;

320  (
mëhod
);

321 
	}
}

324 
	$evhâp_add_evít
(
evít
 *
ev
, 
timeout
, 
deÁu…_timeout
)

326 i‡(
timeout
 != 0) {

327 
timevÆ
 
tv
;

329 
	`evutû_timî˛ór
(&
tv
);

330 
tv
.
tv_£c
 = 
timeout
 !-1 ?Åimeouà: 
deÁu…_timeout
;

331 
	`evít_add
(
ev
, &
tv
);

333 
	`evít_add
(
ev
, 
NULL
);

335 
	}
}

338 
evhâp_wrôe_buf„r
(
evhâp_c⁄√˘i⁄
 *
evc⁄
,

339 (*
cb
)(
evhâp_c⁄√˘i⁄
 *, *), *
¨g
)

341 
	`evít_debug
(("%s:Öª∑rögÅÿwrôêbuf„r\n", 
__func__
));

344 
evc⁄
->
cb
 = cb;

345 
evc⁄
->
cb_¨g
 = 
¨g
;

348 i‡(
	`evít_≥ndög
(&
evc⁄
->
ev
, 
EV_WRITE
|
EV_TIMEOUT
, 
NULL
))

349 
	`evít_dñ
(&
evc⁄
->
ev
);

351 
	`evít_£t
(&
evc⁄
->
ev
,Évc⁄->
fd
, 
EV_WRITE
, 
evhâp_wrôe
,Évcon);

352 
	`EVHTTP_BASE_SET
(
evc⁄
, &evc⁄->
ev
);

353 
	`evhâp_add_evít
(&
evc⁄
->
ev
,Évc⁄->
timeout
, 
HTTP_WRITE_TIMEOUT
);

354 
	}
}

357 
	$evhâp_c⁄√˘ed
(
evhâp_c⁄√˘i⁄
 *
evc⁄
)

359 
evc⁄
->
°©e
) {

360 
EVCON_DISCONNECTED
:

361 
EVCON_CONNECTING
:

363 
EVCON_IDLE
:

364 
EVCON_READING_FIRSTLINE
:

365 
EVCON_READING_HEADERS
:

366 
EVCON_READING_BODY
:

367 
EVCON_READING_TRAILER
:

368 
EVCON_WRITING
:

372 
	}
}

378 
	$evhâp_make_hódî_ªque°
(
evhâp_c⁄√˘i⁄
 *
evc⁄
,

379 
evhâp_ªque°
 *
ªq
)

381 c⁄° *
mëhod
;

383 
	`evhâp_ªmove_hódî
(
ªq
->
ouçut_hódîs
, "Proxy-Connection");

386 
mëhod
 = 
	`evhâp_mëhod
(
ªq
->
ty≥
);

387 
	`evbuf„r_add_¥ötf
(
evc⁄
->
ouçut_buf„r
, "%s %s HTTP/%d.%d\r\n",

388 
mëhod
, 
ªq
->
uri
,Ñeq->
maj‹
,Ñeq->
mö‹
);

391 i‡(
ªq
->
ty≥
 =
EVHTTP_REQ_POST
 &&

392 
	`evhâp_föd_hódî
(
ªq
->
ouçut_hódîs
, "C⁄ã¡-Lígth"Ë=
NULL
){

393 
size
[12];

394 
	`evutû_¢¥ötf
(
size
, (size), "%ld",

395 ()
	`EVBUFFER_LENGTH
(
ªq
->
ouçut_buf„r
));

396 
	`evhâp_add_hódî
(
ªq
->
ouçut_hódîs
, "C⁄ã¡-Lígth", 
size
);

398 
	}
}

401 
	$evhâp_is_c⁄√˘i⁄_˛o£
(
Êags
, 
evkeyvÆq
* 
hódîs
)

403 i‡(
Êags
 & 
EVHTTP_PROXY_REQUEST
) {

405 c⁄° *
c⁄√˘i⁄
 = 
	`evhâp_föd_hódî
(
hódîs
, "Proxy-Connection");

406  (
c⁄√˘i⁄
 =
NULL
 || 
	`°rˇ£cmp
(connection, "keep-alive") != 0);

408 c⁄° *
c⁄√˘i⁄
 = 
	`evhâp_föd_hódî
(
hódîs
, "Connection");

409  (
c⁄√˘i⁄
 !
NULL
 && 
	`°rˇ£cmp
(connection, "close") == 0);

411 
	}
}

414 
	$evhâp_is_c⁄√˘i⁄_kì∑live
(
evkeyvÆq
* 
hódîs
)

416 c⁄° *
c⁄√˘i⁄
 = 
	`evhâp_föd_hódî
(
hódîs
, "Connection");

417  (
c⁄√˘i⁄
 !
NULL


418 && 
	`°∫ˇ£cmp
(
c⁄√˘i⁄
, "keep-alive", 10) == 0);

419 
	}
}

422 
	$evhâp_maybe_add_d©e_hódî
(
evkeyvÆq
 *
hódîs
)

424 i‡(
	`evhâp_föd_hódî
(
hódîs
, "D©e"Ë=
NULL
) {

425 
d©e
[50];

426 #i‚de‡
WIN32


427 
tm
 
cur
;

429 
tm
 *
cur_p
;

430 
time_t
 
t
 = 
	`time
(
NULL
);

431 #ifde‡
WIN32


432 
cur_p
 = 
	`gmtime
(&
t
);

434 
	`gmtime_r
(&
t
, &
cur
);

435 
cur_p
 = &
cur
;

437 i‡(
	`°r·ime
(
d©e
, (date),

438 "%a, %d %b %Y %H:%M:%S GMT", 
cur_p
) != 0) {

439 
	`evhâp_add_hódî
(
hódîs
, "D©e", 
d©e
);

442 
	}
}

445 
	$evhâp_maybe_add_c⁄ã¡_Àngth_hódî
(
evkeyvÆq
 *
hódîs
,

446 
c⁄ã¡_Àngth
)

448 i‡(
	`evhâp_föd_hódî
(
hódîs
, "Tøns„r-Encodög"Ë=
NULL
 &&

449 
	`evhâp_föd_hódî
(
hódîs
, "C⁄ã¡-Lígth"Ë=
NULL
) {

450 
Àn
[12];

451 
	`evutû_¢¥ötf
(
Àn
, ÷í), "%ld", 
c⁄ã¡_Àngth
);

452 
	`evhâp_add_hódî
(
hódîs
, "C⁄ã¡-Lígth", 
Àn
);

454 
	}
}

461 
	$evhâp_make_hódî_ª•⁄£
(
evhâp_c⁄√˘i⁄
 *
evc⁄
,

462 
evhâp_ªque°
 *
ªq
)

464 
is_kì∑live
 = 
	`evhâp_is_c⁄√˘i⁄_kì∑live
(
ªq
->
öput_hódîs
);

465 
	`evbuf„r_add_¥ötf
(
evc⁄
->
ouçut_buf„r
, "HTTP/%d.%d %d %s\r\n",

466 
ªq
->
maj‹
,Ñeq->
mö‹
,Ñeq->
ª•⁄£_code
,

467 
ªq
->
ª•⁄£_code_löe
);

469 i‡(
ªq
->
maj‹
 == 1) {

470 i‡(
ªq
->
mö‹
 == 1)

471 
	`evhâp_maybe_add_d©e_hódî
(
ªq
->
ouçut_hódîs
);

477 i‡(
ªq
->
mö‹
 =0 && 
is_kì∑live
)

478 
	`evhâp_add_hódî
(
ªq
->
ouçut_hódîs
,

481 i‡(
ªq
->
mö‹
 =1 || 
is_kì∑live
) {

487 
	`evhâp_maybe_add_c⁄ã¡_Àngth_hódî
(

488 
ªq
->
ouçut_hódîs
,

489 ()
	`EVBUFFER_LENGTH
(
ªq
->
ouçut_buf„r
));

494 i‡(
	`EVBUFFER_LENGTH
(
ªq
->
ouçut_buf„r
)) {

495 i‡(
	`evhâp_föd_hódî
(
ªq
->
ouçut_hódîs
,

496 "C⁄ã¡-Ty≥"Ë=
NULL
) {

497 
	`evhâp_add_hódî
(
ªq
->
ouçut_hódîs
,

503 i‡(
	`evhâp_is_c⁄√˘i⁄_˛o£
(
ªq
->
Êags
,Ñeq->
öput_hódîs
)) {

504 
	`evhâp_ªmove_hódî
(
ªq
->
ouçut_hódîs
, "Connection");

505 i‡(!(
ªq
->
Êags
 & 
EVHTTP_PROXY_REQUEST
))

506 
	`evhâp_add_hódî
(
ªq
->
ouçut_hódîs
, "Connection", "close");

507 
	`evhâp_ªmove_hódî
(
ªq
->
ouçut_hódîs
, "Proxy-Connection");

509 
	}
}

512 
	$evhâp_make_hódî
(
evhâp_c⁄√˘i⁄
 *
evc⁄
, 
evhâp_ªque°
 *
ªq
)

514 
evkeyvÆ
 *
hódî
;

520 i‡(
ªq
->
köd
 =
EVHTTP_REQUEST
) {

521 
	`evhâp_make_hódî_ªque°
(
evc⁄
, 
ªq
);

523 
	`evhâp_make_hódî_ª•⁄£
(
evc⁄
, 
ªq
);

526 
	`TAILQ_FOREACH
(
hódî
, 
ªq
->
ouçut_hódîs
, 
√xt
) {

527 
	`evbuf„r_add_¥ötf
(
evc⁄
->
ouçut_buf„r
, "%s: %s\r\n",

528 
hódî
->
key
, hódî->
vÆue
);

530 
	`evbuf„r_add
(
evc⁄
->
ouçut_buf„r
, "\r\n", 2);

532 i‡(
	`EVBUFFER_LENGTH
(
ªq
->
ouçut_buf„r
) > 0) {

537 
	`evbuf„r_add_buf„r
(
evc⁄
->
ouçut_buf„r
, 
ªq
->output_buffer);

539 
	}
}

544 
	$evhâp_ho°p‹tfûe
(*
uæ
, **
pho°
, 
u_sh‹t
 *
µ‹t
, **
pfûe
)

547 
ho°
[1024];

548 
fûe
[1024];

549 *
p
;

550 c⁄° *
p2
;

551 
Àn
;

552 
u_sh‹t
 
p‹t
;

554 
Àn
 = 
	`°æí
(
HTTP_PREFIX
);

555 i‡(
	`°∫ˇ£cmp
(
uæ
, 
HTTP_PREFIX
, 
Àn
))

558 
uæ
 +
Àn
;

561 i‡(
	`°æ˝y
(
ho°
, 
uæ
,  (host)) >= (host))

564 
p
 = 
	`°rchr
(
ho°
, '/');

565 i‡(
p
 !
NULL
) {

566 *
p
 = '\0';

567 
p2
 = 
p
 + 1;

569 
p2
 = 
NULL
;

571 i‡(
pfûe
 !
NULL
) {

573 i‡(
p2
 =
NULL
)

574 
p2
 = "";

575 
	`evutû_¢¥ötf
(
fûe
, (fûe), "/%s", 
p2
);

578 
p
 = 
	`°rchr
(
ho°
, ':');

579 i‡(
p
 !
NULL
) {

580 *
p
 = '\0';

581 
p‹t
 = 
	`©oi
(
p
 + 1);

583 i‡(
p‹t
 == 0)

586 
p‹t
 = 
HTTP_DEFAULTPORT
;

588 i‡(
pho°
 !
NULL
)

589 *
pho°
 = 
ho°
;

590 i‡(
µ‹t
 !
NULL
)

591 *
µ‹t
 = 
p‹t
;

592 i‡(
pfûe
 !
NULL
)

593 *
pfûe
 = 
fûe
;

596 
	}
}

599 
	$evhâp_c⁄√˘i⁄_öcomög_Áû
(
evhâp_ªque°
 *
ªq
,

600 
evhâp_c⁄√˘i⁄_îr‹
 
îr‹
)

602 
îr‹
) {

603 
EVCON_HTTP_TIMEOUT
:

604 
EVCON_HTTP_EOF
:

612 
EVCON_HTTP_INVALID_HEADER
:

615 i‡(
ªq
->
uri
) {

616 
	`‰ì
(
ªq
->
uri
);

617 
ªq
->
uri
 = 
NULL
;

624 (*
ªq
->
cb
)‘eq,Ñeq->
cb_¨g
);

628 
	}
}

631 
	$evhâp_c⁄√˘i⁄_Áû
(
evhâp_c⁄√˘i⁄
 *
evc⁄
,

632 
evhâp_c⁄√˘i⁄_îr‹
 
îr‹
)

634 
evhâp_ªque°
* 
ªq
 = 
	`TAILQ_FIRST
(&
evc⁄
->
ªque°s
);

635 (*
cb
)(
evhâp_ªque°
 *, *);

636 *
cb_¨g
;

637 
	`as£π
(
ªq
 !
NULL
);

639 i‡(
evc⁄
->
Êags
 & 
EVHTTP_CON_INCOMING
) {

648 i‡(
	`evhâp_c⁄√˘i⁄_öcomög_Áû
(
ªq
, 
îr‹
) == -1)

649 
	`evhâp_c⁄√˘i⁄_‰ì
(
evc⁄
);

654 
cb
 = 
ªq
->cb;

655 
cb_¨g
 = 
ªq
->cb_arg;

657 
	`TAILQ_REMOVE
(&
evc⁄
->
ªque°s
, 
ªq
, 
√xt
);

658 
	`evhâp_ªque°_‰ì
(
ªq
);

663 
	`evhâp_c⁄√˘i⁄_ª£t
(
evc⁄
);

666 i‡(
	`TAILQ_FIRST
(&
evc⁄
->
ªque°s
Ë!
NULL
)

667 
	`evhâp_c⁄√˘i⁄_c⁄√˘
(
evc⁄
);

670 i‡(
cb
 !
NULL
)

671 (*
cb
)(
NULL
, 
cb_¨g
);

672 
	}
}

675 
	$evhâp_wrôe
(
fd
, 
wh©
, *
¨g
)

677 
evhâp_c⁄√˘i⁄
 *
evc⁄
 = 
¨g
;

678 
n
;

680 i‡(
wh©
 =
EV_TIMEOUT
) {

681 
	`evhâp_c⁄√˘i⁄_Áû
(
evc⁄
, 
EVCON_HTTP_TIMEOUT
);

685 
n
 = 
	`evbuf„r_wrôe
(
evc⁄
->
ouçut_buf„r
, 
fd
);

686 i‡(
n
 == -1) {

687 
	`evít_debug
(("%s:Évbuf„r_wrôe", 
__func__
));

688 
	`evhâp_c⁄√˘i⁄_Áû
(
evc⁄
, 
EVCON_HTTP_EOF
);

692 i‡(
n
 == 0) {

693 
	`evít_debug
(("%s: wrôênŸhög", 
__func__
));

694 
	`evhâp_c⁄√˘i⁄_Áû
(
evc⁄
, 
EVCON_HTTP_EOF
);

698 i‡(
	`EVBUFFER_LENGTH
(
evc⁄
->
ouçut_buf„r
) != 0) {

699 
	`evhâp_add_evít
(&
evc⁄
->
ev
,

700 
evc⁄
->
timeout
, 
HTTP_WRITE_TIMEOUT
);

705 i‡(
evc⁄
->
cb
 !
NULL
)

706 (*
evc⁄
->
cb
)”vc⁄,Évc⁄->
cb_¨g
);

707 
	}
}

717 
	$evhâp_c⁄√˘i⁄_d⁄e
(
evhâp_c⁄√˘i⁄
 *
evc⁄
)

719 
evhâp_ªque°
 *
ªq
 = 
	`TAILQ_FIRST
(&
evc⁄
->
ªque°s
);

720 
c⁄_outgoög
 = 
evc⁄
->
Êags
 & 
EVHTTP_CON_OUTGOING
;

722 i‡(
c⁄_outgoög
) {

724 
√ed_˛o£
;

725 
	`TAILQ_REMOVE
(&
evc⁄
->
ªque°s
, 
ªq
, 
√xt
);

726 
ªq
->
evc⁄
 = 
NULL
;

728 
evc⁄
->
°©e
 = 
EVCON_IDLE
;

730 
√ed_˛o£
 =

731 
	`evhâp_is_c⁄√˘i⁄_˛o£
(
ªq
->
Êags
,Ñeq->
öput_hódîs
)||

732 
	`evhâp_is_c⁄√˘i⁄_˛o£
(
ªq
->
Êags
,Ñeq->
ouçut_hódîs
);

735 i‡(
√ed_˛o£
)

736 
	`evhâp_c⁄√˘i⁄_ª£t
(
evc⁄
);

738 i‡(
	`TAILQ_FIRST
(&
evc⁄
->
ªque°s
Ë!
NULL
) {

743 i‡(!
	`evhâp_c⁄√˘ed
(
evc⁄
))

744 
	`evhâp_c⁄√˘i⁄_c⁄√˘
(
evc⁄
);

746 
	`evhâp_ªque°_di•©ch
(
evc⁄
);

747 } i‡(!
√ed_˛o£
) {

752 
	`evhâp_c⁄√˘i⁄_°¨t_dëe˘˛o£
(
evc⁄
);

759 
evc⁄
->
°©e
 = 
EVCON_WRITING
;

763 (*
ªq
->
cb
)‘eq,Ñeq->
cb_¨g
);

766 i‡(
c⁄_outgoög
) {

767 
	`evhâp_ªque°_‰ì
(
ªq
);

769 
	}
}

783 
mesßge_ªad_°©us


784 
	$evhâp_h™dÀ_chunked_ªad
(
evhâp_ªque°
 *
ªq
, 
evbuf„r
 *
buf
)

786 
Àn
;

788 (
Àn
 = 
	`EVBUFFER_LENGTH
(
buf
)) > 0) {

789 i‡(
ªq
->
¡‹ód
 < 0) {

791 
ev_öt64_t
 
¡‹ód
;

792 *
p
 = 
	`evbuf„r_ªadlöe
(
buf
);

793 *
ídp
;

794 
îr‹
;

795 i‡(
p
 =
NULL
)

798 i‡(
	`°æí
(
p
) == 0) {

799 
	`‰ì
(
p
);

802 
¡‹ód
 = 
	`evutû_°πﬁl
(
p
, &
ídp
, 16);

803 
îr‹
 = (*
p
 == '\0' ||

804 (*
ídp
 != '\0' && *endp != ' ') ||

805 
¡‹ód
 < 0);

806 
	`‰ì
(
p
);

807 i‡(
îr‹
) {

809  (
DATA_CORRUPTED
);

811 
ªq
->
¡‹ód
 =Çtoread;

812 i‡(
ªq
->
¡‹ód
 == 0) {

814  (
ALL_DATA_READ
);

820 i‡(
Àn
 < 
ªq
->
¡‹ód
)

821  (
MORE_DATA_EXPECTED
);

824 
	`evbuf„r_add
(
ªq
->
öput_buf„r
,

825 
	`EVBUFFER_DATA
(
buf
), (
size_t
)
ªq
->
¡‹ód
);

826 
	`evbuf„r_døö
(
buf
, (
size_t
)
ªq
->
¡‹ód
);

827 
ªq
->
¡‹ód
 = -1;

828 i‡(
ªq
->
chunk_cb
 !
NULL
) {

829 (*
ªq
->
chunk_cb
)‘eq,Ñeq->
cb_¨g
);

830 
	`evbuf„r_døö
(
ªq
->
öput_buf„r
,

831 
	`EVBUFFER_LENGTH
(
ªq
->
öput_buf„r
));

835  (
MORE_DATA_EXPECTED
);

836 
	}
}

839 
	$evhâp_ªad_åaûî
(
evhâp_c⁄√˘i⁄
 *
evc⁄
, 
evhâp_ªque°
 *
ªq
)

841 
evbuf„r
 *
buf
 = 
evc⁄
->
öput_buf„r
;

843 
	`evhâp_∑r£_hódîs
(
ªq
, 
buf
)) {

844 
DATA_CORRUPTED
:

845 
	`evhâp_c⁄√˘i⁄_Áû
(
evc⁄
, 
EVCON_HTTP_INVALID_HEADER
);

847 
ALL_DATA_READ
:

848 
	`evít_dñ
(&
evc⁄
->
ev
);

849 
	`evhâp_c⁄√˘i⁄_d⁄e
(
evc⁄
);

851 
MORE_DATA_EXPECTED
:

853 
	`evhâp_add_evít
(&
evc⁄
->
ev
,Évc⁄->
timeout
,

854 
HTTP_READ_TIMEOUT
);

857 
	}
}

860 
	$evhâp_ªad_body
(
evhâp_c⁄√˘i⁄
 *
evc⁄
, 
evhâp_ªque°
 *
ªq
)

862 
evbuf„r
 *
buf
 = 
evc⁄
->
öput_buf„r
;

864 i‡(
ªq
->
chunked
) {

865 
	`evhâp_h™dÀ_chunked_ªad
(
ªq
, 
buf
)) {

866 
ALL_DATA_READ
:

868 
evc⁄
->
°©e
 = 
EVCON_READING_TRAILER
;

869 
	`evhâp_ªad_åaûî
(
evc⁄
, 
ªq
);

871 
DATA_CORRUPTED
:

873 
	`evhâp_c⁄√˘i⁄_Áû
(
evc⁄
,

874 
EVCON_HTTP_INVALID_HEADER
);

876 
REQUEST_CANCELED
:

878 
	`evhâp_ªque°_‰ì
(
ªq
);

880 
MORE_DATA_EXPECTED
:

884 } i‡(
ªq
->
¡‹ód
 < 0) {

886 
	`evbuf„r_add_buf„r
(
ªq
->
öput_buf„r
, 
buf
);

887 } i‡(
	`EVBUFFER_LENGTH
(
buf
Ë>
ªq
->
¡‹ód
) {

889 
	`evbuf„r_add
(
ªq
->
öput_buf„r
, 
	`EVBUFFER_DATA
(
buf
),

890 (
size_t
)
ªq
->
¡‹ód
);

891 
	`evbuf„r_døö
(
buf
, (
size_t
)
ªq
->
¡‹ód
);

892 
ªq
->
¡‹ód
 = 0;

893 
	`evhâp_c⁄√˘i⁄_d⁄e
(
evc⁄
);

897 
	`evít_£t
(&
evc⁄
->
ev
,Évc⁄->
fd
, 
EV_READ
, 
evhâp_ªad
,Évcon);

898 
	`EVHTTP_BASE_SET
(
evc⁄
, &evc⁄->
ev
);

899 
	`evhâp_add_evít
(&
evc⁄
->
ev
,Évc⁄->
timeout
, 
HTTP_READ_TIMEOUT
);

900 
	}
}

910 
	$evhâp_ªad
(
fd
, 
wh©
, *
¨g
)

912 
evhâp_c⁄√˘i⁄
 *
evc⁄
 = 
¨g
;

913 
evhâp_ªque°
 *
ªq
 = 
	`TAILQ_FIRST
(&
evc⁄
->
ªque°s
);

914 
evbuf„r
 *
buf
 = 
evc⁄
->
öput_buf„r
;

915 
n
, 
Àn
;

917 i‡(
wh©
 =
EV_TIMEOUT
) {

918 
	`evhâp_c⁄√˘i⁄_Áû
(
evc⁄
, 
EVCON_HTTP_TIMEOUT
);

921 
n
 = 
	`evbuf„r_ªad
(
buf
, 
fd
, -1);

922 
Àn
 = 
	`EVBUFFER_LENGTH
(
buf
);

923 
	`evít_debug
(("%s: gŸ %d o¿%d\n", 
__func__
, 
n
, 
fd
));

925 i‡(
n
 == -1) {

926 i‡(
î∫o
 !
EINTR
 &&Éºnÿ!
EAGAIN
) {

927 
	`evít_debug
(("%s:Évbuf„r_ªad", 
__func__
));

928 
	`evhâp_c⁄√˘i⁄_Áû
(
evc⁄
, 
EVCON_HTTP_EOF
);

930 
	`evhâp_add_evít
(&
evc⁄
->
ev
,Évc⁄->
timeout
,

931 
HTTP_READ_TIMEOUT
);

934 } i‡(
n
 == 0) {

936 
	`evhâp_c⁄√˘i⁄_d⁄e
(
evc⁄
);

940 
evc⁄
->
°©e
) {

941 
EVCON_READING_FIRSTLINE
:

942 
	`evhâp_ªad_fú°löe
(
evc⁄
, 
ªq
);

944 
EVCON_READING_HEADERS
:

945 
	`evhâp_ªad_hódî
(
evc⁄
, 
ªq
);

947 
EVCON_READING_BODY
:

948 
	`evhâp_ªad_body
(
evc⁄
, 
ªq
);

950 
EVCON_READING_TRAILER
:

951 
	`evhâp_ªad_åaûî
(
evc⁄
, 
ªq
);

953 
EVCON_DISCONNECTED
:

954 
EVCON_CONNECTING
:

955 
EVCON_IDLE
:

956 
EVCON_WRITING
:

958 
	`evít_îrx
(1, "%s: illegal connection state %d",

959 
__func__
, 
evc⁄
->
°©e
);

961 
	}
}

964 
	$evhâp_wrôe_c⁄√˘i⁄cb
(
evhâp_c⁄√˘i⁄
 *
evc⁄
, *
¨g
)

967 
evhâp_ªque°
 *
ªq
 = 
	`TAILQ_FIRST
(&
evc⁄
->
ªque°s
);

968 
	`as£π
(
ªq
 !
NULL
);

970 
	`as£π
(
evc⁄
->
°©e
 =
EVCON_WRITING
);

973 
ªq
->
köd
 = 
EVHTTP_RESPONSE
;

975 
	`evhâp_°¨t_ªad
(
evc⁄
);

976 
	}
}

983 
	$evhâp_c⁄√˘i⁄_‰ì
(
evhâp_c⁄√˘i⁄
 *
evc⁄
)

985 
evhâp_ªque°
 *
ªq
;

988 i‡(
evc⁄
->
fd
 != -1) {

989 i‡(
	`evhâp_c⁄√˘ed
(
evc⁄
Ë&&Évc⁄->
˛o£cb
 !
NULL
)

990 (*
evc⁄
->
˛o£cb
)”vc⁄,Évc⁄->
˛o£cb_¨g
);

994 (
ªq
 = 
	`TAILQ_FIRST
(&
evc⁄
->
ªque°s
)Ë!
NULL
) {

995 
	`TAILQ_REMOVE
(&
evc⁄
->
ªque°s
, 
ªq
, 
√xt
);

996 
	`evhâp_ªque°_‰ì
(
ªq
);

999 i‡(
evc⁄
->
hâp_£rvî
 !
NULL
) {

1000 
evhâp
 *
hâp
 = 
evc⁄
->
hâp_£rvî
;

1001 
	`TAILQ_REMOVE
(&
hâp
->
c⁄√˘i⁄s
, 
evc⁄
, 
√xt
);

1004 i‡(
	`evít_öôülized
(&
evc⁄
->
˛o£_ev
))

1005 
	`evít_dñ
(&
evc⁄
->
˛o£_ev
);

1007 i‡(
	`evít_öôülized
(&
evc⁄
->
ev
))

1008 
	`evít_dñ
(&
evc⁄
->
ev
);

1010 i‡(
evc⁄
->
fd
 != -1)

1011 
	`EVUTIL_CLOSESOCKET
(
evc⁄
->
fd
);

1013 i‡(
evc⁄
->
böd_addªss
 !
NULL
)

1014 
	`‰ì
(
evc⁄
->
böd_addªss
);

1016 i‡(
evc⁄
->
addªss
 !
NULL
)

1017 
	`‰ì
(
evc⁄
->
addªss
);

1019 i‡(
evc⁄
->
öput_buf„r
 !
NULL
)

1020 
	`evbuf„r_‰ì
(
evc⁄
->
öput_buf„r
);

1022 i‡(
evc⁄
->
ouçut_buf„r
 !
NULL
)

1023 
	`evbuf„r_‰ì
(
evc⁄
->
ouçut_buf„r
);

1025 
	`‰ì
(
evc⁄
);

1026 
	}
}

1029 
	$evhâp_c⁄√˘i⁄_£t_loˇl_addªss
(
evhâp_c⁄√˘i⁄
 *
evc⁄
,

1030 c⁄° *
addªss
)

1032 
	`as£π
(
evc⁄
->
°©e
 =
EVCON_DISCONNECTED
);

1033 i‡(
evc⁄
->
böd_addªss
)

1034 
	`‰ì
(
evc⁄
->
böd_addªss
);

1035 i‡((
evc⁄
->
böd_addªss
 = 
	`°rdup
(
addªss
)Ë=
NULL
)

1036 
	`evít_îr
(1, "%s: sådup", 
__func__
);

1037 
	}
}

1040 
	$evhâp_c⁄√˘i⁄_£t_loˇl_p‹t
(
evhâp_c⁄√˘i⁄
 *
evc⁄
,

1041 
p‹t
)

1043 
	`as£π
(
evc⁄
->
°©e
 =
EVCON_DISCONNECTED
);

1044 
evc⁄
->
böd_p‹t
 = 
p‹t
;

1045 
	}
}

1048 
	$evhâp_ªque°_di•©ch
(
evhâp_c⁄√˘i⁄
* 
evc⁄
)

1050 
evhâp_ªque°
 *
ªq
 = 
	`TAILQ_FIRST
(&
evc⁄
->
ªque°s
);

1053 i‡(
ªq
 =
NULL
)

1057 
	`evhâp_c⁄√˘i⁄_°›_dëe˘˛o£
(
evc⁄
);

1060 
	`as£π
(
evc⁄
->
°©e
 =
EVCON_IDLE
);

1062 
evc⁄
->
°©e
 = 
EVCON_WRITING
;

1065 
	`evhâp_make_hódî
(
evc⁄
, 
ªq
);

1067 
	`evhâp_wrôe_buf„r
(
evc⁄
, 
evhâp_wrôe_c⁄√˘i⁄cb
, 
NULL
);

1068 
	}
}

1072 
	$evhâp_c⁄√˘i⁄_ª£t
(
evhâp_c⁄√˘i⁄
 *
evc⁄
)

1074 i‡(
	`evít_öôülized
(&
evc⁄
->
ev
))

1075 
	`evít_dñ
(&
evc⁄
->
ev
);

1077 i‡(
evc⁄
->
fd
 != -1) {

1079 i‡(
	`evhâp_c⁄√˘ed
(
evc⁄
Ë&&Évc⁄->
˛o£cb
 !
NULL
)

1080 (*
evc⁄
->
˛o£cb
)”vc⁄,Évc⁄->
˛o£cb_¨g
);

1082 
	`EVUTIL_CLOSESOCKET
(
evc⁄
->
fd
);

1083 
evc⁄
->
fd
 = -1;

1085 
evc⁄
->
°©e
 = 
EVCON_DISCONNECTED
;

1087 
	`evbuf„r_døö
(
evc⁄
->
öput_buf„r
,

1088 
	`EVBUFFER_LENGTH
(
evc⁄
->
öput_buf„r
));

1089 
	`evbuf„r_døö
(
evc⁄
->
ouçut_buf„r
,

1090 
	`EVBUFFER_LENGTH
(
evc⁄
->
ouçut_buf„r
));

1091 
	}
}

1094 
	$evhâp_dëe˘_˛o£_cb
(
fd
, 
wh©
, *
¨g
)

1096 
evhâp_c⁄√˘i⁄
 *
evc⁄
 = 
¨g
;

1097 
	`evhâp_c⁄√˘i⁄_ª£t
(
evc⁄
);

1098 
	}
}

1101 
	$evhâp_c⁄√˘i⁄_°¨t_dëe˘˛o£
(
evhâp_c⁄√˘i⁄
 *
evc⁄
)

1103 
evc⁄
->
Êags
 |
EVHTTP_CON_CLOSEDETECT
;

1105 i‡(
	`evít_öôülized
(&
evc⁄
->
˛o£_ev
))

1106 
	`evít_dñ
(&
evc⁄
->
˛o£_ev
);

1107 
	`evít_£t
(&
evc⁄
->
˛o£_ev
,Évc⁄->
fd
, 
EV_READ
,

1108 
evhâp_dëe˘_˛o£_cb
, 
evc⁄
);

1109 
	`EVHTTP_BASE_SET
(
evc⁄
, &evc⁄->
˛o£_ev
);

1110 
	`evít_add
(&
evc⁄
->
˛o£_ev
, 
NULL
);

1111 
	}
}

1114 
	$evhâp_c⁄√˘i⁄_°›_dëe˘˛o£
(
evhâp_c⁄√˘i⁄
 *
evc⁄
)

1116 
evc⁄
->
Êags
 &~
EVHTTP_CON_CLOSEDETECT
;

1117 
	`evít_dñ
(&
evc⁄
->
˛o£_ev
);

1118 
	}
}

1121 
	$evhâp_c⁄√˘i⁄_ªåy
(
fd
, 
wh©
, *
¨g
)

1123 
evhâp_c⁄√˘i⁄
 *
evc⁄
 = 
¨g
;

1125 
evc⁄
->
°©e
 = 
EVCON_DISCONNECTED
;

1126 
	`evhâp_c⁄√˘i⁄_c⁄√˘
(
evc⁄
);

1127 
	}
}

1134 
	$evhâp_c⁄√˘i⁄cb
(
fd
, 
wh©
, *
¨g
)

1136 
evhâp_c⁄√˘i⁄
 *
evc⁄
 = 
¨g
;

1137 
îr‹
;

1138 
sockÀn_t
 
îrsz
 = (
îr‹
);

1140 i‡(
wh©
 =
EV_TIMEOUT
) {

1141 
	`evít_debug
(("%s: connectionÅimeout for \"%s:%d\" on %d",

1142 
__func__
, 
evc⁄
->
addªss
,Évc⁄->
p‹t
,Évc⁄->
fd
));

1143 
˛ónup
;

1147 i‡(
	`gësock›t
(
evc⁄
->
fd
, 
SOL_SOCKET
, 
SO_ERROR
, (*)&
îr‹
,

1148 &
îrsz
) == -1) {

1149 
	`evít_debug
(("%s: getsockopt for \"%s:%d\" on %d",

1150 
__func__
, 
evc⁄
->
addªss
,Évc⁄->
p‹t
,Évc⁄->
fd
));

1151 
˛ónup
;

1154 i‡(
îr‹
) {

1155 
	`evít_debug
(("%s: connect failed for \"%s:%d\" on %d: %s",

1156 
__func__
, 
evc⁄
->
addªss
,Évc⁄->
p‹t
,Évc⁄->
fd
,

1157 
	`°ªº‹
(
îr‹
)));

1158 
˛ónup
;

1162 
	`evít_debug
(("%s: connectedÅo \"%s:%d\" on %d\n",

1163 
__func__
, 
evc⁄
->
addªss
,Évc⁄->
p‹t
,Évc⁄->
fd
));

1166 
evc⁄
->
ªåy_˙t
 = 0;

1167 
evc⁄
->
°©e
 = 
EVCON_IDLE
;

1170 
	`evhâp_ªque°_di•©ch
(
evc⁄
);

1173 
˛ónup
:

1174 i‡(
evc⁄
->
ªåy_max
 < 0 ||Évc⁄->
ªåy_˙t
 <Évcon->retry_max) {

1175 
	`evtimî_£t
(&
evc⁄
->
ev
, 
evhâp_c⁄√˘i⁄_ªåy
,Évcon);

1176 
	`EVHTTP_BASE_SET
(
evc⁄
, &evc⁄->
ev
);

1177 
	`evhâp_add_evít
(&
evc⁄
->
ev
, 
	`MIN
(3600, 2 <<Évc⁄->
ªåy_˙t
),

1178 
HTTP_CONNECT_TIMEOUT
);

1179 
evc⁄
->
ªåy_˙t
++;

1182 
	`evhâp_c⁄√˘i⁄_ª£t
(
evc⁄
);

1185 
	`TAILQ_FIRST
(&
evc⁄
->
ªque°s
Ë!
NULL
) {

1186 
evhâp_ªque°
 *
ªque°
 = 
	`TAILQ_FIRST
(&
evc⁄
->
ªque°s
);

1187 
	`TAILQ_REMOVE
(&
evc⁄
->
ªque°s
, 
ªque°
, 
√xt
);

1188 
ªque°
->
evc⁄
 = 
NULL
;

1191 
ªque°
->
	`cb
‘eque°,Ñeque°->
cb_¨g
);

1192 
	`evhâp_ªque°_‰ì
(
ªque°
);

1194 
	}
}

1201 
	$evhâp_vÆid_ª•⁄£_code
(
code
)

1203 i‡(
code
 == 0)

1207 
	}
}

1212 
	$evhâp_∑r£_ª•⁄£_löe
(
evhâp_ªque°
 *
ªq
, *
löe
)

1214 *
¥Ÿocﬁ
;

1215 *
numbî
;

1216 *
ªadabÀ
;

1218 
¥Ÿocﬁ
 = 
	`°r£p
(&
löe
, " ");

1219 i‡(
löe
 =
NULL
)

1221 
numbî
 = 
	`°r£p
(&
löe
, " ");

1222 i‡(
löe
 =
NULL
)

1224 
ªadabÀ
 = 
löe
;

1226 i‡(
	`°rcmp
(
¥Ÿocﬁ
, "HTTP/1.0") == 0) {

1227 
ªq
->
maj‹
 = 1;

1228 
ªq
->
mö‹
 = 0;

1229 } i‡(
	`°rcmp
(
¥Ÿocﬁ
, "HTTP/1.1") == 0) {

1230 
ªq
->
maj‹
 = 1;

1231 
ªq
->
mö‹
 = 1;

1233 
	`evít_debug
(("%s: badÖrotocol \"%s\"",

1234 
__func__
, 
¥Ÿocﬁ
));

1238 
ªq
->
ª•⁄£_code
 = 
	`©oi
(
numbî
);

1239 i‡(!
	`evhâp_vÆid_ª•⁄£_code
(
ªq
->
ª•⁄£_code
)) {

1240 
	`evít_debug
(("%s: badÑesponse code \"%s\"",

1241 
__func__
, 
numbî
));

1245 i‡((
ªq
->
ª•⁄£_code_löe
 = 
	`°rdup
(
ªadabÀ
)Ë=
NULL
)

1246 
	`evít_îr
(1, "%s: sådup", 
__func__
);

1249 
	}
}

1254 
	$evhâp_∑r£_ªque°_löe
(
evhâp_ªque°
 *
ªq
, *
löe
)

1256 *
mëhod
;

1257 *
uri
;

1258 *
vîsi⁄
;

1261 
mëhod
 = 
	`°r£p
(&
löe
, " ");

1262 i‡(
löe
 =
NULL
)

1264 
uri
 = 
	`°r£p
(&
löe
, " ");

1265 i‡(
löe
 =
NULL
)

1267 
vîsi⁄
 = 
	`°r£p
(&
löe
, " ");

1268 i‡(
löe
 !
NULL
)

1272 i‡(
	`°rcmp
(
mëhod
, "GET") == 0) {

1273 
ªq
->
ty≥
 = 
EVHTTP_REQ_GET
;

1274 } i‡(
	`°rcmp
(
mëhod
, "POST") == 0) {

1275 
ªq
->
ty≥
 = 
EVHTTP_REQ_POST
;

1276 } i‡(
	`°rcmp
(
mëhod
, "HEAD") == 0) {

1277 
ªq
->
ty≥
 = 
EVHTTP_REQ_HEAD
;

1279 
	`evít_debug
(("%s: bad method %s onÑequest %p from %s",

1280 
__func__
, 
mëhod
, 
ªq
,Ñeq->
ªmŸe_ho°
));

1284 i‡(
	`°rcmp
(
vîsi⁄
, "HTTP/1.0") == 0) {

1285 
ªq
->
maj‹
 = 1;

1286 
ªq
->
mö‹
 = 0;

1287 } i‡(
	`°rcmp
(
vîsi⁄
, "HTTP/1.1") == 0) {

1288 
ªq
->
maj‹
 = 1;

1289 
ªq
->
mö‹
 = 1;

1291 
	`evít_debug
(("%s: bad version %s onÑequest %p from %s",

1292 
__func__
, 
vîsi⁄
, 
ªq
,Ñeq->
ªmŸe_ho°
));

1296 i‡((
ªq
->
uri
 = 
	`°rdup
(uri)Ë=
NULL
) {

1297 
	`evít_debug
(("%s:Évhâp_decode_uri", 
__func__
));

1302 i‡(
	`°æí
(
ªq
->
uri
) > 0 &&Ñeq->uri[0] != '/')

1303 
ªq
->
Êags
 |
EVHTTP_PROXY_REQUEST
;

1306 
	}
}

1309 
	$evhâp_föd_hódî
(c⁄° 
evkeyvÆq
 *
hódîs
, c⁄° *
key
)

1311 
evkeyvÆ
 *
hódî
;

1313 
	`TAILQ_FOREACH
(
hódî
, 
hódîs
, 
√xt
) {

1314 i‡(
	`°rˇ£cmp
(
hódî
->
key
, key) == 0)

1315  (
hódî
->
vÆue
);

1318  (
NULL
);

1319 
	}
}

1322 
	$evhâp_˛ór_hódîs
(
evkeyvÆq
 *
hódîs
)

1324 
evkeyvÆ
 *
hódî
;

1326 
hódî
 = 
	`TAILQ_FIRST
(
hódîs
);

1327 
hódî
 !
NULL
;

1328 
hódî
 = 
	`TAILQ_FIRST
(
hódîs
)) {

1329 
	`TAILQ_REMOVE
(
hódîs
, 
hódî
, 
√xt
);

1330 
	`‰ì
(
hódî
->
key
);

1331 
	`‰ì
(
hódî
->
vÆue
);

1332 
	`‰ì
(
hódî
);

1334 
	}
}

1342 
	$evhâp_ªmove_hódî
(
evkeyvÆq
 *
hódîs
, c⁄° *
key
)

1344 
evkeyvÆ
 *
hódî
;

1346 
	`TAILQ_FOREACH
(
hódî
, 
hódîs
, 
√xt
) {

1347 i‡(
	`°rˇ£cmp
(
hódî
->
key
, key) == 0)

1351 i‡(
hódî
 =
NULL
)

1355 
	`TAILQ_REMOVE
(
hódîs
, 
hódî
, 
√xt
);

1356 
	`‰ì
(
hódî
->
key
);

1357 
	`‰ì
(
hódî
->
vÆue
);

1358 
	`‰ì
(
hódî
);

1361 
	}
}

1364 
	$evhâp_hódî_is_vÆid_vÆue
(c⁄° *
vÆue
)

1366 c⁄° *
p
 = 
vÆue
;

1368 (
p
 = 
	`°Ωbrk
’, "\r\n")Ë!
NULL
) {

1370 
p
 +
	`°r•n
(p, "\r\n");

1372 i‡(*
p
 != ' ' && *p != '\t')

1376 
	}
}

1379 
	$evhâp_add_hódî
(
evkeyvÆq
 *
hódîs
,

1380 c⁄° *
key
, c⁄° *
vÆue
)

1382 
	`evít_debug
(("%s: key: %†vÆ: %s\n", 
__func__
, 
key
, 
vÆue
));

1384 i‡(
	`°rchr
(
key
, '\r'Ë!
NULL
 || strchr(key, '\n') != NULL) {

1386 
	`evít_debug
(("%s: dr›pög iŒegÆ hódî key\n", 
__func__
));

1390 i‡(!
	`evhâp_hódî_is_vÆid_vÆue
(
vÆue
)) {

1391 
	`evít_debug
(("%s: dr›pög iŒegÆ hódî vÆue\n", 
__func__
));

1395  (
	`evhâp_add_hódî_öã∫Æ
(
hódîs
, 
key
, 
vÆue
));

1396 
	}
}

1399 
	$evhâp_add_hódî_öã∫Æ
(
evkeyvÆq
 *
hódîs
,

1400 c⁄° *
key
, c⁄° *
vÆue
)

1402 
evkeyvÆ
 *
hódî
 = 
	`ˇŒoc
(1, (evkeyval));

1403 i‡(
hódî
 =
NULL
) {

1404 
	`evít_w¨n
("%s: cÆloc", 
__func__
);

1407 i‡((
hódî
->
key
 = 
	`°rdup
(key)Ë=
NULL
) {

1408 
	`‰ì
(
hódî
);

1409 
	`evít_w¨n
("%s: sådup", 
__func__
);

1412 i‡((
hódî
->
vÆue
 = 
	`°rdup
(vÆue)Ë=
NULL
) {

1413 
	`‰ì
(
hódî
->
key
);

1414 
	`‰ì
(
hódî
);

1415 
	`evít_w¨n
("%s: sådup", 
__func__
);

1419 
	`TAILQ_INSERT_TAIL
(
hódîs
, 
hódî
, 
√xt
);

1422 
	}
}

1434 
mesßge_ªad_°©us


1435 
	$evhâp_∑r£_fú°löe
(
evhâp_ªque°
 *
ªq
, 
evbuf„r
 *
buf„r
)

1437 *
löe
;

1438 
mesßge_ªad_°©us
 
°©us
 = 
ALL_DATA_READ
;

1440 
löe
 = 
	`evbuf„r_ªadlöe
(
buf„r
);

1441 i‡(
löe
 =
NULL
)

1442  (
MORE_DATA_EXPECTED
);

1444 
ªq
->
köd
) {

1445 
EVHTTP_REQUEST
:

1446 i‡(
	`evhâp_∑r£_ªque°_löe
(
ªq
, 
löe
) == -1)

1447 
°©us
 = 
DATA_CORRUPTED
;

1449 
EVHTTP_RESPONSE
:

1450 i‡(
	`evhâp_∑r£_ª•⁄£_löe
(
ªq
, 
löe
) == -1)

1451 
°©us
 = 
DATA_CORRUPTED
;

1454 
°©us
 = 
DATA_CORRUPTED
;

1457 
	`‰ì
(
löe
);

1458  (
°©us
);

1459 
	}
}

1462 
	$evhâp_≠≥nd_to_œ°_hódî
(
evkeyvÆq
 *
hódîs
, c⁄° *
löe
)

1464 
evkeyvÆ
 *
hódî
 = 
	`TAILQ_LAST
(
hódîs
, 
evkeyvÆq
);

1465 *
√wvÆ
;

1466 
size_t
 
ﬁd_Àn
, 
löe_Àn
;

1468 i‡(
hódî
 =
NULL
)

1471 
ﬁd_Àn
 = 
	`°æí
(
hódî
->
vÆue
);

1472 
löe_Àn
 = 
	`°æí
(
löe
);

1474 
√wvÆ
 = 
	`ªÆloc
(
hódî
->
vÆue
, 
ﬁd_Àn
 + 
löe_Àn
 + 1);

1475 i‡(
√wvÆ
 =
NULL
)

1478 
	`mem˝y
(
√wvÆ
 + 
ﬁd_Àn
, 
löe
, 
löe_Àn
 + 1);

1479 
hódî
->
vÆue
 = 
√wvÆ
;

1482 
	}
}

1484 
mesßge_ªad_°©us


1485 
	$evhâp_∑r£_hódîs
(
evhâp_ªque°
 *
ªq
, 
evbuf„r
* 
buf„r
)

1487 *
löe
;

1488 
mesßge_ªad_°©us
 
°©us
 = 
MORE_DATA_EXPECTED
;

1490 
evkeyvÆq
* 
hódîs
 = 
ªq
->
öput_hódîs
;

1491 (
löe
 = 
	`evbuf„r_ªadlöe
(
buf„r
))

1492 !
NULL
) {

1493 *
skey
, *
svÆue
;

1495 i‡(*
löe
 == '\0') {

1496 
°©us
 = 
ALL_DATA_READ
;

1497 
	`‰ì
(
löe
);

1502 i‡(*
löe
 == ' ' || *line == '\t') {

1503 i‡(
	`evhâp_≠≥nd_to_œ°_hódî
(
hódîs
, 
löe
) == -1)

1504 
îr‹
;

1505 
	`‰ì
(
löe
);

1510 
svÆue
 = 
löe
;

1511 
skey
 = 
	`°r£p
(&
svÆue
, ":");

1512 i‡(
svÆue
 =
NULL
)

1513 
îr‹
;

1515 
svÆue
 +
	`°r•n
(svalue, " ");

1517 i‡(
	`evhâp_add_hódî
(
hódîs
, 
skey
, 
svÆue
) == -1)

1518 
îr‹
;

1520 
	`‰ì
(
löe
);

1523  (
°©us
);

1525 
îr‹
:

1526 
	`‰ì
(
löe
);

1527  (
DATA_CORRUPTED
);

1528 
	}
}

1531 
	$evhâp_gë_body_Àngth
(
evhâp_ªque°
 *
ªq
)

1533 
evkeyvÆq
 *
hódîs
 = 
ªq
->
öput_hódîs
;

1534 c⁄° *
c⁄ã¡_Àngth
;

1535 c⁄° *
c⁄√˘i⁄
;

1537 
c⁄ã¡_Àngth
 = 
	`evhâp_föd_hódî
(
hódîs
, "Content-Length");

1538 
c⁄√˘i⁄
 = 
	`evhâp_föd_hódî
(
hódîs
, "Connection");

1540 i‡(
c⁄ã¡_Àngth
 =
NULL
 && 
c⁄√˘i⁄
 == NULL)

1541 
ªq
->
¡‹ód
 = -1;

1542 i‡(
c⁄ã¡_Àngth
 =
NULL
 &&

1543 
	`°rˇ£cmp
(
c⁄√˘i⁄
, "Close") != 0) {

1545 
	`evít_w¨nx
("%s: we gotÇo contentÜength, butÅhe "

1547 
__func__
, 
c⁄√˘i⁄
);

1549 } i‡(
c⁄ã¡_Àngth
 =
NULL
) {

1550 
ªq
->
¡‹ód
 = -1;

1552 *
ídp
;

1553 
ev_öt64_t
 
¡‹ód
 = 
	`evutû_°πﬁl
(
c⁄ã¡_Àngth
, &
ídp
, 10);

1554 i‡(*
c⁄ã¡_Àngth
 ='\0' || *
ídp
 !'\0' || 
¡‹ód
 < 0) {

1555 
	`evít_debug
(("%s: illegal contentÜength: %s",

1556 
__func__
, 
c⁄ã¡_Àngth
));

1559 
ªq
->
¡‹ód
 =Çtoread;

1562 
	`evít_debug
(("%s: bytesÅoÑead: %lld (in buffer %ld)\n",

1563 
__func__
, 
ªq
->
¡‹ód
,

1564 
	`EVBUFFER_LENGTH
(
ªq
->
evc⁄
->
öput_buf„r
)));

1567 
	}
}

1570 
	$evhâp_gë_body
(
evhâp_c⁄√˘i⁄
 *
evc⁄
, 
evhâp_ªque°
 *
ªq
)

1572 c⁄° *
x„r_íc
;

1575 i‡(
ªq
->
köd
 =
EVHTTP_REQUEST
 &&Ñeq->
ty≥
 !
EVHTTP_REQ_POST
) {

1576 
	`evhâp_c⁄√˘i⁄_d⁄e
(
evc⁄
);

1579 
evc⁄
->
°©e
 = 
EVCON_READING_BODY
;

1580 
x„r_íc
 = 
	`evhâp_föd_hódî
(
ªq
->
öput_hódîs
, "Transfer-Encoding");

1581 i‡(
x„r_íc
 !
NULL
 && 
	`°rˇ£cmp
(xfer_enc, "chunked") == 0) {

1582 
ªq
->
chunked
 = 1;

1583 
ªq
->
¡‹ód
 = -1;

1585 i‡(
	`evhâp_gë_body_Àngth
(
ªq
) == -1) {

1586 
	`evhâp_c⁄√˘i⁄_Áû
(
evc⁄
,

1587 
EVCON_HTTP_INVALID_HEADER
);

1591 
	`evhâp_ªad_body
(
evc⁄
, 
ªq
);

1592 
	}
}

1595 
	$evhâp_ªad_fú°löe
(
evhâp_c⁄√˘i⁄
 *
evc⁄
,

1596 
evhâp_ªque°
 *
ªq
)

1598 
mesßge_ªad_°©us
 
ªs
;

1600 
ªs
 = 
	`evhâp_∑r£_fú°löe
(
ªq
, 
evc⁄
->
öput_buf„r
);

1601 i‡(
ªs
 =
DATA_CORRUPTED
) {

1603 
	`evít_debug
(("%s: bad headerÜines on %d\n",

1604 
__func__
, 
evc⁄
->
fd
));

1605 
	`evhâp_c⁄√˘i⁄_Áû
(
evc⁄
, 
EVCON_HTTP_INVALID_HEADER
);

1607 } i‡(
ªs
 =
MORE_DATA_EXPECTED
) {

1609 
	`evhâp_add_evít
(&
evc⁄
->
ev
,

1610 
evc⁄
->
timeout
, 
HTTP_READ_TIMEOUT
);

1614 
evc⁄
->
°©e
 = 
EVCON_READING_HEADERS
;

1615 
	`evhâp_ªad_hódî
(
evc⁄
, 
ªq
);

1616 
	}
}

1619 
	$evhâp_ªad_hódî
(
evhâp_c⁄√˘i⁄
 *
evc⁄
, 
evhâp_ªque°
 *
ªq
)

1621 
mesßge_ªad_°©us
 
ªs
;

1622 
fd
 = 
evc⁄
->fd;

1624 
ªs
 = 
	`evhâp_∑r£_hódîs
(
ªq
, 
evc⁄
->
öput_buf„r
);

1625 i‡(
ªs
 =
DATA_CORRUPTED
) {

1627 
	`evít_debug
(("%s: bad hódîÜöe†⁄ %d\n", 
__func__
, 
fd
));

1628 
	`evhâp_c⁄√˘i⁄_Áû
(
evc⁄
, 
EVCON_HTTP_INVALID_HEADER
);

1630 } i‡(
ªs
 =
MORE_DATA_EXPECTED
) {

1632 
	`evhâp_add_evít
(&
evc⁄
->
ev
,

1633 
evc⁄
->
timeout
, 
HTTP_READ_TIMEOUT
);

1638 
ªq
->
köd
) {

1639 
EVHTTP_REQUEST
:

1640 
	`evít_debug
(("%s: checking forÖost data on %d\n",

1641 
__func__
, 
fd
));

1642 
	`evhâp_gë_body
(
evc⁄
, 
ªq
);

1645 
EVHTTP_RESPONSE
:

1646 i‡(
ªq
->
ª•⁄£_code
 =
HTTP_NOCONTENT
 ||

1647 
ªq
->
ª•⁄£_code
 =
HTTP_NOTMODIFIED
 ||

1648 (
ªq
->
ª•⁄£_code
 >= 100 &&Ñeq->response_code < 200)) {

1649 
	`evít_debug
(("%s: skipping body for code %d\n",

1650 
__func__
, 
ªq
->
ª•⁄£_code
));

1651 
	`evhâp_c⁄√˘i⁄_d⁄e
(
evc⁄
);

1653 
	`evít_debug
(("%s: start ofÑead body for %s on %d\n",

1654 
__func__
, 
ªq
->
ªmŸe_ho°
, 
fd
));

1655 
	`evhâp_gë_body
(
evc⁄
, 
ªq
);

1660 
	`evít_w¨nx
("%s: bad hódî o¿%d", 
__func__
, 
fd
);

1661 
	`evhâp_c⁄√˘i⁄_Áû
(
evc⁄
, 
EVCON_HTTP_INVALID_HEADER
);

1664 
	}
}

1676 
evhâp_c⁄√˘i⁄
 *

1677 
	$evhâp_c⁄√˘i⁄_√w
(c⁄° *
addªss
, 
p‹t
)

1679 
evhâp_c⁄√˘i⁄
 *
evc⁄
 = 
NULL
;

1681 
	`evít_debug
(("Aâem±ög c⁄√˘i⁄Åÿ%s:%d\n", 
addªss
, 
p‹t
));

1683 i‡((
evc⁄
 = 
	`ˇŒoc
(1, (
evhâp_c⁄√˘i⁄
))Ë=
NULL
) {

1684 
	`evít_w¨n
("%s: cÆlo¯Áûed", 
__func__
);

1685 
îr‹
;

1688 
evc⁄
->
fd
 = -1;

1689 
evc⁄
->
p‹t
 =Öort;

1691 
evc⁄
->
timeout
 = -1;

1692 
evc⁄
->
ªåy_˙t
 =Évc⁄->
ªåy_max
 = 0;

1694 i‡((
evc⁄
->
addªss
 = 
	`°rdup
◊ddªss)Ë=
NULL
) {

1695 
	`evít_w¨n
("%s: sådu∞Áûed", 
__func__
);

1696 
îr‹
;

1699 i‡((
evc⁄
->
öput_buf„r
 = 
	`evbuf„r_√w
()Ë=
NULL
) {

1700 
	`evít_w¨n
("%s:Évbuf„r_√w faûed", 
__func__
);

1701 
îr‹
;

1704 i‡((
evc⁄
->
ouçut_buf„r
 = 
	`evbuf„r_√w
()Ë=
NULL
) {

1705 
	`evít_w¨n
("%s:Évbuf„r_√w faûed", 
__func__
);

1706 
îr‹
;

1709 
evc⁄
->
°©e
 = 
EVCON_DISCONNECTED
;

1710 
	`TAILQ_INIT
(&
evc⁄
->
ªque°s
);

1712  (
evc⁄
);

1714 
îr‹
:

1715 i‡(
evc⁄
 !
NULL
)

1716 
	`evhâp_c⁄√˘i⁄_‰ì
(
evc⁄
);

1717  (
NULL
);

1718 
	}
}

1720 
	$evhâp_c⁄√˘i⁄_£t_ba£
(
evhâp_c⁄√˘i⁄
 *
evc⁄
,

1721 
evít_ba£
 *
ba£
)

1723 
	`as£π
(
evc⁄
->
ba£
 =
NULL
);

1724 
	`as£π
(
evc⁄
->
°©e
 =
EVCON_DISCONNECTED
);

1725 
evc⁄
->
ba£
 = base;

1726 
	}
}

1729 
	$evhâp_c⁄√˘i⁄_£t_timeout
(
evhâp_c⁄√˘i⁄
 *
evc⁄
,

1730 
timeout_ö_£cs
)

1732 
evc⁄
->
timeout
 = 
timeout_ö_£cs
;

1733 
	}
}

1736 
	$evhâp_c⁄√˘i⁄_£t_ªåõs
(
evhâp_c⁄√˘i⁄
 *
evc⁄
,

1737 
ªåy_max
)

1739 
evc⁄
->
ªåy_max
 =Ñetry_max;

1740 
	}
}

1743 
evhâp_c⁄√˘i⁄_£t_˛o£cb
(
evhâp_c⁄√˘i⁄
 *
evc⁄
,

1744 (*
cb
)(
evhâp_c⁄√˘i⁄
 *, *), *
cb¨g
)

1746 
evc⁄
->
˛o£cb
 = 
cb
;

1747 
evc⁄
->
˛o£cb_¨g
 = 
cb¨g
;

1748 
	}
}

1751 
	$evhâp_c⁄√˘i⁄_gë_≥î
(
evhâp_c⁄√˘i⁄
 *
evc⁄
,

1752 **
addªss
, 
u_sh‹t
 *
p‹t
)

1754 *
addªss
 = 
evc⁄
->address;

1755 *
p‹t
 = 
evc⁄
->port;

1756 
	}
}

1759 
	$evhâp_c⁄√˘i⁄_c⁄√˘
(
evhâp_c⁄√˘i⁄
 *
evc⁄
)

1761 i‡(
evc⁄
->
°©e
 =
EVCON_CONNECTING
)

1764 
	`evhâp_c⁄√˘i⁄_ª£t
(
evc⁄
);

1766 
	`as£π
(!(
evc⁄
->
Êags
 & 
EVHTTP_CON_INCOMING
));

1767 
evc⁄
->
Êags
 |
EVHTTP_CON_OUTGOING
;

1769 
evc⁄
->
fd
 = 
	`böd_sockë
(

1770 
evc⁄
->
böd_addªss
,Évc⁄->
böd_p‹t
, 0 );

1771 i‡(
evc⁄
->
fd
 == -1) {

1772 
	`evít_debug
(("%s: failedÅo bindÅo \"%s\"",

1773 
__func__
, 
evc⁄
->
böd_addªss
));

1777 i‡(
	`sockë_c⁄√˘
(
evc⁄
->
fd
,Évc⁄->
addªss
,Évc⁄->
p‹t
) == -1) {

1778 
	`EVUTIL_CLOSESOCKET
(
evc⁄
->
fd
);Évcon->fd = -1;

1783 
	`evít_£t
(&
evc⁄
->
ev
,Évc⁄->
fd
, 
EV_WRITE
, 
evhâp_c⁄√˘i⁄cb
,Évcon);

1784 
	`EVHTTP_BASE_SET
(
evc⁄
, &evc⁄->
ev
);

1785 
	`evhâp_add_evít
(&
evc⁄
->
ev
,Évc⁄->
timeout
, 
HTTP_CONNECT_TIMEOUT
);

1787 
evc⁄
->
°©e
 = 
EVCON_CONNECTING
;

1790 
	}
}

1799 
	$evhâp_make_ªque°
(
evhâp_c⁄√˘i⁄
 *
evc⁄
,

1800 
evhâp_ªque°
 *
ªq
,

1801 
evhâp_cmd_ty≥
 
ty≥
, c⁄° *
uri
)

1804 
ªq
->
köd
 = 
EVHTTP_REQUEST
;

1805 
ªq
->
ty≥
 =Åype;

1806 i‡(
ªq
->
uri
 !
NULL
)

1807 
	`‰ì
(
ªq
->
uri
);

1808 i‡((
ªq
->
uri
 = 
	`°rdup
(uri)Ë=
NULL
)

1809 
	`evít_îr
(1, "%s: sådup", 
__func__
);

1812 i‡(!
ªq
->
maj‹
 && !ªq->
mö‹
) {

1813 
ªq
->
maj‹
 = 1;

1814 
ªq
->
mö‹
 = 1;

1817 
	`as£π
(
ªq
->
evc⁄
 =
NULL
);

1818 
ªq
->
evc⁄
 =Évcon;

1819 
	`as£π
(!(
ªq
->
Êags
 & 
EVHTTP_REQ_OWN_CONNECTION
));

1821 
	`TAILQ_INSERT_TAIL
(&
evc⁄
->
ªque°s
, 
ªq
, 
√xt
);

1824 i‡(!
	`evhâp_c⁄√˘ed
(
evc⁄
))

1825  (
	`evhâp_c⁄√˘i⁄_c⁄√˘
(
evc⁄
));

1832 i‡(
	`TAILQ_FIRST
(&
evc⁄
->
ªque°s
Ë=
ªq
)

1833 
	`evhâp_ªque°_di•©ch
(
evc⁄
);

1836 
	}
}

1844 
	$evhâp_°¨t_ªad
(
evhâp_c⁄√˘i⁄
 *
evc⁄
)

1847 i‡(
	`evít_öôülized
(&
evc⁄
->
ev
))

1848 
	`evít_dñ
(&
evc⁄
->
ev
);

1849 
	`evít_£t
(&
evc⁄
->
ev
,Évc⁄->
fd
, 
EV_READ
, 
evhâp_ªad
,Évcon);

1850 
	`EVHTTP_BASE_SET
(
evc⁄
, &evc⁄->
ev
);

1852 
	`evhâp_add_evít
(&
evc⁄
->
ev
,Évc⁄->
timeout
, 
HTTP_READ_TIMEOUT
);

1853 
evc⁄
->
°©e
 = 
EVCON_READING_FIRSTLINE
;

1854 
	}
}

1857 
	$evhâp_£nd_d⁄e
(
evhâp_c⁄√˘i⁄
 *
evc⁄
, *
¨g
)

1859 
√ed_˛o£
;

1860 
evhâp_ªque°
 *
ªq
 = 
	`TAILQ_FIRST
(&
evc⁄
->
ªque°s
);

1861 
	`TAILQ_REMOVE
(&
evc⁄
->
ªque°s
, 
ªq
, 
√xt
);

1864 
	`evhâp_c⁄√˘i⁄_°›_dëe˘˛o£
(
evc⁄
);

1866 
√ed_˛o£
 =

1867 (
ªq
->
mö‹
 == 0 &&

1868 !
	`evhâp_is_c⁄√˘i⁄_kì∑live
(
ªq
->
öput_hódîs
))||

1869 
	`evhâp_is_c⁄√˘i⁄_˛o£
(
ªq
->
Êags
,Ñeq->
öput_hódîs
) ||

1870 
	`evhâp_is_c⁄√˘i⁄_˛o£
(
ªq
->
Êags
,Ñeq->
ouçut_hódîs
);

1872 
	`as£π
(
ªq
->
Êags
 & 
EVHTTP_REQ_OWN_CONNECTION
);

1873 
	`evhâp_ªque°_‰ì
(
ªq
);

1875 i‡(
√ed_˛o£
) {

1876 
	`evhâp_c⁄√˘i⁄_‰ì
(
evc⁄
);

1881 i‡(
	`evhâp_assocüã_√w_ªque°_wôh_c⁄√˘i⁄
(
evc⁄
) == -1)

1882 
	`evhâp_c⁄√˘i⁄_‰ì
(
evc⁄
);

1883 
	}
}

1890 
	$evhâp_£nd_îr‹
(
evhâp_ªque°
 *
ªq
, 
îr‹
, c⁄° *
ªas⁄
)

1892 
	#ERR_FORMAT
 "<HTML><HEAD>\n" \

1897 "</BODY></HTML>\n"

	)

1899 
evbuf„r
 *
buf
 = 
	`evbuf„r_√w
();

1902 
	`evhâp_add_hódî
(
ªq
->
ouçut_hódîs
, "Connection", "close");

1904 
	`evhâp_ª•⁄£_code
(
ªq
, 
îr‹
, 
ªas⁄
);

1906 
	`evbuf„r_add_¥ötf
(
buf
, 
ERR_FORMAT
, 
îr‹
, 
ªas⁄
);

1908 
	`evhâp_£nd_∑ge
(
ªq
, 
buf
);

1910 
	`evbuf„r_‰ì
(
buf
);

1911 #unde‡
ERR_FORMAT


1912 
	}
}

1916 
ölöe
 

1917 
	$evhâp_£nd
(
evhâp_ªque°
 *
ªq
, 
evbuf„r
 *
d©abuf
)

1919 
evhâp_c⁄√˘i⁄
 *
evc⁄
 = 
ªq
->evcon;

1921 
	`as£π
(
	`TAILQ_FIRST
(&
evc⁄
->
ªque°s
Ë=
ªq
);

1924 i‡(
d©abuf
 !
NULL
)

1925 
	`evbuf„r_add_buf„r
(
ªq
->
ouçut_buf„r
, 
d©abuf
);

1928 
	`evhâp_make_hódî
(
evc⁄
, 
ªq
);

1930 
	`evhâp_wrôe_buf„r
(
evc⁄
, 
evhâp_£nd_d⁄e
, 
NULL
);

1931 
	}
}

1934 
	$evhâp_£nd_ª∂y
(
evhâp_ªque°
 *
ªq
, 
code
, c⁄° *
ªas⁄
,

1935 
evbuf„r
 *
d©abuf
)

1937 
	`evhâp_ª•⁄£_code
(
ªq
, 
code
, 
ªas⁄
);

1939 
	`evhâp_£nd
(
ªq
, 
d©abuf
);

1940 
	}
}

1943 
	$evhâp_£nd_ª∂y_°¨t
(
evhâp_ªque°
 *
ªq
, 
code
,

1944 c⁄° *
ªas⁄
)

1946 
	`evhâp_ª•⁄£_code
(
ªq
, 
code
, 
ªas⁄
);

1947 i‡(
ªq
->
maj‹
 =1 &&Ñeq->
mö‹
 == 1) {

1949 
	`evhâp_add_hódî
(
ªq
->
ouçut_hódîs
, "Transfer-Encoding",

1951 
ªq
->
chunked
 = 1;

1953 
	`evhâp_make_hódî
(
ªq
->
evc⁄
,Ñeq);

1954 
	`evhâp_wrôe_buf„r
(
ªq
->
evc⁄
, 
NULL
, NULL);

1955 
	}
}

1958 
	$evhâp_£nd_ª∂y_chunk
(
evhâp_ªque°
 *
ªq
, 
evbuf„r
 *
d©abuf
)

1960 i‡(
ªq
->
chunked
) {

1961 
	`evbuf„r_add_¥ötf
(
ªq
->
evc⁄
->
ouçut_buf„r
, "%x\r\n",

1962 ()
	`EVBUFFER_LENGTH
(
d©abuf
));

1964 
	`evbuf„r_add_buf„r
(
ªq
->
evc⁄
->
ouçut_buf„r
, 
d©abuf
);

1965 i‡(
ªq
->
chunked
) {

1966 
	`evbuf„r_add
(
ªq
->
evc⁄
->
ouçut_buf„r
, "\r\n", 2);

1968 
	`evhâp_wrôe_buf„r
(
ªq
->
evc⁄
, 
NULL
, NULL);

1969 
	}
}

1972 
	$evhâp_£nd_ª∂y_íd
(
evhâp_ªque°
 *
ªq
)

1974 
evhâp_c⁄√˘i⁄
 *
evc⁄
 = 
ªq
->evcon;

1976 i‡(
ªq
->
chunked
) {

1977 
	`evbuf„r_add
(
ªq
->
evc⁄
->
ouçut_buf„r
, "0\r\n\r\n", 5);

1978 
	`evhâp_wrôe_buf„r
(
ªq
->
evc⁄
, 
evhâp_£nd_d⁄e
, 
NULL
);

1979 
ªq
->
chunked
 = 0;

1980 } i‡(!
	`evít_≥ndög
(&
evc⁄
->
ev
, 
EV_WRITE
|
EV_TIMEOUT
, 
NULL
)) {

1982 
	`evhâp_£nd_d⁄e
(
evc⁄
, 
NULL
);

1985 
evc⁄
->
cb
 = 
evhâp_£nd_d⁄e
;

1986 
evc⁄
->
cb_¨g
 = 
NULL
;

1988 
	}
}

1991 
	$evhâp_ª•⁄£_code
(
evhâp_ªque°
 *
ªq
, 
code
, c⁄° *
ªas⁄
)

1993 
ªq
->
köd
 = 
EVHTTP_RESPONSE
;

1994 
ªq
->
ª•⁄£_code
 = 
code
;

1995 i‡(
ªq
->
ª•⁄£_code_löe
 !
NULL
)

1996 
	`‰ì
(
ªq
->
ª•⁄£_code_löe
);

1997 
ªq
->
ª•⁄£_code_löe
 = 
	`°rdup
(
ªas⁄
);

1998 
	}
}

2001 
	$evhâp_£nd_∑ge
(
evhâp_ªque°
 *
ªq
, 
evbuf„r
 *
d©abuf
)

2003 i‡(!
ªq
->
maj‹
 || !ªq->
mö‹
) {

2004 
ªq
->
maj‹
 = 1;

2005 
ªq
->
mö‹
 = 1;

2008 i‡(
ªq
->
köd
 !
EVHTTP_RESPONSE
)

2009 
	`evhâp_ª•⁄£_code
(
ªq
, 200, "OK");

2011 
	`evhâp_˛ór_hódîs
(
ªq
->
ouçut_hódîs
);

2012 
	`evhâp_add_hódî
(
ªq
->
ouçut_hódîs
, "Content-Type", "text/html");

2013 
	`evhâp_add_hódî
(
ªq
->
ouçut_hódîs
, "Connection", "close");

2015 
	`evhâp_£nd
(
ªq
, 
d©abuf
);

2016 
	}
}

2018 c⁄° 
	guri_ch¨s
[256] = {

2045 
	$evhâp_ícode_uri
(c⁄° *
uri
)

2047 
evbuf„r
 *
buf
 = 
	`evbuf„r_√w
();

2048 *
p
;

2050 
p
 = (*)
uri
; *p != '\0';Ö++) {

2051 i‡(
uri_ch¨s
[(
u_ch¨
)(*
p
)]) {

2052 
	`evbuf„r_add
(
buf
, 
p
, 1);

2054 
	`evbuf„r_add_¥ötf
(
buf
, "%%%02X", (
u_ch¨
)(*
p
));

2057 
	`evbuf„r_add
(
buf
, "", 1);

2058 
p
 = 
	`°rdup
((*)
	`EVBUFFER_DATA
(
buf
));

2059 
	`evbuf„r_‰ì
(
buf
);

2061  (
p
);

2062 
	}
}

2069 
	$evhâp_decode_uri_öã∫Æ
(

2070 c⁄° *
uri
, 
size_t
 
Àngth
, *
ªt
, 
Æways_decode_∂us
)

2072 
c
;

2073 
i
, 
j
, 
ö_quîy
 = 
Æways_decode_∂us
;

2075 
i
 = 
j
 = 0; 
uri
[i] != '\0'; i++) {

2076 
c
 = 
uri
[
i
];

2077 i‡(
c
 == '?') {

2078 
ö_quîy
 = 1;

2079 } i‡(
c
 ='+' && 
ö_quîy
) {

2080 
c
 = ' ';

2081 } i‡(
c
 ='%' && 
	`isxdigô
(()
uri
[
i
+1]) &&

2082 
	`isxdigô
(()
uri
[
i
+2])) {

2083 
tmp
[] = { 
uri
[
i
+1], uri[i+2], '\0' };

2084 
c
 = ()
	`°πﬁ
(
tmp
, 
NULL
, 16);

2085 
i
 += 2;

2087 
ªt
[
j
++] = 
c
;

2089 
ªt
[
j
] = '\0';

2091  (
j
);

2092 
	}
}

2095 
	$evhâp_decode_uri
(c⁄° *
uri
)

2097 *
ªt
;

2099 i‡((
ªt
 = 
	`mÆloc
(
	`°æí
(
uri
Ë+ 1)Ë=
NULL
)

2100 
	`evít_îr
(1, "%s: mÆloc(%lu)", 
__func__
,

2101 ()(
	`°æí
(
uri
) + 1));

2103 
	`evhâp_decode_uri_öã∫Æ
(
uri
, 
	`°æí
(uri),

2104 
ªt
, 0 );

2106  (
ªt
);

2107 
	}
}

2115 
	$evhâp_∑r£_quîy
(c⁄° *
uri
, 
evkeyvÆq
 *
hódîs
)

2117 *
löe
;

2118 *
¨gumít
;

2119 *
p
;

2121 
	`TAILQ_INIT
(
hódîs
);

2124 i‡(
	`°rchr
(
uri
, '?'Ë=
NULL
)

2127 i‡((
löe
 = 
	`°rdup
(
uri
)Ë=
NULL
)

2128 
	`evít_îr
(1, "%s: sådup", 
__func__
);

2131 
¨gumít
 = 
löe
;

2134 
	`°r£p
(&
¨gumít
, "?");

2136 
p
 = 
¨gumít
;

2137 
p
 !
NULL
 && *p != '\0') {

2138 *
key
, *
vÆue
, *
decoded_vÆue
;

2139 
¨gumít
 = 
	`°r£p
(&
p
, "&");

2141 
vÆue
 = 
¨gumít
;

2142 
key
 = 
	`°r£p
(&
vÆue
, "=");

2143 i‡(
vÆue
 =
NULL
)

2144 
îr‹
;

2146 i‡((
decoded_vÆue
 = 
	`mÆloc
(
	`°æí
(
vÆue
Ë+ 1)Ë=
NULL
)

2147 
	`evít_îr
(1, "%s: mÆloc", 
__func__
);

2149 
	`evhâp_decode_uri_öã∫Æ
(
vÆue
, 
	`°æí
(value),

2150 
decoded_vÆue
, 1 );

2151 
	`evít_debug
(("Quîy P¨am: %†-> %s\n", 
key
, 
decoded_vÆue
));

2152 
	`evhâp_add_hódî_öã∫Æ
(
hódîs
, 
key
, 
decoded_vÆue
);

2153 
	`‰ì
(
decoded_vÆue
);

2156 
îr‹
:

2157 
	`‰ì
(
löe
);

2158 
	}
}

2160 
evhâp_cb
 *

2161 
	$evhâp_di•©ch_ˇŒback
(
hâpcbq
 *
ˇŒbacks
, 
evhâp_ªque°
 *
ªq
)

2163 
evhâp_cb
 *
cb
;

2164 
size_t
 
off£t
 = 0;

2167 *
p
 = 
	`°rchr
(
ªq
->
uri
, '?');

2168 i‡(
p
 !
NULL
)

2169 
off£t
 = (
size_t
)(
p
 - 
ªq
->
uri
);

2171 
	`TAILQ_FOREACH
(
cb
, 
ˇŒbacks
, 
√xt
) {

2172 
ªs
 = 0;

2173 i‡(
p
 =
NULL
) {

2174 
ªs
 = 
	`°rcmp
(
cb
->
wh©
, 
ªq
->
uri
) == 0;

2176 
ªs
 = ((
	`°∫cmp
(
cb
->
wh©
, 
ªq
->
uri
, 
off£t
) == 0) &&

2177 (
cb
->
wh©
[
off£t
] == '\0'));

2180 i‡(
ªs
)

2181  (
cb
);

2184  (
NULL
);

2185 
	}
}

2188 
	$evhâp_h™dÀ_ªque°
(
evhâp_ªque°
 *
ªq
, *
¨g
)

2190 
evhâp
 *
hâp
 = 
¨g
;

2191 
evhâp_cb
 *
cb
 = 
NULL
;

2193 i‡(
ªq
->
uri
 =
NULL
) {

2194 
	`evhâp_£nd_îr‹
(
ªq
, 
HTTP_BADREQUEST
, "Bad Request");

2198 i‡((
cb
 = 
	`evhâp_di•©ch_ˇŒback
(&
hâp
->
ˇŒbacks
, 
ªq
)Ë!
NULL
) {

2199 (*
cb
->cb)(
ªq
, cb->
cb¨g
);

2204 i‡(
hâp
->
gícb
) {

2205 (*
hâp
->
gícb
)(
ªq
, hâp->
gícb¨g
);

2209 
	#ERR_FORMAT
 "<html><head>" \

2214 "</body></html>\n"

	)

2216 *
esˇ≥d_html
 = 
	`evhâp_htmÀsˇ≥
(
ªq
->
uri
);

2217 
evbuf„r
 *
buf
 = 
	`evbuf„r_√w
();

2219 
	`evhâp_ª•⁄£_code
(
ªq
, 
HTTP_NOTFOUND
, "Not Found");

2221 
	`evbuf„r_add_¥ötf
(
buf
, 
ERR_FORMAT
, 
esˇ≥d_html
);

2223 
	`‰ì
(
esˇ≥d_html
);

2225 
	`evhâp_£nd_∑ge
(
ªq
, 
buf
);

2227 
	`evbuf„r_‰ì
(
buf
);

2228 #unde‡
ERR_FORMAT


2230 
	}
}

2233 
	$ac˚±_sockë
(
fd
, 
wh©
, *
¨g
)

2235 
evhâp
 *
hâp
 = 
¨g
;

2236 
sockaddr_°‹age
 
ss
;

2237 
sockÀn_t
 
addæí
 = (
ss
);

2238 
nfd
;

2240 i‡((
nfd
 = 
	`ac˚±
(
fd
, (
sockaddr
 *)&
ss
, &
addæí
)) == -1) {

2241 i‡(
î∫o
 !
EAGAIN
 &&Éºnÿ!
EINTR
)

2242 
	`evít_w¨n
("%s: badác˚±", 
__func__
);

2245 i‡(
	`evutû_make_sockë_n⁄blockög
(
nfd
) < 0)

2248 
	`evhâp_gë_ªque°
(
hâp
, 
nfd
, (
sockaddr
 *)&
ss
, 
addæí
);

2249 
	}
}

2252 
	$evhâp_böd_sockë
(
evhâp
 *
hâp
, c⁄° *
addªss
, 
u_sh‹t
 
p‹t
)

2254 
fd
;

2255 
ªs
;

2257 i‡((
fd
 = 
	`böd_sockë
(
addªss
, 
p‹t
, 1 )) == -1)

2260 i‡(
	`li°í
(
fd
, 128) == -1) {

2261 
	`evít_w¨n
("%s:Üi°í", 
__func__
);

2262 
	`EVUTIL_CLOSESOCKET
(
fd
);

2266 
ªs
 = 
	`evhâp_ac˚±_sockë
(
hâp
, 
fd
);

2268 i‡(
ªs
 != -1)

2269 
	`evít_debug
(("BoundÅoÖort %d - Awaiting connections ... ",

2270 
p‹t
));

2272  (
ªs
);

2273 
	}
}

2276 
	$evhâp_ac˚±_sockë
(
evhâp
 *
hâp
, 
fd
)

2278 
evhâp_bound_sockë
 *
bound
;

2279 
evít
 *
ev
;

2280 
ªs
;

2282 
bound
 = 
	`mÆloc
((
evhâp_bound_sockë
));

2283 i‡(
bound
 =
NULL
)

2286 
ev
 = &
bound
->
böd_ev
;

2289 
	`evít_£t
(
ev
, 
fd
, 
EV_READ
 | 
EV_PERSIST
, 
ac˚±_sockë
, 
hâp
);

2290 
	`EVHTTP_BASE_SET
(
hâp
, 
ev
);

2292 
ªs
 = 
	`evít_add
(
ev
, 
NULL
);

2294 i‡(
ªs
 == -1) {

2295 
	`‰ì
(
bound
);

2299 
	`TAILQ_INSERT_TAIL
(&
hâp
->
sockës
, 
bound
, 
√xt
);

2302 
	}
}

2304 
evhâp
*

2305 
	$evhâp_√w_obje˘
()

2307 
evhâp
 *
hâp
 = 
NULL
;

2309 i‡((
hâp
 = 
	`ˇŒoc
(1, (
evhâp
))Ë=
NULL
) {

2310 
	`evít_w¨n
("%s: cÆloc", 
__func__
);

2311  (
NULL
);

2314 
hâp
->
timeout
 = -1;

2316 
	`TAILQ_INIT
(&
hâp
->
sockës
);

2317 
	`TAILQ_INIT
(&
hâp
->
ˇŒbacks
);

2318 
	`TAILQ_INIT
(&
hâp
->
c⁄√˘i⁄s
);

2320  (
hâp
);

2321 
	}
}

2323 
evhâp
 *

2324 
	$evhâp_√w
(
evít_ba£
 *
ba£
)

2326 
evhâp
 *
hâp
 = 
	`evhâp_√w_obje˘
();

2328 
hâp
->
ba£
 = base;

2330  (
hâp
);

2331 
	}
}

2337 
evhâp
 *

2338 
	$evhâp_°¨t
(c⁄° *
addªss
, 
u_sh‹t
 
p‹t
)

2340 
evhâp
 *
hâp
 = 
	`evhâp_√w_obje˘
();

2342 i‡(
	`evhâp_böd_sockë
(
hâp
, 
addªss
, 
p‹t
) == -1) {

2343 
	`‰ì
(
hâp
);

2344  (
NULL
);

2347  (
hâp
);

2348 
	}
}

2351 
	$evhâp_‰ì
(
evhâp
* 
hâp
)

2353 
evhâp_cb
 *
hâp_cb
;

2354 
evhâp_c⁄√˘i⁄
 *
evc⁄
;

2355 
evhâp_bound_sockë
 *
bound
;

2356 
fd
;

2359 (
bound
 = 
	`TAILQ_FIRST
(&
hâp
->
sockës
)Ë!
NULL
) {

2360 
	`TAILQ_REMOVE
(&
hâp
->
sockës
, 
bound
, 
√xt
);

2362 
fd
 = 
bound
->
böd_ev
.
ev_fd
;

2363 
	`evít_dñ
(&
bound
->
böd_ev
);

2364 
	`EVUTIL_CLOSESOCKET
(
fd
);

2366 
	`‰ì
(
bound
);

2369 (
evc⁄
 = 
	`TAILQ_FIRST
(&
hâp
->
c⁄√˘i⁄s
)Ë!
NULL
) {

2371 
	`evhâp_c⁄√˘i⁄_‰ì
(
evc⁄
);

2374 (
hâp_cb
 = 
	`TAILQ_FIRST
(&
hâp
->
ˇŒbacks
)Ë!
NULL
) {

2375 
	`TAILQ_REMOVE
(&
hâp
->
ˇŒbacks
, 
hâp_cb
, 
√xt
);

2376 
	`‰ì
(
hâp_cb
->
wh©
);

2377 
	`‰ì
(
hâp_cb
);

2380 
	`‰ì
(
hâp
);

2381 
	}
}

2384 
	$evhâp_£t_timeout
(
evhâp
* 
hâp
, 
timeout_ö_£cs
)

2386 
hâp
->
timeout
 = 
timeout_ö_£cs
;

2387 
	}
}

2390 
evhâp_£t_cb
(
evhâp
 *
hâp
, c⁄° *
uri
,

2391 (*
cb
)(
evhâp_ªque°
 *, *), *
cb¨g
)

2393 
evhâp_cb
 *
hâp_cb
;

2395 i‡((
hâp_cb
 = 
	`ˇŒoc
(1, (
evhâp_cb
))Ë=
NULL
)

2396 
	`evít_îr
(1, "%s: cÆloc", 
__func__
);

2398 
hâp_cb
->
wh©
 = 
	`°rdup
(
uri
);

2399 
hâp_cb
->
cb
 = cb;

2400 
hâp_cb
->
cb¨g
 = cbarg;

2402 
	`TAILQ_INSERT_TAIL
(&
hâp
->
ˇŒbacks
, 
hâp_cb
, 
√xt
);

2403 
	}
}

2406 
	$evhâp_dñ_cb
(
evhâp
 *
hâp
, c⁄° *
uri
)

2408 
evhâp_cb
 *
hâp_cb
;

2410 
	`TAILQ_FOREACH
(
hâp_cb
, &
hâp
->
ˇŒbacks
, 
√xt
) {

2411 i‡(
	`°rcmp
(
hâp_cb
->
wh©
, 
uri
) == 0)

2414 i‡(
hâp_cb
 =
NULL
)

2417 
	`TAILQ_REMOVE
(&
hâp
->
ˇŒbacks
, 
hâp_cb
, 
√xt
);

2418 
	`‰ì
(
hâp_cb
->
wh©
);

2419 
	`‰ì
(
hâp_cb
);

2422 
	}
}

2425 
evhâp_£t_gícb
(
evhâp
 *
hâp
,

2426 (*
cb
)(
evhâp_ªque°
 *, *), *
cb¨g
)

2428 
hâp
->
gícb
 = 
cb
;

2429 
hâp
->
gícb¨g
 = 
cb¨g
;

2430 
	}
}

2436 
evhâp_ªque°
 *

2437 
evhâp_ªque°_√w
((*
cb
)(
evhâp_ªque°
 *, *), *
¨g
)

2439 
evhâp_ªque°
 *
ªq
 = 
NULL
;

2442 i‡((
ªq
 = 
	`ˇŒoc
(1, (
evhâp_ªque°
))Ë=
NULL
) {

2443 
	`evít_w¨n
("%s: cÆloc", 
__func__
);

2444 
îr‹
;

2447 
ªq
->
köd
 = 
EVHTTP_RESPONSE
;

2448 
ªq
->
öput_hódîs
 = 
	`ˇŒoc
(1, (
evkeyvÆq
));

2449 i‡(
ªq
->
öput_hódîs
 =
NULL
) {

2450 
	`evít_w¨n
("%s: cÆloc", 
__func__
);

2451 
îr‹
;

2453 
	`TAILQ_INIT
(
ªq
->
öput_hódîs
);

2455 
ªq
->
ouçut_hódîs
 = 
	`ˇŒoc
(1, (
evkeyvÆq
));

2456 i‡(
ªq
->
ouçut_hódîs
 =
NULL
) {

2457 
	`evít_w¨n
("%s: cÆloc", 
__func__
);

2458 
îr‹
;

2460 
	`TAILQ_INIT
(
ªq
->
ouçut_hódîs
);

2462 i‡((
ªq
->
öput_buf„r
 = 
	`evbuf„r_√w
()Ë=
NULL
) {

2463 
	`evít_w¨n
("%s:Évbuf„r_√w", 
__func__
);

2464 
îr‹
;

2467 i‡((
ªq
->
ouçut_buf„r
 = 
	`evbuf„r_√w
()Ë=
NULL
) {

2468 
	`evít_w¨n
("%s:Évbuf„r_√w", 
__func__
);

2469 
îr‹
;

2472 
ªq
->
cb
 = cb;

2473 
ªq
->
cb_¨g
 = 
¨g
;

2475  (
ªq
);

2477 
îr‹
:

2478 i‡(
ªq
 !
NULL
)

2479 
	`evhâp_ªque°_‰ì
(
ªq
);

2480  (
NULL
);

2481 
	}
}

2484 
	$evhâp_ªque°_‰ì
(
evhâp_ªque°
 *
ªq
)

2486 i‡(
ªq
->
ªmŸe_ho°
 !
NULL
)

2487 
	`‰ì
(
ªq
->
ªmŸe_ho°
);

2488 i‡(
ªq
->
uri
 !
NULL
)

2489 
	`‰ì
(
ªq
->
uri
);

2490 i‡(
ªq
->
ª•⁄£_code_löe
 !
NULL
)

2491 
	`‰ì
(
ªq
->
ª•⁄£_code_löe
);

2493 
	`evhâp_˛ór_hódîs
(
ªq
->
öput_hódîs
);

2494 
	`‰ì
(
ªq
->
öput_hódîs
);

2496 
	`evhâp_˛ór_hódîs
(
ªq
->
ouçut_hódîs
);

2497 
	`‰ì
(
ªq
->
ouçut_hódîs
);

2499 i‡(
ªq
->
öput_buf„r
 !
NULL
)

2500 
	`evbuf„r_‰ì
(
ªq
->
öput_buf„r
);

2502 i‡(
ªq
->
ouçut_buf„r
 !
NULL
)

2503 
	`evbuf„r_‰ì
(
ªq
->
ouçut_buf„r
);

2505 
	`‰ì
(
ªq
);

2506 
	}
}

2509 
evhâp_ªque°_£t_chunked_cb
(
evhâp_ªque°
 *
ªq
,

2510 (*
cb
)(
evhâp_ªque°
 *, *))

2512 
ªq
->
chunk_cb
 = 
cb
;

2513 
	}
}

2520 
	$evhâp_ªque°_uri
(
evhâp_ªque°
 *
ªq
) {

2521 i‡(
ªq
->
uri
 =
NULL
)

2522 
	`evít_debug
(("%s:Ñeque° %∞ha†nÿuri\n", 
__func__
, 
ªq
));

2523  (
ªq
->
uri
);

2524 
	}
}

2531 
evhâp_c⁄√˘i⁄
*

2532 
	$evhâp_gë_ªque°_c⁄√˘i⁄
(

2533 
evhâp
* 
hâp
,

2534 
fd
, 
sockaddr
 *
ß
, 
sockÀn_t
 
ßÀn
)

2536 
evhâp_c⁄√˘i⁄
 *
evc⁄
;

2537 *
ho°«me
 = 
NULL
, *
p‹äame
 = NULL;

2539 
	`«me_‰om_addr
(
ß
, 
ßÀn
, &
ho°«me
, &
p‹äame
);

2540 i‡(
ho°«me
 =
NULL
 || 
p‹äame
 == NULL) {

2541 i‡(
ho°«me
Ë
	`‰ì
(hostname);

2542 i‡(
p‹äame
Ë
	`‰ì
(portname);

2543  (
NULL
);

2546 
	`evít_debug
(("%s:ÇewÑequest from %s:%s on %d\n",

2547 
__func__
, 
ho°«me
, 
p‹äame
, 
fd
));

2550 
evc⁄
 = 
	`evhâp_c⁄√˘i⁄_√w
(
ho°«me
, 
	`©oi
(
p‹äame
));

2551 
	`‰ì
(
ho°«me
);

2552 
	`‰ì
(
p‹äame
);

2553 i‡(
evc⁄
 =
NULL
)

2554  (
NULL
);

2557 
	`evhâp_c⁄√˘i⁄_£t_ba£
(
evc⁄
, 
hâp
->
ba£
);

2559 
evc⁄
->
Êags
 |
EVHTTP_CON_INCOMING
;

2560 
evc⁄
->
°©e
 = 
EVCON_READING_FIRSTLINE
;

2562 
evc⁄
->
fd
 = fd;

2564  (
evc⁄
);

2565 
	}
}

2568 
	$evhâp_assocüã_√w_ªque°_wôh_c⁄√˘i⁄
(
evhâp_c⁄√˘i⁄
 *
evc⁄
)

2570 
evhâp
 *
hâp
 = 
evc⁄
->
hâp_£rvî
;

2571 
evhâp_ªque°
 *
ªq
;

2572 i‡((
ªq
 = 
	`evhâp_ªque°_√w
(
evhâp_h™dÀ_ªque°
, 
hâp
)Ë=
NULL
)

2575 
ªq
->
evc⁄
 =Évcon;

2576 
ªq
->
Êags
 |
EVHTTP_REQ_OWN_CONNECTION
;

2578 
	`TAILQ_INSERT_TAIL
(&
evc⁄
->
ªque°s
, 
ªq
, 
√xt
);

2580 
ªq
->
köd
 = 
EVHTTP_REQUEST
;

2582 i‡((
ªq
->
ªmŸe_ho°
 = 
	`°rdup
(
evc⁄
->
addªss
)Ë=
NULL
)

2583 
	`evít_îr
(1, "%s: sådup", 
__func__
);

2584 
ªq
->
ªmŸe_p‹t
 = 
evc⁄
->
p‹t
;

2586 
	`evhâp_°¨t_ªad
(
evc⁄
);

2589 
	}
}

2592 
	$evhâp_gë_ªque°
(
evhâp
 *
hâp
, 
fd
,

2593 
sockaddr
 *
ß
, 
sockÀn_t
 
ßÀn
)

2595 
evhâp_c⁄√˘i⁄
 *
evc⁄
;

2597 
evc⁄
 = 
	`evhâp_gë_ªque°_c⁄√˘i⁄
(
hâp
, 
fd
, 
ß
, 
ßÀn
);

2598 i‡(
evc⁄
 =
NULL
)

2602 i‡(
hâp
->
timeout
 != -1)

2603 
	`evhâp_c⁄√˘i⁄_£t_timeout
(
evc⁄
, 
hâp
->
timeout
);

2609 
evc⁄
->
hâp_£rvî
 = 
hâp
;

2610 
	`TAILQ_INSERT_TAIL
(&
hâp
->
c⁄√˘i⁄s
, 
evc⁄
, 
√xt
);

2612 i‡(
	`evhâp_assocüã_√w_ªque°_wôh_c⁄√˘i⁄
(
evc⁄
) == -1)

2613 
	`evhâp_c⁄√˘i⁄_‰ì
(
evc⁄
);

2614 
	}
}

2622 
addröfo
 *

2623 
	$addr_‰om_«me
(*
addªss
)

2625 #ifde‡
HAVE_GETADDRINFO


2626 
addröfo
 
ai
, *
aô›
;

2627 
ai_ªsu…
;

2629 
	`mem£t
(&
ai
, 0, (ai));

2630 
ai
.
ai_Ámûy
 = 
AF_INET
;

2631 
ai
.
ai_sockty≥
 = 
SOCK_RAW
;

2632 
ai
.
ai_Êags
 = 0;

2633 i‡((
ai_ªsu…
 = 
	`gëaddröfo
(
addªss
, 
NULL
, &
ai
, &
aô›
)) != 0) {

2634 i‡–
ai_ªsu…
 =
EAI_SYSTEM
 )

2635 
	`evít_w¨n
("getaddrinfo");

2637 
	`evít_w¨nx
("gëaddröfo: %s", 
	`gai_°ªº‹
(
ai_ªsu…
));

2640  (
aô›
);

2642 
	`as£π
(0);

2643  
NULL
;

2645 
	}
}

2649 
	$«me_‰om_addr
(
sockaddr
 *
ß
, 
sockÀn_t
 
ßÀn
,

2650 **
pho°
, **
µ‹t
)

2652 
¡›
[
NI_MAXHOST
];

2653 
°Ω‹t
[
NI_MAXSERV
];

2654 
ni_ªsu…
;

2656 #ifde‡
HAVE_GETNAMEINFO


2657 
ni_ªsu…
 = 
	`gë«meöfo
(
ß
, 
ßÀn
,

2658 
¡›
, “t›), 
°Ω‹t
, (strport),

2659 
NI_NUMERICHOST
|
NI_NUMERICSERV
);

2661 i‡(
ni_ªsu…
 != 0) {

2662 i‡(
ni_ªsu…
 =
EAI_SYSTEM
)

2663 
	`evít_îr
(1, "getnameinfo failed");

2665 
	`evít_îrx
(1, "gë«meöfÿÁûed: %s", 
	`gai_°ªº‹
(
ni_ªsu…
));

2669 
ni_ªsu…
 = 
	`Áke_gë«meöfo
(
ß
, 
ßÀn
,

2670 
¡›
, “t›), 
°Ω‹t
, (strport),

2671 
NI_NUMERICHOST
|
NI_NUMERICSERV
);

2672 i‡(
ni_ªsu…
 != 0)

2675 *
pho°
 = 
	`°rdup
(
¡›
);

2676 *
µ‹t
 = 
	`°rdup
(
°Ω‹t
);

2677 
	}
}

2682 
	$böd_sockë_ai
(
addröfo
 *
ai
, 
ªu£
)

2684 
fd
, 
⁄
 = 1, 
r
;

2685 
£ºno
;

2688 
fd
 = 
	`sockë
(
AF_INET
, 
SOCK_STREAM
, 0);

2689 i‡(
fd
 == -1) {

2690 
	`evít_w¨n
("socket");

2694 i‡(
	`evutû_make_sockë_n⁄blockög
(
fd
) < 0)

2695 
out
;

2697 #i‚de‡
WIN32


2698 i‡(
	`f˙é
(
fd
, 
F_SETFD
, 1) == -1) {

2699 
	`evít_w¨n
("fcntl(F_SETFD)");

2700 
out
;

2704 
	`£tsock›t
(
fd
, 
SOL_SOCKET
, 
SO_KEEPALIVE
, (*)&
⁄
, (on));

2705 i‡(
ªu£
) {

2706 
	`£tsock›t
(
fd
, 
SOL_SOCKET
, 
SO_REUSEADDR
,

2707 (*)&
⁄
, (on));

2710 i‡(
ai
 !
NULL
) {

2711 
r
 = 
	`böd
(
fd
, 
ai
->
ai_addr
,ái->
ai_addæí
);

2712 i‡(
r
 == -1)

2713 
out
;

2716  (
fd
);

2718 
out
:

2719 
£ºno
 = 
	`EVUTIL_SOCKET_ERROR
();

2720 
	`EVUTIL_CLOSESOCKET
(
fd
);

2721 
	`EVUTIL_SET_SOCKET_ERROR
(
£ºno
);

2723 
	}
}

2725 
addröfo
 *

2726 
	$make_addröfo
(c⁄° *
addªss
, 
u_sh‹t
 
p‹t
)

2728 
addröfo
 *
aô›
 = 
NULL
;

2730 #ifde‡
HAVE_GETADDRINFO


2731 
addröfo
 
ai
;

2732 
°Ω‹t
[
NI_MAXSERV
];

2733 
ai_ªsu…
;

2735 
	`mem£t
(&
ai
, 0, (ai));

2736 
ai
.
ai_Ámûy
 = 
AF_INET
;

2737 
ai
.
ai_sockty≥
 = 
SOCK_STREAM
;

2738 
ai
.
ai_Êags
 = 
AI_PASSIVE
;

2739 
	`evutû_¢¥ötf
(
°Ω‹t
, (°Ω‹t), "%d", 
p‹t
);

2740 i‡((
ai_ªsu…
 = 
	`gëaddröfo
(
addªss
, 
°Ω‹t
, &
ai
, &
aô›
)) != 0) {

2741 i‡–
ai_ªsu…
 =
EAI_SYSTEM
 )

2742 
	`evít_w¨n
("getaddrinfo");

2744 
	`evít_w¨nx
("gëaddröfo: %s", 
	`gai_°ªº‹
(
ai_ªsu…
));

2745  (
NULL
);

2748 
cur
;

2749 
addröfo
 
ai
[2];

2750 i‡(++
cur
 == 2) cur = 0;

2752 i‡(
	`Áke_gëaddröfo
(
addªss
, &
ai
[
cur
]) < 0) {

2753 
	`evít_w¨n
("fake_getaddrinfo");

2754  (
NULL
);

2756 
aô›
 = &
ai
[
cur
];

2757 ((
sockaddr_ö
 *Ë
aô›
->
ai_addr
)->
sö_p‹t
 = 
	`ht⁄s
(
p‹t
);

2760  (
aô›
);

2761 
	}
}

2764 
	$böd_sockë
(c⁄° *
addªss
, 
u_sh‹t
 
p‹t
, 
ªu£
)

2766 
fd
;

2767 
addröfo
 *
aô›
 = 
NULL
;

2770 i‡(
addªss
 =
NULL
 && 
p‹t
 == 0)

2771  
	`böd_sockë_ai
(
NULL
, 0);

2773 
aô›
 = 
	`make_addröfo
(
addªss
, 
p‹t
);

2775 i‡(
aô›
 =
NULL
)

2778 
fd
 = 
	`böd_sockë_ai
(
aô›
, 
ªu£
);

2780 #ifde‡
HAVE_GETADDRINFO


2781 
	`‰ìaddröfo
(
aô›
);

2783 
	`Áke_‰ìaddröfo
(
aô›
);

2786  (
fd
);

2787 
	}
}

2790 
	$sockë_c⁄√˘
(
fd
, c⁄° *
addªss
, 
p‹t
)

2792 
addröfo
 *
ai
 = 
	`make_addröfo
(
addªss
, 
p‹t
);

2793 
ªs
 = -1;

2795 i‡(
ai
 =
NULL
) {

2796 
	`evít_debug
(("%s: make_addrinfo: \"%s:%d\"",

2797 
__func__
, 
addªss
, 
p‹t
));

2801 i‡(
	`c⁄√˘
(
fd
, 
ai
->
ai_addr
,ái->
ai_addæí
) == -1) {

2802 #ifde‡
WIN32


2803 
tmp_îr‹
 = 
	`WSAGëLa°Eº‹
();

2804 i‡(
tmp_îr‹
 !
WSAEWOULDBLOCK
 &&Åmp_îr‹ !
WSAEINVAL
 &&

2805 
tmp_îr‹
 !
WSAEINPROGRESS
) {

2806 
out
;

2809 i‡(
î∫o
 !
EINPROGRESS
) {

2810 
out
;

2816 
ªs
 = 0;

2818 
out
:

2819 #ifde‡
HAVE_GETADDRINFO


2820 
	`‰ìaddröfo
(
ai
);

2822 
	`Áke_‰ìaddröfo
(
ai
);

2825  (
ªs
);

2826 
	}
}

	@kqueue.c

29 #ifde‡
HAVE_CONFIG_H


30 
	~"c⁄fig.h
"

33 
	#_GNU_SOURCE
 1

	)

35 
	~<sys/ty≥s.h
>

36 #ifde‡
HAVE_SYS_TIME_H


37 
	~<sys/time.h
>

39 
	~<sys/_libevít_time.h
>

41 
	~<sys/queue.h
>

42 
	~<sys/evít.h
>

43 
	~<sig«l.h
>

44 
	~<°dio.h
>

45 
	~<°dlib.h
>

46 
	~<°rög.h
>

47 
	~<uni°d.h
>

48 
	~<î∫o.h
>

49 
	~<as£π.h
>

50 #ifde‡
HAVE_INTTYPES_H


51 
	~<öây≥s.h
>

57 #i‡
deföed
(
HAVE_INTTYPES_H
Ë&& !deföed(
__O≥nBSD__
Ë&& !deföed(
__FªeBSD__
Ë&& !deföed(
__d¨wö__
Ë&& !deföed(
__APPLE__
)

58 
	#PTR_TO_UDATA
(
x
Ë((
öçå_t
)(x))

	)

60 
	#PTR_TO_UDATA
(
x
Ë(x)

	)

63 
	~"evít.h
"

64 
	~"evít-öã∫Æ.h
"

65 
	~"log.h
"

67 
	#EVLIST_X_KQINKERNEL
 0x1000

	)

69 
	#NEVENT
 64

	)

71 
	skq›
 {

72 
kevít
 *
	mch™ges
;

73 
	mnch™ges
;

74 
kevít
 *
	mevíts
;

75 
evít_li°
 
	mevsigevíts
[
NSIG
];

76 
	m√víts
;

77 
	mkq
;

78 
pid_t
 
	mpid
;

81 *
kq_öô
 (
evít_ba£
 *);

82 
kq_add
 (*, 
evít
 *);

83 
kq_dñ
 (*, 
evít
 *);

84 
kq_di•©ch
 (
evít_ba£
 *, *, 
timevÆ
 *);

85 
kq_ö£π
 (
kq›
 *, 
kevít
 *);

86 
kq_dóŒoc
 (
evít_ba£
 *, *);

88 c⁄° 
evít›
 
	gkq›s
 = {

90 
kq_öô
,

91 
kq_add
,

92 
kq_dñ
,

93 
kq_di•©ch
,

94 
kq_dóŒoc
,

99 
	$kq_öô
(
evít_ba£
 *
ba£
)

101 
i
, 
kq
;

102 
kq›
 *
kqueue›
;

105 i‡(
	`evutû_gëív
("EVENT_NOKQUEUE"))

106  (
NULL
);

108 i‡(!(
kqueue›
 = 
	`ˇŒoc
(1, (
kq›
))))

109  (
NULL
);

113 i‡((
kq
 = 
	`kqueue
()) == -1) {

114 
	`evít_w¨n
("kqueue");

115 
	`‰ì
 (
kqueue›
);

116  (
NULL
);

119 
kqueue›
->
kq
 = kq;

121 
kqueue›
->
pid
 = 
	`gëpid
();

124 
kqueue›
->
ch™ges
 = 
	`mÆloc
(
NEVENT
 * (
kevít
));

125 i‡(
kqueue›
->
ch™ges
 =
NULL
) {

126 
	`‰ì
 (
kqueue›
);

127  (
NULL
);

129 
kqueue›
->
evíts
 = 
	`mÆloc
(
NEVENT
 * (
kevít
));

130 i‡(
kqueue›
->
evíts
 =
NULL
) {

131 
	`‰ì
 (
kqueue›
->
ch™ges
);

132 
	`‰ì
 (
kqueue›
);

133  (
NULL
);

135 
kqueue›
->
√víts
 = 
NEVENT
;

138 
i
 = 0; i < 
NSIG
; ++i) {

139 
	`TAILQ_INIT
(&
kqueue›
->
evsigevíts
[
i
]);

143 
kqueue›
->
ch™ges
[0].
idít
 = -1;

144 
kqueue›
->
ch™ges
[0].
fûãr
 = 
EVFILT_READ
;

145 
kqueue›
->
ch™ges
[0].
Êags
 = 
EV_ADD
;

151 i‡(
	`kevít
(
kq
,

152 
kqueue›
->
ch™ges
, 1, kqueue›->
evíts
, 
NEVENT
, 
NULL
) != 1 ||

153 
kqueue›
->
evíts
[0].
idít
 != -1 ||

154 
kqueue›
->
evíts
[0].
Êags
 !
EV_ERROR
) {

155 
	`evít_w¨n
("%s: dëe˘ed brokí kqueue;ÇŸ usög.", 
__func__
);

156 
	`‰ì
(
kqueue›
->
ch™ges
);

157 
	`‰ì
(
kqueue›
->
evíts
);

158 
	`‰ì
(
kqueue›
);

159 
	`˛o£
(
kq
);

160  (
NULL
);

163  (
kqueue›
);

164 
	}
}

167 
	$kq_ö£π
(
kq›
 *kq›, 
kevít
 *
kev
)

169 
√víts
 = 
kq›
->nevents;

171 i‡(
kq›
->
nch™ges
 =
√víts
) {

172 
kevít
 *
√wch™ge
;

173 
kevít
 *
√wªsu…
;

175 
√víts
 *= 2;

177 
√wch™ge
 = 
	`ªÆloc
(
kq›
->
ch™ges
,

178 
√víts
 * (
kevít
));

179 i‡(
√wch™ge
 =
NULL
) {

180 
	`evít_w¨n
("%s: mÆloc", 
__func__
);

183 
kq›
->
ch™ges
 = 
√wch™ge
;

185 
√wªsu…
 = 
	`ªÆloc
(
kq›
->
evíts
,

186 
√víts
 * (
kevít
));

192 i‡(
√wªsu…
 =
NULL
) {

193 
	`evít_w¨n
("%s: mÆloc", 
__func__
);

196 
kq›
->
evíts
 = 
√wªsu…
;

198 
kq›
->
√víts
 =Çevents;

201 
	`mem˝y
(&
kq›
->
ch™ges
[kq›->
nch™ges
++], 
kev
, (
kevít
));

203 
	`evít_debug
(("%s: fd %d %s%s",

204 
__func__
, ()
kev
->
idít
,

205 
kev
->
fûãr
 =
EVFILT_READ
 ? "EVFILT_READ" : "EVFILT_WRITE",

206 
kev
->
Êags
 =
EV_DELETE
 ? " (del)" : ""));

209 
	}
}

212 
	$kq_sigh™dÀr
(
sig
)

215 
	}
}

218 
	$kq_di•©ch
(
evít_ba£
 *
ba£
, *
¨g
, 
timevÆ
 *
tv
)

220 
kq›
 *kq› = 
¨g
;

221 
kevít
 *
ch™ges
 = 
kq›
->changes;

222 
kevít
 *
evíts
 = 
kq›
->events;

223 
evít
 *
ev
;

224 
time•ec
 
ts
, *
ts_p
 = 
NULL
;

225 
i
, 
ªs
;

227 i‡(
tv
 !
NULL
) {

228 
	`TIMEVAL_TO_TIMESPEC
(
tv
, &
ts
);

229 
ts_p
 = &
ts
;

232 
ªs
 = 
	`kevít
(
kq›
->
kq
, 
ch™ges
, kq›->
nch™ges
,

233 
evíts
, 
kq›
->
√víts
, 
ts_p
);

234 
kq›
->
nch™ges
 = 0;

235 i‡(
ªs
 == -1) {

236 i‡(
î∫o
 !
EINTR
) {

237 
	`evít_w¨n
("kevent");

244 
	`evít_debug
(("%s: kevíàªp‹t†%d", 
__func__
, 
ªs
));

246 
i
 = 0; i < 
ªs
; i++) {

247 
which
 = 0;

249 i‡(
evíts
[
i
].
Êags
 & 
EV_ERROR
) {

262 i‡(
evíts
[
i
].
d©a
 =
EBADF
 ||

263 
evíts
[
i
].
d©a
 =
EINVAL
 ||

264 
evíts
[
i
].
d©a
 =
ENOENT
)

266 
î∫o
 = 
evíts
[
i
].
d©a
;

270 i‡(
evíts
[
i
].
fûãr
 =
EVFILT_READ
) {

271 
which
 |
EV_READ
;

272 } i‡(
evíts
[
i
].
fûãr
 =
EVFILT_WRITE
) {

273 
which
 |
EV_WRITE
;

274 } i‡(
evíts
[
i
].
fûãr
 =
EVFILT_SIGNAL
) {

275 
which
 |
EV_SIGNAL
;

278 i‡(!
which
)

281 i‡(
evíts
[
i
].
fûãr
 =
EVFILT_SIGNAL
) {

282 
evít_li°
 *
hód
 =

283 (
evít_li°
 *)
evíts
[
i
].
ud©a
;

284 
	`TAILQ_FOREACH
(
ev
, 
hód
, 
ev_sig«l_√xt
) {

285 
	`evít_a˘ive
(
ev
, 
which
, 
evíts
[
i
].
d©a
);

288 
ev
 = (
evít
 *)
evíts
[
i
].
ud©a
;

290 i‡(!(
ev
->
ev_evíts
 & 
EV_PERSIST
))

291 
ev
->
ev_Êags
 &~
EVLIST_X_KQINKERNEL
;

293 
	`evít_a˘ive
(
ev
, 
which
, 1);

298 
	}
}

302 
	$kq_add
(*
¨g
, 
evít
 *
ev
)

304 
kq›
 *kq› = 
¨g
;

305 
kevít
 
kev
;

307 i‡(
ev
->
ev_evíts
 & 
EV_SIGNAL
) {

308 
nsig«l
 = 
	`EVENT_SIGNAL
(
ev
);

310 
	`as£π
(
nsig«l
 >0 &&Çsig«»< 
NSIG
);

311 i‡(
	`TAILQ_EMPTY
(&
kq›
->
evsigevíts
[
nsig«l
])) {

312 
time•ec
 
timeout
 = { 0, 0 };

314 
	`mem£t
(&
kev
, 0, (kev));

315 
kev
.
idít
 = 
nsig«l
;

316 
kev
.
fûãr
 = 
EVFILT_SIGNAL
;

317 
kev
.
Êags
 = 
EV_ADD
;

318 
kev
.
ud©a
 = 
	`PTR_TO_UDATA
(&
kq›
->
evsigevíts
[
nsig«l
]);

323 i‡(
	`kevít
(
kq›
->
kq
, &
kev
, 1, 
NULL
, 0, &
timeout
) == -1)

326 i‡(
	`_evsig«l_£t_h™dÀr
(
ev
->
ev_ba£
, 
nsig«l
,

327 
kq_sigh™dÀr
) == -1)

331 
	`TAILQ_INSERT_TAIL
(&
kq›
->
evsigevíts
[
nsig«l
], 
ev
,

332 
ev_sig«l_√xt
);

333 
ev
->
ev_Êags
 |
EVLIST_X_KQINKERNEL
;

337 i‡(
ev
->
ev_evíts
 & 
EV_READ
) {

338 
	`mem£t
(&
kev
, 0, (kev));

339 
kev
.
idít
 = 
ev
->
ev_fd
;

340 
kev
.
fûãr
 = 
EVFILT_READ
;

341 #ifde‡
NOTE_EOF


343 
kev
.
fÊags
 = 
NOTE_EOF
;

345 
kev
.
Êags
 = 
EV_ADD
;

346 i‡(!(
ev
->
ev_evíts
 & 
EV_PERSIST
))

347 
kev
.
Êags
 |
EV_ONESHOT
;

348 
kev
.
ud©a
 = 
	`PTR_TO_UDATA
(
ev
);

350 i‡(
	`kq_ö£π
(
kq›
, &
kev
) == -1)

353 
ev
->
ev_Êags
 |
EVLIST_X_KQINKERNEL
;

356 i‡(
ev
->
ev_evíts
 & 
EV_WRITE
) {

357 
	`mem£t
(&
kev
, 0, (kev));

358 
kev
.
idít
 = 
ev
->
ev_fd
;

359 
kev
.
fûãr
 = 
EVFILT_WRITE
;

360 
kev
.
Êags
 = 
EV_ADD
;

361 i‡(!(
ev
->
ev_evíts
 & 
EV_PERSIST
))

362 
kev
.
Êags
 |
EV_ONESHOT
;

363 
kev
.
ud©a
 = 
	`PTR_TO_UDATA
(
ev
);

365 i‡(
	`kq_ö£π
(
kq›
, &
kev
) == -1)

368 
ev
->
ev_Êags
 |
EVLIST_X_KQINKERNEL
;

372 
	}
}

375 
	$kq_dñ
(*
¨g
, 
evít
 *
ev
)

377 
kq›
 *kq› = 
¨g
;

378 
kevít
 
kev
;

380 i‡(!(
ev
->
ev_Êags
 & 
EVLIST_X_KQINKERNEL
))

383 i‡(
ev
->
ev_evíts
 & 
EV_SIGNAL
) {

384 
nsig«l
 = 
	`EVENT_SIGNAL
(
ev
);

385 
time•ec
 
timeout
 = { 0, 0 };

387 
	`as£π
(
nsig«l
 >0 &&Çsig«»< 
NSIG
);

388 
	`TAILQ_REMOVE
(&
kq›
->
evsigevíts
[
nsig«l
], 
ev
, 
ev_sig«l_√xt
);

389 i‡(
	`TAILQ_EMPTY
(&
kq›
->
evsigevíts
[
nsig«l
])) {

390 
	`mem£t
(&
kev
, 0, (kev));

391 
kev
.
idít
 = 
nsig«l
;

392 
kev
.
fûãr
 = 
EVFILT_SIGNAL
;

393 
kev
.
Êags
 = 
EV_DELETE
;

398 i‡(
	`kevít
(
kq›
->
kq
, &
kev
, 1, 
NULL
, 0, &
timeout
) == -1)

401 i‡(
	`_evsig«l_ª°‹e_h™dÀr
(
ev
->
ev_ba£
,

402 
nsig«l
) == -1)

406 
ev
->
ev_Êags
 &~
EVLIST_X_KQINKERNEL
;

410 i‡(
ev
->
ev_evíts
 & 
EV_READ
) {

411 
	`mem£t
(&
kev
, 0, (kev));

412 
kev
.
idít
 = 
ev
->
ev_fd
;

413 
kev
.
fûãr
 = 
EVFILT_READ
;

414 
kev
.
Êags
 = 
EV_DELETE
;

416 i‡(
	`kq_ö£π
(
kq›
, &
kev
) == -1)

419 
ev
->
ev_Êags
 &~
EVLIST_X_KQINKERNEL
;

422 i‡(
ev
->
ev_evíts
 & 
EV_WRITE
) {

423 
	`mem£t
(&
kev
, 0, (kev));

424 
kev
.
idít
 = 
ev
->
ev_fd
;

425 
kev
.
fûãr
 = 
EVFILT_WRITE
;

426 
kev
.
Êags
 = 
EV_DELETE
;

428 i‡(
	`kq_ö£π
(
kq›
, &
kev
) == -1)

431 
ev
->
ev_Êags
 &~
EVLIST_X_KQINKERNEL
;

435 
	}
}

438 
	$kq_dóŒoc
(
evít_ba£
 *
ba£
, *
¨g
)

440 
kq›
 *kq› = 
¨g
;

442 i‡(
kq›
->
ch™ges
)

443 
	`‰ì
(
kq›
->
ch™ges
);

444 i‡(
kq›
->
evíts
)

445 
	`‰ì
(
kq›
->
evíts
);

446 i‡(
kq›
->
kq
 >0 && kq›->
pid
 =
	`gëpid
())

447 
	`˛o£
(
kq›
->
kq
);

448 
	`mem£t
(
kq›
, 0, (kqop));

449 
	`‰ì
(
kq›
);

450 
	}
}

	@log.c

40 #ifde‡
HAVE_CONFIG_H


41 
	~"c⁄fig.h
"

44 #ifde‡
WIN32


45 
	#WIN32_LEAN_AND_MEAN


	)

46 
	~<wödows.h
>

47 #unde‡
WIN32_LEAN_AND_MEAN


49 
	~<sys/ty≥s.h
>

50 #ifde‡
HAVE_SYS_TIME_H


51 
	~<sys/time.h
>

53 
	~<sys/_libevít_time.h
>

55 
	~<°dio.h
>

56 
	~<°dlib.h
>

57 
	~<°d¨g.h
>

58 
	~<°rög.h
>

59 
	~<î∫o.h
>

60 
	~"evít.h
"

62 
	~"log.h
"

63 
	~"evutû.h
"

65 
_w¨n_hñ≥r
(
£vîôy
, 
log_î∫o
, c⁄° *
fmt
,

66 
va_li°
 
≠
);

67 
evít_log
(
£vîôy
, c⁄° *
msg
);

70 
	$evít_îr
(
evÆ
, c⁄° *
fmt
, ...)

72 
va_li°
 
≠
;

74 
	`va_°¨t
(
≠
, 
fmt
);

75 
	`_w¨n_hñ≥r
(
_EVENT_LOG_ERR
, 
î∫o
, 
fmt
, 
≠
);

76 
	`va_íd
(
≠
);

77 
	`exô
(
evÆ
);

78 
	}
}

81 
	$evít_w¨n
(c⁄° *
fmt
, ...)

83 
va_li°
 
≠
;

85 
	`va_°¨t
(
≠
, 
fmt
);

86 
	`_w¨n_hñ≥r
(
_EVENT_LOG_WARN
, 
î∫o
, 
fmt
, 
≠
);

87 
	`va_íd
(
≠
);

88 
	}
}

91 
	$evít_îrx
(
evÆ
, c⁄° *
fmt
, ...)

93 
va_li°
 
≠
;

95 
	`va_°¨t
(
≠
, 
fmt
);

96 
	`_w¨n_hñ≥r
(
_EVENT_LOG_ERR
, -1, 
fmt
, 
≠
);

97 
	`va_íd
(
≠
);

98 
	`exô
(
evÆ
);

99 
	}
}

102 
	$evít_w¨nx
(c⁄° *
fmt
, ...)

104 
va_li°
 
≠
;

106 
	`va_°¨t
(
≠
, 
fmt
);

107 
	`_w¨n_hñ≥r
(
_EVENT_LOG_WARN
, -1, 
fmt
, 
≠
);

108 
	`va_íd
(
≠
);

109 
	}
}

112 
	$evít_msgx
(c⁄° *
fmt
, ...)

114 
va_li°
 
≠
;

116 
	`va_°¨t
(
≠
, 
fmt
);

117 
	`_w¨n_hñ≥r
(
_EVENT_LOG_MSG
, -1, 
fmt
, 
≠
);

118 
	`va_íd
(
≠
);

119 
	}
}

122 
	$_evít_debugx
(c⁄° *
fmt
, ...)

124 
va_li°
 
≠
;

126 
	`va_°¨t
(
≠
, 
fmt
);

127 
	`_w¨n_hñ≥r
(
_EVENT_LOG_DEBUG
, -1, 
fmt
, 
≠
);

128 
	`va_íd
(
≠
);

129 
	}
}

132 
	$_w¨n_hñ≥r
(
£vîôy
, 
log_î∫o
, c⁄° *
fmt
, 
va_li°
 
≠
)

134 
buf
[1024];

135 
size_t
 
Àn
;

137 i‡(
fmt
 !
NULL
)

138 
	`evutû_v¢¥ötf
(
buf
, (buf), 
fmt
, 
≠
);

140 
buf
[0] = '\0';

142 i‡(
log_î∫o
 >= 0) {

143 
Àn
 = 
	`°æí
(
buf
);

144 i‡(
Àn
 < (
buf
) - 3) {

145 
	`evutû_¢¥ötf
(
buf
 + 
Àn
, (buf) -Üen, ": %s",

146 
	`°ªº‹
(
log_î∫o
));

150 
	`evít_log
(
£vîôy
, 
buf
);

151 
	}
}

153 
evít_log_cb
 
	glog_‚
 = 
NULL
;

156 
	$evít_£t_log_ˇŒback
(
evít_log_cb
 
cb
)

158 
log_‚
 = 
cb
;

159 
	}
}

162 
	$evít_log
(
£vîôy
, c⁄° *
msg
)

164 i‡(
log_‚
)

165 
	`log_‚
(
£vîôy
, 
msg
);

167 c⁄° *
£vîôy_°r
;

168 
£vîôy
) {

169 
_EVENT_LOG_DEBUG
:

170 
£vîôy_°r
 = "debug";

172 
_EVENT_LOG_MSG
:

173 
£vîôy_°r
 = "msg";

175 
_EVENT_LOG_WARN
:

176 
£vîôy_°r
 = "warn";

178 
_EVENT_LOG_ERR
:

179 
£vîôy_°r
 = "err";

182 
£vîôy_°r
 = "???";

185 ()
	`Ârötf
(
°dîr
, "[%s] %s\n", 
£vîôy_°r
, 
msg
);

187 
	}
}

	@log.h

27 #i‚de‡
_LOG_H_


28 
	#_LOG_H_


	)

30 #ifde‡
__GNUC__


31 
	#EV_CHECK_FMT
(
a
,
b
Ë
	`__©åibuã__
((
	`f‹m©
(
¥ötf
,á, b)))

	)

33 
	#EV_CHECK_FMT
(
a
,
b
)

	)

36 
	$evít_îr
(
evÆ
, c⁄° *
fmt
, ...Ë
	`EV_CHECK_FMT
(2,3);

37 
	$evít_w¨n
(c⁄° *
fmt
, ...Ë
	`EV_CHECK_FMT
(1,2);

38 
	$evít_îrx
(
evÆ
, c⁄° *
fmt
, ...Ë
	`EV_CHECK_FMT
(2,3);

39 
	$evít_w¨nx
(c⁄° *
fmt
, ...Ë
	`EV_CHECK_FMT
(1,2);

40 
	$evít_msgx
(c⁄° *
fmt
, ...Ë
	`EV_CHECK_FMT
(1,2);

41 
	$_evít_debugx
(c⁄° *
fmt
, ...Ë
	`EV_CHECK_FMT
(1,2);

43 #ifde‡
USE_DEBUG


44 
	#evít_debug
(
x
Ë
_evít_debugx
 
	)
x

46 
	#evít_debug
(
x
Ëdÿ{;
	}
} 0)

	)

49 #unde‡
EV_CHECK_FMT


	@min_heap.h

27 #i‚de‡
_MIN_HEAP_H_


28 
	#_MIN_HEAP_H_


	)

30 
	~"evít.h
"

31 
	~"evutû.h
"

33 
	smö_hóp


35 
evít
** 
	mp
;

36 
	mn
, 
	ma
;

37 } 
	tmö_hóp_t
;

39 
ölöe
 
mö_hóp_˘‹
(
mö_hóp_t
* 
s
);

40 
ölöe
 
mö_hóp_dt‹
(
mö_hóp_t
* 
s
);

41 
ölöe
 
mö_hóp_ñem_öô
(
evít
* 
e
);

42 
ölöe
 
mö_hóp_ñem_gª©î
(
evít
 *
a
, evíà*
b
);

43 
ölöe
 
mö_hóp_em±y
(
mö_hóp_t
* 
s
);

44 
ölöe
 
mö_hóp_size
(
mö_hóp_t
* 
s
);

45 
ölöe
 
evít
* 
mö_hóp_t›
(
mö_hóp_t
* 
s
);

46 
ölöe
 
mö_hóp_ª£rve
(
mö_hóp_t
* 
s
, 
n
);

47 
ölöe
 
mö_hóp_push
(
mö_hóp_t
* 
s
, 
evít
* 
e
);

48 
ölöe
 
evít
* 
mö_hóp_p›
(
mö_hóp_t
* 
s
);

49 
ölöe
 
mö_hóp_îa£
(
mö_hóp_t
* 
s
, 
evít
* 
e
);

50 
ölöe
 
mö_hóp_shi·_up_
(
mö_hóp_t
* 
s
, 
hﬁe_ödex
, 
evít
* 
e
);

51 
ölöe
 
mö_hóp_shi·_down_
(
mö_hóp_t
* 
s
, 
hﬁe_ödex
, 
evít
* 
e
);

53 
	$mö_hóp_ñem_gª©î
(
evít
 *
a
, evíà*
b
)

55  
	`evutû_timîcmp
(&
a
->
ev_timeout
, &
b
->ev_timeout, >);

56 
	}
}

58 
	$mö_hóp_˘‹
(
mö_hóp_t
* 
s
Ë{ s->
p
 = 0; s->
n
 = 0; s->
a
 = 0; 
	}
}

59 
	$mö_hóp_dt‹
(
mö_hóp_t
* 
s
Ë{ 
	`‰ì
(s->
p
); 
	}
}

60 
	$mö_hóp_ñem_öô
(
evít
* 
e
Ë{É->
mö_hóp_idx
 = -1; 
	}
}

61 
	$mö_hóp_em±y
(
mö_hóp_t
* 
s
Ë{  0u =s->
n
; 
	}
}

62 
	$mö_hóp_size
(
mö_hóp_t
* 
s
Ë{  s->
n
; 
	}
}

63 
evít
* 
	$mö_hóp_t›
(
mö_hóp_t
* 
s
Ë{  s->
n
 ? *s->
p
 : 0; 
	}
}

65 
	$mö_hóp_push
(
mö_hóp_t
* 
s
, 
evít
* 
e
)

67 if(
	`mö_hóp_ª£rve
(
s
, s->
n
 + 1))

69 
	`mö_hóp_shi·_up_
(
s
, s->
n
++, 
e
);

71 
	}
}

73 
evít
* 
	$mö_hóp_p›
(
mö_hóp_t
* 
s
)

75 if(
s
->
n
)

77 
evít
* 
e
 = *
s
->
p
;

78 
	`mö_hóp_shi·_down_
(
s
, 0u, s->
p
[--s->
n
]);

79 
e
->
mö_hóp_idx
 = -1;

80  
e
;

83 
	}
}

85 
	$mö_hóp_îa£
(
mö_hóp_t
* 
s
, 
evít
* 
e
)

87 if((()-1Ë!
e
->
mö_hóp_idx
)

89 
evít
 *
œ°
 = 
s
->
p
[--s->
n
];

90 
∑ª¡
 = (
e
->
mö_hóp_idx
 - 1) / 2;

96 i‡(
e
->
mö_hóp_idx
 > 0 && 
	`mö_hóp_ñem_gª©î
(
s
->
p
[
∑ª¡
], 
œ°
))

97 
	`mö_hóp_shi·_up_
(
s
, 
e
->
mö_hóp_idx
, 
œ°
);

99 
	`mö_hóp_shi·_down_
(
s
, 
e
->
mö_hóp_idx
, 
œ°
);

100 
e
->
mö_hóp_idx
 = -1;

104 
	}
}

106 
	$mö_hóp_ª£rve
(
mö_hóp_t
* 
s
, 
n
)

108 if(
s
->
a
 < 
n
)

110 
evít
** 
p
;

111 
a
 = 
s
->a ? s->a * 2 : 8;

112 if(
a
 < 
n
)

113 
a
 = 
n
;

114 if(!(
p
 = (
evít
**)
	`ªÆloc
(
s
->p, 
a
 *  *p)))

116 
s
->
p
 =Ö;

117 
s
->
a
 =á;

120 
	}
}

122 
	$mö_hóp_shi·_up_
(
mö_hóp_t
* 
s
, 
hﬁe_ödex
, 
evít
* 
e
)

124 
∑ª¡
 = (
hﬁe_ödex
 - 1) / 2;

125 
hﬁe_ödex
 && 
	`mö_hóp_ñem_gª©î
(
s
->
p
[
∑ª¡
], 
e
))

127 (
s
->
p
[
hﬁe_ödex
] = s->p[
∑ª¡
])->
mö_hóp_idx
 = hole_index;

128 
hﬁe_ödex
 = 
∑ª¡
;

129 
∑ª¡
 = (
hﬁe_ödex
 - 1) / 2;

131 (
s
->
p
[
hﬁe_ödex
] = 
e
)->
mö_hóp_idx
 = hole_index;

132 
	}
}

134 
	$mö_hóp_shi·_down_
(
mö_hóp_t
* 
s
, 
hﬁe_ödex
, 
evít
* 
e
)

136 
mö_chûd
 = 2 * (
hﬁe_ödex
 + 1);

137 
mö_chûd
 <
s
->
n
)

139 
mö_chûd
 -mö_chûd =
s
->
n
 || 
	`mö_hóp_ñem_gª©î
(s->
p
[min_child], s->p[min_child - 1]);

140 if(!(
	`mö_hóp_ñem_gª©î
(
e
, 
s
->
p
[
mö_chûd
])))

142 (
s
->
p
[
hﬁe_ödex
] = s->p[
mö_chûd
])->
mö_hóp_idx
 = hole_index;

143 
hﬁe_ödex
 = 
mö_chûd
;

144 
mö_chûd
 = 2 * (
hﬁe_ödex
 + 1);

146 
	`mö_hóp_shi·_up_
(
s
, 
hﬁe_ödex
, 
e
);

147 
	}
}

	@poll.c

29 #ifde‡
HAVE_CONFIG_H


30 
	~"c⁄fig.h
"

33 
	~<sys/ty≥s.h
>

34 #ifde‡
HAVE_SYS_TIME_H


35 
	~<sys/time.h
>

37 
	~<sys/_libevít_time.h
>

39 
	~<sys/queue.h
>

40 
	~<pﬁl.h
>

41 
	~<sig«l.h
>

42 
	~<°dio.h
>

43 
	~<°dlib.h
>

44 
	~<°rög.h
>

45 
	~<uni°d.h
>

46 
	~<î∫o.h
>

47 #ifde‡
CHECK_INVARIANTS


48 
	~<as£π.h
>

51 
	~"evít.h
"

52 
	~"evít-öã∫Æ.h
"

53 
	~"evsig«l.h
"

54 
	~"log.h
"

56 
	spﬁl›
 {

57 
	mevít_cou¡
;

58 
	mnfds
;

59 
	mfd_cou¡
;

60 
pﬁlfd
 *
	mevít_£t
;

61 
evít
 **
	mevít_r_back
;

62 
evít
 **
	mevít_w_back
;

63 *
	midx∂us1_by_fd
;

68 *
pﬁl_öô
 (
evít_ba£
 *);

69 
pﬁl_add
 (*, 
evít
 *);

70 
pﬁl_dñ
 (*, 
evít
 *);

71 
pﬁl_di•©ch
 (
evít_ba£
 *, *, 
timevÆ
 *);

72 
pﬁl_dóŒoc
 (
evít_ba£
 *, *);

74 c⁄° 
evít›
 
	gpﬁl›s
 = {

76 
pﬁl_öô
,

77 
pﬁl_add
,

78 
pﬁl_dñ
,

79 
pﬁl_di•©ch
,

80 
pﬁl_dóŒoc
,

85 
	$pﬁl_öô
(
evít_ba£
 *
ba£
)

87 
pﬁl›
 *pollop;

90 i‡(
	`evutû_gëív
("EVENT_NOPOLL"))

91  (
NULL
);

93 i‡(!(
pﬁl›
 = 
	`ˇŒoc
(1, (pollop))))

94  (
NULL
);

96 
	`evsig«l_öô
(
ba£
);

98  (
pﬁl›
);

99 
	}
}

101 #ifde‡
CHECK_INVARIANTS


103 
	$pﬁl_check_ok
(
pﬁl›
 *
p›
)

105 
i
, 
idx
;

106 
evít
 *
ev
;

108 
i
 = 0; i < 
p›
->
fd_cou¡
; ++i) {

109 
idx
 = 
p›
->
idx∂us1_by_fd
[
i
]-1;

110 i‡(
idx
 < 0)

112 
	`as£π
(
p›
->
evít_£t
[
idx
].
fd
 =
i
);

113 i‡(
p›
->
evít_£t
[
idx
].
evíts
 & 
POLLIN
) {

114 
ev
 = 
p›
->
evít_r_back
[
idx
];

115 
	`as£π
(
ev
);

116 
	`as£π
(
ev
->
ev_evíts
 & 
EV_READ
);

117 
	`as£π
(
ev
->
ev_fd
 =
i
);

119 i‡(
p›
->
evít_£t
[
idx
].
evíts
 & 
POLLOUT
) {

120 
ev
 = 
p›
->
evít_w_back
[
idx
];

121 
	`as£π
(
ev
);

122 
	`as£π
(
ev
->
ev_evíts
 & 
EV_WRITE
);

123 
	`as£π
(
ev
->
ev_fd
 =
i
);

126 
i
 = 0; i < 
p›
->
nfds
; ++i) {

127 
pﬁlfd
 *
pfd
 = &
p›
->
evít_£t
[
i
];

128 
	`as£π
(
p›
->
idx∂us1_by_fd
[
pfd
->
fd
] =
i
+1);

130 
	}
}

132 
	#pﬁl_check_ok
(
p›
)

	)

136 
	$pﬁl_di•©ch
(
evít_ba£
 *
ba£
, *
¨g
, 
timevÆ
 *
tv
)

138 
ªs
, 
i
, 
j
, 
m£c
 = -1, 
nfds
;

139 
pﬁl›
 *
p›
 = 
¨g
;

141 
	`pﬁl_check_ok
(
p›
);

143 i‡(
tv
 !
NULL
)

144 
m£c
 = 
tv
->
tv_£c
 * 1000 + (tv->
tv_u£c
 + 999) / 1000;

146 
nfds
 = 
p›
->nfds;

147 
ªs
 = 
	`pﬁl
(
p›
->
evít_£t
, 
nfds
, 
m£c
);

149 i‡(
ªs
 == -1) {

150 i‡(
î∫o
 !
EINTR
) {

151 
	`evít_w¨n
("poll");

155 
	`evsig«l_¥o˚ss
(
ba£
);

157 } i‡(
ba£
->
sig
.
evsig«l_ˇught
) {

158 
	`evsig«l_¥o˚ss
(
ba£
);

161 
	`evít_debug
(("%s:Öﬁ»ªp‹t†%d", 
__func__
, 
ªs
));

163 i‡(
ªs
 =0 || 
nfds
 == 0)

166 
i
 = 
	`øndom
(Ë% 
nfds
;

167 
j
 = 0; j < 
nfds
; j++) {

168 
evít
 *
r_ev
 = 
NULL
, *
w_ev
 = NULL;

169 
wh©
;

170 i‡(++
i
 =
nfds
)

171 
i
 = 0;

172 
wh©
 = 
p›
->
evít_£t
[
i
].
ªvíts
;

174 i‡(!
wh©
)

177 
ªs
 = 0;

180 i‡(
wh©
 & (
POLLHUP
|
POLLERR
))

181 
wh©
 |
POLLIN
|
POLLOUT
;

182 i‡(
wh©
 & 
POLLIN
) {

183 
ªs
 |
EV_READ
;

184 
r_ev
 = 
p›
->
evít_r_back
[
i
];

186 i‡(
wh©
 & 
POLLOUT
) {

187 
ªs
 |
EV_WRITE
;

188 
w_ev
 = 
p›
->
evít_w_back
[
i
];

190 i‡(
ªs
 == 0)

193 i‡(
r_ev
 && (
ªs
 &Ñ_ev->
ev_evíts
)) {

194 
	`evít_a˘ive
(
r_ev
, 
ªs
 &Ñ_ev->
ev_evíts
, 1);

196 i‡(
w_ev
 && w_ev !
r_ev
 && (
ªs
 & w_ev->
ev_evíts
)) {

197 
	`evít_a˘ive
(
w_ev
, 
ªs
 & w_ev->
ev_evíts
, 1);

202 
	}
}

205 
	$pﬁl_add
(*
¨g
, 
evít
 *
ev
)

207 
pﬁl›
 *
p›
 = 
¨g
;

208 
pﬁlfd
 *
pfd
 = 
NULL
;

209 
i
;

211 i‡(
ev
->
ev_evíts
 & 
EV_SIGNAL
)

212  (
	`evsig«l_add
(
ev
));

213 i‡(!(
ev
->
ev_evíts
 & (
EV_READ
|
EV_WRITE
)))

216 
	`pﬁl_check_ok
(
p›
);

217 i‡(
p›
->
nfds
 + 1 >p›->
evít_cou¡
) {

218 
pﬁlfd
 *
tmp_evít_£t
;

219 
evít
 **
tmp_evít_r_back
;

220 
evít
 **
tmp_evít_w_back
;

221 
tmp_evít_cou¡
;

223 i‡(
p›
->
evít_cou¡
 < 32)

224 
tmp_evít_cou¡
 = 32;

226 
tmp_evít_cou¡
 = 
p›
->
evít_cou¡
 * 2;

229 
tmp_evít_£t
 = 
	`ªÆloc
(
p›
->
evít_£t
,

230 
tmp_evít_cou¡
 * (
pﬁlfd
));

231 i‡(
tmp_evít_£t
 =
NULL
) {

232 
	`evít_w¨n
("realloc");

235 
p›
->
evít_£t
 = 
tmp_evít_£t
;

237 
tmp_evít_r_back
 = 
	`ªÆloc
(
p›
->
evít_r_back
,

238 
tmp_evít_cou¡
 * (
evít
 *));

239 i‡(
tmp_evít_r_back
 =
NULL
) {

241 
	`evít_w¨n
("realloc");

244 
p›
->
evít_r_back
 = 
tmp_evít_r_back
;

246 
tmp_evít_w_back
 = 
	`ªÆloc
(
p›
->
evít_w_back
,

247 
tmp_evít_cou¡
 * (
evít
 *));

248 i‡(
tmp_evít_w_back
 =
NULL
) {

251 
	`evít_w¨n
("realloc");

254 
p›
->
evít_w_back
 = 
tmp_evít_w_back
;

256 
p›
->
evít_cou¡
 = 
tmp_evít_cou¡
;

258 i‡(
ev
->
ev_fd
 >
p›
->
fd_cou¡
) {

259 *
tmp_idx∂us1_by_fd
;

260 
√w_cou¡
;

261 i‡(
p›
->
fd_cou¡
 < 32)

262 
√w_cou¡
 = 32;

264 
√w_cou¡
 = 
p›
->
fd_cou¡
 * 2;

265 
√w_cou¡
 <
ev
->
ev_fd
)

266 
√w_cou¡
 *= 2;

267 
tmp_idx∂us1_by_fd
 =

268 
	`ªÆloc
(
p›
->
idx∂us1_by_fd
, 
√w_cou¡
 * ());

269 i‡(
tmp_idx∂us1_by_fd
 =
NULL
) {

270 
	`evít_w¨n
("realloc");

273 
p›
->
idx∂us1_by_fd
 = 
tmp_idx∂us1_by_fd
;

274 
	`mem£t
(
p›
->
idx∂us1_by_fd
 +Ö›->
fd_cou¡
,

275 0, ()*(
√w_cou¡
 - 
p›
->
fd_cou¡
));

276 
p›
->
fd_cou¡
 = 
√w_cou¡
;

279 
i
 = 
p›
->
idx∂us1_by_fd
[
ev
->
ev_fd
] - 1;

280 i‡(
i
 >= 0) {

281 
pfd
 = &
p›
->
evít_£t
[
i
];

283 
i
 = 
p›
->
nfds
++;

284 
pfd
 = &
p›
->
evít_£t
[
i
];

285 
pfd
->
evíts
 = 0;

286 
pfd
->
fd
 = 
ev
->
ev_fd
;

287 
p›
->
evít_w_back
[
i
] =Ö›->
evít_r_back
[i] = 
NULL
;

288 
p›
->
idx∂us1_by_fd
[
ev
->
ev_fd
] = 
i
 + 1;

291 
pfd
->
ªvíts
 = 0;

292 i‡(
ev
->
ev_evíts
 & 
EV_WRITE
) {

293 
pfd
->
evíts
 |
POLLOUT
;

294 
p›
->
evít_w_back
[
i
] = 
ev
;

296 i‡(
ev
->
ev_evíts
 & 
EV_READ
) {

297 
pfd
->
evíts
 |
POLLIN
;

298 
p›
->
evít_r_back
[
i
] = 
ev
;

300 
	`pﬁl_check_ok
(
p›
);

303 
	}
}

310 
	$pﬁl_dñ
(*
¨g
, 
evít
 *
ev
)

312 
pﬁl›
 *
p›
 = 
¨g
;

313 
pﬁlfd
 *
pfd
 = 
NULL
;

314 
i
;

316 i‡(
ev
->
ev_evíts
 & 
EV_SIGNAL
)

317  (
	`evsig«l_dñ
(
ev
));

319 i‡(!(
ev
->
ev_evíts
 & (
EV_READ
|
EV_WRITE
)))

322 
	`pﬁl_check_ok
(
p›
);

323 
i
 = 
p›
->
idx∂us1_by_fd
[
ev
->
ev_fd
] - 1;

324 i‡(
i
 < 0)

328 
pfd
 = &
p›
->
evít_£t
[
i
];

329 i‡(
ev
->
ev_evíts
 & 
EV_READ
) {

330 
pfd
->
evíts
 &~
POLLIN
;

331 
p›
->
evít_r_back
[
i
] = 
NULL
;

333 i‡(
ev
->
ev_evíts
 & 
EV_WRITE
) {

334 
pfd
->
evíts
 &~
POLLOUT
;

335 
p›
->
evít_w_back
[
i
] = 
NULL
;

337 
	`pﬁl_check_ok
(
p›
);

338 i‡(
pfd
->
evíts
)

343 
p›
->
idx∂us1_by_fd
[
ev
->
ev_fd
] = 0;

345 --
p›
->
nfds
;

346 i‡(
i
 !
p›
->
nfds
) {

351 
	`mem˝y
(&
p›
->
evít_£t
[
i
], &p›->evít_£t[p›->
nfds
],

352 (
pﬁlfd
));

353 
p›
->
evít_r_back
[
i
] =Ö›->evít_r_back[p›->
nfds
];

354 
p›
->
evít_w_back
[
i
] =Ö›->evít_w_back[p›->
nfds
];

355 
p›
->
idx∂us1_by_fd
[p›->
evít_£t
[
i
].
fd
] = i + 1;

358 
	`pﬁl_check_ok
(
p›
);

360 
	}
}

363 
	$pﬁl_dóŒoc
(
evít_ba£
 *
ba£
, *
¨g
)

365 
pﬁl›
 *
p›
 = 
¨g
;

367 
	`evsig«l_dóŒoc
(
ba£
);

368 i‡(
p›
->
evít_£t
)

369 
	`‰ì
(
p›
->
evít_£t
);

370 i‡(
p›
->
evít_r_back
)

371 
	`‰ì
(
p›
->
evít_r_back
);

372 i‡(
p›
->
evít_w_back
)

373 
	`‰ì
(
p›
->
evít_w_back
);

374 i‡(
p›
->
idx∂us1_by_fd
)

375 
	`‰ì
(
p›
->
idx∂us1_by_fd
);

377 
	`mem£t
(
p›
, 0, (
pﬁl›
));

378 
	`‰ì
(
p›
);

379 
	}
}

	@sample/event-test.c

6 #ifde‡
HAVE_CONFIG_H


7 
	~"c⁄fig.h
"

10 
	~<sys/ty≥s.h
>

11 
	~<sys/°©.h
>

12 #i‚de‡
WIN32


13 
	~<sys/queue.h
>

14 
	~<uni°d.h
>

15 
	~<sys/time.h
>

17 
	~<wödows.h
>

19 
	~<f˙é.h
>

20 
	~<°dlib.h
>

21 
	~<°dio.h
>

22 
	~<°rög.h
>

23 
	~<î∫o.h
>

25 
	~<evít.h
>

28 
	$fifo_ªad
(
fd
, 
evít
, *
¨g
)

30 
buf
[255];

31 
Àn
;

32 
evít
 *
ev
 = 
¨g
;

33 #ifde‡
WIN32


34 
DWORD
 
dwByãsRód
;

38 
	`evít_add
(
ev
, 
NULL
);

40 
	`Ârötf
(
°dîr
, "fifo_read called with fd: %d,Évent: %d,árg: %p\n",

41 
fd
, 
evít
, 
¨g
);

42 #ifde‡
WIN32


43 
Àn
 = 
	`RódFûe
((
HANDLE
)
fd
, 
buf
, (bufË- 1, &
dwByãsRód
, 
NULL
);

46 if(
Àn
 && 
dwByãsRód
 == 0) {

47 
	`Ârötf
(
°dîr
, "End Of File");

48 
	`evít_dñ
(
ev
);

52 
buf
[
dwByãsRód
] = '\0';

54 
Àn
 = 
	`ªad
(
fd
, 
buf
, (buf) - 1);

56 i‡(
Àn
 == -1) {

57 
	`≥º‹
("read");

59 } i‡(
Àn
 == 0) {

60 
	`Ârötf
(
°dîr
, "Connection closed\n");

64 
buf
[
Àn
] = '\0';

66 
	`Ârötf
(
°dout
, "Ród: %s\n", 
buf
);

67 
	}
}

70 
	$maö
 (
¨gc
, **
¨gv
)

72 
evít
 
evfifo
;

73 #ifde‡
WIN32


74 
HANDLE
 
sockë
;

76 
sockë
 = 
	`Cª©eFûe
("test.txt",

77 
GENERIC_READ
,

79 
NULL
,

80 
OPEN_EXISTING
,

81 
FILE_ATTRIBUTE_NORMAL
,

82 
NULL
);

84 if(
sockë
 =
INVALID_HANDLE_VALUE
)

88 
°©
 
°
;

89 c⁄° *
fifo
 = "event.fifo";

90 
sockë
;

92 i‡(
	`l°©
 (
fifo
, &
°
) == 0) {

93 i‡((
°
.
°_mode
 & 
S_IFMT
Ë=
S_IFREG
) {

94 
î∫o
 = 
EEXIST
;

95 
	`≥º‹
("lstat");

96 
	`exô
 (1);

100 
	`u∆ök
 (
fifo
);

101 i‡(
	`mkfifo
 (
fifo
, 0600) == -1) {

102 
	`≥º‹
("mkfifo");

103 
	`exô
 (1);

107 #ifde‡
__löux


108 
sockë
 = 
	`›í
 (
fifo
, 
O_RDWR
 | 
O_NONBLOCK
, 0);

110 
sockë
 = 
	`›í
 (
fifo
, 
O_RDONLY
 | 
O_NONBLOCK
, 0);

113 i‡(
sockë
 == -1) {

114 
	`≥º‹
("open");

115 
	`exô
 (1);

118 
	`Ârötf
(
°dîr
, "Wrôêd©®tÿ%s\n", 
fifo
);

121 
	`evít_öô
();

124 #ifde‡
WIN32


125 
	`evít_£t
(&
evfifo
, ()
sockë
, 
EV_READ
, 
fifo_ªad
, &evfifo);

127 
	`evít_£t
(&
evfifo
, 
sockë
, 
EV_READ
, 
fifo_ªad
, &evfifo);

131 
	`evít_add
(&
evfifo
, 
NULL
);

133 
	`evít_di•©ch
();

134 #ifde‡
WIN32


135 
	`Clo£H™dÀ
(
sockë
);

138 
	}
}

	@sample/signal-test.c

7 
	~<sys/ty≥s.h
>

9 #ifde‡
HAVE_CONFIG_H


10 
	~"c⁄fig.h
"

13 
	~<sys/°©.h
>

14 #i‚de‡
WIN32


15 
	~<sys/queue.h
>

16 
	~<uni°d.h
>

17 
	~<sys/time.h
>

19 
	~<wödows.h
>

21 
	~<sig«l.h
>

22 
	~<f˙é.h
>

23 
	~<°dlib.h
>

24 
	~<°dio.h
>

25 
	~<°rög.h
>

26 
	~<î∫o.h
>

28 
	~<evít.h
>

30 
	gˇŒed
 = 0;

33 
	$sig«l_cb
(
fd
, 
evít
, *
¨g
)

35 
evít
 *
sig«l
 = 
¨g
;

37 
	`¥ötf
("%s: gŸ sig«»%d\n", 
__func__
, 
	`EVENT_SIGNAL
(
sig«l
));

39 i‡(
ˇŒed
 >= 2)

40 
	`evít_dñ
(
sig«l
);

42 
ˇŒed
++;

43 
	}
}

46 
	$maö
 (
¨gc
, **
¨gv
)

48 
evít
 
sig«l_öt
;

51 
	`evít_öô
();

54 
	`evít_£t
(&
sig«l_öt
, 
SIGINT
, 
EV_SIGNAL
|
EV_PERSIST
, 
sig«l_cb
,

55 &
sig«l_öt
);

57 
	`evít_add
(&
sig«l_öt
, 
NULL
);

59 
	`evít_di•©ch
();

62 
	}
}

	@sample/time-test.c

6 
	~<sys/ty≥s.h
>

8 #ifde‡
HAVE_CONFIG_H


9 
	~"c⁄fig.h
"

12 
	~<sys/°©.h
>

13 #i‚de‡
WIN32


14 
	~<sys/queue.h
>

15 
	~<uni°d.h
>

17 
	~<time.h
>

18 #ifde‡
HAVE_SYS_TIME_H


19 
	~<sys/time.h
>

21 
	~<f˙é.h
>

22 
	~<°dlib.h
>

23 
	~<°dio.h
>

24 
	~<°rög.h
>

25 
	~<î∫o.h
>

27 
	~<evít.h
>

28 
	~<evutû.h
>

30 
	gœ°time
;

33 
	$timeout_cb
(
fd
, 
evít
, *
¨g
)

35 
timevÆ
 
tv
;

36 
evít
 *
timeout
 = 
¨g
;

37 
√wtime
 = 
	`time
(
NULL
);

39 
	`¥ötf
("%s: cÆÀdáà%d: %d\n", 
__func__
, 
√wtime
,

40 
√wtime
 - 
œ°time
);

41 
œ°time
 = 
√wtime
;

43 
	`evutû_timî˛ór
(&
tv
);

44 
tv
.
tv_£c
 = 2;

45 
	`evít_add
(
timeout
, &
tv
);

46 
	}
}

49 
	$maö
 (
¨gc
, **
¨gv
)

51 
evít
 
timeout
;

52 
timevÆ
 
tv
;

55 
	`evít_öô
();

58 
	`evtimî_£t
(&
timeout
, 
timeout_cb
, &timeout);

60 
	`evutû_timî˛ór
(&
tv
);

61 
tv
.
tv_£c
 = 2;

62 
	`evít_add
(&
timeout
, &
tv
);

64 
œ°time
 = 
	`time
(
NULL
);

66 
	`evít_di•©ch
();

69 
	}
}

	@select.c

29 #ifde‡
HAVE_CONFIG_H


30 
	~"c⁄fig.h
"

33 
	~<sys/ty≥s.h
>

34 #ifde‡
HAVE_SYS_TIME_H


35 
	~<sys/time.h
>

37 
	~<sys/_libevít_time.h
>

39 #ifde‡
HAVE_SYS_SELECT_H


40 
	~<sys/£À˘.h
>

42 
	~<sys/queue.h
>

43 
	~<sig«l.h
>

44 
	~<°dio.h
>

45 
	~<°dlib.h
>

46 
	~<°rög.h
>

47 
	~<uni°d.h
>

48 
	~<î∫o.h
>

49 #ifde‡
CHECK_INVARIANTS


50 
	~<as£π.h
>

53 
	~"evít.h
"

54 
	~"evutû.h
"

55 
	~"evít-öã∫Æ.h
"

56 
	~"evsig«l.h
"

57 
	~"log.h
"

59 #i‚de‡
howm™y


60 
	#howm™y
(
x
, 
y
Ë(((x)+((y)-1))/(y))

	)

63 #i‚de‡
_EVENT_HAVE_FD_MASK


65 #unde‡
NFDBITS


66 
	#NFDBITS
 (()*8)

	)

67 
	tfd_mask
;

70 
	s£À˘›
 {

71 
	mevít_fds
;

72 
	mevít_fdsz
;

73 
fd_£t
 *
	mevít_ªad£t_ö
;

74 
fd_£t
 *
	mevít_wrôe£t_ö
;

75 
fd_£t
 *
	mevít_ªad£t_out
;

76 
fd_£t
 *
	mevít_wrôe£t_out
;

77 
evít
 **
	mevít_r_by_fd
;

78 
evít
 **
	mevít_w_by_fd
;

81 *
£À˘_öô
 (
evít_ba£
 *);

82 
£À˘_add
 (*, 
evít
 *);

83 
£À˘_dñ
 (*, 
evít
 *);

84 
£À˘_di•©ch
 (
evít_ba£
 *, *, 
timevÆ
 *);

85 
£À˘_dóŒoc
 (
evít_ba£
 *, *);

87 c⁄° 
evít›
 
	g£À˘›s
 = {

89 
£À˘_öô
,

90 
£À˘_add
,

91 
£À˘_dñ
,

92 
£À˘_di•©ch
,

93 
£À˘_dóŒoc
,

97 
£À˘_ªsize
(
£À˘›
 *
s›
, 
fdsz
);

100 
	$£À˘_öô
(
evít_ba£
 *
ba£
)

102 
£À˘›
 *
s›
;

105 i‡(
	`evutû_gëív
("EVENT_NOSELECT"))

106  (
NULL
);

108 i‡(!(
s›
 = 
	`ˇŒoc
(1, (
£À˘›
))))

109  (
NULL
);

111 
	`£À˘_ªsize
(
s›
, 
	`howm™y
(32 + 1, 
NFDBITS
)*(
fd_mask
));

113 
	`evsig«l_öô
(
ba£
);

115  (
s›
);

116 
	}
}

118 #ifde‡
CHECK_INVARIANTS


120 
	$check_£À˘›
(
£À˘›
 *
s›
)

122 
i
;

123 
i
 = 0; i <
s›
->
evít_fds
; ++i) {

124 i‡(
	`FD_ISSET
(
i
, 
s›
->
evít_ªad£t_ö
)) {

125 
	`as£π
(
s›
->
evít_r_by_fd
[
i
]);

126 
	`as£π
(
s›
->
evít_r_by_fd
[
i
]->
ev_evíts
 & 
EV_READ
);

127 
	`as£π
(
s›
->
evít_r_by_fd
[
i
]->
ev_fd
 == i);

129 
	`as£π
(! 
s›
->
evít_r_by_fd
[
i
]);

131 i‡(
	`FD_ISSET
(
i
, 
s›
->
evít_wrôe£t_ö
)) {

132 
	`as£π
(
s›
->
evít_w_by_fd
[
i
]);

133 
	`as£π
(
s›
->
evít_w_by_fd
[
i
]->
ev_evíts
 & 
EV_WRITE
);

134 
	`as£π
(
s›
->
evít_w_by_fd
[
i
]->
ev_fd
 == i);

136 
	`as£π
(! 
s›
->
evít_w_by_fd
[
i
]);

140 
	}
}

142 
	#check_£À˘›
(
s›
Ëdÿ{ (Ës›; } 0)

	)

146 
	$£À˘_di•©ch
(
evít_ba£
 *
ba£
, *
¨g
, 
timevÆ
 *
tv
)

148 
ªs
, 
i
, 
j
;

149 
£À˘›
 *
s›
 = 
¨g
;

151 
	`check_£À˘›
(
s›
);

153 
	`mem˝y
(
s›
->
evít_ªad£t_out
, s›->
evít_ªad£t_ö
,

154 
s›
->
evít_fdsz
);

155 
	`mem˝y
(
s›
->
evít_wrôe£t_out
, s›->
evít_wrôe£t_ö
,

156 
s›
->
evít_fdsz
);

158 
ªs
 = 
	`£À˘
(
s›
->
evít_fds
 + 1, s›->
evít_ªad£t_out
,

159 
s›
->
evít_wrôe£t_out
, 
NULL
, 
tv
);

161 
	`check_£À˘›
(
s›
);

163 i‡(
ªs
 == -1) {

164 i‡(
î∫o
 !
EINTR
) {

165 
	`evít_w¨n
("select");

169 
	`evsig«l_¥o˚ss
(
ba£
);

171 } i‡(
ba£
->
sig
.
evsig«l_ˇught
) {

172 
	`evsig«l_¥o˚ss
(
ba£
);

175 
	`evít_debug
(("%s: sñe˘Ñï‹t†%d", 
__func__
, 
ªs
));

177 
	`check_£À˘›
(
s›
);

178 
i
 = 
	`øndom
(Ë% (
s›
->
evít_fds
+1);

179 
j
 = 0; j <
s›
->
evít_fds
; ++j) {

180 
evít
 *
r_ev
 = 
NULL
, *
w_ev
 = NULL;

181 i‡(++
i
 >
s›
->
evít_fds
+1)

182 
i
 = 0;

184 
ªs
 = 0;

185 i‡(
	`FD_ISSET
(
i
, 
s›
->
evít_ªad£t_out
)) {

186 
r_ev
 = 
s›
->
evít_r_by_fd
[
i
];

187 
ªs
 |
EV_READ
;

189 i‡(
	`FD_ISSET
(
i
, 
s›
->
evít_wrôe£t_out
)) {

190 
w_ev
 = 
s›
->
evít_w_by_fd
[
i
];

191 
ªs
 |
EV_WRITE
;

193 i‡(
r_ev
 && (
ªs
 &Ñ_ev->
ev_evíts
)) {

194 
	`evít_a˘ive
(
r_ev
, 
ªs
 &Ñ_ev->
ev_evíts
, 1);

196 i‡(
w_ev
 && w_ev !
r_ev
 && (
ªs
 & w_ev->
ev_evíts
)) {

197 
	`evít_a˘ive
(
w_ev
, 
ªs
 & w_ev->
ev_evíts
, 1);

200 
	`check_£À˘›
(
s›
);

203 
	}
}

207 
	$£À˘_ªsize
(
£À˘›
 *
s›
, 
fdsz
)

209 
n_evíts
, 
n_evíts_ﬁd
;

211 
fd_£t
 *
ªad£t_ö
 = 
NULL
;

212 
fd_£t
 *
wrôe£t_ö
 = 
NULL
;

213 
fd_£t
 *
ªad£t_out
 = 
NULL
;

214 
fd_£t
 *
wrôe£t_out
 = 
NULL
;

215 
evít
 **
r_by_fd
 = 
NULL
;

216 
evít
 **
w_by_fd
 = 
NULL
;

218 
n_evíts
 = (
fdsz
/(
fd_mask
)Ë* 
NFDBITS
;

219 
n_evíts_ﬁd
 = (
s›
->
evít_fdsz
/(
fd_mask
)Ë* 
NFDBITS
;

221 i‡(
s›
->
evít_ªad£t_ö
)

222 
	`check_£À˘›
(
s›
);

224 i‡((
ªad£t_ö
 = 
	`ªÆloc
(
s›
->
evít_ªad£t_ö
, 
fdsz
)Ë=
NULL
)

225 
îr‹
;

226 
s›
->
evít_ªad£t_ö
 = 
ªad£t_ö
;

227 i‡((
ªad£t_out
 = 
	`ªÆloc
(
s›
->
evít_ªad£t_out
, 
fdsz
)Ë=
NULL
)

228 
îr‹
;

229 
s›
->
evít_ªad£t_out
 = 
ªad£t_out
;

230 i‡((
wrôe£t_ö
 = 
	`ªÆloc
(
s›
->
evít_wrôe£t_ö
, 
fdsz
)Ë=
NULL
)

231 
îr‹
;

232 
s›
->
evít_wrôe£t_ö
 = 
wrôe£t_ö
;

233 i‡((
wrôe£t_out
 = 
	`ªÆloc
(
s›
->
evít_wrôe£t_out
, 
fdsz
)Ë=
NULL
)

234 
îr‹
;

235 
s›
->
evít_wrôe£t_out
 = 
wrôe£t_out
;

236 i‡((
r_by_fd
 = 
	`ªÆloc
(
s›
->
evít_r_by_fd
,

237 
n_evíts
*(
evít
*))Ë=
NULL
)

238 
îr‹
;

239 
s›
->
evít_r_by_fd
 = 
r_by_fd
;

240 i‡((
w_by_fd
 = 
	`ªÆloc
(
s›
->
evít_w_by_fd
,

241 
n_evíts
 * (
evít
*))Ë=
NULL
)

242 
îr‹
;

243 
s›
->
evít_w_by_fd
 = 
w_by_fd
;

245 
	`mem£t
((*)
s›
->
evít_ªad£t_ö
 + s›->
evít_fdsz
, 0,

246 
fdsz
 - 
s›
->
evít_fdsz
);

247 
	`mem£t
((*)
s›
->
evít_wrôe£t_ö
 + s›->
evít_fdsz
, 0,

248 
fdsz
 - 
s›
->
evít_fdsz
);

249 
	`mem£t
(
s›
->
evít_r_by_fd
 + 
n_evíts_ﬁd
, 0,

250 (
n_evíts
-
n_evíts_ﬁd
Ë* (
evít
*));

251 
	`mem£t
(
s›
->
evít_w_by_fd
 + 
n_evíts_ﬁd
, 0,

252 (
n_evíts
-
n_evíts_ﬁd
Ë* (
evít
*));

254 
s›
->
evít_fdsz
 = 
fdsz
;

255 
	`check_£À˘›
(
s›
);

259 
îr‹
:

260 
	`evít_w¨n
("malloc");

262 
	}
}

266 
	$£À˘_add
(*
¨g
, 
evít
 *
ev
)

268 
£À˘›
 *
s›
 = 
¨g
;

270 i‡(
ev
->
ev_evíts
 & 
EV_SIGNAL
)

271  (
	`evsig«l_add
(
ev
));

273 
	`check_£À˘›
(
s›
);

278 i‡(
s›
->
evít_fds
 < 
ev
->
ev_fd
) {

279 
fdsz
 = 
s›
->
evít_fdsz
;

281 i‡(
fdsz
 < (
fd_mask
))

282 
fdsz
 = (
fd_mask
);

284 
fdsz
 <

285 (
	`howm™y
(
ev
->
ev_fd
 + 1, 
NFDBITS
Ë* (
fd_mask
)))

286 
fdsz
 *= 2;

288 i‡(
fdsz
 !
s›
->
evít_fdsz
) {

289 i‡(
	`£À˘_ªsize
(
s›
, 
fdsz
)) {

290 
	`check_£À˘›
(
s›
);

295 
s›
->
evít_fds
 = 
ev
->
ev_fd
;

298 i‡(
ev
->
ev_evíts
 & 
EV_READ
) {

299 
	`FD_SET
(
ev
->
ev_fd
, 
s›
->
evít_ªad£t_ö
);

300 
s›
->
evít_r_by_fd
[
ev
->
ev_fd
] =Év;

302 i‡(
ev
->
ev_evíts
 & 
EV_WRITE
) {

303 
	`FD_SET
(
ev
->
ev_fd
, 
s›
->
evít_wrôe£t_ö
);

304 
s›
->
evít_w_by_fd
[
ev
->
ev_fd
] =Év;

306 
	`check_£À˘›
(
s›
);

309 
	}
}

316 
	$£À˘_dñ
(*
¨g
, 
evít
 *
ev
)

318 
£À˘›
 *
s›
 = 
¨g
;

320 
	`check_£À˘›
(
s›
);

321 i‡(
ev
->
ev_evíts
 & 
EV_SIGNAL
)

322  (
	`evsig«l_dñ
(
ev
));

324 i‡(
s›
->
evít_fds
 < 
ev
->
ev_fd
) {

325 
	`check_£À˘›
(
s›
);

329 i‡(
ev
->
ev_evíts
 & 
EV_READ
) {

330 
	`FD_CLR
(
ev
->
ev_fd
, 
s›
->
evít_ªad£t_ö
);

331 
s›
->
evít_r_by_fd
[
ev
->
ev_fd
] = 
NULL
;

334 i‡(
ev
->
ev_evíts
 & 
EV_WRITE
) {

335 
	`FD_CLR
(
ev
->
ev_fd
, 
s›
->
evít_wrôe£t_ö
);

336 
s›
->
evít_w_by_fd
[
ev
->
ev_fd
] = 
NULL
;

339 
	`check_£À˘›
(
s›
);

341 
	}
}

344 
	$£À˘_dóŒoc
(
evít_ba£
 *
ba£
, *
¨g
)

346 
£À˘›
 *
s›
 = 
¨g
;

348 
	`evsig«l_dóŒoc
(
ba£
);

349 i‡(
s›
->
evít_ªad£t_ö
)

350 
	`‰ì
(
s›
->
evít_ªad£t_ö
);

351 i‡(
s›
->
evít_wrôe£t_ö
)

352 
	`‰ì
(
s›
->
evít_wrôe£t_ö
);

353 i‡(
s›
->
evít_ªad£t_out
)

354 
	`‰ì
(
s›
->
evít_ªad£t_out
);

355 i‡(
s›
->
evít_wrôe£t_out
)

356 
	`‰ì
(
s›
->
evít_wrôe£t_out
);

357 i‡(
s›
->
evít_r_by_fd
)

358 
	`‰ì
(
s›
->
evít_r_by_fd
);

359 i‡(
s›
->
evít_w_by_fd
)

360 
	`‰ì
(
s›
->
evít_w_by_fd
);

362 
	`mem£t
(
s›
, 0, (
£À˘›
));

363 
	`‰ì
(
s›
);

364 
	}
}

	@signal.c

29 #ifde‡
HAVE_CONFIG_H


30 
	~"c⁄fig.h
"

33 #ifde‡
WIN32


34 
	#WIN32_LEAN_AND_MEAN


	)

35 
	~<wösock2.h
>

36 
	~<wödows.h
>

37 #unde‡
WIN32_LEAN_AND_MEAN


39 
	~<sys/ty≥s.h
>

40 #ifde‡
HAVE_SYS_TIME_H


41 
	~<sys/time.h
>

43 
	~<sys/queue.h
>

44 #ifde‡
HAVE_SYS_SOCKET_H


45 
	~<sys/sockë.h
>

47 
	~<sig«l.h
>

48 
	~<°dio.h
>

49 
	~<°dlib.h
>

50 
	~<°rög.h
>

51 #ifde‡
HAVE_UNISTD_H


52 
	~<uni°d.h
>

54 
	~<î∫o.h
>

55 #ifde‡
HAVE_FCNTL_H


56 
	~<f˙é.h
>

58 
	~<as£π.h
>

60 
	~"evít.h
"

61 
	~"evít-öã∫Æ.h
"

62 
	~"evsig«l.h
"

63 
	~"evutû.h
"

64 
	~"log.h
"

66 
evít_ba£
 *
	gevsig«l_ba£
 = 
NULL
;

68 
evsig«l_h™dÀr
(
sig
);

72 
	$evsig«l_cb
(
fd
, 
wh©
, *
¨g
)

74 
sig«ls
[1];

75 #ifde‡
WIN32


76 
SSIZE_T
 
n
;

78 
ssize_t
 
n
;

81 
n
 = 
	`ªcv
(
fd
, 
sig«ls
, (signals), 0);

82 i‡(
n
 == -1)

83 
	`evít_îr
(1, "%s:Ñód", 
__func__
);

84 
	}
}

86 #ifde‡
HAVE_SETFD


87 
	#FD_CLOSEONEXEC
(
x
) do { \

88 i‡(
	`f˙é
(
x
, 
F_SETFD
, 1) == -1) \

89 
	`evít_w¨n
("f˙é(%d, F_SETFD)", 
x
); \

90 } 0)

	)

92 
	#FD_CLOSEONEXEC
(
x
)

	)

96 
	$evsig«l_öô
(
evít_ba£
 *
ba£
)

98 
i
;

105 i‡(
	`evutû_sockë∑ú
(

106 
AF_UNIX
, 
SOCK_STREAM
, 0, 
ba£
->
sig
.
ev_sig«l_∑ú
) == -1) {

107 #ifde‡
WIN32


110 
	`evít_w¨n
("%s: sockë∑ú", 
__func__
);

112 
	`evít_îr
(1, "%s: sockë∑ú", 
__func__
);

117 
	`FD_CLOSEONEXEC
(
ba£
->
sig
.
ev_sig«l_∑ú
[0]);

118 
	`FD_CLOSEONEXEC
(
ba£
->
sig
.
ev_sig«l_∑ú
[1]);

119 
ba£
->
sig
.
sh_ﬁd
 = 
NULL
;

120 
ba£
->
sig
.
sh_ﬁd_max
 = 0;

121 
ba£
->
sig
.
evsig«l_ˇught
 = 0;

122 
	`mem£t
(&
ba£
->
sig
.
evsigˇught
, 0, (
sig_©omic_t
)*
NSIG
);

124 
i
 = 0; i < 
NSIG
; ++i)

125 
	`TAILQ_INIT
(&
ba£
->
sig
.
evsigevíts
[
i
]);

127 
	`evutû_make_sockë_n⁄blockög
(
ba£
->
sig
.
ev_sig«l_∑ú
[0]);

129 
	`evít_£t
(&
ba£
->
sig
.
ev_sig«l
, ba£->sig.
ev_sig«l_∑ú
[1],

130 
EV_READ
 | 
EV_PERSIST
, 
evsig«l_cb
, &
ba£
->
sig
.
ev_sig«l
);

131 
ba£
->
sig
.
ev_sig«l
.
ev_ba£
 = base;

132 
ba£
->
sig
.
ev_sig«l
.
ev_Êags
 |
EVLIST_INTERNAL
;

135 
	}
}

140 
_evsig«l_£t_h™dÀr
(
evít_ba£
 *
ba£
,

141 
evsig«l
, (*
h™dÀr
)())

143 #ifde‡
HAVE_SIGACTION


144 
siga˘i⁄
 
ß
;

146 
ev_sigh™dÀr_t
 
sh
;

148 
evsig«l_öfo
 *
sig
 = &
ba£
->sig;

149 *
p
;

155 i‡(
evsig«l
 >
sig
->
sh_ﬁd_max
) {

156 
√w_max
 = 
evsig«l
 + 1;

157 
	`evít_debug
(("%s:Évsignal (%d) >= sh_old_max (%d),Ñesizing",

158 
__func__
, 
evsig«l
, 
sig
->
sh_ﬁd_max
));

159 
p
 = 
	`ªÆloc
(
sig
->
sh_ﬁd
, 
√w_max
 * (*sig->sh_old));

160 i‡(
p
 =
NULL
) {

161 
	`evít_w¨n
("realloc");

165 
	`mem£t
((*)
p
 + 
sig
->
sh_ﬁd_max
 * (*sig->
sh_ﬁd
),

166 0, (
√w_max
 - 
sig
->
sh_ﬁd_max
Ë* (*sig->
sh_ﬁd
));

168 
sig
->
sh_ﬁd_max
 = 
√w_max
;

169 
sig
->
sh_ﬁd
 = 
p
;

173 
sig
->
sh_ﬁd
[
evsig«l
] = 
	`mÆloc
( *sig->sh_old[evsignal]);

174 i‡(
sig
->
sh_ﬁd
[
evsig«l
] =
NULL
) {

175 
	`evít_w¨n
("malloc");

180 #ifde‡
HAVE_SIGACTION


181 
	`mem£t
(&
ß
, 0, (sa));

182 
ß
.
ß_h™dÀr
 = 
h™dÀr
;

183 
ß
.
ß_Êags
 |
SA_RESTART
;

184 
	`sigfûl£t
(&
ß
.
ß_mask
);

186 i‡(
	`siga˘i⁄
(
evsig«l
, &
ß
, 
sig
->
sh_ﬁd
[evsignal]) == -1) {

187 
	`evít_w¨n
("sigaction");

188 
	`‰ì
(
sig
->
sh_ﬁd
[
evsig«l
]);

192 i‡((
sh
 = 
	`sig«l
(
evsig«l
, 
h™dÀr
)Ë=
SIG_ERR
) {

193 
	`evít_w¨n
("signal");

194 
	`‰ì
(
sig
->
sh_ﬁd
[
evsig«l
]);

197 *
sig
->
sh_ﬁd
[
evsig«l
] = 
sh
;

201 
	}
}

204 
	$evsig«l_add
(
evít
 *
ev
)

206 
evsig«l
;

207 
evít_ba£
 *
ba£
 = 
ev
->
ev_ba£
;

208 
evsig«l_öfo
 *
sig
 = &
ev
->
ev_ba£
->sig;

210 i‡(
ev
->
ev_evíts
 & (
EV_READ
|
EV_WRITE
))

211 
	`evít_îrx
(1, "%s: EV_SIGNAL incom∑tibÀ u£", 
__func__
);

212 
evsig«l
 = 
	`EVENT_SIGNAL
(
ev
);

213 
	`as£π
(
evsig«l
 >0 &&Évsig«»< 
NSIG
);

214 i‡(
	`TAILQ_EMPTY
(&
sig
->
evsigevíts
[
evsig«l
])) {

215 
	`evít_debug
(("%s: %p: ch™gög sig«»h™dÀr", 
__func__
, 
ev
));

216 i‡(
	`_evsig«l_£t_h™dÀr
(

217 
ba£
, 
evsig«l
, 
evsig«l_h™dÀr
) == -1)

221 
evsig«l_ba£
 = 
ba£
;

223 i‡(!
sig
->
ev_sig«l_added
) {

224 i‡(
	`evít_add
(&
sig
->
ev_sig«l
, 
NULL
))

226 
sig
->
ev_sig«l_added
 = 1;

231 
	`TAILQ_INSERT_TAIL
(&
sig
->
evsigevíts
[
evsig«l
], 
ev
, 
ev_sig«l_√xt
);

234 
	}
}

237 
	$_evsig«l_ª°‹e_h™dÀr
(
evít_ba£
 *
ba£
, 
evsig«l
)

239 
ªt
 = 0;

240 
evsig«l_öfo
 *
sig
 = &
ba£
->sig;

241 #ifde‡
HAVE_SIGACTION


242 
siga˘i⁄
 *
sh
;

244 
ev_sigh™dÀr_t
 *
sh
;

248 
sh
 = 
sig
->
sh_ﬁd
[
evsig«l
];

249 
sig
->
sh_ﬁd
[
evsig«l
] = 
NULL
;

250 #ifde‡
HAVE_SIGACTION


251 i‡(
	`siga˘i⁄
(
evsig«l
, 
sh
, 
NULL
) == -1) {

252 
	`evít_w¨n
("sigaction");

253 
ªt
 = -1;

256 i‡(
	`sig«l
(
evsig«l
, *
sh
Ë=
SIG_ERR
) {

257 
	`evít_w¨n
("signal");

258 
ªt
 = -1;

261 
	`‰ì
(
sh
);

263  
ªt
;

264 
	}
}

267 
	$evsig«l_dñ
(
evít
 *
ev
)

269 
evít_ba£
 *
ba£
 = 
ev
->
ev_ba£
;

270 
evsig«l_öfo
 *
sig
 = &
ba£
->sig;

271 
evsig«l
 = 
	`EVENT_SIGNAL
(
ev
);

273 
	`as£π
(
evsig«l
 >0 &&Évsig«»< 
NSIG
);

276 
	`TAILQ_REMOVE
(&
sig
->
evsigevíts
[
evsig«l
], 
ev
, 
ev_sig«l_√xt
);

278 i‡(!
	`TAILQ_EMPTY
(&
sig
->
evsigevíts
[
evsig«l
]))

281 
	`evít_debug
(("%s: %p:Ñe°‹ög sig«»h™dÀr", 
__func__
, 
ev
));

283  (
	`_evsig«l_ª°‹e_h™dÀr
(
ev
->
ev_ba£
, 
	`EVENT_SIGNAL
(ev)));

284 
	}
}

287 
	$evsig«l_h™dÀr
(
sig
)

289 
ßve_î∫o
 = 
î∫o
;

291 i‡(
evsig«l_ba£
 =
NULL
) {

292 
	`evít_w¨n
(

294 
__func__
, 
sig
);

298 
evsig«l_ba£
->
sig
.
evsigˇught
[sig]++;

299 
evsig«l_ba£
->
sig
.
evsig«l_ˇught
 = 1;

301 #i‚de‡
HAVE_SIGACTION


302 
	`sig«l
(
sig
, 
evsig«l_h™dÀr
);

306 
	`£nd
(
evsig«l_ba£
->
sig
.
ev_sig«l_∑ú
[0], "a", 1, 0);

307 
î∫o
 = 
ßve_î∫o
;

308 
	}
}

311 
	$evsig«l_¥o˚ss
(
evít_ba£
 *
ba£
)

313 
evsig«l_öfo
 *
sig
 = &
ba£
->sig;

314 
evít
 *
ev
, *
√xt_ev
;

315 
sig_©omic_t
 
nˇŒs
;

316 
i
;

318 
ba£
->
sig
.
evsig«l_ˇught
 = 0;

319 
i
 = 1; i < 
NSIG
; ++i) {

320 
nˇŒs
 = 
sig
->
evsigˇught
[
i
];

321 i‡(
nˇŒs
 == 0)

323 
sig
->
evsigˇught
[
i
] -
nˇŒs
;

325 
ev
 = 
	`TAILQ_FIRST
(&
sig
->
evsigevíts
[
i
]);

326 
ev
 !
NULL
;Év = 
√xt_ev
) {

327 
√xt_ev
 = 
	`TAILQ_NEXT
(
ev
, 
ev_sig«l_√xt
);

328 i‡(!(
ev
->
ev_evíts
 & 
EV_PERSIST
))

329 
	`evít_dñ
(
ev
);

330 
	`evít_a˘ive
(
ev
, 
EV_SIGNAL
, 
nˇŒs
);

334 
	}
}

337 
	$evsig«l_dóŒoc
(
evít_ba£
 *
ba£
)

339 
i
 = 0;

340 i‡(
ba£
->
sig
.
ev_sig«l_added
) {

341 
	`evít_dñ
(&
ba£
->
sig
.
ev_sig«l
);

342 
ba£
->
sig
.
ev_sig«l_added
 = 0;

344 
i
 = 0; i < 
NSIG
; ++i) {

345 i‡(
i
 < 
ba£
->
sig
.
sh_ﬁd_max
 && ba£->sig.
sh_ﬁd
[i] !
NULL
)

346 
	`_evsig«l_ª°‹e_h™dÀr
(
ba£
, 
i
);

349 
	`EVUTIL_CLOSESOCKET
(
ba£
->
sig
.
ev_sig«l_∑ú
[0]);

350 
ba£
->
sig
.
ev_sig«l_∑ú
[0] = -1;

351 
	`EVUTIL_CLOSESOCKET
(
ba£
->
sig
.
ev_sig«l_∑ú
[1]);

352 
ba£
->
sig
.
ev_sig«l_∑ú
[1] = -1;

353 
ba£
->
sig
.
sh_ﬁd_max
 = 0;

356 
	`‰ì
(
ba£
->
sig
.
sh_ﬁd
);

357 
	}
}

	@strlcpy-internal.h

1 #i‚de‡
_STRLCPY_INTERNAL_H_


2 
	#_STRLCPY_INTERNAL_H_


	)

4 #ifde‡
__˝lu•lus


8 #ifde‡
HAVE_CONFIG_H


9 
	~"c⁄fig.h
"

12 #i‚de‡
HAVE_STRLCPY


13 
	~<°rög.h
>

14 
size_t
 
_evít_°æ˝y
(*
d°
, c⁄° *
§c
, size_à
siz
);

15 
	#°æ˝y
 
_evít_°æ˝y


	)

18 #ifde‡
__˝lu•lus


	@strlcpy.c

30 #i‡
deföed
(
LIBC_SCCS
Ë&& !deföed(
löt
)

31 *
	grcsid
 = "$OpenBSD: strlcpy.c,v 1.5 2001/05/13 15:40:16 deraadt Exp $";

34 
	~<sys/ty≥s.h
>

36 #ifde‡
HAVE_CONFIG_H


37 
	~"c⁄fig.h
"

40 #i‚de‡
HAVE_STRLCPY


41 
	~"°æ˝y-öã∫Æ.h
"

48 
size_t


49 
	$_evít_°æ˝y
(
d°
, 
§c
, 
siz
)

50 *
d°
;

51 c⁄° *
§c
;

52 
size_t
 
siz
;

54 *
d
 = 
d°
;

55 c⁄° *
s
 = 
§c
;

56 
size_t
 
n
 = 
siz
;

59 i‡(
n
 != 0 && --n != 0) {

61 i‡((*
d
++ = *
s
++) == 0)

63 } --
n
 != 0);

67 i‡(
n
 == 0) {

68 i‡(
siz
 != 0)

69 *
d
 = '\0';

70 *
s
++)

74 (
s
 - 
§c
 - 1);

75 
	}
}

	@test/bench.c

36 #ifde‡
HAVE_CONFIG_H


37 
	~"c⁄fig.h
"

40 
	~<sys/ty≥s.h
>

41 
	~<sys/°©.h
>

42 
	~<sys/time.h
>

43 #ifde‡
WIN32


44 
	~<wödows.h
>

46 
	~<sys/sockë.h
>

47 
	~<sig«l.h
>

48 
	~<sys/ªsour˚.h
>

50 
	~<f˙é.h
>

51 
	~<°dlib.h
>

52 
	~<°dio.h
>

53 
	~<°rög.h
>

54 
	~<uni°d.h
>

55 
	~<î∫o.h
>

57 
	~<evít.h
>

58 
	~<evutû.h
>

61 
	gcou¡
, 
	gwrôes
, 
	gfúed
;

62 *
	gpùes
;

63 
	gnum_pùes
, 
	gnum_a˘ive
, 
	gnum_wrôes
;

64 
evít
 *
	gevíts
;

67 
	$ªad_cb
(
fd
, 
which
, *
¨g
)

69 
idx
 = (Ë
¨g
, 
widx
 = idx + 1;

70 
u_ch¨
 
ch
;

72 
cou¡
 +
	`ªad
(
fd
, &
ch
, (ch));

73 i‡(
wrôes
) {

74 i‡(
widx
 >
num_pùes
)

75 
widx
 -
num_pùes
;

76 
	`wrôe
(
pùes
[2 * 
widx
 + 1], "e", 1);

77 
wrôes
--;

78 
fúed
++;

80 
	}
}

82 
timevÆ
 *

83 
	$run_⁄˚
()

85 *
˝
, 
•a˚
;

86 
i
;

87 
timevÆ
 
ts
, 
ã
;

89 
˝
 = 
pùes
, 
i
 = 0; i < 
num_pùes
; i++, cp += 2) {

90 
	`evít_dñ
(&
evíts
[
i
]);

91 
	`evít_£t
(&
evíts
[
i
], 
˝
[0], 
EV_READ
 | 
EV_PERSIST
, 
ªad_cb
, (*) i);

92 
	`evít_add
(&
evíts
[
i
], 
NULL
);

95 
	`evít_lo›
(
EVLOOP_ONCE
 | 
EVLOOP_NONBLOCK
);

97 
fúed
 = 0;

98 
•a˚
 = 
num_pùes
 / 
num_a˘ive
;

99 
•a˚
 = space * 2;

100 
i
 = 0; i < 
num_a˘ive
; i++, 
fúed
++)

101 
	`wrôe
(
pùes
[
i
 * 
•a˚
 + 1], "e", 1);

103 
cou¡
 = 0;

104 
wrôes
 = 
num_wrôes
;

105 { 
xcou¡
 = 0;

106 
	`gëtimeofday
(&
ts
, 
NULL
);

108 
	`evít_lo›
(
EVLOOP_ONCE
 | 
EVLOOP_NONBLOCK
);

109 
xcou¡
++;

110 } 
cou¡
 !
fúed
);

111 
	`gëtimeofday
(&
ã
, 
NULL
);

113 i‡(
xcou¡
 !
cou¡
Ë
	`Ârötf
(
°dîr
, "Xcount: %d, Rcount: %d\n", xcount, count);

116 
	`evutû_timîsub
(&
ã
, &
ts
, &te);

118  (&
ã
);

119 
	}
}

122 
	$maö
 (
¨gc
, **
¨gv
)

124 #i‚de‡
WIN32


125 
æimô
 
æ
;

127 
i
, 
c
;

128 
timevÆ
 *
tv
;

129 *
˝
;

131 
num_pùes
 = 100;

132 
num_a˘ive
 = 1;

133 
num_wrôes
 = 
num_pùes
;

134 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "n:a:w:")) != -1) {

135 
c
) {

137 
num_pùes
 = 
	`©oi
(
›èrg
);

140 
num_a˘ive
 = 
	`©oi
(
›èrg
);

143 
num_wrôes
 = 
	`©oi
(
›èrg
);

146 
	`Ârötf
(
°dîr
, "IŒegÆárgumíà\"%c\"\n", 
c
);

147 
	`exô
(1);

151 #i‚de‡
WIN32


152 
æ
.
æim_cur
 =Ñl.
æim_max
 = 
num_pùes
 * 2 + 50;

153 i‡(
	`£ålimô
(
RLIMIT_NOFILE
, &
æ
) == -1) {

154 
	`≥º‹
("setrlimit");

155 
	`exô
(1);

159 
evíts
 = 
	`ˇŒoc
(
num_pùes
, (
evít
));

160 
pùes
 = 
	`ˇŒoc
(
num_pùes
 * 2, ());

161 i‡(
evíts
 =
NULL
 || 
pùes
 == NULL) {

162 
	`≥º‹
("malloc");

163 
	`exô
(1);

166 
	`evít_öô
();

168 
˝
 = 
pùes
, 
i
 = 0; i < 
num_pùes
; i++, cp += 2) {

169 #ifde‡
USE_PIPES


170 i‡(
	`pùe
(
˝
) == -1) {

172 i‡(
	`evutû_sockë∑ú
(
AF_UNIX
, 
SOCK_STREAM
, 0, 
˝
) == -1) {

174 
	`≥º‹
("pipe");

175 
	`exô
(1);

179 
i
 = 0; i < 25; i++) {

180 
tv
 = 
	`run_⁄˚
();

181 i‡(
tv
 =
NULL
)

182 
	`exô
(1);

183 
	`Ârötf
(
°dout
, "%ld\n",

184 
tv
->
tv_£c
 * 1000000L +Åv->
tv_u£c
);

187 
	`exô
(0);

188 
	}
}

	@test/regress.c

28 #ifde‡
WIN32


29 
	~<wösock2.h
>

30 
	~<wödows.h
>

33 #ifde‡
HAVE_CONFIG_H


34 
	~"c⁄fig.h
"

37 
	~<sys/ty≥s.h
>

38 
	~<sys/°©.h
>

39 #ifde‡
HAVE_SYS_TIME_H


40 
	~<sys/time.h
>

42 
	~<sys/queue.h
>

43 #i‚de‡
WIN32


44 
	~<sys/sockë.h
>

45 
	~<sys/waô.h
>

46 
	~<sig«l.h
>

47 
	~<uni°d.h
>

48 
	~<√tdb.h
>

50 
	~<as£π.h
>

51 
	~<f˙é.h
>

52 
	~<sig«l.h
>

53 
	~<°dlib.h
>

54 
	~<°dio.h
>

55 
	~<°rög.h
>

56 
	~<î∫o.h
>

58 
	~"evít.h
"

59 
	~"evutû.h
"

60 
	~"evít-öã∫Æ.h
"

61 
	~"log.h
"

63 
	~"ªgªss.h
"

64 #i‚de‡
WIN32


65 
	~"ªgªss.gí.h
"

68 
	g∑ú
[2];

69 
	gã°_ok
;

70 
	gˇŒed
;

71 
	gwbuf
[4096];

72 
	grbuf
[4096];

73 
	gwoff
;

74 
	groff
;

75 
	gu£≥rsi°
;

76 
timevÆ
 
	gt£t
;

77 
timevÆ
 
	gtˇŒed
;

78 
evít_ba£
 *
	gglobÆ_ba£
;

80 
	#TEST1
 "thi†i†®ã°"

	)

81 
	#SECONDS
 1

	)

83 #i‚de‡
SHUT_WR


84 
	#SHUT_WR
 1

	)

87 #ifde‡
WIN32


88 
	#wrôe
(
fd
,
buf
,
Àn
Ë
	`£nd
((fd),(buf),÷í),0)

	)

89 
	#ªad
(
fd
,
buf
,
Àn
Ë
	`ªcv
((fd),(buf),÷í),0)

	)

93 
	$sim∂e_ªad_cb
(
fd
, 
evít
, *
¨g
)

95 
buf
[256];

96 
Àn
;

98 i‡(
¨g
 =
NULL
)

101 
Àn
 = 
	`ªad
(
fd
, 
buf
, (buf));

103 i‡(
Àn
) {

104 i‡(!
ˇŒed
) {

105 i‡(
	`evít_add
(
¨g
, 
NULL
) == -1)

106 
	`exô
(1);

108 } i‡(
ˇŒed
 == 1)

109 
ã°_ok
 = 1;

111 
ˇŒed
++;

112 
	}
}

115 
	$sim∂e_wrôe_cb
(
fd
, 
evít
, *
¨g
)

117 
Àn
;

119 i‡(
¨g
 =
NULL
)

122 
Àn
 = 
	`wrôe
(
fd
, 
TEST1
, 
	`°æí
(TEST1) + 1);

123 i‡(
Àn
 == -1)

124 
ã°_ok
 = 0;

126 
ã°_ok
 = 1;

127 
	}
}

130 
	$mu…ùÀ_wrôe_cb
(
fd
, 
evít
, *
¨g
)

132 
evít
 *
ev
 = 
¨g
;

133 
Àn
;

135 
Àn
 = 128;

136 i‡(
woff
 + 
Àn
 >(
wbuf
))

137 
Àn
 = (
wbuf
Ë- 
woff
;

139 
Àn
 = 
	`wrôe
(
fd
, 
wbuf
 + 
woff
,Üen);

140 i‡(
Àn
 == -1) {

141 
	`Ârötf
(
°dîr
, "%s: wrôe\n", 
__func__
);

142 i‡(
u£≥rsi°
)

143 
	`evít_dñ
(
ev
);

147 
woff
 +
Àn
;

149 i‡(
woff
 >(
wbuf
)) {

150 
	`shutdown
(
fd
, 
SHUT_WR
);

151 i‡(
u£≥rsi°
)

152 
	`evít_dñ
(
ev
);

156 i‡(!
u£≥rsi°
) {

157 i‡(
	`evít_add
(
ev
, 
NULL
) == -1)

158 
	`exô
(1);

160 
	}
}

163 
	$mu…ùÀ_ªad_cb
(
fd
, 
evít
, *
¨g
)

165 
evít
 *
ev
 = 
¨g
;

166 
Àn
;

168 
Àn
 = 
	`ªad
(
fd
, 
rbuf
 + 
roff
, (rbuf) -Ñoff);

169 i‡(
Àn
 == -1)

170 
	`Ârötf
(
°dîr
, "%s:Ñód\n", 
__func__
);

171 i‡(
Àn
 <= 0) {

172 i‡(
u£≥rsi°
)

173 
	`evít_dñ
(
ev
);

177 
roff
 +
Àn
;

178 i‡(!
u£≥rsi°
) {

179 i‡(
	`evít_add
(
ev
, 
NULL
) == -1)

180 
	`exô
(1);

182 
	}
}

185 
	$timeout_cb
(
fd
, 
evít
, *
¨g
)

187 
timevÆ
 
tv
;

188 
diff
;

190 
	`evutû_gëtimeofday
(&
tˇŒed
, 
NULL
);

191 i‡(
	`evutû_timîcmp
(&
tˇŒed
, &
t£t
, >))

192 
	`evutû_timîsub
(&
tˇŒed
, &
t£t
, &
tv
);

194 
	`evutû_timîsub
(&
t£t
, &
tˇŒed
, &
tv
);

196 
diff
 = 
tv
.
tv_£c
*1000 +Åv.
tv_u£c
/1000 - 
SECONDS
 * 1000;

197 i‡(
diff
 < 0)

198 
diff
 = -diff;

200 i‡(
diff
 < 100)

201 
ã°_ok
 = 1;

202 
	}
}

204 #i‚de‡
WIN32


206 
	$sig«l_cb_ß
(
sig
)

208 
ã°_ok
 = 2;

209 
	}
}

212 
	$sig«l_cb
(
fd
, 
evít
, *
¨g
)

214 
evít
 *
ev
 = 
¨g
;

216 
	`sig«l_dñ
(
ev
);

217 
ã°_ok
 = 1;

218 
	}
}

221 
	sbŸh
 {

222 
evít
 
	mev
;

223 
	mƒód
;

227 
	$comböed_ªad_cb
(
fd
, 
evít
, *
¨g
)

229 
bŸh
 *bŸh = 
¨g
;

230 
buf
[128];

231 
Àn
;

233 
Àn
 = 
	`ªad
(
fd
, 
buf
, (buf));

234 i‡(
Àn
 == -1)

235 
	`Ârötf
(
°dîr
, "%s:Ñód\n", 
__func__
);

236 i‡(
Àn
 <= 0)

239 
bŸh
->
ƒód
 +
Àn
;

240 i‡(
	`evít_add
(&
bŸh
->
ev
, 
NULL
) == -1)

241 
	`exô
(1);

242 
	}
}

245 
	$comböed_wrôe_cb
(
fd
, 
evít
, *
¨g
)

247 
bŸh
 *bŸh = 
¨g
;

248 
buf
[128];

249 
Àn
;

251 
Àn
 = (
buf
);

252 i‡(
Àn
 > 
bŸh
->
ƒód
)

253 
Àn
 = 
bŸh
->
ƒód
;

255 
Àn
 = 
	`wrôe
(
fd
, 
buf
,Üen);

256 i‡(
Àn
 == -1)

257 
	`Ârötf
(
°dîr
, "%s: wrôe\n", 
__func__
);

258 i‡(
Àn
 <= 0) {

259 
	`shutdown
(
fd
, 
SHUT_WR
);

263 
bŸh
->
ƒód
 -
Àn
;

264 i‡(
	`evít_add
(&
bŸh
->
ev
, 
NULL
) == -1)

265 
	`exô
(1);

266 
	}
}

271 
	$£tup_ã°
(c⁄° *
«me
)

274 
	`Ârötf
(
°dout
, "%s", 
«me
);

276 i‡(
	`evutû_sockë∑ú
(
AF_UNIX
, 
SOCK_STREAM
, 0, 
∑ú
) == -1) {

277 
	`Ârötf
(
°dîr
, "%s: sockë∑ú\n", 
__func__
);

278 
	`exô
(1);

281 #ifde‡
HAVE_FCNTL


282 i‡(
	`f˙é
(
∑ú
[0], 
F_SETFL
, 
O_NONBLOCK
) == -1)

283 
	`Ârötf
(
°dîr
, "fcntl(O_NONBLOCK)");

285 i‡(
	`f˙é
(
∑ú
[1], 
F_SETFL
, 
O_NONBLOCK
) == -1)

286 
	`Ârötf
(
°dîr
, "fcntl(O_NONBLOCK)");

289 
ã°_ok
 = 0;

290 
ˇŒed
 = 0;

292 
	}
}

295 
	$˛ónup_ã°
()

297 #i‚de‡
WIN32


298 
	`˛o£
(
∑ú
[0]);

299 
	`˛o£
(
∑ú
[1]);

301 
	`Clo£H™dÀ
((
HANDLE
)
∑ú
[0]);

302 
	`Clo£H™dÀ
((
HANDLE
)
∑ú
[1]);

304 i‡(
ã°_ok
)

305 
	`Ârötf
(
°dout
, "OK\n");

307 
	`Ârötf
(
°dout
, "FAILED\n");

308 
	`exô
(1);

310 
ã°_ok
 = 0;

312 
	}
}

315 
	$ã°_ªgi°îfds
()

317 
i
, 
j
;

318 
∑ú
[2];

319 
evít
 
ªad_evs
[512];

320 
evít
 
wrôe_evs
[512];

322 
evít_ba£
 *
ba£
 = 
	`evít_ba£_√w
();

324 
	`Ârötf
(
°dout
, "TestingÑegister fds: ");

326 
i
 = 0; i < 512; ++i) {

327 i‡(
	`evutû_sockë∑ú
(
AF_UNIX
, 
SOCK_STREAM
, 0, 
∑ú
) == -1) {

331 
	`evít_£t
(&
ªad_evs
[
i
], 
∑ú
[0],

332 
EV_READ
|
EV_PERSIST
, 
sim∂e_ªad_cb
, 
NULL
);

333 
	`evít_ba£_£t
(
ba£
, &
ªad_evs
[
i
]);

334 
	`evít_add
(&
ªad_evs
[
i
], 
NULL
);

335 
	`evít_£t
(&
wrôe_evs
[
i
], 
∑ú
[1],

336 
EV_WRITE
|
EV_PERSIST
, 
sim∂e_wrôe_cb
, 
NULL
);

337 
	`evít_ba£_£t
(
ba£
, &
wrôe_evs
[
i
]);

338 
	`evít_add
(&
wrôe_evs
[
i
], 
NULL
);

341 
	`evít_ba£_lo›
(
ba£
, 
EVLOOP_ONCE
);

345 
j
 = 0; j < 
i
; ++j) {

346 
	`evít_dñ
(&
ªad_evs
[
j
]);

347 
	`evít_dñ
(&
wrôe_evs
[
j
]);

348 #i‚de‡
WIN32


349 
	`˛o£
(
ªad_evs
[
j
].
ev_fd
);

350 
	`˛o£
(
wrôe_evs
[
j
].
ev_fd
);

352 
	`Clo£H™dÀ
((
HANDLE
)
ªad_evs
[
j
].
ev_fd
);

353 
	`Clo£H™dÀ
((
HANDLE
)
wrôe_evs
[
j
].
ev_fd
);

357 
	`evít_ba£_lo›
(
ba£
, 
EVLOOP_ONCE
);

360 
	`evít_ba£_‰ì
(
ba£
);

362 
	`Ârötf
(
°dout
, "OK\n");

363 
	}
}

366 
	$ã°_sim∂îód
()

368 
evít
 
ev
;

371 
	`£tup_ã°
("SimpleÑead: ");

373 
	`wrôe
(
∑ú
[0], 
TEST1
, 
	`°æí
(TEST1)+1);

374 
	`shutdown
(
∑ú
[0], 
SHUT_WR
);

376 
	`evít_£t
(&
ev
, 
∑ú
[1], 
EV_READ
, 
sim∂e_ªad_cb
, &ev);

377 i‡(
	`evít_add
(&
ev
, 
NULL
) == -1)

378 
	`exô
(1);

379 
	`evít_di•©ch
();

381 
	`˛ónup_ã°
();

382 
	}
}

385 
	$ã°_sim∂ewrôe
()

387 
evít
 
ev
;

390 
	`£tup_ã°
("Simple write: ");

392 
	`evít_£t
(&
ev
, 
∑ú
[0], 
EV_WRITE
, 
sim∂e_wrôe_cb
, &ev);

393 i‡(
	`evít_add
(&
ev
, 
NULL
) == -1)

394 
	`exô
(1);

395 
	`evít_di•©ch
();

397 
	`˛ónup_ã°
();

398 
	}
}

401 
	$ã°_mu…ùÀ
()

403 
evít
 
ev
, 
ev2
;

404 
i
;

407 
	`£tup_ã°
("MultipleÑead/write: ");

408 
	`mem£t
(
rbuf
, 0, (rbuf));

409 
i
 = 0; i < (
wbuf
); i++)

410 
wbuf
[
i
] = i;

412 
roff
 = 
woff
 = 0;

413 
u£≥rsi°
 = 0;

415 
	`evít_£t
(&
ev
, 
∑ú
[0], 
EV_WRITE
, 
mu…ùÀ_wrôe_cb
, &ev);

416 i‡(
	`evít_add
(&
ev
, 
NULL
) == -1)

417 
	`exô
(1);

418 
	`evít_£t
(&
ev2
, 
∑ú
[1], 
EV_READ
, 
mu…ùÀ_ªad_cb
, &ev2);

419 i‡(
	`evít_add
(&
ev2
, 
NULL
) == -1)

420 
	`exô
(1);

421 
	`evít_di•©ch
();

423 i‡(
roff
 =
woff
)

424 
ã°_ok
 = 
	`memcmp
(
rbuf
, 
wbuf
, (wbuf)) == 0;

426 
	`˛ónup_ã°
();

427 
	}
}

430 
	$ã°_≥rsi°ít
()

432 
evít
 
ev
, 
ev2
;

433 
i
;

436 
	`£tup_ã°
("PersistÑead/write: ");

437 
	`mem£t
(
rbuf
, 0, (rbuf));

438 
i
 = 0; i < (
wbuf
); i++)

439 
wbuf
[
i
] = i;

441 
roff
 = 
woff
 = 0;

442 
u£≥rsi°
 = 1;

444 
	`evít_£t
(&
ev
, 
∑ú
[0], 
EV_WRITE
|
EV_PERSIST
, 
mu…ùÀ_wrôe_cb
, &ev);

445 i‡(
	`evít_add
(&
ev
, 
NULL
) == -1)

446 
	`exô
(1);

447 
	`evít_£t
(&
ev2
, 
∑ú
[1], 
EV_READ
|
EV_PERSIST
, 
mu…ùÀ_ªad_cb
, &ev2);

448 i‡(
	`evít_add
(&
ev2
, 
NULL
) == -1)

449 
	`exô
(1);

450 
	`evít_di•©ch
();

452 i‡(
roff
 =
woff
)

453 
ã°_ok
 = 
	`memcmp
(
rbuf
, 
wbuf
, (wbuf)) == 0;

455 
	`˛ónup_ã°
();

456 
	}
}

459 
	$ã°_comböed
()

461 
bŸh
 
r1
, 
r2
, 
w1
, 
w2
;

463 
	`£tup_ã°
("CombinedÑead/write: ");

464 
	`mem£t
(&
r1
, 0, (r1));

465 
	`mem£t
(&
r2
, 0, (r2));

466 
	`mem£t
(&
w1
, 0, (w1));

467 
	`mem£t
(&
w2
, 0, (w2));

469 
w1
.
ƒód
 = 4096;

470 
w2
.
ƒód
 = 8192;

472 
	`evít_£t
(&
r1
.
ev
, 
∑ú
[0], 
EV_READ
, 
comböed_ªad_cb
, &r1);

473 
	`evít_£t
(&
w1
.
ev
, 
∑ú
[0], 
EV_WRITE
, 
comböed_wrôe_cb
, &w1);

474 
	`evít_£t
(&
r2
.
ev
, 
∑ú
[1], 
EV_READ
, 
comböed_ªad_cb
, &r2);

475 
	`evít_£t
(&
w2
.
ev
, 
∑ú
[1], 
EV_WRITE
, 
comböed_wrôe_cb
, &w2);

476 i‡(
	`evít_add
(&
r1
.
ev
, 
NULL
) == -1)

477 
	`exô
(1);

478 i‡(
	`evít_add
(&
w1
.
ev
, 
NULL
))

479 
	`exô
(1);

480 i‡(
	`evít_add
(&
r2
.
ev
, 
NULL
))

481 
	`exô
(1);

482 i‡(
	`evít_add
(&
w2
.
ev
, 
NULL
))

483 
	`exô
(1);

485 
	`evít_di•©ch
();

487 i‡(
r1
.
ƒód
 =8192 && 
r2
.nread == 4096)

488 
ã°_ok
 = 1;

490 
	`˛ónup_ã°
();

491 
	}
}

494 
	$ã°_sim∂ëimeout
()

496 
timevÆ
 
tv
;

497 
evít
 
ev
;

499 
	`£tup_ã°
("SimpleÅimeout: ");

501 
tv
.
tv_u£c
 = 0;

502 
tv
.
tv_£c
 = 
SECONDS
;

503 
	`evtimî_£t
(&
ev
, 
timeout_cb
, 
NULL
);

504 
	`evtimî_add
(&
ev
, &
tv
);

506 
	`evutû_gëtimeofday
(&
t£t
, 
NULL
);

507 
	`evít_di•©ch
();

509 
	`˛ónup_ã°
();

510 
	}
}

512 #i‚de‡
WIN32


513 
evít_ba£
 *
cuºít_ba£
;

516 
	$chûd_sig«l_cb
(
fd
, 
evít
, *
¨g
)

518 
timevÆ
 
tv
;

519 *
pöt
 = 
¨g
;

521 *
pöt
 = 1;

523 
tv
.
tv_u£c
 = 500000;

524 
tv
.
tv_£c
 = 0;

525 
	`evít_lo›exô
(&
tv
);

526 
	}
}

529 
	$ã°_f‹k
()

531 
°©us
, 
gŸ_sigchld
 = 0;

532 
evít
 
ev
, 
sig_ev
;

533 
pid_t
 
pid
;

535 
	`£tup_ã°
("After fork: ");

537 
	`wrôe
(
∑ú
[0], 
TEST1
, 
	`°æí
(TEST1)+1);

539 
	`evít_£t
(&
ev
, 
∑ú
[1], 
EV_READ
, 
sim∂e_ªad_cb
, &ev);

540 i‡(
	`evít_add
(&
ev
, 
NULL
) == -1)

541 
	`exô
(1);

543 
	`sig«l_£t
(&
sig_ev
, 
SIGCHLD
, 
chûd_sig«l_cb
, &
gŸ_sigchld
);

544 
	`sig«l_add
(&
sig_ev
, 
NULL
);

546 i‡((
pid
 = 
	`f‹k
()) == 0) {

548 i‡(
	`evít_ªöô
(
cuºít_ba£
) == -1) {

549 
	`Ârötf
(
°dîr
, "FAILED (reinit)\n");

550 
	`exô
(1);

553 
	`sig«l_dñ
(&
sig_ev
);

555 
ˇŒed
 = 0;

557 
	`evít_di•©ch
();

562 
	`exô
(
ã°_ok
 !0 || 
ˇŒed
 != 2 ? -2 : 76);

566 
	`¶ìp
(1);

568 
	`wrôe
(
∑ú
[0], 
TEST1
, 
	`°æí
(TEST1)+1);

570 i‡(
	`waôpid
(
pid
, &
°©us
, 0) == -1) {

571 
	`Ârötf
(
°dîr
, "FAILED (fork)\n");

572 
	`exô
(1);

575 i‡(
	`WEXITSTATUS
(
°©us
) != 76) {

576 
	`Ârötf
(
°dîr
, "FAILED (exô): %d\n", 
	`WEXITSTATUS
(
°©us
));

577 
	`exô
(1);

581 
	`wrôe
(
∑ú
[0], 
TEST1
, 
	`°æí
(TEST1)+1);

582 
	`shutdown
(
∑ú
[0], 
SHUT_WR
);

584 
	`evít_di•©ch
();

586 i‡(!
gŸ_sigchld
) {

587 
	`Ârötf
(
°dout
, "FAILED (sigchld)\n");

588 
	`exô
(1);

591 
	`sig«l_dñ
(&
sig_ev
);

593 
	`˛ónup_ã°
();

594 
	}
}

597 
	$ã°_sim∂esig«l
()

599 
evít
 
ev
;

600 
ôimîvÆ
 
ôv
;

602 
	`£tup_ã°
("Simple signal: ");

603 
	`sig«l_£t
(&
ev
, 
SIGALRM
, 
sig«l_cb
, &ev);

604 
	`sig«l_add
(&
ev
, 
NULL
);

606 
	`sig«l_dñ
(&
ev
);

607 
	`sig«l_add
(&
ev
, 
NULL
);

609 
	`mem£t
(&
ôv
, 0, (itv));

610 
ôv
.
ô_vÆue
.
tv_£c
 = 1;

611 i‡(
	`£tôimî
(
ITIMER_REAL
, &
ôv
, 
NULL
) == -1)

612 
skù_sim∂esig«l
;

614 
	`evít_di•©ch
();

615 
skù_sim∂esig«l
:

616 i‡(
	`sig«l_dñ
(&
ev
) == -1)

617 
ã°_ok
 = 0;

619 
	`˛ónup_ã°
();

620 
	}
}

623 
	$ã°_mu…ùÀsig«l
()

625 
evít
 
ev_⁄e
, 
ev_two
;

626 
ôimîvÆ
 
ôv
;

628 
	`£tup_ã°
("Multiple signal: ");

630 
	`sig«l_£t
(&
ev_⁄e
, 
SIGALRM
, 
sig«l_cb
, &ev_one);

631 
	`sig«l_add
(&
ev_⁄e
, 
NULL
);

633 
	`sig«l_£t
(&
ev_two
, 
SIGALRM
, 
sig«l_cb
, &ev_two);

634 
	`sig«l_add
(&
ev_two
, 
NULL
);

636 
	`mem£t
(&
ôv
, 0, (itv));

637 
ôv
.
ô_vÆue
.
tv_£c
 = 1;

638 i‡(
	`£tôimî
(
ITIMER_REAL
, &
ôv
, 
NULL
) == -1)

639 
skù_sim∂esig«l
;

641 
	`evít_di•©ch
();

643 
skù_sim∂esig«l
:

644 i‡(
	`sig«l_dñ
(&
ev_⁄e
) == -1)

645 
ã°_ok
 = 0;

646 i‡(
	`sig«l_dñ
(&
ev_two
) == -1)

647 
ã°_ok
 = 0;

649 
	`˛ónup_ã°
();

650 
	}
}

653 
	$ã°_immedüãsig«l
()

655 
evít
 
ev
;

657 
ã°_ok
 = 0;

658 
	`¥ötf
("Immediate signal: ");

659 
	`sig«l_£t
(&
ev
, 
SIGUSR1
, 
sig«l_cb
, &ev);

660 
	`sig«l_add
(&
ev
, 
NULL
);

661 
	`øi£
(
SIGUSR1
);

662 
	`evít_lo›
(
EVLOOP_NONBLOCK
);

663 
	`sig«l_dñ
(&
ev
);

664 
	`˛ónup_ã°
();

665 
	}
}

668 
	$ã°_sig«l_dóŒoc
()

671 
evít
 
ev
;

672 
evít_ba£
 *
ba£
 = 
	`evít_öô
();

673 
	`¥ötf
("Signal dealloc: ");

674 
	`sig«l_£t
(&
ev
, 
SIGUSR1
, 
sig«l_cb
, &ev);

675 
	`sig«l_add
(&
ev
, 
NULL
);

676 
	`sig«l_dñ
(&
ev
);

677 
	`evít_ba£_‰ì
(
ba£
);

679 
ã°_ok
 = 1;

680 
	`˛ónup_ã°
();

681 
	}
}

684 
	$ã°_sig«l_pùñoss
()

687 
evít_ba£
 *
ba£1
, *
ba£2
;

688 
pùe1
;

689 
ã°_ok
 = 0;

690 
	`¥ötf
("SignalÖipeloss: ");

691 
ba£1
 = 
	`evít_öô
();

692 
pùe1
 = 
ba£1
->
sig
.
ev_sig«l_∑ú
[0];

693 
ba£2
 = 
	`evít_öô
();

694 
	`evít_ba£_‰ì
(
ba£2
);

695 
	`evít_ba£_‰ì
(
ba£1
);

696 i‡(
	`˛o£
(
pùe1
Ë!-1 || 
î∫o
!=
EBADF
) {

698 
	`¥ötf
("signalÖipeÇot closed. ");

699 
ã°_ok
 = 0;

701 
ã°_ok
 = 1;

703 
	`˛ónup_ã°
();

704 
	}
}

712 
	$ã°_sig«l_swôchba£
()

714 
evít
 
ev1
, 
ev2
;

715 
evít_ba£
 *
ba£1
, *
ba£2
;

716 
is_kqueue
;

717 
ã°_ok
 = 0;

718 
	`¥ötf
("Signal switchbase: ");

719 
ba£1
 = 
	`evít_öô
();

720 
ba£2
 = 
	`evít_öô
();

721 
is_kqueue
 = !
	`°rcmp
(
	`evít_gë_mëhod
(),"kqueue");

722 
	`sig«l_£t
(&
ev1
, 
SIGUSR1
, 
sig«l_cb
, &ev1);

723 
	`sig«l_£t
(&
ev2
, 
SIGUSR1
, 
sig«l_cb
, &ev2);

724 i‡(
	`evít_ba£_£t
(
ba£1
, &
ev1
) ||

725 
	`evít_ba£_£t
(
ba£2
, &
ev2
) ||

726 
	`evít_add
(&
ev1
, 
NULL
) ||

727 
	`evít_add
(&
ev2
, 
NULL
)) {

728 
	`Ârötf
(
°dîr
, "%s: c™nŸ së ba£,ádd\n", 
__func__
);

729 
	`exô
(1);

732 
ã°_ok
 = 0;

734 
	`øi£
(
SIGUSR1
);

735 
	`evít_ba£_lo›
(
ba£2
, 
EVLOOP_NONBLOCK
);

736 i‡(
is_kqueue
) {

737 i‡(!
ã°_ok
)

738 
d⁄e
;

739 
ã°_ok
 = 0;

741 
	`evít_ba£_lo›
(
ba£1
, 
EVLOOP_NONBLOCK
);

742 i‡(
ã°_ok
 && !
is_kqueue
) {

743 
ã°_ok
 = 0;

746 
	`evít_ba£_lo›
(
ba£1
, 
EVLOOP_NONBLOCK
);

747 
	`øi£
(
SIGUSR1
);

748 
	`evít_ba£_lo›
(
ba£1
, 
EVLOOP_NONBLOCK
);

749 
	`evít_ba£_lo›
(
ba£2
, 
EVLOOP_NONBLOCK
);

751 
d⁄e
:

752 
	`evít_ba£_‰ì
(
ba£1
);

753 
	`evít_ba£_‰ì
(
ba£2
);

754 
	`˛ónup_ã°
();

755 
	}
}

762 
	$ã°_sig«l_as£π
()

764 
evít
 
ev
;

765 
evít_ba£
 *
ba£
 = 
	`evít_öô
();

766 
ã°_ok
 = 0;

767 
	`¥ötf
("Signal handlerássert: ");

769 
	`sig«l_£t
(&
ev
, 
SIGCONT
, 
sig«l_cb
, &ev);

770 
	`sig«l_add
(&
ev
, 
NULL
);

775 
	`sig«l_dñ
(&
ev
);

777 
	`øi£
(
SIGCONT
);

779 i‡(
ba£
->
sig
.
evsig«l_ˇught
)

780 
ã°_ok
 = 0;

782 
ã°_ok
 = 1;

784 
	`evít_ba£_‰ì
(
ba£
);

785 
	`˛ónup_ã°
();

787 
	}
}

793 
	$ã°_sig«l_ª°‹e
()

795 
evít
 
ev
;

796 
evít_ba£
 *
ba£
 = 
	`evít_öô
();

797 #ifde‡
HAVE_SIGACTION


798 
siga˘i⁄
 
ß
;

801 
ã°_ok
 = 0;

802 
	`¥ötf
("Signal handlerÑestore: ");

803 #ifde‡
HAVE_SIGACTION


804 
ß
.
ß_h™dÀr
 = 
sig«l_cb_ß
;

805 
ß
.
ß_Êags
 = 0x0;

806 
	`sigem±y£t
(&
ß
.
ß_mask
);

807 i‡(
	`siga˘i⁄
(
SIGUSR1
, &
ß
, 
NULL
) == -1)

808 
out
;

810 i‡(
	`sig«l
(
SIGUSR1
, 
sig«l_cb_ß
Ë=
SIG_ERR
)

811 
out
;

813 
	`sig«l_£t
(&
ev
, 
SIGUSR1
, 
sig«l_cb
, &ev);

814 
	`sig«l_add
(&
ev
, 
NULL
);

815 
	`sig«l_dñ
(&
ev
);

817 
	`øi£
(
SIGUSR1
);

819 i‡(
ã°_ok
 != 2)

820 
ã°_ok
 = 0;

821 
out
:

822 
	`evít_ba£_‰ì
(
ba£
);

823 
	`˛ónup_ã°
();

825 
	}
}

828 
	$sig«l_cb_swp
(
sig
, 
evít
, *
¨g
)

830 
ˇŒed
++;

831 i‡(
ˇŒed
 < 5)

832 
	`øi£
(
sig
);

834 
	`evít_lo›exô
(
NULL
);

835 
	}
}

837 
	$timeout_cb_swp
(
fd
, 
evít
, *
¨g
)

839 i‡(
ˇŒed
 == -1) {

840 
timevÆ
 
tv
 = {5, 0};

842 
ˇŒed
 = 0;

843 
	`evtimî_add
((
evít
 *)
¨g
, &
tv
);

844 
	`øi£
(
SIGUSR1
);

847 
ã°_ok
 = 0;

848 
	`evít_lo›exô
(
NULL
);

849 
	}
}

852 
	$ã°_sig«l_whûe_¥o˚ssög
()

854 
evít_ba£
 *
ba£
 = 
	`evít_öô
();

855 
evít
 
ev
, 
ev_timî
;

856 
timevÆ
 
tv
 = {0, 0};

858 
	`£tup_ã°
("Receivingá signal whileÖrocessing other signal: ");

860 
ˇŒed
 = -1;

861 
ã°_ok
 = 1;

862 
	`sig«l_£t
(&
ev
, 
SIGUSR1
, 
sig«l_cb_swp
, 
NULL
);

863 
	`sig«l_add
(&
ev
, 
NULL
);

864 
	`evtimî_£t
(&
ev_timî
, 
timeout_cb_swp
, &ev_timer);

865 
	`evtimî_add
(&
ev_timî
, &
tv
);

866 
	`evít_di•©ch
();

868 
	`evít_ba£_‰ì
(
ba£
);

869 
	`˛ónup_ã°
();

871 
	}
}

875 
	$ã°_‰ì_a˘ive_ba£
()

877 
evít_ba£
 *
ba£1
;

878 
evít
 
ev1
;

879 
	`£tup_ã°
("Freeáctive base: ");

880 
ba£1
 = 
	`evít_öô
();

881 
	`evít_£t
(&
ev1
, 
∑ú
[1], 
EV_READ
, 
sim∂e_ªad_cb
, &ev1);

882 
	`evít_ba£_£t
(
ba£1
, &
ev1
);

883 
	`evít_add
(&
ev1
, 
NULL
);

885 
	`evít_ba£_‰ì
(
ba£1
);

886 
ã°_ok
 = 1;

887 
	`˛ónup_ã°
();

888 
	}
}

891 
	$ã°_evít_ba£_√w
()

893 
evít_ba£
 *
ba£
;

894 
evít
 
ev1
;

895 
	`£tup_ã°
("Event baseÇew: ");

897 
	`wrôe
(
∑ú
[0], 
TEST1
, 
	`°æí
(TEST1)+1);

898 
	`shutdown
(
∑ú
[0], 
SHUT_WR
);

900 
ba£
 = 
	`evít_ba£_√w
();

901 
	`evít_£t
(&
ev1
, 
∑ú
[1], 
EV_READ
, 
sim∂e_ªad_cb
, &ev1);

902 
	`evít_ba£_£t
(
ba£
, &
ev1
);

903 
	`evít_add
(&
ev1
, 
NULL
);

905 
	`evít_ba£_di•©ch
(
ba£
);

907 
	`evít_ba£_‰ì
(
ba£
);

908 
ã°_ok
 = 1;

909 
	`˛ónup_ã°
();

910 
	}
}

913 
	$ã°_lo›exô
()

915 
timevÆ
 
tv
, 
tv_°¨t
, 
tv_íd
;

916 
evít
 
ev
;

918 
	`£tup_ã°
("LoopÉxit: ");

920 
tv
.
tv_u£c
 = 0;

921 
tv
.
tv_£c
 = 60*60*24;

922 
	`evtimî_£t
(&
ev
, 
timeout_cb
, 
NULL
);

923 
	`evtimî_add
(&
ev
, &
tv
);

925 
tv
.
tv_u£c
 = 0;

926 
tv
.
tv_£c
 = 1;

927 
	`evít_lo›exô
(&
tv
);

929 
	`evutû_gëtimeofday
(&
tv_°¨t
, 
NULL
);

930 
	`evít_di•©ch
();

931 
	`evutû_gëtimeofday
(&
tv_íd
, 
NULL
);

932 
	`evutû_timîsub
(&
tv_íd
, &
tv_°¨t
, &tv_end);

934 
	`evtimî_dñ
(&
ev
);

936 i‡(
tv
.
tv_£c
 < 2)

937 
ã°_ok
 = 1;

939 
	`˛ónup_ã°
();

940 
	}
}

943 
	$ã°_lo›exô_mu…ùÀ
()

945 
timevÆ
 
tv
;

946 
evít_ba£
 *
ba£
;

948 
	`£tup_ã°
("Loop MultipleÉxit: ");

950 
ba£
 = 
	`evít_ba£_√w
();

952 
tv
.
tv_u£c
 = 0;

953 
tv
.
tv_£c
 = 1;

954 
	`evít_ba£_lo›exô
(
ba£
, &
tv
);

956 
tv
.
tv_u£c
 = 0;

957 
tv
.
tv_£c
 = 2;

958 
	`evít_ba£_lo›exô
(
ba£
, &
tv
);

960 
	`evít_ba£_di•©ch
(
ba£
);

962 
	`evít_ba£_‰ì
(
ba£
);

964 
ã°_ok
 = 1;

966 
	`˛ónup_ã°
();

967 
	}
}

970 
	$bªak_cb
(
fd
, 
evíts
, *
¨g
)

972 
ã°_ok
 = 1;

973 
	`evít_lo›bªak
();

974 
	}
}

977 
	$Áû_cb
(
fd
, 
evíts
, *
¨g
)

979 
ã°_ok
 = 0;

980 
	}
}

983 
	$ã°_lo›bªak
()

985 
evít
 
ev1
, 
ev2
;

986 
timevÆ
 
tv
;

988 
	`£tup_ã°
("Loop break: ");

990 
tv
.
tv_£c
 = 0;

991 
tv
.
tv_u£c
 = 0;

992 
	`evtimî_£t
(&
ev1
, 
bªak_cb
, 
NULL
);

993 
	`evtimî_add
(&
ev1
, &
tv
);

994 
	`evtimî_£t
(&
ev2
, 
Áû_cb
, 
NULL
);

995 
	`evtimî_add
(&
ev2
, &
tv
);

997 
	`evít_di•©ch
();

999 
	`evtimî_dñ
(&
ev1
);

1000 
	`evtimî_dñ
(&
ev2
);

1002 
	`˛ónup_ã°
();

1003 
	}
}

1006 
	$ã°_evbuf„r
() {

1008 
evbuf„r
 *
evb
 = 
	`evbuf„r_√w
();

1009 
	`£tup_ã°
("Testing Evbuffer: ");

1011 
	`evbuf„r_add_¥ötf
(
evb
, "%s/%d", "hello", 1);

1013 i‡(
	`EVBUFFER_LENGTH
(
evb
) == 7 &&

1014 
	`°rcmp
((*)
	`EVBUFFER_DATA
(
evb
), "hello/1") == 0)

1015 
ã°_ok
 = 1;

1017 
	`evbuf„r_‰ì
(
evb
);

1019 
	`˛ónup_ã°
();

1020 
	}
}

1023 
	$ã°_evbuf„r_föd
()

1025 
u_ch¨
* 
p
;

1026 c⁄° * 
ã°1
 = "1234567890\r\n";

1027 c⁄° * 
ã°2
 = "1234567890\r";

1028 
	#EVBUFFER_INITIAL_LENGTH
 256

	)

1029 
ã°3
[
EVBUFFER_INITIAL_LENGTH
];

1030 
i
;

1031 
evbuf„r
 * 
buf
 = 
	`evbuf„r_√w
();

1034 
	`Ârötf
(
°dout
, "TestingÉvbuffer_find 1: ");

1035 
	`evbuf„r_add
(
buf
, (
u_ch¨
*)
ã°1
, 
	`°æí
(test1));

1036 
	`evbuf„r_døö
(
buf
, 
	`°æí
(
ã°1
));

1037 
	`evbuf„r_add
(
buf
, (
u_ch¨
*)
ã°2
, 
	`°æí
(test2));

1038 
p
 = 
	`evbuf„r_föd
(
buf
, (
u_ch¨
*)"\r\n", 2);

1039 i‡(
p
 =
NULL
) {

1040 
	`Ârötf
(
°dout
, "OK\n");

1042 
	`Ârötf
(
°dout
, "FAILED\n");

1043 
	`exô
(1);

1050 
	`Ârötf
(
°dout
, "TestingÉvbuffer_find 2: ");

1051 
	`evbuf„r_døö
(
buf
, 
	`°æí
(
ã°2
));

1052 
i
 = 0; i < 
EVBUFFER_INITIAL_LENGTH
; ++i)

1053 
ã°3
[
i
] = 'a';

1054 
ã°3
[
EVBUFFER_INITIAL_LENGTH
 - 1] = 'x';

1055 
	`evbuf„r_add
(
buf
, (
u_ch¨
 *)
ã°3
, 
EVBUFFER_INITIAL_LENGTH
);

1056 
p
 = 
	`evbuf„r_föd
(
buf
, (
u_ch¨
 *)"xy", 2);

1057 i‡(
p
 =
NULL
) {

1058 
	`¥ötf
("OK\n");

1060 
	`Ârötf
(
°dout
, "FAILED\n");

1061 
	`exô
(1);

1065 
	`Ârötf
(
°dout
, "TestingÉvbuffer_find 3: ");

1066 
p
 = 
	`evbuf„r_föd
(
buf
, (
u_ch¨
 *)"ax", 2);

1067 i‡(
p
 !
NULL
 && 
	`°∫cmp
((*)p, "ax", 2) == 0) {

1068 
	`¥ötf
("OK\n");

1070 
	`Ârötf
(
°dout
, "FAILED\n");

1071 
	`exô
(1);

1074 
	`evbuf„r_‰ì
(
buf
);

1075 
	}
}

1082 
	$ªadcb
(
buf„ªvít
 *
bev
, *
¨g
)

1084 i‡(
	`EVBUFFER_LENGTH
(
bev
->
öput
) == 8333) {

1085 
	`buf„ªvít_dißbÀ
(
bev
, 
EV_READ
);

1086 
ã°_ok
++;

1088 
	}
}

1091 
	$wrôecb
(
buf„ªvít
 *
bev
, *
¨g
)

1093 i‡(
	`EVBUFFER_LENGTH
(
bev
->
ouçut
) == 0)

1094 
ã°_ok
++;

1095 
	}
}

1098 
	$îr‹cb
(
buf„ªvít
 *
bev
, 
wh©
, *
¨g
)

1100 
ã°_ok
 = -2;

1101 
	}
}

1104 
	$ã°_buf„ªvít
()

1106 
buf„ªvít
 *
bev1
, *
bev2
;

1107 
buf„r
[8333];

1108 
i
;

1110 
	`£tup_ã°
("Bufferevent: ");

1112 
bev1
 = 
	`buf„ªvít_√w
(
∑ú
[0], 
ªadcb
, 
wrôecb
, 
îr‹cb
, 
NULL
);

1113 
bev2
 = 
	`buf„ªvít_√w
(
∑ú
[1], 
ªadcb
, 
wrôecb
, 
îr‹cb
, 
NULL
);

1115 
	`buf„ªvít_dißbÀ
(
bev1
, 
EV_READ
);

1116 
	`buf„ªvít_íabÀ
(
bev2
, 
EV_READ
);

1118 
i
 = 0; i < (
buf„r
); i++)

1119 
buf„r
[
i
] = i;

1121 
	`buf„ªvít_wrôe
(
bev1
, 
buf„r
, (buffer));

1123 
	`evít_di•©ch
();

1125 
	`buf„ªvít_‰ì
(
bev1
);

1126 
	`buf„ªvít_‰ì
(
bev2
);

1128 i‡(
ã°_ok
 != 2)

1129 
ã°_ok
 = 0;

1131 
	`˛ónup_ã°
();

1132 
	}
}

1139 
	$wm_ªadcb
(
buf„ªvít
 *
bev
, *
¨g
)

1141 
Àn
 = 
	`EVBUFFER_LENGTH
(
bev
->
öput
);

1142 
ƒód
;

1144 
	`as£π
(
Àn
 >= 10 &&Üen <= 20);

1146 
	`evbuf„r_døö
(
bev
->
öput
, 
Àn
);

1148 
ƒód
 +
Àn
;

1149 i‡(
ƒód
 == 65000) {

1150 
	`buf„ªvít_dißbÀ
(
bev
, 
EV_READ
);

1151 
ã°_ok
++;

1153 
	}
}

1156 
	$wm_wrôecb
(
buf„ªvít
 *
bev
, *
¨g
)

1158 i‡(
	`EVBUFFER_LENGTH
(
bev
->
ouçut
) == 0)

1159 
ã°_ok
++;

1160 
	}
}

1163 
	$wm_îr‹cb
(
buf„ªvít
 *
bev
, 
wh©
, *
¨g
)

1165 
ã°_ok
 = -2;

1166 
	}
}

1169 
	$ã°_buf„ªvít_w©îm¨ks
()

1171 
buf„ªvít
 *
bev1
, *
bev2
;

1172 
buf„r
[65000];

1173 
i
;

1175 
	`£tup_ã°
("Bufferevent Watermarks: ");

1177 
bev1
 = 
	`buf„ªvít_√w
(
∑ú
[0], 
NULL
, 
wm_wrôecb
, 
wm_îr‹cb
, NULL);

1178 
bev2
 = 
	`buf„ªvít_√w
(
∑ú
[1], 
wm_ªadcb
, 
NULL
, 
wm_îr‹cb
, NULL);

1180 
	`buf„ªvít_dißbÀ
(
bev1
, 
EV_READ
);

1181 
	`buf„ªvít_íabÀ
(
bev2
, 
EV_READ
);

1183 
i
 = 0; i < (
buf„r
); i++)

1184 
buf„r
[
i
] = i;

1186 
	`buf„ªvít_wrôe
(
bev1
, 
buf„r
, (buffer));

1189 
	`buf„ªvít_£tw©îm¨k
(
bev2
, 
EV_READ
, 10, 20);

1191 
	`evít_di•©ch
();

1193 
	`buf„ªvít_‰ì
(
bev1
);

1194 
	`buf„ªvít_‰ì
(
bev2
);

1196 i‡(
ã°_ok
 != 2)

1197 
ã°_ok
 = 0;

1199 
	`˛ónup_ã°
();

1200 
	}
}

1202 
	sã°_¥i_evít
 {

1203 
evít
 
	mev
;

1204 
	mcou¡
;

1208 
	$ã°_¥i‹ôõs_cb
(
fd
, 
wh©
, *
¨g
)

1210 
ã°_¥i_evít
 *
¥i
 = 
¨g
;

1211 
timevÆ
 
tv
;

1213 i‡(
¥i
->
cou¡
 == 3) {

1214 
	`evít_lo›exô
(
NULL
);

1218 
¥i
->
cou¡
++;

1220 
	`evutû_timî˛ór
(&
tv
);

1221 
	`evít_add
(&
¥i
->
ev
, &
tv
);

1222 
	}
}

1225 
	$ã°_¥i‹ôõs
(
≈ri‹ôõs
)

1227 
buf
[32];

1228 
ã°_¥i_evít
 
⁄e
, 
two
;

1229 
timevÆ
 
tv
;

1231 
	`evutû_¢¥ötf
(
buf
, (buf), "Te°ög Pri‹ôõ†%d: ", 
≈ri‹ôõs
);

1232 
	`£tup_ã°
(
buf
);

1234 
	`evít_ba£_¥i‹ôy_öô
(
globÆ_ba£
, 
≈ri‹ôõs
);

1236 
	`mem£t
(&
⁄e
, 0, (one));

1237 
	`mem£t
(&
two
, 0, (two));

1239 
	`timeout_£t
(&
⁄e
.
ev
, 
ã°_¥i‹ôõs_cb
, &one);

1240 i‡(
	`evít_¥i‹ôy_£t
(&
⁄e
.
ev
, 0) == -1) {

1241 
	`Ârötf
(
°dîr
, "%s: faûedÅÿ£à¥i‹ôy", 
__func__
);

1242 
	`exô
(1);

1245 
	`timeout_£t
(&
two
.
ev
, 
ã°_¥i‹ôõs_cb
, &two);

1246 i‡(
	`evít_¥i‹ôy_£t
(&
two
.
ev
, 
≈ri‹ôõs
 - 1) == -1) {

1247 
	`Ârötf
(
°dîr
, "%s: faûedÅÿ£à¥i‹ôy", 
__func__
);

1248 
	`exô
(1);

1251 
	`evutû_timî˛ór
(&
tv
);

1253 i‡(
	`evít_add
(&
⁄e
.
ev
, &
tv
) == -1)

1254 
	`exô
(1);

1255 i‡(
	`evít_add
(&
two
.
ev
, &
tv
) == -1)

1256 
	`exô
(1);

1258 
	`evít_di•©ch
();

1260 
	`evít_dñ
(&
⁄e
.
ev
);

1261 
	`evít_dñ
(&
two
.
ev
);

1263 i‡(
≈ri‹ôõs
 == 1) {

1264 i‡(
⁄e
.
cou¡
 =3 && 
two
.count == 3)

1265 
ã°_ok
 = 1;

1266 } i‡(
≈ri‹ôõs
 == 2) {

1268 i‡(
⁄e
.
cou¡
 =3 && 
two
.count == 1)

1269 
ã°_ok
 = 1;

1271 i‡(
⁄e
.
cou¡
 =3 && 
two
.count == 0)

1272 
ã°_ok
 = 1;

1275 
	`˛ónup_ã°
();

1276 
	}
}

1279 
	$ã°_mu…ùÀ_cb
(
fd
, 
evít
, *
¨g
)

1281 i‡(
evít
 & 
EV_READ
)

1282 
ã°_ok
 |= 1;

1283 i‡(
evít
 & 
EV_WRITE
)

1284 
ã°_ok
 |= 2;

1285 
	}
}

1288 
	$ã°_mu…ùÀ_evíts_f‹_ßme_fd
()

1290 
evít
 
e1
, 
e2
;

1292 
	`£tup_ã°
("MultipleÉvents for same fd: ");

1294 
	`evít_£t
(&
e1
, 
∑ú
[0], 
EV_READ
, 
ã°_mu…ùÀ_cb
, 
NULL
);

1295 
	`evít_add
(&
e1
, 
NULL
);

1296 
	`evít_£t
(&
e2
, 
∑ú
[0], 
EV_WRITE
, 
ã°_mu…ùÀ_cb
, 
NULL
);

1297 
	`evít_add
(&
e2
, 
NULL
);

1298 
	`evít_lo›
(
EVLOOP_ONCE
);

1299 
	`evít_dñ
(&
e2
);

1300 
	`wrôe
(
∑ú
[1], 
TEST1
, 
	`°æí
(TEST1)+1);

1301 
	`evít_lo›
(
EVLOOP_ONCE
);

1302 
	`evít_dñ
(&
e1
);

1304 i‡(
ã°_ok
 != 3)

1305 
ã°_ok
 = 0;

1307 
	`˛ónup_ã°
();

1308 
	}
}

1310 
evèg_decode_öt
(
uöt32_t
 *
≤umbî
, 
evbuf„r
 *
evbuf
);

1311 
evèg_ícode_èg
(
evbuf„r
 *
evbuf
, 
uöt32_t
 
numbî
);

1312 
evèg_decode_èg
(
uöt32_t
 *
≤umbî
, 
evbuf„r
 *
evbuf
);

1315 
	$ªad_⁄˚_cb
(
fd
, 
evít
, *
¨g
)

1317 
buf
[256];

1318 
Àn
;

1320 
Àn
 = 
	`ªad
(
fd
, 
buf
, (buf));

1322 i‡(
ˇŒed
) {

1323 
ã°_ok
 = 0;

1324 } i‡(
Àn
) {

1326 
	`wrôe
(
∑ú
[0], 
TEST1
, 
	`°æí
(TEST1)+1);

1327 
ã°_ok
 = 1;

1330 
ˇŒed
++;

1331 
	}
}

1334 
	$ã°_w™t_⁄ly_⁄˚
()

1336 
evít
 
ev
;

1337 
timevÆ
 
tv
;

1340 
	`£tup_ã°
("WantÑead only once: ");

1342 
	`wrôe
(
∑ú
[0], 
TEST1
, 
	`°æí
(TEST1)+1);

1345 
	`evutû_timî˛ór
(&
tv
);

1346 
tv
.
tv_£c
 = 1;

1347 
	`evít_lo›exô
(&
tv
);

1349 
	`evít_£t
(&
ev
, 
∑ú
[1], 
EV_READ
, 
ªad_⁄˚_cb
, &ev);

1350 i‡(
	`evít_add
(&
ev
, 
NULL
) == -1)

1351 
	`exô
(1);

1352 
	`evít_di•©ch
();

1354 
	`˛ónup_ã°
();

1355 
	}
}

1357 
	#TEST_MAX_INT
 6

	)

1360 
	$evèg_öt_ã°
()

1362 
evbuf„r
 *
tmp
 = 
	`evbuf„r_√w
();

1363 
uöt32_t
 
öãgîs
[
TEST_MAX_INT
] = {

1366 
uöt32_t
 
öãgî
;

1367 
i
;

1369 
i
 = 0; i < 
TEST_MAX_INT
; i++) {

1370 
ﬁdÀn
, 
√wÀn
;

1371 
ﬁdÀn
 = 
	`EVBUFFER_LENGTH
(
tmp
);

1372 
	`ícode_öt
(
tmp
, 
öãgîs
[
i
]);

1373 
√wÀn
 = 
	`EVBUFFER_LENGTH
(
tmp
);

1374 
	`Ârötf
(
°dout
, "\t\tencoded 0x%08x with %d bytes\n",

1375 
öãgîs
[
i
], 
√wÀn
 - 
ﬁdÀn
);

1378 
i
 = 0; i < 
TEST_MAX_INT
; i++) {

1379 i‡(
	`evèg_decode_öt
(&
öãgî
, 
tmp
) == -1) {

1380 
	`Ârötf
(
°dîr
, "decodê%d faûed", 
i
);

1381 
	`exô
(1);

1383 i‡(
öãgî
 !
öãgîs
[
i
]) {

1384 
	`Ârötf
(
°dîr
, "got %x, wanted %x",

1385 
öãgî
, 
öãgîs
[
i
]);

1386 
	`exô
(1);

1390 i‡(
	`EVBUFFER_LENGTH
(
tmp
) != 0) {

1391 
	`Ârötf
(
°dîr
, "trailing data");

1392 
	`exô
(1);

1394 
	`evbuf„r_‰ì
(
tmp
);

1396 
	`Ârötf
(
°dout
, "\t%s: OK\n", 
__func__
);

1397 
	}
}

1400 
	$evèg_fuzz
()

1402 
u_ch¨
 
buf„r
[4096];

1403 
evbuf„r
 *
tmp
 = 
	`evbuf„r_√w
();

1404 
timevÆ
 
tv
;

1405 
i
, 
j
;

1407 
nŸ_Áûed
 = 0;

1408 
j
 = 0; j < 100; j++) {

1409 
i
 = 0; i < (
buf„r
); i++)

1410 
buf„r
[
i
] = 
	`ønd
();

1411 
	`evbuf„r_døö
(
tmp
, -1);

1412 
	`evbuf„r_add
(
tmp
, 
buf„r
, (buffer));

1414 i‡(
	`evèg_unm¨shÆ_timevÆ
(
tmp
, 0, &
tv
) != -1)

1415 
nŸ_Áûed
++;

1419 i‡(
nŸ_Áûed
 >= 10) {

1420 
	`Ârötf
(
°dîr
, "evtag_unmarshal should have failed");

1421 
	`exô
(1);

1425 
	`evbuf„r_døö
(
tmp
, -1);

1426 
	`evutû_timî˛ór
(&
tv
);

1427 
tv
.
tv_£c
 = 1;

1428 
	`evèg_m¨shÆ_timevÆ
(
tmp
, 0, &
tv
);

1429 
	`evbuf„r_add
(
tmp
, 
buf„r
, (buffer));

1431 
	`EVBUFFER_DATA
(
tmp
)[1] = 0xff;

1432 i‡(
	`evèg_unm¨shÆ_timevÆ
(
tmp
, 0, &
tv
) != -1) {

1433 
	`Ârötf
(
°dîr
, "evtag_unmarshal_timeval should have failed");

1434 
	`exô
(1);

1437 
	`evbuf„r_‰ì
(
tmp
);

1439 
	`Ârötf
(
°dout
, "\t%s: OK\n", 
__func__
);

1440 
	}
}

1443 
	$evèg_èg_ícodög
()

1445 
evbuf„r
 *
tmp
 = 
	`evbuf„r_√w
();

1446 
uöt32_t
 
öãgîs
[
TEST_MAX_INT
] = {

1449 
uöt32_t
 
öãgî
;

1450 
i
;

1452 
i
 = 0; i < 
TEST_MAX_INT
; i++) {

1453 
ﬁdÀn
, 
√wÀn
;

1454 
ﬁdÀn
 = 
	`EVBUFFER_LENGTH
(
tmp
);

1455 
	`evèg_ícode_èg
(
tmp
, 
öãgîs
[
i
]);

1456 
√wÀn
 = 
	`EVBUFFER_LENGTH
(
tmp
);

1457 
	`Ârötf
(
°dout
, "\t\tencoded 0x%08x with %d bytes\n",

1458 
öãgîs
[
i
], 
√wÀn
 - 
ﬁdÀn
);

1461 
i
 = 0; i < 
TEST_MAX_INT
; i++) {

1462 i‡(
	`evèg_decode_èg
(&
öãgî
, 
tmp
) == -1) {

1463 
	`Ârötf
(
°dîr
, "decodê%d faûed", 
i
);

1464 
	`exô
(1);

1466 i‡(
öãgî
 !
öãgîs
[
i
]) {

1467 
	`Ârötf
(
°dîr
, "got %x, wanted %x",

1468 
öãgî
, 
öãgîs
[
i
]);

1469 
	`exô
(1);

1473 i‡(
	`EVBUFFER_LENGTH
(
tmp
) != 0) {

1474 
	`Ârötf
(
°dîr
, "trailing data");

1475 
	`exô
(1);

1477 
	`evbuf„r_‰ì
(
tmp
);

1479 
	`Ârötf
(
°dout
, "\t%s: OK\n", 
__func__
);

1480 
	}
}

1483 
	$evèg_ã°
()

1485 
	`Ârötf
(
°dout
, "Testing Tagging:\n");

1487 
	`evèg_öô
();

1488 
	`evèg_öt_ã°
();

1489 
	`evèg_fuzz
();

1491 
	`evèg_èg_ícodög
();

1493 
	`Ârötf
(
°dout
, "OK\n");

1494 
	}
}

1496 #i‚de‡
WIN32


1498 
	$Ωc_ã°
()

1500 
msg
 *msg, *
msg2
;

1501 
kûl
 *
©èck
;

1502 
run
 *run;

1503 
evbuf„r
 *
tmp
 = 
	`evbuf„r_√w
();

1504 
timevÆ
 
tv_°¨t
, 
tv_íd
;

1505 
uöt32_t
 
èg
;

1506 
i
;

1508 
	`Ârötf
(
°dout
, "Testing RPC: ");

1510 
msg
 = 
	`msg_√w
();

1511 
	`EVTAG_ASSIGN
(
msg
, 
‰om_«me
, "niels");

1512 
	`EVTAG_ASSIGN
(
msg
, 
to_«me
, "phoenix");

1514 i‡(
	`EVTAG_GET
(
msg
, 
©èck
, &attack) == -1) {

1515 
	`Ârötf
(
°dîr
, "FailedÅo set kill message.\n");

1516 
	`exô
(1);

1519 
	`EVTAG_ASSIGN
(
©èck
, 
wóp⁄
, "feather");

1520 
	`EVTAG_ASSIGN
(
©èck
, 
a˘i⁄
, "tickle");

1522 
	`evutû_gëtimeofday
(&
tv_°¨t
, 
NULL
);

1523 
i
 = 0; i < 1000; ++i) {

1524 
run
 = 
	`EVTAG_ADD
(
msg
,Ñun);

1525 i‡(
run
 =
NULL
) {

1526 
	`Ârötf
(
°dîr
, "FailedÅoáddÑun message.\n");

1527 
	`exô
(1);

1529 
	`EVTAG_ASSIGN
(
run
, 
how
, "very fast but with some data in it");

1530 
	`EVTAG_ASSIGN
(
run
, 
fixed_byãs
,

1534 i‡(
	`msg_com∂ëe
(
msg
) == -1) {

1535 
	`Ârötf
(
°dîr
, "FailedÅo make complete message.\n");

1536 
	`exô
(1);

1539 
	`evèg_m¨shÆ_msg
(
tmp
, 0xdóf, 
msg
);

1541 i‡(
	`evèg_≥ek
(
tmp
, &
èg
) == -1) {

1542 
	`Ârötf
(
°dîr
, "FailedÅoÖeakÅag.\n");

1543 
	`exô
 (1);

1546 i‡(
èg
 != 0xdeaf) {

1547 
	`Ârötf
(
°dîr
, "GŸ inc‹ª˘Åag: %0x.\n", 
èg
);

1548 
	`exô
 (1);

1551 
msg2
 = 
	`msg_√w
();

1552 i‡(
	`evèg_unm¨shÆ_msg
(
tmp
, 0xdóf, 
msg2
) == -1) {

1553 
	`Ârötf
(
°dîr
, "FailedÅo unmarshal message.\n");

1554 
	`exô
(1);

1557 
	`evutû_gëtimeofday
(&
tv_íd
, 
NULL
);

1558 
	`evutû_timîsub
(&
tv_íd
, &
tv_°¨t
, &tv_end);

1559 
	`Ârötf
(
°dîr
, "(%.1f us/add) ",

1560 ()
tv_íd
.
tv_£c
/()
i
 * 1000000.0 +

1561 
tv_íd
.
tv_u£c
 / ()
i
);

1563 i‡(!
	`EVTAG_HAS
(
msg2
, 
‰om_«me
) ||

1564 !
	`EVTAG_HAS
(
msg2
, 
to_«me
) ||

1565 !
	`EVTAG_HAS
(
msg2
, 
©èck
)) {

1566 
	`Ârötf
(
°dîr
, "Missing data structures.\n");

1567 
	`exô
(1);

1570 i‡(
	`EVTAG_LEN
(
msg2
, 
run
Ë!
i
) {

1571 
	`Ârötf
(
°dîr
, "WrongÇumber ofÑun messages.\n");

1572 
	`exô
(1);

1575 
	`msg_‰ì
(
msg
);

1576 
	`msg_‰ì
(
msg2
);

1578 
	`evbuf„r_‰ì
(
tmp
);

1580 
	`Ârötf
(
°dout
, "OK\n");

1581 
	}
}

1585 
	$ã°_evutû_°πﬁl
()

1587 c⁄° *
s
;

1588 *
íd±r
;

1589 
	`£tup_ã°
("evutil_stroll: ");

1590 
ã°_ok
 = 0;

1592 i‡(
	`evutû_°πﬁl
("5000000000", 
NULL
, 10Ë!((
ev_öt64_t
)5000000)*1000)

1593 
îr
;

1594 i‡(
	`evutû_°πﬁl
("-5000000000", 
NULL
, 10Ë!((
ev_öt64_t
)5000000)*-1000)

1595 
îr
;

1596 
s
 = " 99999stuff";

1597 i‡(
	`evutû_°πﬁl
(
s
, &
íd±r
, 10Ë!(
ev_öt64_t
)99999)

1598 
îr
;

1599 i‡(
íd±r
 !
s
+6)

1600 
îr
;

1601 i‡(
	`evutû_°πﬁl
("foo", 
NULL
, 10) != 0)

1602 
îr
;

1604 
ã°_ok
 = 1;

1605 
îr
:

1606 
	`˛ónup_ã°
();

1607 
	}
}

1611 
	$maö
 (
¨gc
, **
¨gv
)

1613 #ifde‡
WIN32


1614 
WORD
 
wVîsi⁄Reque°ed
;

1615 
WSADATA
 
wßD©a
;

1616 
îr
;

1618 
wVîsi⁄Reque°ed
 = 
	`MAKEWORD
( 2, 2 );

1620 
îr
 = 
	`WSASèπup
–
wVîsi⁄Reque°ed
, &
wßD©a
 );

1623 #i‚de‡
WIN32


1624 i‡(
	`sig«l
(
SIGPIPE
, 
SIG_IGN
Ë=
SIG_ERR
)

1627 
	`£tvbuf
(
°dout
, 
NULL
, 
_IONBF
, 0);

1630 
globÆ_ba£
 = 
	`evít_öô
();

1632 
	`ã°_ªgi°îfds
();

1634 
	`ã°_evutû_°πﬁl
();

1637 
	`ã°_¥i‹ôõs
(1);

1638 
	`ã°_¥i‹ôõs
(2);

1639 
	`ã°_¥i‹ôõs
(3);

1641 
	`ã°_evbuf„r
();

1642 
	`ã°_evbuf„r_föd
();

1644 
	`ã°_buf„ªvít
();

1645 
	`ã°_buf„ªvít_w©îm¨ks
();

1647 
	`ã°_‰ì_a˘ive_ba£
();

1649 
	`ã°_evít_ba£_√w
();

1651 
	`hâp_suôe
();

1653 #i‚de‡
WIN32


1654 
	`Ωc_suôe
();

1657 
	`dns_suôe
();

1659 #i‚de‡
WIN32


1660 
	`ã°_f‹k
();

1663 
	`ã°_sim∂îód
();

1665 
	`ã°_sim∂ewrôe
();

1667 
	`ã°_mu…ùÀ
();

1669 
	`ã°_≥rsi°ít
();

1671 
	`ã°_comböed
();

1673 
	`ã°_sim∂ëimeout
();

1674 #i‚de‡
WIN32


1675 
	`ã°_sim∂esig«l
();

1676 
	`ã°_mu…ùÀsig«l
();

1677 
	`ã°_immedüãsig«l
();

1679 
	`ã°_lo›exô
();

1680 
	`ã°_lo›bªak
();

1682 
	`ã°_lo›exô_mu…ùÀ
();

1684 
	`ã°_mu…ùÀ_evíts_f‹_ßme_fd
();

1686 
	`ã°_w™t_⁄ly_⁄˚
();

1688 
	`evèg_ã°
();

1690 #i‚de‡
WIN32


1691 
	`Ωc_ã°
();

1693 
	`ã°_sig«l_dóŒoc
();

1694 
	`ã°_sig«l_pùñoss
();

1695 
	`ã°_sig«l_swôchba£
();

1696 
	`ã°_sig«l_ª°‹e
();

1697 
	`ã°_sig«l_as£π
();

1698 
	`ã°_sig«l_whûe_¥o˚ssög
();

1702 
	}
}

	@test/regress.gen.c

6 
	~<sys/ty≥s.h
>

7 #ifde‡
_EVENT_HAVE_SYS_TIME_H


8 
	~<sys/time.h
>

10 
	~<°dlib.h
>

11 
	~<°rög.h
>

12 
	~<as£π.h
>

13 
	#EVENT_NO_STRUCT


	)

14 
	~<evít.h
>

16 #ifde‡
_EVENT___func__


17 
	#__func__
 
_EVENT___func__


	)

20 
	~"ªgªss.gí.h
"

22 
evít_îr
(
evÆ
, c⁄° *
fmt
, ...);

23 
evít_w¨n
(c⁄° *
fmt
, ...);

24 
evít_îrx
(
evÆ
, c⁄° *
fmt
, ...);

25 
evít_w¨nx
(c⁄° *
fmt
, ...);

32 
msg_ac˚ss_
 
	g__msg_ba£
 = {

33 
msg_‰om_«me_assign
,

34 
msg_‰om_«me_gë
,

35 
msg_to_«me_assign
,

36 
msg_to_«me_gë
,

37 
msg_©èck_assign
,

38 
msg_©èck_gë
,

39 
msg_run_assign
,

40 
msg_run_gë
,

41 
msg_run_add
,

44 
msg
 *

45 
	$msg_√w
()

47 
msg
 *
tmp
;

48 i‡((
tmp
 = 
	`mÆloc
((
msg
))Ë=
NULL
) {

49 
	`evít_w¨n
("%s: mÆloc", 
__func__
);

50  (
NULL
);

52 
tmp
->
ba£
 = &
__msg_ba£
;

54 
tmp
->
‰om_«me_d©a
 = 
NULL
;

55 
tmp
->
‰om_«me_£t
 = 0;

57 
tmp
->
to_«me_d©a
 = 
NULL
;

58 
tmp
->
to_«me_£t
 = 0;

60 
tmp
->
©èck_d©a
 = 
NULL
;

61 
tmp
->
©èck_£t
 = 0;

63 
tmp
->
run_d©a
 = 
NULL
;

64 
tmp
->
run_Àngth
 = 0;

65 
tmp
->
run_num_Æloˇãd
 = 0;

66 
tmp
->
run_£t
 = 0;

68  (
tmp
);

69 
	}
}

74 
run
 *

75 
	$msg_run_add
(
msg
 *msg)

77 i‡(++
msg
->
run_Àngth
 >msg->
run_num_Æloˇãd
) {

78 
tobe_Æloˇãd
 = 
msg
->
run_num_Æloˇãd
;

79 
run
 ** 
√w_d©a
 = 
NULL
;

80 
tobe_Æloˇãd
 = !tobe_allocated ? 1 :Åobe_allocated << 1;

81 
√w_d©a
 = (
run
 **Ë
	`ªÆloc
(
msg
->
run_d©a
,

82 
tobe_Æloˇãd
 * (
run
 *));

83 i‡(
√w_d©a
 =
NULL
)

84 
îr‹
;

85 
msg
->
run_d©a
 = 
√w_d©a
;

86 
msg
->
run_num_Æloˇãd
 = 
tobe_Æloˇãd
;

88 
msg
->
run_d©a
[msg->
run_Àngth
 - 1] = 
	`run_√w
();

89 i‡(
msg
->
run_d©a
[msg->
run_Àngth
 - 1] =
NULL
)

90 
îr‹
;

91 
msg
->
run_£t
 = 1;

92  (
msg
->
run_d©a
[msg->
run_Àngth
 - 1]);

93 
îr‹
:

94 --
msg
->
run_Àngth
;

95  (
NULL
);

96 
	}
}

100 
	$msg_‰om_«me_assign
(
msg
 *msg,

101 c⁄° * 
vÆue
)

103 i‡(
msg
->
‰om_«me_d©a
 !
NULL
)

104 
	`‰ì
(
msg
->
‰om_«me_d©a
);

105 i‡((
msg
->
‰om_«me_d©a
 = 
	`°rdup
(
vÆue
)Ë=
NULL
)

107 
msg
->
‰om_«me_£t
 = 1;

109 
	}
}

112 
	$msg_to_«me_assign
(
msg
 *msg,

113 c⁄° * 
vÆue
)

115 i‡(
msg
->
to_«me_d©a
 !
NULL
)

116 
	`‰ì
(
msg
->
to_«me_d©a
);

117 i‡((
msg
->
to_«me_d©a
 = 
	`°rdup
(
vÆue
)Ë=
NULL
)

119 
msg
->
to_«me_£t
 = 1;

121 
	}
}

124 
	$msg_©èck_assign
(
msg
 *msg,

125 c⁄° 
kûl
* 
vÆue
)

127 
evbuf„r
 *
tmp
 = 
NULL
;

128 i‡(
msg
->
©èck_£t
) {

129 
	`kûl_˛ór
(
msg
->
©èck_d©a
);

130 
msg
->
©èck_£t
 = 0;

132 
msg
->
©èck_d©a
 = 
	`kûl_√w
();

133 i‡(
msg
->
©èck_d©a
 =
NULL
) {

134 
	`evít_w¨n
("%s: kûl_√w()", 
__func__
);

135 
îr‹
;

138 i‡((
tmp
 = 
	`evbuf„r_√w
()Ë=
NULL
) {

139 
	`evít_w¨n
("%s:Évbuf„r_√w()", 
__func__
);

140 
îr‹
;

142 
	`kûl_m¨shÆ
(
tmp
, 
vÆue
);

143 i‡(
	`kûl_unm¨shÆ
(
msg
->
©èck_d©a
, 
tmp
) == -1) {

144 
	`evít_w¨nx
("%s: kûl_unm¨shÆ", 
__func__
);

145 
îr‹
;

147 
msg
->
©èck_£t
 = 1;

148 
	`evbuf„r_‰ì
(
tmp
);

150 
îr‹
:

151 i‡(
tmp
 !
NULL
)

152 
	`evbuf„r_‰ì
(
tmp
);

153 i‡(
msg
->
©èck_d©a
 !
NULL
) {

154 
	`kûl_‰ì
(
msg
->
©èck_d©a
);

155 
msg
->
©èck_d©a
 = 
NULL
;

158 
	}
}

161 
	$msg_run_assign
(
msg
 *msg, 
off
,

162 c⁄° 
run
 * 
vÆue
)

164 
evbuf„r
 *
tmp
 = 
NULL
;

165 i‡(!
msg
->
run_£t
 || 
off
 < 0 || of‡>msg->
run_Àngth
)

167 
	`run_˛ór
(
msg
->
run_d©a
[
off
]);

168 i‡((
tmp
 = 
	`evbuf„r_√w
()Ë=
NULL
) {

169 
	`evít_w¨n
("%s:Évbuf„r_√w()", 
__func__
);

170 
îr‹
;

172 
	`run_m¨shÆ
(
tmp
, 
vÆue
);

173 i‡(
	`run_unm¨shÆ
(
msg
->
run_d©a
[
off
], 
tmp
) == -1) {

174 
	`evít_w¨nx
("%s:Ñun_unm¨shÆ", 
__func__
);

175 
îr‹
;

177 
	`evbuf„r_‰ì
(
tmp
);

179 
îr‹
:

180 i‡(
tmp
 !
NULL
)

181 
	`evbuf„r_‰ì
(
tmp
);

182 
	`run_˛ór
(
msg
->
run_d©a
[
off
]);

184 
	}
}

187 
	$msg_‰om_«me_gë
(
msg
 *msg, * *
vÆue
)

189 i‡(
msg
->
‰om_«me_£t
 != 1)

191 *
vÆue
 = 
msg
->
‰om_«me_d©a
;

193 
	}
}

196 
	$msg_to_«me_gë
(
msg
 *msg, * *
vÆue
)

198 i‡(
msg
->
to_«me_£t
 != 1)

200 *
vÆue
 = 
msg
->
to_«me_d©a
;

202 
	}
}

205 
	$msg_©èck_gë
(
msg
 *msg, 
kûl
* *
vÆue
)

207 i‡(
msg
->
©èck_£t
 != 1) {

208 
msg
->
©èck_d©a
 = 
	`kûl_√w
();

209 i‡(
msg
->
©èck_d©a
 =
NULL
)

211 
msg
->
©èck_£t
 = 1;

213 *
vÆue
 = 
msg
->
©èck_d©a
;

215 
	}
}

218 
	$msg_run_gë
(
msg
 *msg, 
off£t
,

219 
run
 * *
vÆue
)

221 i‡(!
msg
->
run_£t
 || 
off£t
 < 0 || off£à>msg->
run_Àngth
)

223 *
vÆue
 = 
msg
->
run_d©a
[
off£t
];

225 
	}
}

228 
	$msg_˛ór
(
msg
 *
tmp
)

230 i‡(
tmp
->
‰om_«me_£t
 == 1) {

231 
	`‰ì
 (
tmp
->
‰om_«me_d©a
);

232 
tmp
->
‰om_«me_d©a
 = 
NULL
;

233 
tmp
->
‰om_«me_£t
 = 0;

235 i‡(
tmp
->
to_«me_£t
 == 1) {

236 
	`‰ì
 (
tmp
->
to_«me_d©a
);

237 
tmp
->
to_«me_d©a
 = 
NULL
;

238 
tmp
->
to_«me_£t
 = 0;

240 i‡(
tmp
->
©èck_£t
 == 1) {

241 
	`kûl_‰ì
(
tmp
->
©èck_d©a
);

242 
tmp
->
©èck_d©a
 = 
NULL
;

243 
tmp
->
©èck_£t
 = 0;

245 i‡(
tmp
->
run_£t
 == 1) {

246 
i
;

247 
i
 = 0; i < 
tmp
->
run_Àngth
; ++i) {

248 
	`run_‰ì
(
tmp
->
run_d©a
[
i
]);

250 
	`‰ì
(
tmp
->
run_d©a
);

251 
tmp
->
run_d©a
 = 
NULL
;

252 
tmp
->
run_£t
 = 0;

253 
tmp
->
run_Àngth
 = 0;

254 
tmp
->
run_num_Æloˇãd
 = 0;

256 
	}
}

259 
	$msg_‰ì
(
msg
 *
tmp
)

261 i‡(
tmp
->
‰om_«me_d©a
 !
NULL
)

262 
	`‰ì
 (
tmp
->
‰om_«me_d©a
);

263 i‡(
tmp
->
to_«me_d©a
 !
NULL
)

264 
	`‰ì
 (
tmp
->
to_«me_d©a
);

265 i‡(
tmp
->
©èck_d©a
 !
NULL
)

266 
	`kûl_‰ì
(
tmp
->
©èck_d©a
);

267 i‡(
tmp
->
run_d©a
 !
NULL
) {

268 
i
;

269 
i
 = 0; i < 
tmp
->
run_Àngth
; ++i) {

270 
	`run_‰ì
(
tmp
->
run_d©a
[
i
]);

271 
tmp
->
run_d©a
[
i
] = 
NULL
;

273 
	`‰ì
(
tmp
->
run_d©a
);

274 
tmp
->
run_d©a
 = 
NULL
;

275 
tmp
->
run_Àngth
 = 0;

276 
tmp
->
run_num_Æloˇãd
 = 0;

278 
	`‰ì
(
tmp
);

279 
	}
}

282 
	$msg_m¨shÆ
(
evbuf„r
 *
evbuf
, c⁄° 
msg
 *
tmp
){

283 
	`evèg_m¨shÆ_°rög
(
evbuf
, 
MSG_FROM_NAME
, 
tmp
->
‰om_«me_d©a
);

284 
	`evèg_m¨shÆ_°rög
(
evbuf
, 
MSG_TO_NAME
, 
tmp
->
to_«me_d©a
);

285 i‡(
tmp
->
©èck_£t
) {

286 
	`evèg_m¨shÆ_kûl
(
evbuf
, 
MSG_ATTACK
, 
tmp
->
©èck_d©a
);

289 
i
;

290 
i
 = 0; i < 
tmp
->
run_Àngth
; ++i) {

291 
	`evèg_m¨shÆ_run
(
evbuf
, 
MSG_RUN
, 
tmp
->
run_d©a
[
i
]);

294 
	}
}

297 
	$msg_unm¨shÆ
(
msg
 *
tmp
, 
evbuf„r
 *
evbuf
)

299 
ev_uöt32_t
 
èg
;

300 
	`EVBUFFER_LENGTH
(
evbuf
) > 0) {

301 i‡(
	`evèg_≥ek
(
evbuf
, &
èg
) == -1)

303 
èg
) {

305 
MSG_FROM_NAME
:

307 i‡(
tmp
->
‰om_«me_£t
)

309 i‡(
	`evèg_unm¨shÆ_°rög
(
evbuf
, 
MSG_FROM_NAME
, &
tmp
->
‰om_«me_d©a
) == -1) {

310 
	`evít_w¨nx
("%s: faûedÅÿunm¨shÆ from_«me", 
__func__
);

313 
tmp
->
‰om_«me_£t
 = 1;

316 
MSG_TO_NAME
:

318 i‡(
tmp
->
to_«me_£t
)

320 i‡(
	`evèg_unm¨shÆ_°rög
(
evbuf
, 
MSG_TO_NAME
, &
tmp
->
to_«me_d©a
) == -1) {

321 
	`evít_w¨nx
("%s: faûedÅÿunm¨shÆÅo_«me", 
__func__
);

324 
tmp
->
to_«me_£t
 = 1;

327 
MSG_ATTACK
:

329 i‡(
tmp
->
©èck_£t
)

331 
tmp
->
©èck_d©a
 = 
	`kûl_√w
();

332 i‡(
tmp
->
©èck_d©a
 =
NULL
)

334 i‡(
	`evèg_unm¨shÆ_kûl
(
evbuf
, 
MSG_ATTACK
, 
tmp
->
©èck_d©a
) == -1) {

335 
	`evít_w¨nx
("%s: faûedÅÿunm¨shÆáâack", 
__func__
);

338 
tmp
->
©èck_£t
 = 1;

341 
MSG_RUN
:

343 i‡(
	`msg_run_add
(
tmp
Ë=
NULL
)

345 i‡(
	`evèg_unm¨shÆ_run
(
evbuf
, 
MSG_RUN
,

346 
tmp
->
run_d©a
[tmp->
run_Àngth
 - 1]) == -1) {

347 --
tmp
->
run_Àngth
;

348 
	`evít_w¨nx
("%s: faûedÅÿunm¨shÆÑun", 
__func__
);

351 
tmp
->
run_£t
 = 1;

359 i‡(
	`msg_com∂ëe
(
tmp
) == -1)

362 
	}
}

365 
	$msg_com∂ëe
(
msg
 *msg)

367 i‡(!
msg
->
‰om_«me_£t
)

369 i‡(!
msg
->
to_«me_£t
)

371 i‡(
msg
->
©èck_£t
 && 
	`kûl_com∂ëe
(msg->
©èck_d©a
) == -1)

374 
i
;

375 
i
 = 0; i < 
msg
->
run_Àngth
; ++i) {

376 i‡(
	`run_com∂ëe
(
msg
->
run_d©a
[
i
]) == -1)

381 
	}
}

384 
	$evèg_unm¨shÆ_msg
(
evbuf„r
 *
evbuf
, 
ev_uöt32_t
 
√ed_èg
, 
msg
 *msg)

386 
ev_uöt32_t
 
èg
;

387 
ªs
 = -1;

389 
evbuf„r
 *
tmp
 = 
	`evbuf„r_√w
();

391 i‡(
	`evèg_unm¨shÆ
(
evbuf
, &
èg
, 
tmp
Ë=-1 ||Åag !
√ed_èg
)

392 
îr‹
;

394 i‡(
	`msg_unm¨shÆ
(
msg
, 
tmp
) == -1)

395 
îr‹
;

397 
ªs
 = 0;

399 
îr‹
:

400 
	`evbuf„r_‰ì
(
tmp
);

401  (
ªs
);

402 
	}
}

405 
	$evèg_m¨shÆ_msg
(
evbuf„r
 *
evbuf
, 
ev_uöt32_t
 
èg
, c⁄° 
msg
 *msg)

407 
evbuf„r
 *
_buf
 = 
	`evbuf„r_√w
();

408 
	`as£π
(
_buf
 !
NULL
);

409 
	`evbuf„r_døö
(
_buf
, -1);

410 
	`msg_m¨shÆ
(
_buf
, 
msg
);

411 
	`evèg_m¨shÆ
(
evbuf
, 
èg
, 
	`EVBUFFER_DATA
(
_buf
), 
	`EVBUFFER_LENGTH
(_buf));

412 
	`evbuf„r_‰ì
(
_buf
);

413 
	}
}

419 
kûl_ac˚ss_
 
	g__kûl_ba£
 = {

420 
kûl_wóp⁄_assign
,

421 
kûl_wóp⁄_gë
,

422 
kûl_a˘i⁄_assign
,

423 
kûl_a˘i⁄_gë
,

424 
kûl_how_o·í_assign
,

425 
kûl_how_o·í_gë
,

428 
kûl
 *

429 
	$kûl_√w
()

431 
kûl
 *
tmp
;

432 i‡((
tmp
 = 
	`mÆloc
((
kûl
))Ë=
NULL
) {

433 
	`evít_w¨n
("%s: mÆloc", 
__func__
);

434  (
NULL
);

436 
tmp
->
ba£
 = &
__kûl_ba£
;

438 
tmp
->
wóp⁄_d©a
 = 
NULL
;

439 
tmp
->
wóp⁄_£t
 = 0;

441 
tmp
->
a˘i⁄_d©a
 = 
NULL
;

442 
tmp
->
a˘i⁄_£t
 = 0;

444 
tmp
->
how_o·í_d©a
 = 0;

445 
tmp
->
how_o·í_£t
 = 0;

447  (
tmp
);

448 
	}
}

454 
	$kûl_wóp⁄_assign
(
kûl
 *
msg
,

455 c⁄° * 
vÆue
)

457 i‡(
msg
->
wóp⁄_d©a
 !
NULL
)

458 
	`‰ì
(
msg
->
wóp⁄_d©a
);

459 i‡((
msg
->
wóp⁄_d©a
 = 
	`°rdup
(
vÆue
)Ë=
NULL
)

461 
msg
->
wóp⁄_£t
 = 1;

463 
	}
}

466 
	$kûl_a˘i⁄_assign
(
kûl
 *
msg
,

467 c⁄° * 
vÆue
)

469 i‡(
msg
->
a˘i⁄_d©a
 !
NULL
)

470 
	`‰ì
(
msg
->
a˘i⁄_d©a
);

471 i‡((
msg
->
a˘i⁄_d©a
 = 
	`°rdup
(
vÆue
)Ë=
NULL
)

473 
msg
->
a˘i⁄_£t
 = 1;

475 
	}
}

478 
	$kûl_how_o·í_assign
(
kûl
 *
msg
, c⁄° 
ev_uöt32_t
 
vÆue
)

480 
msg
->
how_o·í_£t
 = 1;

481 
msg
->
how_o·í_d©a
 = 
vÆue
;

483 
	}
}

486 
	$kûl_wóp⁄_gë
(
kûl
 *
msg
, * *
vÆue
)

488 i‡(
msg
->
wóp⁄_£t
 != 1)

490 *
vÆue
 = 
msg
->
wóp⁄_d©a
;

492 
	}
}

495 
	$kûl_a˘i⁄_gë
(
kûl
 *
msg
, * *
vÆue
)

497 i‡(
msg
->
a˘i⁄_£t
 != 1)

499 *
vÆue
 = 
msg
->
a˘i⁄_d©a
;

501 
	}
}

504 
	$kûl_how_o·í_gë
(
kûl
 *
msg
, 
ev_uöt32_t
 *
vÆue
)

506 i‡(
msg
->
how_o·í_£t
 != 1)

508 *
vÆue
 = 
msg
->
how_o·í_d©a
;

510 
	}
}

513 
	$kûl_˛ór
(
kûl
 *
tmp
)

515 i‡(
tmp
->
wóp⁄_£t
 == 1) {

516 
	`‰ì
 (
tmp
->
wóp⁄_d©a
);

517 
tmp
->
wóp⁄_d©a
 = 
NULL
;

518 
tmp
->
wóp⁄_£t
 = 0;

520 i‡(
tmp
->
a˘i⁄_£t
 == 1) {

521 
	`‰ì
 (
tmp
->
a˘i⁄_d©a
);

522 
tmp
->
a˘i⁄_d©a
 = 
NULL
;

523 
tmp
->
a˘i⁄_£t
 = 0;

525 
tmp
->
how_o·í_£t
 = 0;

526 
	}
}

529 
	$kûl_‰ì
(
kûl
 *
tmp
)

531 i‡(
tmp
->
wóp⁄_d©a
 !
NULL
)

532 
	`‰ì
 (
tmp
->
wóp⁄_d©a
);

533 i‡(
tmp
->
a˘i⁄_d©a
 !
NULL
)

534 
	`‰ì
 (
tmp
->
a˘i⁄_d©a
);

535 
	`‰ì
(
tmp
);

536 
	}
}

539 
	$kûl_m¨shÆ
(
evbuf„r
 *
evbuf
, c⁄° 
kûl
 *
tmp
){

540 
	`evèg_m¨shÆ_°rög
(
evbuf
, 
KILL_WEAPON
, 
tmp
->
wóp⁄_d©a
);

541 
	`evèg_m¨shÆ_°rög
(
evbuf
, 
KILL_ACTION
, 
tmp
->
a˘i⁄_d©a
);

542 i‡(
tmp
->
how_o·í_£t
) {

543 
	`evèg_m¨shÆ_öt
(
evbuf
, 
KILL_HOW_OFTEN
, 
tmp
->
how_o·í_d©a
);

545 
	}
}

548 
	$kûl_unm¨shÆ
(
kûl
 *
tmp
, 
evbuf„r
 *
evbuf
)

550 
ev_uöt32_t
 
èg
;

551 
	`EVBUFFER_LENGTH
(
evbuf
) > 0) {

552 i‡(
	`evèg_≥ek
(
evbuf
, &
èg
) == -1)

554 
èg
) {

556 
KILL_WEAPON
:

558 i‡(
tmp
->
wóp⁄_£t
)

560 i‡(
	`evèg_unm¨shÆ_°rög
(
evbuf
, 
KILL_WEAPON
, &
tmp
->
wóp⁄_d©a
) == -1) {

561 
	`evít_w¨nx
("%s: faûedÅÿunm¨shÆ wóp⁄", 
__func__
);

564 
tmp
->
wóp⁄_£t
 = 1;

567 
KILL_ACTION
:

569 i‡(
tmp
->
a˘i⁄_£t
)

571 i‡(
	`evèg_unm¨shÆ_°rög
(
evbuf
, 
KILL_ACTION
, &
tmp
->
a˘i⁄_d©a
) == -1) {

572 
	`evít_w¨nx
("%s: faûedÅÿunm¨shÆá˘i⁄", 
__func__
);

575 
tmp
->
a˘i⁄_£t
 = 1;

578 
KILL_HOW_OFTEN
:

580 i‡(
tmp
->
how_o·í_£t
)

582 i‡(
	`evèg_unm¨shÆ_öt
(
evbuf
, 
KILL_HOW_OFTEN
, &
tmp
->
how_o·í_d©a
) == -1) {

583 
	`evít_w¨nx
("%s: faûedÅÿunm¨shÆ how_o·í", 
__func__
);

586 
tmp
->
how_o·í_£t
 = 1;

594 i‡(
	`kûl_com∂ëe
(
tmp
) == -1)

597 
	}
}

600 
	$kûl_com∂ëe
(
kûl
 *
msg
)

602 i‡(!
msg
->
wóp⁄_£t
)

604 i‡(!
msg
->
a˘i⁄_£t
)

607 
	}
}

610 
	$evèg_unm¨shÆ_kûl
(
evbuf„r
 *
evbuf
, 
ev_uöt32_t
 
√ed_èg
, 
kûl
 *
msg
)

612 
ev_uöt32_t
 
èg
;

613 
ªs
 = -1;

615 
evbuf„r
 *
tmp
 = 
	`evbuf„r_√w
();

617 i‡(
	`evèg_unm¨shÆ
(
evbuf
, &
èg
, 
tmp
Ë=-1 ||Åag !
√ed_èg
)

618 
îr‹
;

620 i‡(
	`kûl_unm¨shÆ
(
msg
, 
tmp
) == -1)

621 
îr‹
;

623 
ªs
 = 0;

625 
îr‹
:

626 
	`evbuf„r_‰ì
(
tmp
);

627  (
ªs
);

628 
	}
}

631 
	$evèg_m¨shÆ_kûl
(
evbuf„r
 *
evbuf
, 
ev_uöt32_t
 
èg
, c⁄° 
kûl
 *
msg
)

633 
evbuf„r
 *
_buf
 = 
	`evbuf„r_√w
();

634 
	`as£π
(
_buf
 !
NULL
);

635 
	`evbuf„r_døö
(
_buf
, -1);

636 
	`kûl_m¨shÆ
(
_buf
, 
msg
);

637 
	`evèg_m¨shÆ
(
evbuf
, 
èg
, 
	`EVBUFFER_DATA
(
_buf
), 
	`EVBUFFER_LENGTH
(_buf));

638 
	`evbuf„r_‰ì
(
_buf
);

639 
	}
}

645 
run_ac˚ss_
 
	g__run_ba£
 = {

646 
run_how_assign
,

647 
run_how_gë
,

648 
run_some_byãs_assign
,

649 
run_some_byãs_gë
,

650 
run_fixed_byãs_assign
,

651 
run_fixed_byãs_gë
,

654 
run
 *

655 
	$run_√w
()

657 
run
 *
tmp
;

658 i‡((
tmp
 = 
	`mÆloc
((
run
))Ë=
NULL
) {

659 
	`evít_w¨n
("%s: mÆloc", 
__func__
);

660  (
NULL
);

662 
tmp
->
ba£
 = &
__run_ba£
;

664 
tmp
->
how_d©a
 = 
NULL
;

665 
tmp
->
how_£t
 = 0;

667 
tmp
->
some_byãs_d©a
 = 
NULL
;

668 
tmp
->
some_byãs_Àngth
 = 0;

669 
tmp
->
some_byãs_£t
 = 0;

671 
	`mem£t
(
tmp
->
fixed_byãs_d©a
, 0, (tmp->fixed_bytes_data));

672 
tmp
->
fixed_byãs_£t
 = 0;

674  (
tmp
);

675 
	}
}

681 
	$run_how_assign
(
run
 *
msg
,

682 c⁄° * 
vÆue
)

684 i‡(
msg
->
how_d©a
 !
NULL
)

685 
	`‰ì
(
msg
->
how_d©a
);

686 i‡((
msg
->
how_d©a
 = 
	`°rdup
(
vÆue
)Ë=
NULL
)

688 
msg
->
how_£t
 = 1;

690 
	}
}

693 
	$run_some_byãs_assign
(
run
 *
msg
, c⁄° 
ev_uöt8_t
 * 
vÆue
, 
ev_uöt32_t
 
Àn
)

695 i‡(
msg
->
some_byãs_d©a
 !
NULL
)

696 
	`‰ì
 (
msg
->
some_byãs_d©a
);

697 
msg
->
some_byãs_d©a
 = 
	`mÆloc
(
Àn
);

698 i‡(
msg
->
some_byãs_d©a
 =
NULL
)

700 
msg
->
some_byãs_£t
 = 1;

701 
msg
->
some_byãs_Àngth
 = 
Àn
;

702 
	`mem˝y
(
msg
->
some_byãs_d©a
, 
vÆue
, 
Àn
);

704 
	}
}

707 
	$run_fixed_byãs_assign
(
run
 *
msg
, c⁄° 
ev_uöt8_t
 *
vÆue
)

709 
msg
->
fixed_byãs_£t
 = 1;

710 
	`mem˝y
(
msg
->
fixed_byãs_d©a
, 
vÆue
, 24);

712 
	}
}

715 
	$run_how_gë
(
run
 *
msg
, * *
vÆue
)

717 i‡(
msg
->
how_£t
 != 1)

719 *
vÆue
 = 
msg
->
how_d©a
;

721 
	}
}

724 
	$run_some_byãs_gë
(
run
 *
msg
, 
ev_uöt8_t
 * *
vÆue
, 
ev_uöt32_t
 *
∂í
)

726 i‡(
msg
->
some_byãs_£t
 != 1)

728 *
vÆue
 = 
msg
->
some_byãs_d©a
;

729 *
∂í
 = 
msg
->
some_byãs_Àngth
;

731 
	}
}

734 
	$run_fixed_byãs_gë
(
run
 *
msg
, 
ev_uöt8_t
 **
vÆue
)

736 i‡(
msg
->
fixed_byãs_£t
 != 1)

738 *
vÆue
 = 
msg
->
fixed_byãs_d©a
;

740 
	}
}

743 
	$run_˛ór
(
run
 *
tmp
)

745 i‡(
tmp
->
how_£t
 == 1) {

746 
	`‰ì
 (
tmp
->
how_d©a
);

747 
tmp
->
how_d©a
 = 
NULL
;

748 
tmp
->
how_£t
 = 0;

750 i‡(
tmp
->
some_byãs_£t
 == 1) {

751 
	`‰ì
 (
tmp
->
some_byãs_d©a
);

752 
tmp
->
some_byãs_d©a
 = 
NULL
;

753 
tmp
->
some_byãs_Àngth
 = 0;

754 
tmp
->
some_byãs_£t
 = 0;

756 
tmp
->
fixed_byãs_£t
 = 0;

757 
	`mem£t
(
tmp
->
fixed_byãs_d©a
, 0, (tmp->fixed_bytes_data));

758 
	}
}

761 
	$run_‰ì
(
run
 *
tmp
)

763 i‡(
tmp
->
how_d©a
 !
NULL
)

764 
	`‰ì
 (
tmp
->
how_d©a
);

765 i‡(
tmp
->
some_byãs_d©a
 !
NULL
)

766 
	`‰ì
 (
tmp
->
some_byãs_d©a
);

767 
	`‰ì
(
tmp
);

768 
	}
}

771 
	$run_m¨shÆ
(
evbuf„r
 *
evbuf
, c⁄° 
run
 *
tmp
){

772 
	`evèg_m¨shÆ_°rög
(
evbuf
, 
RUN_HOW
, 
tmp
->
how_d©a
);

773 i‡(
tmp
->
some_byãs_£t
) {

774 
	`evèg_m¨shÆ
(
evbuf
, 
RUN_SOME_BYTES
, 
tmp
->
some_byãs_d©a
,Åmp->
some_byãs_Àngth
);

776 
	`evèg_m¨shÆ
(
evbuf
, 
RUN_FIXED_BYTES
, 
tmp
->
fixed_byãs_d©a
, (tmp->fixed_bytes_data));

777 
	}
}

780 
	$run_unm¨shÆ
(
run
 *
tmp
, 
evbuf„r
 *
evbuf
)

782 
ev_uöt32_t
 
èg
;

783 
	`EVBUFFER_LENGTH
(
evbuf
) > 0) {

784 i‡(
	`evèg_≥ek
(
evbuf
, &
èg
) == -1)

786 
èg
) {

788 
RUN_HOW
:

790 i‡(
tmp
->
how_£t
)

792 i‡(
	`evèg_unm¨shÆ_°rög
(
evbuf
, 
RUN_HOW
, &
tmp
->
how_d©a
) == -1) {

793 
	`evít_w¨nx
("%s: faûedÅÿunm¨shÆ how", 
__func__
);

796 
tmp
->
how_£t
 = 1;

799 
RUN_SOME_BYTES
:

801 i‡(
tmp
->
some_byãs_£t
)

803 i‡(
	`evèg_∑ylﬂd_Àngth
(
evbuf
, &
tmp
->
some_byãs_Àngth
) == -1)

805 i‡(
tmp
->
some_byãs_Àngth
 > 
	`EVBUFFER_LENGTH
(
evbuf
))

807 i‡((
tmp
->
some_byãs_d©a
 = 
	`mÆloc
—mp->
some_byãs_Àngth
)Ë=
NULL
)

809 i‡(
	`evèg_unm¨shÆ_fixed
(
evbuf
, 
RUN_SOME_BYTES
, 
tmp
->
some_byãs_d©a
,Åmp->
some_byãs_Àngth
) == -1) {

810 
	`evít_w¨nx
("%s: faûedÅÿunm¨shÆ some_byãs", 
__func__
);

813 
tmp
->
some_byãs_£t
 = 1;

816 
RUN_FIXED_BYTES
:

818 i‡(
tmp
->
fixed_byãs_£t
)

820 i‡(
	`evèg_unm¨shÆ_fixed
(
evbuf
, 
RUN_FIXED_BYTES
, 
tmp
->
fixed_byãs_d©a
, (tmp->fixed_bytes_data)) == -1) {

821 
	`evít_w¨nx
("%s: faûedÅÿunm¨shÆ fixed_byãs", 
__func__
);

824 
tmp
->
fixed_byãs_£t
 = 1;

832 i‡(
	`run_com∂ëe
(
tmp
) == -1)

835 
	}
}

838 
	$run_com∂ëe
(
run
 *
msg
)

840 i‡(!
msg
->
how_£t
)

842 i‡(!
msg
->
fixed_byãs_£t
)

845 
	}
}

848 
	$evèg_unm¨shÆ_run
(
evbuf„r
 *
evbuf
, 
ev_uöt32_t
 
√ed_èg
, 
run
 *
msg
)

850 
ev_uöt32_t
 
èg
;

851 
ªs
 = -1;

853 
evbuf„r
 *
tmp
 = 
	`evbuf„r_√w
();

855 i‡(
	`evèg_unm¨shÆ
(
evbuf
, &
èg
, 
tmp
Ë=-1 ||Åag !
√ed_èg
)

856 
îr‹
;

858 i‡(
	`run_unm¨shÆ
(
msg
, 
tmp
) == -1)

859 
îr‹
;

861 
ªs
 = 0;

863 
îr‹
:

864 
	`evbuf„r_‰ì
(
tmp
);

865  (
ªs
);

866 
	}
}

869 
	$evèg_m¨shÆ_run
(
evbuf„r
 *
evbuf
, 
ev_uöt32_t
 
èg
, c⁄° 
run
 *
msg
)

871 
evbuf„r
 *
_buf
 = 
	`evbuf„r_√w
();

872 
	`as£π
(
_buf
 !
NULL
);

873 
	`evbuf„r_døö
(
_buf
, -1);

874 
	`run_m¨shÆ
(
_buf
, 
msg
);

875 
	`evèg_m¨shÆ
(
evbuf
, 
èg
, 
	`EVBUFFER_DATA
(
_buf
), 
	`EVBUFFER_LENGTH
(_buf));

876 
	`evbuf„r_‰ì
(
_buf
);

877 
	}
}

	@test/regress.gen.h

5 #i‚de‡
___REGRESS_RPC_


6 
	#___REGRESS_RPC_


	)

8 
	~<evít-c⁄fig.h
>

9 #ifde‡
_EVENT_HAVE_STDINT_H


10 
	~<°döt.h
>

12 
	#EVTAG_HAS
(
msg
, 
membî
Ë((msg)->membî##
_£t
 =1)

	)

13 #ifde‡
__GNUC__


14 
	#EVTAG_ASSIGN
(
msg
, 
membî
, 
¨gs
...Ë(*(msg)->
ba£
->membî##
_assign
)(msg, ##árgs)

	)

15 
	#EVTAG_GET
(
msg
, 
membî
, 
¨gs
...Ë(*(msg)->
ba£
->membî##
_gë
)(msg, ##árgs)

	)

17 
	#EVTAG_ASSIGN
(
msg
, 
membî
, ...Ë(*(msg)->
ba£
->membî##
_assign
)(msg, ## 
__VA_ARGS__
)

	)

18 
	#EVTAG_GET
(
msg
, 
membî
, ...Ë(*(msg)->
ba£
->membî##
_gë
)(msg, ## 
__VA_ARGS__
)

	)

20 
	#EVTAG_ADD
(
msg
, 
membî
Ë(*(msg)->
ba£
->membî##
_add
)(msg)

	)

21 
	#EVTAG_LEN
(
msg
, 
membî
Ë((msg)->membî##
_Àngth
)

	)

23 
	gmsg
;

24 
	gkûl
;

25 
	grun
;

28 
	emsg_
 {

29 
	mMSG_FROM_NAME
=1,

30 
	mMSG_TO_NAME
=2,

31 
	mMSG_ATTACK
=3,

32 
	mMSG_RUN
=4,

33 
	mMSG_MAX_TAGS


37 
	smsg_ac˚ss_
 {

38 (*
	m‰om_«me_assign
)(
	mmsg
 *, const *);

39 (*
	m‰om_«me_gë
)(
	mmsg
 *, * *);

40 (*
	mto_«me_assign
)(
	mmsg
 *, const *);

41 (*
	mto_«me_gë
)(
	mmsg
 *, * *);

42 (*
	m©èck_assign
)(
	mmsg
 *, c⁄° 
	mkûl
*);

43 (*
	m©èck_gë
)(
	mmsg
 *, 
	mkûl
* *);

44 (*
	mrun_assign
)(
	mmsg
 *, , c⁄° 
	mrun
 *);

45 (*
	mrun_gë
)(
	mmsg
 *, , 
	mrun
 * *);

46 
	mrun
 * (*
	mrun_add
)(
	mmsg
 *);

49 
	smsg
 {

50 
msg_ac˚ss_
 *
	mba£
;

52 *
	m‰om_«me_d©a
;

53 *
	mto_«me_d©a
;

54 
kûl
* 
	m©èck_d©a
;

55 
run
 **
	mrun_d©a
;

56 
	mrun_Àngth
;

57 
	mrun_num_Æloˇãd
;

59 
ev_uöt8_t
 
	m‰om_«me_£t
;

60 
ev_uöt8_t
 
	mto_«me_£t
;

61 
ev_uöt8_t
 
	m©èck_£t
;

62 
ev_uöt8_t
 
	mrun_£t
;

65 
msg
 *
msg_√w
();

66 
msg_‰ì
(
msg
 *);

67 
msg_˛ór
(
msg
 *);

68 
msg_m¨shÆ
(
evbuf„r
 *, c⁄° 
msg
 *);

69 
msg_unm¨shÆ
(
msg
 *, 
evbuf„r
 *);

70 
msg_com∂ëe
(
msg
 *);

71 
evèg_m¨shÆ_msg
(
evbuf„r
 *, 
ev_uöt32_t
,

72 c⁄° 
msg
 *);

73 
evèg_unm¨shÆ_msg
(
evbuf„r
 *, 
ev_uöt32_t
,

74 
msg
 *);

75 
msg_‰om_«me_assign
(
msg
 *, const *);

76 
msg_‰om_«me_gë
(
msg
 *, * *);

77 
msg_to_«me_assign
(
msg
 *, const *);

78 
msg_to_«me_gë
(
msg
 *, * *);

79 
msg_©èck_assign
(
msg
 *, c⁄° 
kûl
*);

80 
msg_©èck_gë
(
msg
 *, 
kûl
* *);

81 
msg_run_assign
(
msg
 *, , c⁄° 
run
 *);

82 
msg_run_gë
(
msg
 *, , 
run
 * *);

83 
run
 * 
msg_run_add
(
msg
 *);

87 
	ekûl_
 {

88 
	mKILL_WEAPON
=65825,

89 
	mKILL_ACTION
=2,

90 
	mKILL_HOW_OFTEN
=3,

91 
	mKILL_MAX_TAGS


95 
	skûl_ac˚ss_
 {

96 (*
	mwóp⁄_assign
)(
	mkûl
 *, const *);

97 (*
	mwóp⁄_gë
)(
	mkûl
 *, * *);

98 (*
	ma˘i⁄_assign
)(
	mkûl
 *, const *);

99 (*
	ma˘i⁄_gë
)(
	mkûl
 *, * *);

100 (*
	mhow_o·í_assign
)(
	mkûl
 *, c⁄° 
	mev_uöt32_t
);

101 (*
	mhow_o·í_gë
)(
	mkûl
 *, 
	mev_uöt32_t
 *);

104 
	skûl
 {

105 
kûl_ac˚ss_
 *
	mba£
;

107 *
	mwóp⁄_d©a
;

108 *
	ma˘i⁄_d©a
;

109 
ev_uöt32_t
 
	mhow_o·í_d©a
;

111 
ev_uöt8_t
 
	mwóp⁄_£t
;

112 
ev_uöt8_t
 
	ma˘i⁄_£t
;

113 
ev_uöt8_t
 
	mhow_o·í_£t
;

116 
kûl
 *
kûl_√w
();

117 
kûl_‰ì
(
kûl
 *);

118 
kûl_˛ór
(
kûl
 *);

119 
kûl_m¨shÆ
(
evbuf„r
 *, c⁄° 
kûl
 *);

120 
kûl_unm¨shÆ
(
kûl
 *, 
evbuf„r
 *);

121 
kûl_com∂ëe
(
kûl
 *);

122 
evèg_m¨shÆ_kûl
(
evbuf„r
 *, 
ev_uöt32_t
,

123 c⁄° 
kûl
 *);

124 
evèg_unm¨shÆ_kûl
(
evbuf„r
 *, 
ev_uöt32_t
,

125 
kûl
 *);

126 
kûl_wóp⁄_assign
(
kûl
 *, const *);

127 
kûl_wóp⁄_gë
(
kûl
 *, * *);

128 
kûl_a˘i⁄_assign
(
kûl
 *, const *);

129 
kûl_a˘i⁄_gë
(
kûl
 *, * *);

130 
kûl_how_o·í_assign
(
kûl
 *, c⁄° 
ev_uöt32_t
);

131 
kûl_how_o·í_gë
(
kûl
 *, 
ev_uöt32_t
 *);

135 
	erun_
 {

136 
	mRUN_HOW
=1,

137 
	mRUN_SOME_BYTES
=2,

138 
	mRUN_FIXED_BYTES
=3,

139 
	mRUN_MAX_TAGS


143 
	srun_ac˚ss_
 {

144 (*
	mhow_assign
)(
	mrun
 *, const *);

145 (*
	mhow_gë
)(
	mrun
 *, * *);

146 (*
	msome_byãs_assign
)(
	mrun
 *, c⁄° 
	mev_uöt8_t
 *, 
	mev_uöt32_t
);

147 (*
	msome_byãs_gë
)(
	mrun
 *, 
	mev_uöt8_t
 * *, 
	mev_uöt32_t
 *);

148 (*
	mfixed_byãs_assign
)(
	mrun
 *, c⁄° 
	mev_uöt8_t
 *);

149 (*
	mfixed_byãs_gë
)(
	mrun
 *, 
	mev_uöt8_t
 **);

152 
	srun
 {

153 
run_ac˚ss_
 *
	mba£
;

155 *
	mhow_d©a
;

156 
ev_uöt8_t
 *
	msome_byãs_d©a
;

157 
ev_uöt32_t
 
	msome_byãs_Àngth
;

158 
ev_uöt8_t
 
	mfixed_byãs_d©a
[24];

160 
ev_uöt8_t
 
	mhow_£t
;

161 
ev_uöt8_t
 
	msome_byãs_£t
;

162 
ev_uöt8_t
 
	mfixed_byãs_£t
;

165 
run
 *
run_√w
();

166 
run_‰ì
(
run
 *);

167 
run_˛ór
(
run
 *);

168 
run_m¨shÆ
(
evbuf„r
 *, c⁄° 
run
 *);

169 
run_unm¨shÆ
(
run
 *, 
evbuf„r
 *);

170 
run_com∂ëe
(
run
 *);

171 
evèg_m¨shÆ_run
(
evbuf„r
 *, 
ev_uöt32_t
,

172 c⁄° 
run
 *);

173 
evèg_unm¨shÆ_run
(
evbuf„r
 *, 
ev_uöt32_t
,

174 
run
 *);

175 
run_how_assign
(
run
 *, const *);

176 
run_how_gë
(
run
 *, * *);

177 
run_some_byãs_assign
(
run
 *, c⁄° 
ev_uöt8_t
 *, 
ev_uöt32_t
);

178 
run_some_byãs_gë
(
run
 *, 
ev_uöt8_t
 * *, 
ev_uöt32_t
 *);

179 
run_fixed_byãs_assign
(
run
 *, c⁄° 
ev_uöt8_t
 *);

180 
run_fixed_byãs_gë
(
run
 *, 
ev_uöt8_t
 **);

	@test/regress.h

27 #i‚de‡
_REGRESS_H_


28 
	#_REGRESS_H_


	)

30 #ifde‡
__˝lu•lus


34 
hâp_suôe
();

35 
hâp_basic_ã°
();

37 
Ωc_suôe
();

39 
dns_suôe
();

41 #ifde‡
__˝lu•lus


	@test/regress_dns.c

28 #ifde‡
WIN32


29 
	~<wösock2.h
>

30 
	~<wödows.h
>

33 #ifde‡
HAVE_CONFIG_H


34 
	~"c⁄fig.h
"

37 
	~<sys/ty≥s.h
>

38 
	~<sys/°©.h
>

39 #ifde‡
HAVE_SYS_TIME_H


40 
	~<sys/time.h
>

42 
	~<sys/queue.h
>

43 #i‚de‡
WIN32


44 
	~<sys/sockë.h
>

45 
	~<sig«l.h
>

46 
	~<√töë/ö.h
>

47 
	~<¨∑/öë.h
>

48 
	~<uni°d.h
>

50 #ifde‡
HAVE_NETINET_IN6_H


51 
	~<√töë/ö6.h
>

53 #ifde‡
HAVE_NETDB_H


54 
	~<√tdb.h
>

56 
	~<f˙é.h
>

57 
	~<°dlib.h
>

58 
	~<°dio.h
>

59 
	~<°rög.h
>

60 
	~<î∫o.h
>

62 
	~"evít.h
"

63 
	~"evdns.h
"

64 
	~"log.h
"

66 
	gdns_ok
 = 0;

67 
	gdns_îr
 = 0;

69 
dns_suôe
();

72 
	$dns_gëho°by«me_cb
(
ªsu…
, 
ty≥
, 
cou¡
, 
âl
,

73 *
addªs£s
, *
¨g
)

75 
dns_ok
 = 
dns_îr
 = 0;

77 i‡(
ªsu…
 =
DNS_ERR_TIMEOUT
) {

78 
	`Ârötf
(
°dout
, "[Timed out] ");

79 
dns_îr
 = 
ªsu…
;

80 
out
;

83 i‡(
ªsu…
 !
DNS_ERR_NONE
) {

84 
	`Ârötf
(
°dout
, "[Eº‹ codê%d] ", 
ªsu…
);

85 
out
;

88 
	`Ârötf
(
°dîr
, "ty≥: %d, cou¡: %d,Åé: %d: ", 
ty≥
, 
cou¡
, 
âl
);

90 
ty≥
) {

91 
DNS_IPv6_AAAA
: {

92 #i‡
	`deföed
(
HAVE_STRUCT_IN6_ADDR
Ë&& deföed(
HAVE_INET_NTOP
Ë&& deföed(
INET6_ADDRSTRLEN
)

93 
ö6_addr
 *
ö6_addrs
 = 
addªs£s
;

94 
buf
[
INET6_ADDRSTRLEN
+1];

95 
i
;

97 i‡(
âl
 < 0)

98 
out
;

99 
i
 = 0; i < 
cou¡
; ++i) {

100 c⁄° *
b
 = 
	`öë_¡›
(
AF_INET6
, &
ö6_addrs
[
i
], 
buf
,(buf));

101 i‡(
b
)

102 
	`Ârötf
(
°dîr
, "%†", 
b
);

104 
	`Ârötf
(
°dîr
, "%†", 
	`°ªº‹
(
î∫o
));

109 
DNS_IPv4_A
: {

110 
ö_addr
 *
ö_addrs
 = 
addªs£s
;

111 
i
;

113 i‡(
âl
 < 0)

114 
out
;

115 
i
 = 0; i < 
cou¡
; ++i)

116 
	`Ârötf
(
°dîr
, "%†", 
	`öë_¡ﬂ
(
ö_addrs
[
i
]));

119 
DNS_PTR
:

121 i‡(
cou¡
 != 1)

122 
out
;

124 
	`Ârötf
(
°dîr
, "%†", *(**)
addªs£s
);

127 
out
;

130 
dns_ok
 = 
ty≥
;

132 
out
:

133 
	`evít_lo›exô
(
NULL
);

134 
	}
}

137 
	$dns_gëho°by«me
()

139 
	`Ârötf
(
°dout
, "Simple DNSÑesolve: ");

140 
dns_ok
 = 0;

141 
	`evdns_ªsﬁve_ùv4
("www.m⁄key.‹g", 0, 
dns_gëho°by«me_cb
, 
NULL
);

142 
	`evít_di•©ch
();

144 i‡(
dns_ok
 =
DNS_IPv4_A
) {

145 
	`Ârötf
(
°dout
, "OK\n");

147 
	`Ârötf
(
°dout
, "FAILED\n");

148 
	`exô
(1);

150 
	}
}

153 
	$dns_gëho°by«me6
()

155 
	`Ârötf
(
°dout
, "IPv6 DNSÑesolve: ");

156 
dns_ok
 = 0;

157 
	`evdns_ªsﬁve_ùv6
("www.õtf.‹g", 0, 
dns_gëho°by«me_cb
, 
NULL
);

158 
	`evít_di•©ch
();

160 i‡(
dns_ok
 =
DNS_IPv6_AAAA
) {

161 
	`Ârötf
(
°dout
, "OK\n");

162 } i‡(!
dns_ok
 && 
dns_îr
 =
DNS_ERR_TIMEOUT
) {

163 
	`Ârötf
(
°dout
, "SKIPPED\n");

165 
	`Ârötf
(
°dout
, "FAILED (%d)\n", 
dns_ok
);

166 
	`exô
(1);

168 
	}
}

171 
	$dns_gëho°byaddr
()

173 
ö_addr
 
ö
;

174 
ö
.
s_addr
 = 
	`ht⁄l
(0x7f000001ul);

175 
	`Ârötf
(
°dout
, "SimpleÑeverse DNSÑesolve: ");

176 
dns_ok
 = 0;

177 
	`evdns_ªsﬁve_ªvî£
(&
ö
, 0, 
dns_gëho°by«me_cb
, 
NULL
);

178 
	`evít_di•©ch
();

180 i‡(
dns_ok
 =
DNS_PTR
) {

181 
	`Ârötf
(
°dout
, "OK\n");

183 
	`Ârötf
(
°dout
, "FAILED\n");

184 
	`exô
(1);

186 
	}
}

188 
	gn_£rvî_ª•⁄£s
 = 0;

191 
	$dns_£rvî_ªque°_cb
(
evdns_£rvî_ªque°
 *
ªq
, *
d©a
)

193 
i
, 
r
;

194 c⁄° 
TEST_ARPA
[] = "11.11.168.192.in-addr.arpa";

195 
i
 = 0; i < 
ªq
->
nque°i⁄s
; ++i) {

196 
ö_addr
 
™s
;

197 
™s
.
s_addr
 = 
	`ht⁄l
(0xc0a80b0bUL);

198 i‡(
ªq
->
que°i⁄s
[
i
]->
ty≥
 =
EVDNS_TYPE_A
 &&

199 
ªq
->
que°i⁄s
[
i
]->
dns_que°i⁄_˛ass
 =
EVDNS_CLASS_INET
 &&

200 !
	`°rcmp
(
ªq
->
que°i⁄s
[
i
]->
«me
, "zz.example.com")) {

201 
r
 = 
	`evdns_£rvî_ªque°_add_a_ª∂y
(
ªq
, "zz.example.com",

202 1, &
™s
.
s_addr
, 12345);

203 i‡(
r
<0)

204 
dns_ok
 = 0;

205 } i‡(
ªq
->
que°i⁄s
[
i
]->
ty≥
 =
EVDNS_TYPE_AAAA
 &&

206 
ªq
->
que°i⁄s
[
i
]->
dns_que°i⁄_˛ass
 =
EVDNS_CLASS_INET
 &&

207 !
	`°rcmp
(
ªq
->
que°i⁄s
[
i
]->
«me
, "zz.example.com")) {

208 
addr6
[17] = "abcdefghijklmnop";

209 
r
 = 
	`evdns_£rvî_ªque°_add_ØØ_ª∂y
(
ªq
, "zz.example.com",

210 1, 
addr6
, 123);

211 i‡(
r
<0)

212 
dns_ok
 = 0;

213 } i‡(
ªq
->
que°i⁄s
[
i
]->
ty≥
 =
EVDNS_TYPE_PTR
 &&

214 
ªq
->
que°i⁄s
[
i
]->
dns_que°i⁄_˛ass
 =
EVDNS_CLASS_INET
 &&

215 !
	`°rcmp
(
ªq
->
que°i⁄s
[
i
]->
«me
, 
TEST_ARPA
)) {

216 
r
 = 
	`evdns_£rvî_ªque°_add_±r_ª∂y
(
ªq
, 
NULL
, 
TEST_ARPA
,

218 i‡(
r
<0)

219 
dns_ok
 = 0;

221 
	`Ârötf
(
°dout
, "Unexpected question %d %d \"%s\" ",

222 
ªq
->
que°i⁄s
[
i
]->
ty≥
,

223 
ªq
->
que°i⁄s
[
i
]->
dns_que°i⁄_˛ass
,

224 
ªq
->
que°i⁄s
[
i
]->
«me
);

225 
dns_ok
 = 0;

228 
r
 = 
	`evdns_£rvî_ªque°_ª•⁄d
(
ªq
, 0);

229 i‡(
r
<0) {

230 
	`Ârötf
(
°dout
, "Couldn't sendÑeply. ");

231 
dns_ok
 = 0;

233 
	}
}

236 
	$dns_£rvî_gëho°by«me_cb
(
ªsu…
, 
ty≥
, 
cou¡
, 
âl
,

237 *
addªs£s
, *
¨g
)

239 i‡(
ªsu…
 !
DNS_ERR_NONE
) {

240 
	`Ârötf
(
°dout
, "U√x≥˘edÑesu… %d. ", 
ªsu…
);

241 
dns_ok
 = 0;

242 
out
;

244 i‡(
cou¡
 != 1) {

245 
	`Ârötf
(
°dout
, "U√x≥˘edánswî cou¡ %d. ", 
cou¡
);

246 
dns_ok
 = 0;

247 
out
;

249 
ty≥
) {

250 
DNS_IPv4_A
: {

251 
ö_addr
 *
ö_addrs
 = 
addªs£s
;

252 i‡(
ö_addrs
[0].
s_addr
 !
	`ht⁄l
(0xc0a80b0bULË|| 
âl
 != 12345) {

253 
	`Ârötf
(
°dout
, "Bad IPv4Ñesponse \"%s\" %d. ",

254 
	`öë_¡ﬂ
(
ö_addrs
[0]), 
âl
);

255 
dns_ok
 = 0;

256 
out
;

260 
DNS_IPv6_AAAA
: {

261 #i‡
	`deföed
 (
HAVE_STRUCT_IN6_ADDR
Ë&& deföed(
HAVE_INET_NTOP
Ë&& deföed(
INET6_ADDRSTRLEN
)

262 
ö6_addr
 *
ö6_addrs
 = 
addªs£s
;

263 
buf
[
INET6_ADDRSTRLEN
+1];

264 i‡(
	`memcmp
(&
ö6_addrs
[0].
s6_addr
, "abcdefghijklmnop", 16)

265 || 
âl
 != 123) {

266 c⁄° *
b
 = 
	`öë_¡›
(
AF_INET6
, &
ö6_addrs
[0],
buf
,(buf));

267 
	`Ârötf
(
°dout
, "Bad IPv6Ñe•⁄£ \"%s\" %d. ", 
b
, 
âl
);

268 
dns_ok
 = 0;

269 
out
;

274 
DNS_PTR
: {

275 **
addrs
 = 
addªs£s
;

276 i‡(
	`°rcmp
(
addrs
[0], "ZZ.EXAMPLE.COM"Ë|| 
âl
 != 54321) {

277 
	`Ârötf
(
°dout
, "Bad PTRÑesponse \"%s\" %d. ",

278 
addrs
[0], 
âl
);

279 
dns_ok
 = 0;

280 
out
;

285 
	`Ârötf
(
°dout
, "BadÑe•⁄£Åy≥ %d. ", 
ty≥
);

286 
dns_ok
 = 0;

289 
out
:

290 i‡(++
n_£rvî_ª•⁄£s
 == 3) {

291 
	`evít_lo›exô
(
NULL
);

293 
	}
}

296 
	$dns_£rvî
()

298 
sock
;

299 
sockaddr_ö
 
my_addr
;

300 
evdns_£rvî_p‹t
 *
p‹t
;

301 
ö_addr
 
ªsﬁve_addr
;

303 
dns_ok
 = 1;

304 
	`Ârötf
(
°dout
, "DNS server support: ");

308 
	`evdns_«me£rvî_ù_add
("127.0.0.1:35353");

309 i‡(
	`evdns_cou¡_«me£rvîs
() != 1) {

310 
	`Ârötf
(
°dout
, "Couldn't set up.\n");

311 
	`exô
(1);

315 
sock
 = 
	`sockë
(
AF_INET
, 
SOCK_DGRAM
, 0);

316 i‡(
sock
 == -1) {

317 
	`≥º‹
("socket");

318 
	`exô
(1);

320 #ifde‡
WIN32


322 
u_l⁄g
 
n⁄blockög
 = 1;

323 
	`io˘lsockë
(
sock
, 
FIONBIO
, &
n⁄blockög
);

326 
	`f˙é
(
sock
, 
F_SETFL
, 
O_NONBLOCK
);

328 
	`mem£t
(&
my_addr
, 0, (my_addr));

329 
my_addr
.
sö_Ámûy
 = 
AF_INET
;

330 
my_addr
.
sö_p‹t
 = 
	`ht⁄s
(35353);

331 
my_addr
.
sö_addr
.
s_addr
 = 
	`ht⁄l
(0x7f000001UL);

332 i‡(
	`böd
(
sock
, (
sockaddr
*)&
my_addr
, (my_addr)) < 0) {

333 
	`≥º‹
("bind");

334 
	`exô
 (1);

336 
p‹t
 = 
	`evdns_add_£rvî_p‹t
(
sock
, 0, 
dns_£rvî_ªque°_cb
, 
NULL
);

339 
	`evdns_ªsﬁve_ùv4
("zz.exam∂e.com", 
DNS_QUERY_NO_SEARCH
,

340 
dns_£rvî_gëho°by«me_cb
, 
NULL
);

341 
	`evdns_ªsﬁve_ùv6
("zz.exam∂e.com", 
DNS_QUERY_NO_SEARCH
,

342 
dns_£rvî_gëho°by«me_cb
, 
NULL
);

343 
ªsﬁve_addr
.
s_addr
 = 
	`ht⁄l
(0xc0a80b0bUL);

344 
	`evdns_ªsﬁve_ªvî£
(&
ªsﬁve_addr
, 0,

345 
dns_£rvî_gëho°by«me_cb
, 
NULL
);

347 
	`evít_di•©ch
();

349 i‡(
dns_ok
) {

350 
	`Ârötf
(
°dout
, "OK\n");

352 
	`Ârötf
(
°dout
, "FAILED\n");

353 
	`exô
(1);

356 
	`evdns_˛o£_£rvî_p‹t
(
p‹t
);

357 
	`evdns_shutdown
(0);

358 #ifde‡
WIN32


359 
	`˛o£sockë
(
sock
);

361 
	`˛o£
(
sock
);

363 
	}
}

366 
	$dns_suôe
()

368 
	`dns_£rvî
();

370 
	`evdns_öô
();

371 
	`dns_gëho°by«me
();

372 
	`dns_gëho°by«me6
();

373 
	`dns_gëho°byaddr
();

375 
	`evdns_shutdown
(0);

376 
	}
}

	@test/regress_http.c

28 #ifde‡
WIN32


29 
	~<wösock2.h
>

30 
	~<wödows.h
>

33 #ifde‡
HAVE_CONFIG_H


34 
	~"c⁄fig.h
"

37 
	~<sys/ty≥s.h
>

38 
	~<sys/°©.h
>

39 #ifde‡
HAVE_SYS_TIME_H


40 
	~<sys/time.h
>

42 
	~<sys/queue.h
>

43 #i‚de‡
WIN32


44 
	~<sys/sockë.h
>

45 
	~<sig«l.h
>

46 
	~<uni°d.h
>

47 
	~<√tdb.h
>

49 
	~<f˙é.h
>

50 
	~<°dlib.h
>

51 
	~<°dio.h
>

52 
	~<°rög.h
>

53 
	~<î∫o.h
>

55 
	~"evít.h
"

56 
	~"evhâp.h
"

57 
	~"log.h
"

58 
	~"hâp-öã∫Æ.h
"

60 
∑ú
[];

61 
ã°_ok
;

63 
evhâp
 *
	ghâp
;

65 
evít_ba£
 *
	gba£
;

67 
hâp_suôe
();

69 
hâp_basic_cb
(
evhâp_ªque°
 *
ªq
, *
¨g
);

70 
hâp_chunked_cb
(
evhâp_ªque°
 *
ªq
, *
¨g
);

71 
hâp_po°_cb
(
evhâp_ªque°
 *
ªq
, *
¨g
);

72 
hâp_di•©chî_cb
(
evhâp_ªque°
 *
ªq
, *
¨g
);

73 
hâp_œrge_dñay_cb
(
evhâp_ªque°
 *
ªq
, *
¨g
);

75 
evhâp
 *

76 
	$hâp_£tup
(*
µ‹t
, 
evít_ba£
 *
ba£
)

78 
i
;

79 
evhâp
 *
myhâp
;

80 
p‹t
 = -1;

83 
myhâp
 = 
	`evhâp_√w
(
ba£
);

84 
i
 = 0; i < 50; ++i) {

85 i‡(
	`evhâp_böd_sockë
(
myhâp
, "127.0.0.1", 8080 + 
i
) != -1) {

86 
p‹t
 = 8080 + 
i
;

91 i‡(
p‹t
 == -1)

92 
	`evít_îrx
(1, "CouldÇot start web server");

95 
	`evhâp_£t_cb
(
myhâp
, "/ã°", 
hâp_basic_cb
, 
NULL
);

96 
	`evhâp_£t_cb
(
myhâp
, "/chunked", 
hâp_chunked_cb
, 
NULL
);

97 
	`evhâp_£t_cb
(
myhâp
, "/po°ô", 
hâp_po°_cb
, 
NULL
);

98 
	`evhâp_£t_cb
(
myhâp
, "/œrgedñay", 
hâp_œrge_dñay_cb
, 
NULL
);

99 
	`evhâp_£t_cb
(
myhâp
, "/", 
hâp_di•©chî_cb
, 
NULL
);

101 *
µ‹t
 = 
p‹t
;

102  (
myhâp
);

103 
	}
}

105 #i‚de‡
NI_MAXSERV


106 
	#NI_MAXSERV
 1024

	)

110 
	$hâp_c⁄√˘
(c⁄° *
addªss
, 
u_sh‹t
 
p‹t
)

113 #ifde‡
WIN32


114 
ho°ít
 *
he
;

115 
sockaddr_ö
 
sö
;

117 
addröfo
 
ai
, *
aô›
;

118 
°Ω‹t
[
NI_MAXSERV
];

120 
sockaddr
 *
ß
;

121 
¶í
;

122 
fd
;

124 #ifde‡
WIN32


125 i‡(!(
he
 = 
	`gëho°by«me
(
addªss
))) {

126 
	`evít_w¨n
("gethostbyname");

128 
	`mem˝y
(&
sö
.
sö_addr
, 
he
->
h_addr_li°
[0], he->
h_Àngth
);

129 
sö
.
sö_Ámûy
 = 
AF_INET
;

130 
sö
.
sö_p‹t
 = 
	`ht⁄s
(
p‹t
);

131 
¶í
 = (
sockaddr_ö
);

132 
ß
 = (
sockaddr
*)&
sö
;

134 
	`mem£t
(&
ai
, 0,  (ai));

135 
ai
.
ai_Ámûy
 = 
AF_INET
;

136 
ai
.
ai_sockty≥
 = 
SOCK_STREAM
;

137 
	`¢¥ötf
(
°Ω‹t
,  (°Ω‹t), "%d", 
p‹t
);

138 i‡(
	`gëaddröfo
(
addªss
, 
°Ω‹t
, &
ai
, &
aô›
) != 0) {

139 
	`evít_w¨n
("getaddrinfo");

142 
ß
 = 
aô›
->
ai_addr
;

143 
¶í
 = 
aô›
->
ai_addæí
;

146 
fd
 = 
	`sockë
(
AF_INET
, 
SOCK_STREAM
, 0);

147 i‡(
fd
 == -1)

148 
	`evít_îr
(1, "socket failed");

150 i‡(
	`c⁄√˘
(
fd
, 
ß
, 
¶í
) == -1)

151 
	`evít_îr
(1, "connect failed");

153 #i‚de‡
WIN32


154 
	`‰ìaddröfo
(
aô›
);

157  (
fd
);

158 
	}
}

161 
	$hâp_ªadcb
(
buf„ªvít
 *
bev
, *
¨g
)

163 c⁄° *
wh©
 = "This is funny";

165 
	`evít_debug
(("%s: %s\n", 
__func__
, 
	`EVBUFFER_DATA
(
bev
->
öput
)));

167 i‡(
	`evbuf„r_föd
(
bev
->
öput
,

168 (c⁄° *Ë
wh©
, 
	`°æí
(wh©)Ë!
NULL
) {

169 
evhâp_ªque°
 *
ªq
 = 
	`evhâp_ªque°_√w
(
NULL
, NULL);

170 
mesßge_ªad_°©us
 
d⁄e
;

172 
ªq
->
köd
 = 
EVHTTP_RESPONSE
;

173 
d⁄e
 = 
	`evhâp_∑r£_fú°löe
(
ªq
, 
bev
->
öput
);

174 i‡(
d⁄e
 !
ALL_DATA_READ
)

175 
out
;

177 
d⁄e
 = 
	`evhâp_∑r£_hódîs
(
ªq
, 
bev
->
öput
);

178 i‡(
d⁄e
 !
ALL_DATA_READ
)

179 
out
;

181 i‡(
d⁄e
 == 1 &&

182 
	`evhâp_föd_hódî
(
ªq
->
öput_hódîs
,

183 "C⁄ã¡-Ty≥"Ë!
NULL
)

184 
ã°_ok
++;

186 
out
:

187 
	`evhâp_ªque°_‰ì
(
ªq
);

188 
	`buf„ªvít_dißbÀ
(
bev
, 
EV_READ
);

189 i‡(
ba£
)

190 
	`evít_ba£_lo›exô
(
ba£
, 
NULL
);

192 
	`evít_lo›exô
(
NULL
);

194 
	}
}

197 
	$hâp_wrôecb
(
buf„ªvít
 *
bev
, *
¨g
)

199 i‡(
	`EVBUFFER_LENGTH
(
bev
->
ouçut
) == 0) {

201 
	`buf„ªvít_íabÀ
(
bev
, 
EV_READ
);

202 
ã°_ok
++;

204 
	}
}

207 
	$hâp_îr‹cb
(
buf„ªvít
 *
bev
, 
wh©
, *
¨g
)

209 
ã°_ok
 = -2;

210 
	`evít_lo›exô
(
NULL
);

211 
	}
}

214 
	$hâp_basic_cb
(
evhâp_ªque°
 *
ªq
, *
¨g
)

216 
evbuf„r
 *
evb
 = 
	`evbuf„r_√w
();

217 
em±y
 = 
	`evhâp_föd_hódî
(
ªq
->
öput_hódîs
, "Em±y"Ë!
NULL
;

218 
	`evít_debug
(("%s: cÆÀd\n", 
__func__
));

219 
	`evbuf„r_add_¥ötf
(
evb
, "This is funny");

223 c⁄° *
mu…i
 =

224 
	`evhâp_föd_hódî
(
ªq
->
öput_hódîs
,"X-multi");

225 i‡(
mu…i
) {

226 i‡(
	`°rcmp
("END", 
mu…i
 + 
	`°æí
(multi) - 3) == 0)

227 
ã°_ok
++;

228 i‡(
	`evhâp_föd_hódî
(
ªq
->
öput_hódîs
, "X-Last"))

229 
ã°_ok
++;

234 i‡(
	`evhâp_föd_hódî
(
ªq
->
öput_hódîs
, "X-Negative"))

235 
	`evhâp_add_hódî
(
ªq
->
ouçut_hódîs
,

239 
	`evhâp_£nd_ª∂y
(
ªq
, 
HTTP_OK
, "Everything is fine",

240 !
em±y
 ? 
evb
 : 
NULL
);

242 
	`evbuf„r_‰ì
(
evb
);

243 
	}
}

245 c⁄°* c⁄° 
	gCHUNKS
[] = {

251 
	schunk_ªq_°©e
 {

252 
evhâp_ªque°
 *
	mªq
;

253 
	mi
;

257 
	$hâp_chunked_åickÀ_cb
(
fd
, 
evíts
, *
¨g
)

259 
evbuf„r
 *
evb
 = 
	`evbuf„r_√w
();

260 
chunk_ªq_°©e
 *
°©e
 = 
¨g
;

261 
timevÆ
 
whí
 = { 0, 0 };

263 
	`evbuf„r_add_¥ötf
(
evb
, "%s", 
CHUNKS
[
°©e
->
i
]);

264 
	`evhâp_£nd_ª∂y_chunk
(
°©e
->
ªq
, 
evb
);

265 
	`evbuf„r_‰ì
(
evb
);

267 i‡(++
°©e
->
i
 < (
CHUNKS
)/(CHUNKS[0])) {

268 
	`evít_⁄˚
(-1, 
EV_TIMEOUT
,

269 
hâp_chunked_åickÀ_cb
, 
°©e
, &
whí
);

271 
	`evhâp_£nd_ª∂y_íd
(
°©e
->
ªq
);

272 
	`‰ì
(
°©e
);

274 
	}
}

277 
	$hâp_chunked_cb
(
evhâp_ªque°
 *
ªq
, *
¨g
)

279 
timevÆ
 
whí
 = { 0, 0 };

280 
chunk_ªq_°©e
 *
°©e
 = 
	`mÆloc
((chunk_req_state));

281 
	`evít_debug
(("%s: cÆÀd\n", 
__func__
));

283 
	`mem£t
(
°©e
, 0, (
chunk_ªq_°©e
));

284 
°©e
->
ªq
 =Ñeq;

287 
	`evhâp_£nd_ª∂y_°¨t
(
ªq
, 
HTTP_OK
, "Everything is fine");

291 
	`evít_⁄˚
(-1, 
EV_TIMEOUT
, 
hâp_chunked_åickÀ_cb
, 
°©e
, &
whí
);

292 
	}
}

295 
	$hâp_com∂ëe_wrôe
(
fd
, 
wh©
, *
¨g
)

297 
buf„ªvít
 *
bev
 = 
¨g
;

298 c⁄° *
hâp_ªque°
 = "host\r\n"

301 
	`buf„ªvít_wrôe
(
bev
, 
hâp_ªque°
, 
	`°æí
(http_request));

302 
	}
}

305 
	$hâp_basic_ã°
()

307 
timevÆ
 
tv
;

308 
buf„ªvít
 *
bev
;

309 
fd
;

310 c⁄° *
hâp_ªque°
;

311 
p‹t
 = -1;

313 
ã°_ok
 = 0;

314 
	`Ârötf
(
°dout
, "Testing Basic HTTP Server: ");

316 
hâp
 = 
	`hâp_£tup
(&
p‹t
, 
NULL
);

319 i‡(
	`evhâp_böd_sockë
(
hâp
, "127.0.0.1", 
p‹t
 + 1) == -1) {

320 
	`Ârötf
(
°dout
, "FAILED (bind)\n");

321 
	`exô
(1);

324 
fd
 = 
	`hâp_c⁄√˘
("127.0.0.1", 
p‹t
);

327 
bev
 = 
	`buf„ªvít_√w
(
fd
, 
hâp_ªadcb
, 
hâp_wrôecb
,

328 
hâp_îr‹cb
, 
NULL
);

331 
hâp_ªque°
 =

335 
	`buf„ªvít_wrôe
(
bev
, 
hâp_ªque°
, 
	`°æí
(http_request));

336 
	`timî˛ór
(&
tv
);

337 
tv
.
tv_u£c
 = 10000;

338 
	`evít_⁄˚
(-1, 
EV_TIMEOUT
, 
hâp_com∂ëe_wrôe
, 
bev
, &
tv
);

340 
	`evít_di•©ch
();

342 i‡(
ã°_ok
 != 3) {

343 
	`Ârötf
(
°dout
, "FAILED\n");

344 
	`exô
(1);

348 
	`buf„ªvít_‰ì
(
bev
);

349 
	`EVUTIL_CLOSESOCKET
(
fd
);

351 
fd
 = 
	`hâp_c⁄√˘
("127.0.0.1", 
p‹t
 + 1);

354 
bev
 = 
	`buf„ªvít_√w
(
fd
, 
hâp_ªadcb
, 
hâp_wrôecb
,

355 
hâp_îr‹cb
, 
NULL
);

357 
hâp_ªque°
 =

363 
	`buf„ªvít_wrôe
(
bev
, 
hâp_ªque°
, 
	`°æí
(http_request));

365 
	`evít_di•©ch
();

367 
	`buf„ªvít_‰ì
(
bev
);

368 
	`EVUTIL_CLOSESOCKET
(
fd
);

370 
	`evhâp_‰ì
(
hâp
);

372 i‡(
ã°_ok
 != 5) {

373 
	`Ârötf
(
°dout
, "FAILED\n");

374 
	`exô
(1);

377 
	`Ârötf
(
°dout
, "OK\n");

378 
	}
}

380 
evhâp_c⁄√˘i⁄
 *
	gdñayed_˛õ¡
;

383 
	$hâp_dñay_ª∂y
(
fd
, 
wh©
, *
¨g
)

385 
evhâp_ªque°
 *
ªq
 = 
¨g
;

387 
	`evhâp_£nd_ª∂y
(
ªq
, 
HTTP_OK
, "Evîythög i†föe", 
NULL
);

389 ++
ã°_ok
;

390 
	}
}

393 
	$hâp_œrge_dñay_cb
(
evhâp_ªque°
 *
ªq
, *
¨g
)

395 
timevÆ
 
tv
;

396 
	`timî˛ór
(&
tv
);

397 
tv
.
tv_£c
 = 3;

399 
	`evít_⁄˚
(-1, 
EV_TIMEOUT
, 
hâp_dñay_ª∂y
, 
ªq
, &
tv
);

402 
	`evhâp_c⁄√˘i⁄_Áû
(
dñayed_˛õ¡
, 
EVCON_HTTP_EOF
);

403 
	}
}

405 
hâp_ªque°_d⁄e
(
evhâp_ªque°
 *, *);

406 
hâp_ªque°_em±y_d⁄e
(
evhâp_ªque°
 *, *);

409 
	$hâp_c⁄√˘i⁄_ã°
(
≥rsi°ít
)

411 
p‹t
 = -1;

412 
evhâp_c⁄√˘i⁄
 *
evc⁄
 = 
NULL
;

413 
evhâp_ªque°
 *
ªq
 = 
NULL
;

415 
ã°_ok
 = 0;

416 
	`Ârötf
(
°dout
, "Testing Request Connection Pipeline %s: ",

417 
≥rsi°ít
 ? "(persistent)" : "");

419 
hâp
 = 
	`hâp_£tup
(&
p‹t
, 
NULL
);

421 
evc⁄
 = 
	`evhâp_c⁄√˘i⁄_√w
("127.0.0.1", 
p‹t
);

422 i‡(
evc⁄
 =
NULL
) {

423 
	`Ârötf
(
°dout
, "FAILED\n");

424 
	`exô
(1);

432 
ªq
 = 
	`evhâp_ªque°_√w
(
hâp_ªque°_d⁄e
, 
NULL
);

435 
	`evhâp_add_hódî
(
ªq
->
ouçut_hódîs
, "Host", "somehost");

438 i‡(
	`evhâp_make_ªque°
(
evc⁄
, 
ªq
, 
EVHTTP_REQ_GET
, "/test") == -1) {

439 
	`Ârötf
(
°dout
, "FAILED\n");

440 
	`exô
(1);

443 
	`evít_di•©ch
();

445 i‡(
ã°_ok
 != 1) {

446 
	`Ârötf
(
°dout
, "FAILED\n");

447 
	`exô
(1);

451 
ã°_ok
 = 0;

453 
ªq
 = 
	`evhâp_ªque°_√w
(
hâp_ªque°_d⁄e
, 
NULL
);

456 
	`evhâp_add_hódî
(
ªq
->
ouçut_hódîs
, "Host", "somehost");

462 i‡(!
≥rsi°ít
)

463 
	`evhâp_add_hódî
(
ªq
->
ouçut_hódîs
, "Connection", "close");

466 i‡(
	`evhâp_make_ªque°
(
evc⁄
, 
ªq
, 
EVHTTP_REQ_GET
, "/test") == -1) {

467 
	`Ârötf
(
°dout
, "FAILED\n");

468 
	`exô
(1);

471 
	`evít_di•©ch
();

474 
ã°_ok
 = 0;

476 
ªq
 = 
	`evhâp_ªque°_√w
(
hâp_ªque°_em±y_d⁄e
, 
NULL
);

479 
	`evhâp_add_hódî
(
ªq
->
ouçut_hódîs
, "Empty", "itis");

482 i‡(
	`evhâp_make_ªque°
(
evc⁄
, 
ªq
, 
EVHTTP_REQ_GET
, "/test") == -1) {

483 
	`Ârötf
(
°dout
, "FAILED\n");

484 
	`exô
(1);

487 
	`evít_di•©ch
();

489 i‡(
ã°_ok
 != 1) {

490 
	`Ârötf
(
°dout
, "FAILED\n");

491 
	`exô
(1);

494 
	`evhâp_c⁄√˘i⁄_‰ì
(
evc⁄
);

495 
	`evhâp_‰ì
(
hâp
);

497 
	`Ârötf
(
°dout
, "OK\n");

498 
	}
}

501 
	$hâp_ªque°_d⁄e
(
evhâp_ªque°
 *
ªq
, *
¨g
)

503 c⁄° *
wh©
 = "This is funny";

505 i‡(
ªq
->
ª•⁄£_code
 !
HTTP_OK
) {

506 
	`Ârötf
(
°dîr
, "FAILED\n");

507 
	`exô
(1);

510 i‡(
	`evhâp_föd_hódî
(
ªq
->
öput_hódîs
, "C⁄ã¡-Ty≥"Ë=
NULL
) {

511 
	`Ârötf
(
°dîr
, "FAILED\n");

512 
	`exô
(1);

515 i‡(
	`EVBUFFER_LENGTH
(
ªq
->
öput_buf„r
Ë!
	`°æí
(
wh©
)) {

516 
	`Ârötf
(
°dîr
, "FAILED\n");

517 
	`exô
(1);

520 i‡(
	`memcmp
(
	`EVBUFFER_DATA
(
ªq
->
öput_buf„r
), 
wh©
, 
	`°æí
(what)) != 0) {

521 
	`Ârötf
(
°dîr
, "FAILED\n");

522 
	`exô
(1);

525 
ã°_ok
 = 1;

526 
	`evít_lo›exô
(
NULL
);

527 
	}
}

532 
	$hâp_ªque°_em±y_d⁄e
(
evhâp_ªque°
 *
ªq
, *
¨g
)

534 i‡(
ªq
->
ª•⁄£_code
 !
HTTP_OK
) {

535 
	`Ârötf
(
°dîr
, "FAILED\n");

536 
	`exô
(1);

539 i‡(
	`evhâp_föd_hódî
(
ªq
->
öput_hódîs
, "D©e"Ë=
NULL
) {

540 
	`Ârötf
(
°dîr
, "FAILED\n");

541 
	`exô
(1);

545 i‡(
	`evhâp_föd_hódî
(
ªq
->
öput_hódîs
, "C⁄ã¡-Lígth"Ë=
NULL
) {

546 
	`Ârötf
(
°dîr
, "FAILED\n");

547 
	`exô
(1);

550 i‡(
	`°rcmp
(
	`evhâp_föd_hódî
(
ªq
->
öput_hódîs
, "Content-Length"),

552 
	`Ârötf
(
°dîr
, "FAILED\n");

553 
	`exô
(1);

556 i‡(
	`EVBUFFER_LENGTH
(
ªq
->
öput_buf„r
) != 0) {

557 
	`Ârötf
(
°dîr
, "FAILED\n");

558 
	`exô
(1);

561 
ã°_ok
 = 1;

562 
	`evít_lo›exô
(
NULL
);

563 
	}
}

570 
	$hâp_di•©chî_cb
(
evhâp_ªque°
 *
ªq
, *
¨g
)

573 
evbuf„r
 *
evb
 = 
	`evbuf„r_√w
();

574 
	`evít_debug
(("%s: cÆÀd\n", 
__func__
));

575 
	`evbuf„r_add_¥ötf
(
evb
, "DISPATCHER_TEST");

577 
	`evhâp_£nd_ª∂y
(
ªq
, 
HTTP_OK
, "Evîythög i†föe", 
evb
);

579 
	`evbuf„r_‰ì
(
evb
);

580 
	}
}

583 
	$hâp_di•©chî_ã°_d⁄e
(
evhâp_ªque°
 *
ªq
, *
¨g
)

585 c⁄° *
wh©
 = "DISPATCHER_TEST";

587 i‡(
ªq
->
ª•⁄£_code
 !
HTTP_OK
) {

588 
	`Ârötf
(
°dîr
, "FAILED\n");

589 
	`exô
(1);

592 i‡(
	`evhâp_föd_hódî
(
ªq
->
öput_hódîs
, "C⁄ã¡-Ty≥"Ë=
NULL
) {

593 
	`Ârötf
(
°dîr
, "FAILED (contentÅype)\n");

594 
	`exô
(1);

597 i‡(
	`EVBUFFER_LENGTH
(
ªq
->
öput_buf„r
Ë!
	`°æí
(
wh©
)) {

598 
	`Ârötf
(
°dîr
, "FAILED (length %zu vs %zu)\n",

599 
	`EVBUFFER_LENGTH
(
ªq
->
öput_buf„r
), 
	`°æí
(
wh©
));

600 
	`exô
(1);

603 i‡(
	`memcmp
(
	`EVBUFFER_DATA
(
ªq
->
öput_buf„r
), 
wh©
, 
	`°æí
(what)) != 0) {

604 
	`Ârötf
(
°dîr
, "FAILED (data)\n");

605 
	`exô
(1);

608 
ã°_ok
 = 1;

609 
	`evít_lo›exô
(
NULL
);

610 
	}
}

613 
	$hâp_di•©chî_ã°
()

615 
p‹t
 = -1;

616 
evhâp_c⁄√˘i⁄
 *
evc⁄
 = 
NULL
;

617 
evhâp_ªque°
 *
ªq
 = 
NULL
;

619 
ã°_ok
 = 0;

620 
	`Ârötf
(
°dout
, "Testing HTTP Dispatcher: ");

622 
hâp
 = 
	`hâp_£tup
(&
p‹t
, 
NULL
);

624 
evc⁄
 = 
	`evhâp_c⁄√˘i⁄_√w
("127.0.0.1", 
p‹t
);

625 i‡(
evc⁄
 =
NULL
) {

626 
	`Ârötf
(
°dout
, "FAILED\n");

627 
	`exô
(1);

631 
	`evhâp_c⁄√˘i⁄_£t_loˇl_addªss
(
evc⁄
, "127.0.0.1");

638 
ªq
 = 
	`evhâp_ªque°_√w
(
hâp_di•©chî_ã°_d⁄e
, 
NULL
);

639 i‡(
ªq
 =
NULL
) {

640 
	`Ârötf
(
°dout
, "FAILED\n");

641 
	`exô
(1);

645 
	`evhâp_add_hódî
(
ªq
->
ouçut_hódîs
, "Host", "somehost");

647 i‡(
	`evhâp_make_ªque°
(
evc⁄
, 
ªq
, 
EVHTTP_REQ_GET
, "/?arg=val") == -1) {

648 
	`Ârötf
(
°dout
, "FAILED\n");

649 
	`exô
(1);

652 
	`evít_di•©ch
();

654 
	`evhâp_c⁄√˘i⁄_‰ì
(
evc⁄
);

655 
	`evhâp_‰ì
(
hâp
);

657 i‡(
ã°_ok
 != 1) {

658 
	`Ârötf
(
°dout
, "FAILED: %d\n", 
ã°_ok
);

659 
	`exô
(1);

662 
	`Ârötf
(
°dout
, "OK\n");

663 
	}
}

669 
hâp_po°ªque°_d⁄e
(
evhâp_ªque°
 *, *);

671 
	#POST_DATA
 "Okay. NŸÑóŒyÖrötf"

	)

674 
	$hâp_po°_ã°
()

676 
p‹t
 = -1;

677 
evhâp_c⁄√˘i⁄
 *
evc⁄
 = 
NULL
;

678 
evhâp_ªque°
 *
ªq
 = 
NULL
;

680 
ã°_ok
 = 0;

681 
	`Ârötf
(
°dout
, "Testing HTTP POST Request: ");

683 
hâp
 = 
	`hâp_£tup
(&
p‹t
, 
NULL
);

685 
evc⁄
 = 
	`evhâp_c⁄√˘i⁄_√w
("127.0.0.1", 
p‹t
);

686 i‡(
evc⁄
 =
NULL
) {

687 
	`Ârötf
(
°dout
, "FAILED\n");

688 
	`exô
(1);

696 
ªq
 = 
	`evhâp_ªque°_√w
(
hâp_po°ªque°_d⁄e
, 
NULL
);

697 i‡(
ªq
 =
NULL
) {

698 
	`Ârötf
(
°dout
, "FAILED\n");

699 
	`exô
(1);

703 
	`evhâp_add_hódî
(
ªq
->
ouçut_hódîs
, "Host", "somehost");

704 
	`evbuf„r_add_¥ötf
(
ªq
->
ouçut_buf„r
, 
POST_DATA
);

706 i‡(
	`evhâp_make_ªque°
(
evc⁄
, 
ªq
, 
EVHTTP_REQ_POST
, "/postit") == -1) {

707 
	`Ârötf
(
°dout
, "FAILED\n");

708 
	`exô
(1);

711 
	`evít_di•©ch
();

713 
	`evhâp_c⁄√˘i⁄_‰ì
(
evc⁄
);

714 
	`evhâp_‰ì
(
hâp
);

716 i‡(
ã°_ok
 != 1) {

717 
	`Ârötf
(
°dout
, "FAILED: %d\n", 
ã°_ok
);

718 
	`exô
(1);

721 
	`Ârötf
(
°dout
, "OK\n");

722 
	}
}

725 
	$hâp_po°_cb
(
evhâp_ªque°
 *
ªq
, *
¨g
)

727 
evbuf„r
 *
evb
;

728 
	`evít_debug
(("%s: cÆÀd\n", 
__func__
));

731 i‡(
ªq
->
ty≥
 !
EVHTTP_REQ_POST
) {

732 
	`Ârötf
(
°dout
, "FAILED (postÅype)\n");

733 
	`exô
(1);

736 i‡(
	`EVBUFFER_LENGTH
(
ªq
->
öput_buf„r
Ë!
	`°æí
(
POST_DATA
)) {

737 
	`Ârötf
(
°dout
, "FAILED (length: %zu vs %zu)\n",

738 
	`EVBUFFER_LENGTH
(
ªq
->
öput_buf„r
), 
	`°æí
(
POST_DATA
));

739 
	`exô
(1);

742 i‡(
	`memcmp
(
	`EVBUFFER_DATA
(
ªq
->
öput_buf„r
), 
POST_DATA
,

743 
	`°æí
(
POST_DATA
))) {

744 
	`Ârötf
(
°dout
, "FAILED (data)\n");

745 
	`Ârötf
(
°dout
, "GŸ :%s\n", 
	`EVBUFFER_DATA
(
ªq
->
öput_buf„r
));

746 
	`Ârötf
(
°dout
, "W™t:%s\n", 
POST_DATA
);

747 
	`exô
(1);

750 
evb
 = 
	`evbuf„r_√w
();

751 
	`evbuf„r_add_¥ötf
(
evb
, "This is funny");

753 
	`evhâp_£nd_ª∂y
(
ªq
, 
HTTP_OK
, "Evîythög i†föe", 
evb
);

755 
	`evbuf„r_‰ì
(
evb
);

756 
	}
}

759 
	$hâp_po°ªque°_d⁄e
(
evhâp_ªque°
 *
ªq
, *
¨g
)

761 c⁄° *
wh©
 = "This is funny";

763 i‡(
ªq
 =
NULL
) {

764 
	`Ârötf
(
°dîr
, "FAILED (timeout)\n");

765 
	`exô
(1);

768 i‡(
ªq
->
ª•⁄£_code
 !
HTTP_OK
) {

770 
	`Ârötf
(
°dîr
, "FAILED (response code)\n");

771 
	`exô
(1);

774 i‡(
	`evhâp_föd_hódî
(
ªq
->
öput_hódîs
, "C⁄ã¡-Ty≥"Ë=
NULL
) {

775 
	`Ârötf
(
°dîr
, "FAILED (contentÅype)\n");

776 
	`exô
(1);

779 i‡(
	`EVBUFFER_LENGTH
(
ªq
->
öput_buf„r
Ë!
	`°æí
(
wh©
)) {

780 
	`Ârötf
(
°dîr
, "FAILED (length %zu vs %zu)\n",

781 
	`EVBUFFER_LENGTH
(
ªq
->
öput_buf„r
), 
	`°æí
(
wh©
));

782 
	`exô
(1);

785 i‡(
	`memcmp
(
	`EVBUFFER_DATA
(
ªq
->
öput_buf„r
), 
wh©
, 
	`°æí
(what)) != 0) {

786 
	`Ârötf
(
°dîr
, "FAILED (data)\n");

787 
	`exô
(1);

790 
ã°_ok
 = 1;

791 
	`evít_lo›exô
(
NULL
);

792 
	}
}

795 
	$hâp_Áûuª_ªadcb
(
buf„ªvít
 *
bev
, *
¨g
)

797 c⁄° *
wh©
 = "400 Bad Request";

798 i‡(
	`evbuf„r_föd
(
bev
->
öput
, (c⁄° *Ë
wh©
, 
	`°æí
(wh©)Ë!
NULL
) {

799 
ã°_ok
 = 2;

800 
	`buf„ªvít_dißbÀ
(
bev
, 
EV_READ
);

801 
	`evít_lo›exô
(
NULL
);

803 
	}
}

809 
	$hâp_Áûuª_ã°
()

811 
buf„ªvít
 *
bev
;

812 
fd
;

813 c⁄° *
hâp_ªque°
;

814 
p‹t
 = -1;

816 
ã°_ok
 = 0;

817 
	`Ârötf
(
°dout
, "Testing Bad HTTP Request: ");

819 
hâp
 = 
	`hâp_£tup
(&
p‹t
, 
NULL
);

821 
fd
 = 
	`hâp_c⁄√˘
("127.0.0.1", 
p‹t
);

824 
bev
 = 
	`buf„ªvít_√w
(
fd
, 
hâp_Áûuª_ªadcb
, 
hâp_wrôecb
,

825 
hâp_îr‹cb
, 
NULL
);

827 
hâp_ªque°
 = "illegalÑequest\r\n";

829 
	`buf„ªvít_wrôe
(
bev
, 
hâp_ªque°
, 
	`°æí
(http_request));

831 
	`evít_di•©ch
();

833 
	`buf„ªvít_‰ì
(
bev
);

834 
	`EVUTIL_CLOSESOCKET
(
fd
);

836 
	`evhâp_‰ì
(
hâp
);

838 i‡(
ã°_ok
 != 2) {

839 
	`Ârötf
(
°dout
, "FAILED\n");

840 
	`exô
(1);

843 
	`Ârötf
(
°dout
, "OK\n");

844 
	}
}

847 
	$˛o£_dëe˘_d⁄e
(
evhâp_ªque°
 *
ªq
, *
¨g
)

849 
timevÆ
 
tv
;

850 i‡(
ªq
 =
NULL
 ||Ñeq->
ª•⁄£_code
 !
HTTP_OK
) {

852 
	`Ârötf
(
°dîr
, "FAILED\n");

853 
	`exô
(1);

856 
ã°_ok
 = 1;

858 
	`timî˛ór
(&
tv
);

859 
tv
.
tv_£c
 = 3;

861 
	`evít_lo›exô
(&
tv
);

862 
	}
}

865 
	$˛o£_dëe˘_œunch
(
fd
, 
wh©
, *
¨g
)

867 
evhâp_c⁄√˘i⁄
 *
evc⁄
 = 
¨g
;

868 
evhâp_ªque°
 *
ªq
;

870 
ªq
 = 
	`evhâp_ªque°_√w
(
˛o£_dëe˘_d⁄e
, 
NULL
);

873 
	`evhâp_add_hódî
(
ªq
->
ouçut_hódîs
, "Host", "somehost");

876 i‡(
	`evhâp_make_ªque°
(
evc⁄
, 
ªq
, 
EVHTTP_REQ_GET
, "/test") == -1) {

877 
	`Ârötf
(
°dout
, "FAILED\n");

878 
	`exô
(1);

880 
	}
}

883 
	$˛o£_dëe˘_cb
(
evhâp_ªque°
 *
ªq
, *
¨g
)

885 
evhâp_c⁄√˘i⁄
 *
evc⁄
 = 
¨g
;

886 
timevÆ
 
tv
;

888 i‡(
ªq
 !
NULL
 &&Ñeq->
ª•⁄£_code
 !
HTTP_OK
) {

890 
	`Ârötf
(
°dîr
, "FAILED\n");

891 
	`exô
(1);

894 
	`timî˛ór
(&
tv
);

895 
tv
.
tv_£c
 = 3;

898 
	`evít_⁄˚
(-1, 
EV_TIMEOUT
, 
˛o£_dëe˘_œunch
, 
evc⁄
, &
tv
);

899 
	}
}

903 
	$hâp_˛o£_dëe˘i⁄
(
wôh_dñay
)

905 
p‹t
 = -1;

906 
evhâp_c⁄√˘i⁄
 *
evc⁄
 = 
NULL
;

907 
evhâp_ªque°
 *
ªq
 = 
NULL
;

909 
ã°_ok
 = 0;

910 
	`Ârötf
(
°dout
, "Testing Connection Close Detection%s: ",

911 
wôh_dñay
 ? " (with delay)" : "");

913 
hâp
 = 
	`hâp_£tup
(&
p‹t
, 
NULL
);

916 
	`evhâp_£t_timeout
(
hâp
, 2);

918 
evc⁄
 = 
	`evhâp_c⁄√˘i⁄_√w
("127.0.0.1", 
p‹t
);

919 i‡(
evc⁄
 =
NULL
) {

920 
	`Ârötf
(
°dout
, "FAILED\n");

921 
	`exô
(1);

924 
dñayed_˛õ¡
 = 
evc⁄
;

931 
ªq
 = 
	`evhâp_ªque°_√w
(
˛o£_dëe˘_cb
, 
evc⁄
);

934 
	`evhâp_add_hódî
(
ªq
->
ouçut_hódîs
, "Host", "somehost");

937 i‡(
	`evhâp_make_ªque°
(
evc⁄
,

938 
ªq
, 
EVHTTP_REQ_GET
, 
wôh_dñay
 ? "/largedelay" : "/test") == -1) {

939 
	`Ârötf
(
°dout
, "FAILED\n");

940 
	`exô
(1);

943 
	`evít_di•©ch
();

945 i‡(
ã°_ok
 != 1) {

946 
	`Ârötf
(
°dout
, "FAILED\n");

947 
	`exô
(1);

951 i‡(
	`TAILQ_FIRST
(&
hâp
->
c⁄√˘i⁄s
Ë!
NULL
) {

952 
	`Ârötf
(
°dout
, "FAILED (left connections)\n");

953 
	`exô
(1);

956 
	`evhâp_c⁄√˘i⁄_‰ì
(
evc⁄
);

957 
	`evhâp_‰ì
(
hâp
);

959 
	`Ârötf
(
°dout
, "OK\n");

960 
	}
}

963 
	$hâp_highp‹t_ã°
()

965 
i
 = -1;

966 
evhâp
 *
myhâp
 = 
NULL
;

968 
	`Ârötf
(
°dout
, "Testing HTTP Server with highÖort: ");

971 
i
 = 0; i < 50; ++i) {

972 
myhâp
 = 
	`evhâp_°¨t
("127.0.0.1", 65535 - 
i
);

973 i‡(
myhâp
 !
NULL
) {

974 
	`Ârötf
(
°dout
, "OK\n");

975 
	`evhâp_‰ì
(
myhâp
);

980 
	`Ârötf
(
°dout
, "FAILED\n");

981 
	`exô
(1);

982 
	}
}

985 
	$hâp_bad_hódî_ã°
()

987 
evkeyvÆq
 
hódîs
;

989 
	`Ârötf
(
°dout
, "Testing HTTP Header filtering: ");

991 
	`TAILQ_INIT
(&
hódîs
);

993 i‡(
	`evhâp_add_hódî
(&
hódîs
, "One", "Two") != 0)

994 
Áû
;

996 i‡(
	`evhâp_add_hódî
(&
hódîs
, "One\r", "Two") != -1)

997 
Áû
;

998 i‡(
	`evhâp_add_hódî
(&
hódîs
, "One", "Two") != 0)

999 
Áû
;

1000 i‡(
	`evhâp_add_hódî
(&
hódîs
, "One", "Two\r\n Three") != 0)

1001 
Áû
;

1002 i‡(
	`evhâp_add_hódî
(&
hódîs
, "One\r", "Two") != -1)

1003 
Áû
;

1004 i‡(
	`evhâp_add_hódî
(&
hódîs
, "One\n", "Two") != -1)

1005 
Áû
;

1006 i‡(
	`evhâp_add_hódî
(&
hódîs
, "One", "Two\r") != -1)

1007 
Áû
;

1008 i‡(
	`evhâp_add_hódî
(&
hódîs
, "One", "Two\n") != -1)

1009 
Áû
;

1011 
	`evhâp_˛ór_hódîs
(&
hódîs
);

1013 
	`Ârötf
(
°dout
, "OK\n");

1015 
Áû
:

1016 
	`Ârötf
(
°dout
, "FAILED\n");

1017 
	`exô
(1);

1018 
	}
}

1020 
	$vÆid©e_hódî
(

1021 c⁄° 
evkeyvÆq
* 
hódîs
,

1022 c⁄° *
key
, c⁄° *
vÆue
)

1024 c⁄° *
ªÆ_vÆ
 = 
	`evhâp_föd_hódî
(
hódîs
, 
key
);

1025 i‡(
ªÆ_vÆ
 =
NULL
)

1027 i‡(
	`°rcmp
(
ªÆ_vÆ
, 
vÆue
) != 0)

1030 
	}
}

1033 
	$hâp_∑r£_quîy_ã°
()

1035 
evkeyvÆq
 
hódîs
;

1037 
	`Ârötf
(
°dout
, "Testing HTTP queryÖarsing: ");

1039 
	`TAILQ_INIT
(&
hódîs
);

1041 
	`evhâp_∑r£_quîy
("hâp://www.ã°.com/?qÒe°", &
hódîs
);

1042 i‡(
	`vÆid©e_hódî
(&
hódîs
, "q", "test") != 0)

1043 
Áû
;

1044 
	`evhâp_˛ór_hódîs
(&
hódîs
);

1046 
	`evhâp_∑r£_quîy
("hâp://www.ã°.com/?qÒe°&foo=b¨", &
hódîs
);

1047 i‡(
	`vÆid©e_hódî
(&
hódîs
, "q", "test") != 0)

1048 
Áû
;

1049 i‡(
	`vÆid©e_hódî
(&
hódîs
, "foo", "bar") != 0)

1050 
Áû
;

1051 
	`evhâp_˛ór_hódîs
(&
hódîs
);

1053 
	`evhâp_∑r£_quîy
("hâp://www.ã°.com/?qÒe°+foo", &
hódîs
);

1054 i‡(
	`vÆid©e_hódî
(&
hódîs
, "q", "test foo") != 0)

1055 
Áû
;

1056 
	`evhâp_˛ór_hódîs
(&
hódîs
);

1058 
	`evhâp_∑r£_quîy
("hâp://www.ã°.com/?qÒe°%0Afoo", &
hódîs
);

1059 i‡(
	`vÆid©e_hódî
(&
hódîs
, "q", "test\nfoo") != 0)

1060 
Áû
;

1061 
	`evhâp_˛ór_hódîs
(&
hódîs
);

1063 
	`evhâp_∑r£_quîy
("hâp://www.ã°.com/?qÒe°%0Dfoo", &
hódîs
);

1064 i‡(
	`vÆid©e_hódî
(&
hódîs
, "q", "test\rfoo") != 0)

1065 
Áû
;

1066 
	`evhâp_˛ór_hódîs
(&
hódîs
);

1068 
	`Ârötf
(
°dout
, "OK\n");

1070 
Áû
:

1071 
	`Ârötf
(
°dout
, "FAILED\n");

1072 
	`exô
(1);

1073 
	}
}

1076 
	$hâp_ba£_ã°
()

1078 
buf„ªvít
 *
bev
;

1079 
fd
;

1080 c⁄° *
hâp_ªque°
;

1081 
p‹t
 = -1;

1083 
ã°_ok
 = 0;

1084 
	`Ârötf
(
°dout
, "Testing HTTP Server Event Base: ");

1086 
ba£
 = 
	`evít_öô
();

1092 
	`evít_öô
();

1094 
hâp
 = 
	`hâp_£tup
(&
p‹t
, 
ba£
);

1096 
fd
 = 
	`hâp_c⁄√˘
("127.0.0.1", 
p‹t
);

1099 
bev
 = 
	`buf„ªvít_√w
(
fd
, 
hâp_ªadcb
, 
hâp_wrôecb
,

1100 
hâp_îr‹cb
, 
NULL
);

1101 
	`buf„ªvít_ba£_£t
(
ba£
, 
bev
);

1103 
hâp_ªque°
 =

1109 
	`buf„ªvít_wrôe
(
bev
, 
hâp_ªque°
, 
	`°æí
(http_request));

1111 
	`evít_ba£_di•©ch
(
ba£
);

1113 
	`buf„ªvít_‰ì
(
bev
);

1114 
	`EVUTIL_CLOSESOCKET
(
fd
);

1116 
	`evhâp_‰ì
(
hâp
);

1118 
	`evít_ba£_‰ì
(
ba£
);

1119 
ba£
 = 
NULL
;

1121 i‡(
ã°_ok
 != 2) {

1122 
	`Ârötf
(
°dout
, "FAILED\n");

1123 
	`exô
(1);

1126 
	`Ârötf
(
°dout
, "OK\n");

1127 
	}
}

1134 
	$hâp_chunked_ªadcb
(
buf„ªvít
 *
bev
, *
¨g
)

1137 
	}
}

1140 
	$hâp_chunked_îr‹cb
(
buf„ªvít
 *
bev
, 
wh©
, *
¨g
)

1142 i‡(!
ã°_ok
)

1143 
out
;

1145 
ã°_ok
 = -1;

1147 i‡((
wh©
 & 
EVBUFFER_EOF
) != 0) {

1148 
evhâp_ªque°
 *
ªq
 = 
	`evhâp_ªque°_√w
(
NULL
, NULL);

1149 c⁄° *
hódî
;

1150 
mesßge_ªad_°©us
 
d⁄e
;

1152 
ªq
->
köd
 = 
EVHTTP_RESPONSE
;

1153 
d⁄e
 = 
	`evhâp_∑r£_fú°löe
(
ªq
, 
	`EVBUFFER_INPUT
(
bev
));

1154 i‡(
d⁄e
 !
ALL_DATA_READ
)

1155 
out
;

1157 
d⁄e
 = 
	`evhâp_∑r£_hódîs
(
ªq
, 
	`EVBUFFER_INPUT
(
bev
));

1158 i‡(
d⁄e
 !
ALL_DATA_READ
)

1159 
out
;

1161 
hódî
 = 
	`evhâp_föd_hódî
(
ªq
->
öput_hódîs
, "Transfer-Encoding");

1162 i‡(
hódî
 =
NULL
 || 
	`°rcmp
(header, "chunked"))

1163 
out
;

1165 
hódî
 = 
	`evhâp_föd_hódî
(
ªq
->
öput_hódîs
, "Connection");

1166 i‡(
hódî
 =
NULL
 || 
	`°rcmp
(header, "close"))

1167 
out
;

1169 
hódî
 = 
	`evbuf„r_ªadlöe
(
	`EVBUFFER_INPUT
(
bev
));

1170 i‡(
hódî
 =
NULL
)

1171 
out
;

1173 i‡(
	`°rcmp
(
hódî
, "d"))

1174 
out
;

1175 
	`‰ì
((*)
hódî
);

1177 i‡(
	`°∫cmp
((*)
	`EVBUFFER_DATA
(
	`EVBUFFER_INPUT
(
bev
)),

1179 
out
;

1181 
	`evbuf„r_døö
(
	`EVBUFFER_INPUT
(
bev
), 13 + 2);

1183 
hódî
 = 
	`evbuf„r_ªadlöe
(
	`EVBUFFER_INPUT
(
bev
));

1184 i‡(
hódî
 =
NULL
)

1185 
out
;

1187 i‡(
	`°rcmp
(
hódî
, "12"))

1188 
out
;

1189 
	`‰ì
((*)
hódî
);

1191 i‡(
	`°∫cmp
((*)
	`EVBUFFER_DATA
(
	`EVBUFFER_INPUT
(
bev
)),

1193 
out
;

1195 
	`evbuf„r_døö
(
	`EVBUFFER_INPUT
(
bev
), 18 + 2);

1197 
hódî
 = 
	`evbuf„r_ªadlöe
(
	`EVBUFFER_INPUT
(
bev
));

1198 i‡(
hódî
 =
NULL
)

1199 
out
;

1201 i‡(
	`°rcmp
(
hódî
, "8"))

1202 
out
;

1203 
	`‰ì
((*)
hódî
);

1205 i‡(
	`°∫cmp
((*)
	`EVBUFFER_DATA
(
	`EVBUFFER_INPUT
(
bev
)),

1207 
out
;

1209 
	`evbuf„r_døö
(
	`EVBUFFER_INPUT
(
bev
), 8 + 2);

1211 
hódî
 = 
	`evbuf„r_ªadlöe
(
	`EVBUFFER_INPUT
(
bev
));

1212 i‡(
hódî
 =
NULL
)

1213 
out
;

1215 i‡(
	`°rcmp
(
hódî
, "0"))

1216 
out
;

1217 
	`‰ì
((*)
hódî
);

1219 
ã°_ok
 = 2;

1222 
out
:

1223 
	`evít_lo›exô
(
NULL
);

1224 
	}
}

1227 
	$hâp_chunked_wrôecb
(
buf„ªvít
 *
bev
, *
¨g
)

1229 i‡(
	`EVBUFFER_LENGTH
(
	`EVBUFFER_OUTPUT
(
bev
)) == 0) {

1231 
	`buf„ªvít_íabÀ
(
bev
, 
EV_READ
);

1232 
ã°_ok
++;

1234 
	}
}

1237 
	$hâp_chunked_ªque°_d⁄e
(
evhâp_ªque°
 *
ªq
, *
¨g
)

1239 i‡(
ªq
->
ª•⁄£_code
 !
HTTP_OK
) {

1240 
	`Ârötf
(
°dîr
, "FAILED\n");

1241 
	`exô
(1);

1244 i‡(
	`evhâp_föd_hódî
(
ªq
->
öput_hódîs
,

1245 "Tøns„r-Encodög"Ë=
NULL
) {

1246 
	`Ârötf
(
°dîr
, "FAILED\n");

1247 
	`exô
(1);

1250 i‡(
	`EVBUFFER_LENGTH
(
ªq
->
öput_buf„r
) != 13 + 18 + 8) {

1251 
	`Ârötf
(
°dîr
, "FAILED\n");

1252 
	`exô
(1);

1255 i‡(
	`°∫cmp
((*)
	`EVBUFFER_DATA
(
ªq
->
öput_buf„r
),

1258 
	`Ârötf
(
°dîr
, "FAILED\n");

1259 
	`exô
(1);

1262 
ã°_ok
 = 1;

1263 
	`evít_lo›exô
(
NULL
);

1264 
	}
}

1267 
	$hâp_chunked_ã°
()

1269 
buf„ªvít
 *
bev
;

1270 
fd
;

1271 c⁄° *
hâp_ªque°
;

1272 
p‹t
 = -1;

1273 
timevÆ
 
tv_°¨t
, 
tv_íd
;

1274 
evhâp_c⁄√˘i⁄
 *
evc⁄
 = 
NULL
;

1275 
evhâp_ªque°
 *
ªq
 = 
NULL
;

1276 
i
;

1278 
ã°_ok
 = 0;

1279 
	`Ârötf
(
°dout
, "Testing Chunked HTTP Reply: ");

1281 
hâp
 = 
	`hâp_£tup
(&
p‹t
, 
NULL
);

1283 
fd
 = 
	`hâp_c⁄√˘
("127.0.0.1", 
p‹t
);

1286 
bev
 = 
	`buf„ªvít_√w
(
fd
,

1287 
hâp_chunked_ªadcb
, 
hâp_chunked_wrôecb
,

1288 
hâp_chunked_îr‹cb
, 
NULL
);

1290 
hâp_ªque°
 =

1296 
	`buf„ªvít_wrôe
(
bev
, 
hâp_ªque°
, 
	`°æí
(http_request));

1298 
	`evutû_gëtimeofday
(&
tv_°¨t
, 
NULL
);

1300 
	`evít_di•©ch
();

1302 
	`evutû_gëtimeofday
(&
tv_íd
, 
NULL
);

1303 
	`evutû_timîsub
(&
tv_íd
, &
tv_°¨t
, &tv_end);

1305 i‡(
tv_íd
.
tv_£c
 >= 1) {

1306 
	`Ârötf
(
°dout
, "FAILED (time)\n");

1307 
	`exô
 (1);

1311 i‡(
ã°_ok
 != 2) {

1312 
	`Ârötf
(
°dout
, "FAILED\n");

1313 
	`exô
(1);

1317 
evc⁄
 = 
	`evhâp_c⁄√˘i⁄_√w
("127.0.0.1", 
p‹t
);

1318 i‡(
evc⁄
 =
NULL
) {

1319 
	`Ârötf
(
°dout
, "FAILED\n");

1320 
	`exô
(1);

1324 
i
 = 0; i < 2; i++) {

1325 
ã°_ok
 = 0;

1326 
ªq
 = 
	`evhâp_ªque°_√w
(
hâp_chunked_ªque°_d⁄e
, 
NULL
);

1329 
	`evhâp_add_hódî
(
ªq
->
ouçut_hódîs
, "Host", "somehost");

1332 i‡(
	`evhâp_make_ªque°
(
evc⁄
, 
ªq
,

1333 
EVHTTP_REQ_GET
, "/chunked") == -1) {

1334 
	`Ârötf
(
°dout
, "FAILED\n");

1335 
	`exô
(1);

1338 
	`evít_di•©ch
();

1340 i‡(
ã°_ok
 != 1) {

1341 
	`Ârötf
(
°dout
, "FAILED\n");

1342 
	`exô
(1);

1346 
	`evhâp_c⁄√˘i⁄_‰ì
(
evc⁄
);

1347 
	`evhâp_‰ì
(
hâp
);

1349 
	`Ârötf
(
°dout
, "OK\n");

1350 
	}
}

1353 
	$hâp_mu…i_löe_hódî_ã°
()

1355 
buf„ªvít
 *
bev
;

1356 
fd
;

1357 c⁄° *
hâp_°¨t_ªque°
;

1358 
p‹t
 = -1;

1360 
ã°_ok
 = 0;

1361 
	`Ârötf
(
°dout
, "Testing HTTP Server with multiÜine: ");

1363 
hâp
 = 
	`hâp_£tup
(&
p‹t
, 
NULL
);

1365 
fd
 = 
	`hâp_c⁄√˘
("127.0.0.1", 
p‹t
);

1368 
bev
 = 
	`buf„ªvít_√w
(
fd
, 
hâp_ªadcb
, 
hâp_wrôecb
,

1369 
hâp_îr‹cb
, 
NULL
);

1371 
hâp_°¨t_ªque°
 =

1381 
	`buf„ªvít_wrôe
(
bev
, 
hâp_°¨t_ªque°
, 
	`°æí
(http_start_request));

1383 
	`evít_di•©ch
();

1385 
	`buf„ªvít_‰ì
(
bev
);

1386 
	`EVUTIL_CLOSESOCKET
(
fd
);

1388 
	`evhâp_‰ì
(
hâp
);

1390 i‡(
ã°_ok
 != 4) {

1391 
	`Ârötf
(
°dout
, "FAILED\n");

1392 
	`exô
(1);

1395 
	`Ârötf
(
°dout
, "OK\n");

1396 
	}
}

1399 
	$hâp_ªque°_bad
(
evhâp_ªque°
 *
ªq
, *
¨g
)

1401 i‡(
ªq
 !
NULL
) {

1402 
	`Ârötf
(
°dîr
, "FAILED\n");

1403 
	`exô
(1);

1406 
ã°_ok
 = 1;

1407 
	`evít_lo›exô
(
NULL
);

1408 
	}
}

1411 
	$hâp_√g©ive_c⁄ã¡_Àngth_ã°
()

1413 
p‹t
 = -1;

1414 
evhâp_c⁄√˘i⁄
 *
evc⁄
 = 
NULL
;

1415 
evhâp_ªque°
 *
ªq
 = 
NULL
;

1417 
ã°_ok
 = 0;

1418 
	`Ârötf
(
°dout
, "Testing HTTP Negative Content Length: ");

1420 
hâp
 = 
	`hâp_£tup
(&
p‹t
, 
NULL
);

1422 
evc⁄
 = 
	`evhâp_c⁄√˘i⁄_√w
("127.0.0.1", 
p‹t
);

1423 i‡(
evc⁄
 =
NULL
) {

1424 
	`Ârötf
(
°dout
, "FAILED\n");

1425 
	`exô
(1);

1433 
ªq
 = 
	`evhâp_ªque°_√w
(
hâp_ªque°_bad
, 
NULL
);

1436 
	`evhâp_add_hódî
(
ªq
->
ouçut_hódîs
, "X-Negative", "makeitso");

1439 i‡(
	`evhâp_make_ªque°
(
evc⁄
, 
ªq
, 
EVHTTP_REQ_GET
, "/test") == -1) {

1440 
	`Ârötf
(
°dout
, "FAILED\n");

1441 
	`exô
(1);

1444 
	`evít_di•©ch
();

1446 
	`evhâp_‰ì
(
hâp
);

1448 i‡(
ã°_ok
 != 1) {

1449 
	`Ârötf
(
°dout
, "FAILED\n");

1450 
	`exô
(1);

1453 
	`Ârötf
(
°dout
, "OK\n");

1454 
	}
}

1457 
	$hâp_suôe
()

1459 
	`hâp_ba£_ã°
();

1460 
	`hâp_bad_hódî_ã°
();

1461 
	`hâp_∑r£_quîy_ã°
();

1462 
	`hâp_basic_ã°
();

1463 
	`hâp_c⁄√˘i⁄_ã°
(0 );

1464 
	`hâp_c⁄√˘i⁄_ã°
(1 );

1465 
	`hâp_˛o£_dëe˘i⁄
(0 );

1466 
	`hâp_˛o£_dëe˘i⁄
(1 );

1467 
	`hâp_po°_ã°
();

1468 
	`hâp_Áûuª_ã°
();

1469 
	`hâp_highp‹t_ã°
();

1470 
	`hâp_di•©chî_ã°
();

1472 
	`hâp_mu…i_löe_hódî_ã°
();

1473 
	`hâp_√g©ive_c⁄ã¡_Àngth_ã°
();

1475 
	`hâp_chunked_ã°
();

1476 
	}
}

	@test/regress_rpc.c

28 #ifde‡
WIN32


29 
	~<wösock2.h
>

30 
	~<wödows.h
>

33 #ifde‡
HAVE_CONFIG_H


34 
	~"c⁄fig.h
"

37 
	~<sys/ty≥s.h
>

38 
	~<sys/°©.h
>

39 #ifde‡
HAVE_SYS_TIME_H


40 
	~<sys/time.h
>

42 
	~<sys/queue.h
>

43 #i‚de‡
WIN32


44 
	~<sys/sockë.h
>

45 
	~<sig«l.h
>

46 
	~<uni°d.h
>

47 
	~<√tdb.h
>

49 
	~<f˙é.h
>

50 
	~<°dlib.h
>

51 
	~<°dio.h
>

52 
	~<°rög.h
>

53 
	~<î∫o.h
>

54 
	~<as£π.h
>

56 
	~"evít.h
"

57 
	~"evhâp.h
"

58 
	~"log.h
"

59 
	~"evΩc.h
"

61 
	~"ªgªss.gí.h
"

63 
Ωc_suôe
();

65 
ã°_ok
;

67 
evhâp
 *

68 
	$hâp_£tup
(*
µ‹t
)

70 
i
;

71 
evhâp
 *
myhâp
;

72 
p‹t
 = -1;

75 
i
 = 0; i < 50; ++i) {

76 
myhâp
 = 
	`evhâp_°¨t
("127.0.0.1", 8080 + 
i
);

77 i‡(
myhâp
 !
NULL
) {

78 
p‹t
 = 8080 + 
i
;

83 i‡(
p‹t
 == -1)

84 
	`evít_îrx
(1, "CouldÇot start web server");

86 *
µ‹t
 = 
p‹t
;

87  (
myhâp
);

88 
	}
}

90 
EVRPC_HEADER
(
Mesßge
, 
msg
, 
kûl
);

91 
EVRPC_HEADER
(
NevîRïly
, 
msg
, 
kûl
);

93 
EVRPC_GENERATE
(
Mesßge
, 
msg
, 
kûl
);

94 
EVRPC_GENERATE
(
NevîRïly
, 
msg
, 
kûl
);

96 
	g√ed_öput_hook
 = 0;

97 
	g√ed_ouçut_hook
 = 0;

100 
MesßgeCb
(
EVRPC_STRUCT
(
Mesßge
)* 
Ωc
, *
¨g
)

102 
kûl
* 
	gkûl_ª∂y
 = 
Ωc
->
ª∂y
;

104 i‡(
	g√ed_öput_hook
) {

105 
evhâp_ªque°
* 
	gªq
 = 
EVRPC_REQUEST_HTTP
(
Ωc
);

106 c⁄° *
	ghódî
 = 
evhâp_föd_hódî
(

107 
ªq
->
öput_hódîs
, "X-Hook");

108 
as£π
(
°rcmp
(
hódî
, "input") == 0);

112 
EVTAG_ASSIGN
(
kûl_ª∂y
, 
wóp⁄
, "dagger");

113 
EVTAG_ASSIGN
(
kûl_ª∂y
, 
a˘i⁄
, "waveároundÜikeán idiot");

116 
EVRPC_REQUEST_DONE
(
Ωc
);

119 
EVRPC_STRUCT
(
NevîRïly
Ë*
	gßved_Ωc
;

122 
NevîRïlyCb
(
EVRPC_STRUCT
(
NevîRïly
)* 
Ωc
, *
¨g
)

124 
	gã°_ok
 += 1;

125 
	gßved_Ωc
 = 
Ωc
;

129 
	$Ωc_£tup
(
evhâp
 **
phâp
, *
µ‹t
, 
evΩc_ba£
 **
pba£
)

131 
p‹t
;

132 
evhâp
 *
hâp
 = 
NULL
;

133 
evΩc_ba£
 *
ba£
 = 
NULL
;

135 
hâp
 = 
	`hâp_£tup
(&
p‹t
);

136 
ba£
 = 
	`evΩc_öô
(
hâp
);

138 
	`EVRPC_REGISTER
(
ba£
, 
Mesßge
, 
msg
, 
kûl
, 
MesßgeCb
, 
NULL
);

139 
	`EVRPC_REGISTER
(
ba£
, 
NevîRïly
, 
msg
, 
kûl
, 
NevîRïlyCb
, 
NULL
);

141 *
phâp
 = 
hâp
;

142 *
µ‹t
 = 
p‹t
;

143 *
pba£
 = 
ba£
;

145 
√ed_öput_hook
 = 0;

146 
√ed_ouçut_hook
 = 0;

147 
	}
}

150 
	$Ωc_ã¨down
(
evΩc_ba£
 *
ba£
)

152 
	`as£π
(
	`EVRPC_UNREGISTER
(
ba£
, 
Mesßge
) == 0);

153 
	`as£π
(
	`EVRPC_UNREGISTER
(
ba£
, 
NevîRïly
) == 0);

155 
	`evΩc_‰ì
(
ba£
);

156 
	}
}

159 
	$Ωc_po°ªque°_Áûuª
(
evhâp_ªque°
 *
ªq
, *
¨g
)

161 i‡(
ªq
->
ª•⁄£_code
 !
HTTP_SERVUNAVAIL
) {

163 
	`Ârötf
(
°dîr
, "FAILED (response code)\n");

164 
	`exô
(1);

167 
ã°_ok
 = 1;

168 
	`evít_lo›exô
(
NULL
);

169 
	}
}

176 
	$Ωc_basic_ã°
()

178 
p‹t
;

179 
evhâp
 *
hâp
 = 
NULL
;

180 
evΩc_ba£
 *
ba£
 = 
NULL
;

181 
evhâp_c⁄√˘i⁄
 *
evc⁄
 = 
NULL
;

182 
evhâp_ªque°
 *
ªq
 = 
NULL
;

184 
	`Ârötf
(
°dout
, "Testing Basic RPC Support: ");

186 
	`Ωc_£tup
(&
hâp
, &
p‹t
, &
ba£
);

188 
evc⁄
 = 
	`evhâp_c⁄√˘i⁄_√w
("127.0.0.1", 
p‹t
);

189 i‡(
evc⁄
 =
NULL
) {

190 
	`Ârötf
(
°dout
, "FAILED\n");

191 
	`exô
(1);

199 
ªq
 = 
	`evhâp_ªque°_√w
(
Ωc_po°ªque°_Áûuª
, 
NULL
);

200 i‡(
ªq
 =
NULL
) {

201 
	`Ârötf
(
°dout
, "FAILED\n");

202 
	`exô
(1);

206 
	`evhâp_add_hódî
(
ªq
->
ouçut_hódîs
, "Host", "somehost");

207 
	`evbuf„r_add_¥ötf
(
ªq
->
ouçut_buf„r
, "Some Nonsense");

209 i‡(
	`evhâp_make_ªque°
(
evc⁄
, 
ªq
,

210 
EVHTTP_REQ_POST
,

212 
	`Ârötf
(
°dout
, "FAILED\n");

213 
	`exô
(1);

216 
ã°_ok
 = 0;

218 
	`evít_di•©ch
();

220 
	`evhâp_c⁄√˘i⁄_‰ì
(
evc⁄
);

222 
	`Ωc_ã¨down
(
ba£
);

224 i‡(
ã°_ok
 != 1) {

225 
	`Ârötf
(
°dout
, "FAILED\n");

226 
	`exô
(1);

229 
	`Ârötf
(
°dout
, "OK\n");

231 
	`evhâp_‰ì
(
hâp
);

232 
	}
}

235 
	$Ωc_po°ªque°_d⁄e
(
evhâp_ªque°
 *
ªq
, *
¨g
)

237 
kûl
* 
kûl_ª∂y
 = 
NULL
;

239 i‡(
ªq
->
ª•⁄£_code
 !
HTTP_OK
) {

241 
	`Ârötf
(
°dîr
, "FAILED (response code)\n");

242 
	`exô
(1);

245 
kûl_ª∂y
 = 
	`kûl_√w
();

247 i‡((
	`kûl_unm¨shÆ
(
kûl_ª∂y
, 
ªq
->
öput_buf„r
)) == -1) {

248 
	`Ârötf
(
°dîr
, "FAILED (unmarshal)\n");

249 
	`exô
(1);

252 
	`kûl_‰ì
(
kûl_ª∂y
);

254 
ã°_ok
 = 1;

255 
	`evít_lo›exô
(
NULL
);

256 
	}
}

259 
	$Ωc_basic_mesßge
()

261 
p‹t
;

262 
evhâp
 *
hâp
 = 
NULL
;

263 
evΩc_ba£
 *
ba£
 = 
NULL
;

264 
evhâp_c⁄√˘i⁄
 *
evc⁄
 = 
NULL
;

265 
evhâp_ªque°
 *
ªq
 = 
NULL
;

266 
msg
 *msg;

268 
	`Ârötf
(
°dout
, "Testing Good RPC Post: ");

270 
	`Ωc_£tup
(&
hâp
, &
p‹t
, &
ba£
);

272 
evc⁄
 = 
	`evhâp_c⁄√˘i⁄_√w
("127.0.0.1", 
p‹t
);

273 i‡(
evc⁄
 =
NULL
) {

274 
	`Ârötf
(
°dout
, "FAILED\n");

275 
	`exô
(1);

283 
ªq
 = 
	`evhâp_ªque°_√w
(
Ωc_po°ªque°_d⁄e
, 
NULL
);

284 i‡(
ªq
 =
NULL
) {

285 
	`Ârötf
(
°dout
, "FAILED\n");

286 
	`exô
(1);

290 
	`evhâp_add_hódî
(
ªq
->
ouçut_hódîs
, "Host", "somehost");

293 
msg
 = 
	`msg_√w
();

294 
	`EVTAG_ASSIGN
(
msg
, 
‰om_«me
, "niels");

295 
	`EVTAG_ASSIGN
(
msg
, 
to_«me
, "tester");

296 
	`msg_m¨shÆ
(
ªq
->
ouçut_buf„r
, 
msg
);

297 
	`msg_‰ì
(
msg
);

299 i‡(
	`evhâp_make_ªque°
(
evc⁄
, 
ªq
,

300 
EVHTTP_REQ_POST
,

302 
	`Ârötf
(
°dout
, "FAILED\n");

303 
	`exô
(1);

306 
ã°_ok
 = 0;

308 
	`evít_di•©ch
();

310 
	`evhâp_c⁄√˘i⁄_‰ì
(
evc⁄
);

312 
	`Ωc_ã¨down
(
ba£
);

314 i‡(
ã°_ok
 != 1) {

315 
	`Ârötf
(
°dout
, "FAILED\n");

316 
	`exô
(1);

319 
	`Ârötf
(
°dout
, "OK\n");

321 
	`evhâp_‰ì
(
hâp
);

322 
	}
}

324 
evΩc_poﬁ
 *

325 
	$Ωc_poﬁ_wôh_c⁄√˘i⁄
(
p‹t
)

327 
evhâp_c⁄√˘i⁄
 *
evc⁄
;

328 
evΩc_poﬁ
 *
poﬁ
;

330 
poﬁ
 = 
	`evΩc_poﬁ_√w
(
NULL
);

331 
	`as£π
(
poﬁ
 !
NULL
);

333 
evc⁄
 = 
	`evhâp_c⁄√˘i⁄_√w
("127.0.0.1", 
p‹t
);

334 
	`as£π
(
evc⁄
 !
NULL
);

336 
	`evΩc_poﬁ_add_c⁄√˘i⁄
(
poﬁ
, 
evc⁄
);

338  (
poﬁ
);

339 
	}
}

342 
	$GŸKûlCb
(
evΩc_°©us
 *
°©us
,

343 
msg
 *msg, 
kûl
 *kûl, *
¨g
)

345 *
wóp⁄
;

346 *
a˘i⁄
;

348 i‡(
√ed_ouçut_hook
) {

349 
evhâp_ªque°
 *
ªq
 = 
°©us
->
hâp_ªq
;

350 c⁄° *
hódî
 = 
	`evhâp_föd_hódî
(

351 
ªq
->
öput_hódîs
, "X-Pool-Hook");

352 
	`as£π
(
	`°rcmp
(
hódî
, "ran") == 0);

355 i‡(
°©us
->
îr‹
 !
EVRPC_STATUS_ERR_NONE
)

356 
d⁄e
;

358 i‡(
	`EVTAG_GET
(
kûl
, 
wóp⁄
, &weapon) == -1) {

359 
	`Ârötf
(
°dîr
, "get weapon\n");

360 
d⁄e
;

362 i‡(
	`EVTAG_GET
(
kûl
, 
a˘i⁄
, &action) == -1) {

363 
	`Ârötf
(
°dîr
, "getáction\n");

364 
d⁄e
;

367 i‡(
	`°rcmp
(
wóp⁄
, "dagger"))

368 
d⁄e
;

370 i‡(
	`°rcmp
(
a˘i⁄
, "waveároundÜikeán idiot"))

371 
d⁄e
;

373 
ã°_ok
 += 1;

375 
d⁄e
:

376 
	`evít_lo›exô
(
NULL
);

377 
	}
}

380 
	$GŸKûlCbTwo
(
evΩc_°©us
 *
°©us
,

381 
msg
 *msg, 
kûl
 *kûl, *
¨g
)

383 *
wóp⁄
;

384 *
a˘i⁄
;

386 i‡(
°©us
->
îr‹
 !
EVRPC_STATUS_ERR_NONE
)

387 
d⁄e
;

389 i‡(
	`EVTAG_GET
(
kûl
, 
wóp⁄
, &weapon) == -1) {

390 
	`Ârötf
(
°dîr
, "get weapon\n");

391 
d⁄e
;

393 i‡(
	`EVTAG_GET
(
kûl
, 
a˘i⁄
, &action) == -1) {

394 
	`Ârötf
(
°dîr
, "getáction\n");

395 
d⁄e
;

398 i‡(
	`°rcmp
(
wóp⁄
, "dagger"))

399 
d⁄e
;

401 i‡(
	`°rcmp
(
a˘i⁄
, "waveároundÜikeán idiot"))

402 
d⁄e
;

404 
ã°_ok
 += 1;

406 
d⁄e
:

407 i‡(
ã°_ok
 == 2)

408 
	`evít_lo›exô
(
NULL
);

409 
	}
}

412 
	$Ωc_hook_add_hódî
(
evhâp_ªque°
 *
ªq
,

413 
evbuf„r
 *
evbuf
, *
¨g
)

415 c⁄° *
hook_ty≥
 = 
¨g
;

416 i‡(
	`°rcmp
("öput", 
hook_ty≥
) == 0)

417 
	`evhâp_add_hódî
(
ªq
->
öput_hódîs
, "X-Hook", 
hook_ty≥
);

419 
	`evhâp_add_hódî
(
ªq
->
ouçut_hódîs
, "X-Hook", 
hook_ty≥
);

421 
	}
}

424 
	$Ωc_hook_ªmove_hódî
(
evhâp_ªque°
 *
ªq
,

425 
evbuf„r
 *
evbuf
, *
¨g
)

427 c⁄° *
hódî
 = 
	`evhâp_föd_hódî
(
ªq
->
öput_hódîs
, "X-Hook");

428 
	`as£π
(
hódî
 !
NULL
);

429 
	`as£π
(
	`°rcmp
(
hódî
, 
¨g
) == 0);

430 
	`evhâp_ªmove_hódî
(
ªq
->
öput_hódîs
, "X-Hook");

431 
	`evhâp_add_hódî
(
ªq
->
öput_hódîs
, "X-Pool-Hook", "ran");

434 
	}
}

437 
	$Ωc_basic_˛õ¡
()

439 
p‹t
;

440 
evhâp
 *
hâp
 = 
NULL
;

441 
evΩc_ba£
 *
ba£
 = 
NULL
;

442 
evΩc_poﬁ
 *
poﬁ
 = 
NULL
;

443 
msg
 *msg;

444 
kûl
 *kill;

446 
	`Ârötf
(
°dout
, "Testing RPC Client: ");

448 
	`Ωc_£tup
(&
hâp
, &
p‹t
, &
ba£
);

450 
√ed_öput_hook
 = 1;

451 
√ed_ouçut_hook
 = 1;

453 
	`as£π
(
	`evΩc_add_hook
(
ba£
, 
EVRPC_INPUT
, 
Ωc_hook_add_hódî
, (*)"input")

454 !
NULL
);

455 
	`as£π
(
	`evΩc_add_hook
(
ba£
, 
EVRPC_OUTPUT
, 
Ωc_hook_add_hódî
, (*)"output")

456 !
NULL
);

458 
poﬁ
 = 
	`Ωc_poﬁ_wôh_c⁄√˘i⁄
(
p‹t
);

460 
	`as£π
(
	`evΩc_add_hook
(
poﬁ
, 
EVRPC_INPUT
, 
Ωc_hook_ªmove_hódî
, (*)"output"));

463 
msg
 = 
	`msg_√w
();

464 
	`EVTAG_ASSIGN
(
msg
, 
‰om_«me
, "niels");

465 
	`EVTAG_ASSIGN
(
msg
, 
to_«me
, "tester");

467 
kûl
 = 
	`kûl_√w
();

469 
	`EVRPC_MAKE_REQUEST
(
Mesßge
, 
poﬁ
, 
msg
, 
kûl
, 
GŸKûlCb
, 
NULL
);

471 
ã°_ok
 = 0;

473 
	`evít_di•©ch
();

475 i‡(
ã°_ok
 != 1) {

476 
	`Ârötf
(
°dout
, "FAILED (1)\n");

477 
	`exô
(1);

481 
	`kûl_˛ór
(
kûl
);

483 
	`EVRPC_MAKE_REQUEST
(
Mesßge
, 
poﬁ
, 
msg
, 
kûl
, 
GŸKûlCb
, 
NULL
);

485 
	`evít_di•©ch
();

487 
	`Ωc_ã¨down
(
ba£
);

489 i‡(
ã°_ok
 != 2) {

490 
	`Ârötf
(
°dout
, "FAILED (2)\n");

491 
	`exô
(1);

494 
	`Ârötf
(
°dout
, "OK\n");

496 
	`msg_‰ì
(
msg
);

497 
	`kûl_‰ì
(
kûl
);

499 
	`evΩc_poﬁ_‰ì
(
poﬁ
);

500 
	`evhâp_‰ì
(
hâp
);

501 
	}
}

508 
	$Ωc_basic_queued_˛õ¡
()

510 
p‹t
;

511 
evhâp
 *
hâp
 = 
NULL
;

512 
evΩc_ba£
 *
ba£
 = 
NULL
;

513 
evΩc_poﬁ
 *
poﬁ
 = 
NULL
;

514 
msg
 *msg;

515 
kûl
 *
kûl_⁄e
, *
kûl_two
;

517 
	`Ârötf
(
°dout
, "Testing RPC (Queued) Client: ");

519 
	`Ωc_£tup
(&
hâp
, &
p‹t
, &
ba£
);

521 
poﬁ
 = 
	`Ωc_poﬁ_wôh_c⁄√˘i⁄
(
p‹t
);

524 
msg
 = 
	`msg_√w
();

525 
	`EVTAG_ASSIGN
(
msg
, 
‰om_«me
, "niels");

526 
	`EVTAG_ASSIGN
(
msg
, 
to_«me
, "tester");

528 
kûl_⁄e
 = 
	`kûl_√w
();

529 
kûl_two
 = 
	`kûl_√w
();

531 
	`EVRPC_MAKE_REQUEST
(
Mesßge
, 
poﬁ
, 
msg
, 
kûl_⁄e
, 
GŸKûlCbTwo
, 
NULL
);

532 
	`EVRPC_MAKE_REQUEST
(
Mesßge
, 
poﬁ
, 
msg
, 
kûl_two
, 
GŸKûlCb
, 
NULL
);

534 
ã°_ok
 = 0;

536 
	`evít_di•©ch
();

538 
	`Ωc_ã¨down
(
ba£
);

540 i‡(
ã°_ok
 != 2) {

541 
	`Ârötf
(
°dout
, "FAILED (1)\n");

542 
	`exô
(1);

545 
	`Ârötf
(
°dout
, "OK\n");

547 
	`msg_‰ì
(
msg
);

548 
	`kûl_‰ì
(
kûl_⁄e
);

549 
	`kûl_‰ì
(
kûl_two
);

551 
	`evΩc_poﬁ_‰ì
(
poﬁ
);

552 
	`evhâp_‰ì
(
hâp
);

553 
	}
}

556 
	$GŸEº‹Cb
(
evΩc_°©us
 *
°©us
,

557 
msg
 *msg, 
kûl
 *kûl, *
¨g
)

559 i‡(
°©us
->
îr‹
 !
EVRPC_STATUS_ERR_TIMEOUT
)

560 
d⁄e
;

563 i‡(
	`kûl_com∂ëe
(
kûl
) == 0)

564 
d⁄e
;

566 
ã°_ok
 += 1;

568 
d⁄e
:

569 
	`evít_lo›exô
(
NULL
);

570 
	}
}

573 
	$Ωc_˛õ¡_timeout
()

575 
p‹t
;

576 
evhâp
 *
hâp
 = 
NULL
;

577 
evΩc_ba£
 *
ba£
 = 
NULL
;

578 
evΩc_poﬁ
 *
poﬁ
 = 
NULL
;

579 
msg
 *msg;

580 
kûl
 *kill;

582 
	`Ârötf
(
°dout
, "Testing RPC Client Timeout: ");

584 
	`Ωc_£tup
(&
hâp
, &
p‹t
, &
ba£
);

586 
poﬁ
 = 
	`Ωc_poﬁ_wôh_c⁄√˘i⁄
(
p‹t
);

589 
	`evΩc_poﬁ_£t_timeout
(
poﬁ
, 5);

592 
msg
 = 
	`msg_√w
();

593 
	`EVTAG_ASSIGN
(
msg
, 
‰om_«me
, "niels");

594 
	`EVTAG_ASSIGN
(
msg
, 
to_«me
, "tester");

596 
kûl
 = 
	`kûl_√w
();

598 
	`EVRPC_MAKE_REQUEST
(
NevîRïly
, 
poﬁ
, 
msg
, 
kûl
, 
GŸEº‹Cb
, 
NULL
);

600 
ã°_ok
 = 0;

602 
	`evít_di•©ch
();

605 
	`EVRPC_REQUEST_DONE
(
ßved_Ωc
);

607 
	`Ωc_ã¨down
(
ba£
);

609 i‡(
ã°_ok
 != 2) {

610 
	`Ârötf
(
°dout
, "FAILED (1)\n");

611 
	`exô
(1);

614 
	`Ârötf
(
°dout
, "OK\n");

616 
	`msg_‰ì
(
msg
);

617 
	`kûl_‰ì
(
kûl
);

619 
	`evΩc_poﬁ_‰ì
(
poﬁ
);

620 
	`evhâp_‰ì
(
hâp
);

621 
	}
}

624 
	$Ωc_suôe
()

626 
	`Ωc_basic_ã°
();

627 
	`Ωc_basic_mesßge
();

628 
	`Ωc_basic_˛õ¡
();

629 
	`Ωc_basic_queued_˛õ¡
();

630 
	`Ωc_˛õ¡_timeout
();

631 
	}
}

	@test/test-eof.c

5 #ifde‡
HAVE_CONFIG_H


6 
	~"c⁄fig.h
"

10 #ifde‡
WIN32


11 
	~<wösock2.h
>

13 
	~<sys/ty≥s.h
>

14 
	~<sys/°©.h
>

15 #ifde‡
HAVE_SYS_TIME_H


16 
	~<sys/time.h
>

18 #ifde‡
HAVE_SYS_SOCKET_H


19 
	~<sys/sockë.h
>

21 
	~<f˙é.h
>

22 
	~<°dlib.h
>

23 
	~<°dio.h
>

24 
	~<°rög.h
>

25 #ifde‡
HAVE_UNISTD_H


26 
	~<uni°d.h
>

28 
	~<î∫o.h
>

30 
	~<evít.h
>

31 
	~<evutû.h
>

33 
	gã°_okay
 = 1;

34 
	gˇŒed
 = 0;

37 
	$ªad_cb
(
fd
, 
evít
, *
¨g
)

39 
buf
[256];

40 
Àn
;

42 
Àn
 = 
	`ªcv
(
fd
, 
buf
, (buf), 0);

44 
	`¥ötf
("%s:Ñód %d%s\n", 
__func__
,

45 
Àn
,Üen ? "" : " - means EOF");

47 i‡(
Àn
) {

48 i‡(!
ˇŒed
)

49 
	`evít_add
(
¨g
, 
NULL
);

50 } i‡(
ˇŒed
 == 1)

51 
ã°_okay
 = 0;

53 
ˇŒed
++;

54 
	}
}

56 #i‚de‡
SHUT_WR


57 
	#SHUT_WR
 1

	)

61 
	$maö
 (
¨gc
, **
¨gv
)

63 
evít
 
ev
;

64 c⁄° *
ã°
 = "test string";

65 
∑ú
[2];

67 i‡(
	`evutû_sockë∑ú
(
AF_UNIX
, 
SOCK_STREAM
, 0, 
∑ú
) == -1)

71 
	`£nd
(
∑ú
[0], 
ã°
, 
	`°æí
(test)+1, 0);

72 
	`shutdown
(
∑ú
[0], 
SHUT_WR
);

75 
	`evít_öô
();

78 
	`evít_£t
(&
ev
, 
∑ú
[1], 
EV_READ
, 
ªad_cb
, &ev);

80 
	`evít_add
(&
ev
, 
NULL
);

82 
	`evít_di•©ch
();

84  (
ã°_okay
);

85 
	}
}

	@test/test-init.c

5 #ifde‡
HAVE_CONFIG_H


6 
	~"c⁄fig.h
"

9 #ifde‡
WIN32


10 
	~<wösock2.h
>

13 
	~<sys/ty≥s.h
>

14 
	~<sys/°©.h
>

15 #ifde‡
HAVE_SYS_TIME_H


16 
	~<sys/time.h
>

18 #ifde‡
HAVE_SYS_SOCKET_H


19 
	~<sys/sockë.h
>

21 
	~<f˙é.h
>

22 
	~<°dlib.h
>

23 
	~<°dio.h
>

24 
	~<°rög.h
>

25 #ifde‡
HAVE_UNISTD_H


26 
	~<uni°d.h
>

28 
	~<î∫o.h
>

30 
	~<evít.h
>

33 
	$maö
(
¨gc
, **
¨gv
)

36 
	`evít_öô
();

39 
	}
}

	@test/test-time.c

5 #ifde‡
HAVE_CONFIG_H


6 
	~"c⁄fig.h
"

9 #ifde‡
WIN32


10 
	~<wösock2.h
>

13 
	~<sys/ty≥s.h
>

14 
	~<sys/°©.h
>

15 #ifde‡
HAVE_SYS_TIME_H


16 
	~<sys/time.h
>

18 
	~<f˙é.h
>

19 
	~<°dlib.h
>

20 
	~<°dio.h
>

21 
	~<°rög.h
>

22 #ifde‡
HAVE_UNISTD_H


23 
	~<uni°d.h
>

25 
	~<î∫o.h
>

27 
	~<evít.h
>

29 
	gˇŒed
 = 0;

31 
	#NEVENT
 20000

	)

33 
evít
 *
	gev
[
NEVENT
];

36 
	$ønd_öt
(
n
)

38 #ifde‡
WIN32


39  ()(
	`ønd
(Ë* 
n
);

41  ()(
	`øndom
(Ë% 
n
);

43 
	}
}

46 
	$time_cb
(
fd
, 
evít
, *
¨g
)

48 
timevÆ
 
tv
;

49 
i
, 
j
;

51 
ˇŒed
++;

53 i‡(
ˇŒed
 < 10*
NEVENT
) {

54 
i
 = 0; i < 10; i++) {

55 
j
 = 
	`ønd_öt
(
NEVENT
);

56 
tv
.
tv_£c
 = 0;

57 
tv
.
tv_u£c
 = 
	`ønd_öt
(50000);

58 i‡(
tv
.
tv_u£c
 % 2)

59 
	`evtimî_add
(
ev
[
j
], &
tv
);

61 
	`evtimî_dñ
(
ev
[
j
]);

64 
	}
}

67 
	$maö
 (
¨gc
, **
¨gv
)

69 
timevÆ
 
tv
;

70 
i
;

73 
	`evít_öô
();

75 
i
 = 0; i < 
NEVENT
; i++) {

76 
ev
[
i
] = 
	`mÆloc
((
evít
));

79 
	`evtimî_£t
(
ev
[
i
], 
time_cb
,Év[i]);

80 
tv
.
tv_£c
 = 0;

81 
tv
.
tv_u£c
 = 
	`ønd_öt
(50000);

82 
	`evtimî_add
(
ev
[
i
], &
tv
);

85 
	`evít_di•©ch
();

87  (
ˇŒed
 < 
NEVENT
);

88 
	}
}

	@test/test-weof.c

5 #ifde‡
HAVE_CONFIG_H


6 
	~"c⁄fig.h
"

10 #ifde‡
WIN32


11 
	~<wösock2.h
>

13 
	~<sys/ty≥s.h
>

14 
	~<sys/°©.h
>

15 #ifde‡
HAVE_SYS_TIME_H


16 
	~<sys/time.h
>

18 #ifde‡
HAVE_SYS_SOCKET_H


19 
	~<sys/sockë.h
>

21 
	~<f˙é.h
>

22 
	~<°dlib.h
>

23 
	~<°dio.h
>

24 
	~<°rög.h
>

25 
	~<sig«l.h
>

26 #ifde‡
HAVE_UNISTD_H


27 
	~<uni°d.h
>

29 
	~<î∫o.h
>

31 
	~<evít.h
>

32 
	~<evutû.h
>

34 
	g∑ú
[2];

35 
	gã°_okay
 = 1;

36 
	gˇŒed
 = 0;

39 
	$wrôe_cb
(
fd
, 
evít
, *
¨g
)

41 c⁄° *
ã°
 = "test string";

42 
Àn
;

44 
Àn
 = 
	`£nd
(
fd
, 
ã°
, 
	`°æí
(test) + 1, 0);

46 
	`¥ötf
("%s: wrôê%d%s\n", 
__func__
,

47 
Àn
,Üen ? "" : " - means EOF");

49 i‡(
Àn
 > 0) {

50 i‡(!
ˇŒed
)

51 
	`evít_add
(
¨g
, 
NULL
);

52 
	`EVUTIL_CLOSESOCKET
(
∑ú
[0]);

53 } i‡(
ˇŒed
 == 1)

54 
ã°_okay
 = 0;

56 
ˇŒed
++;

57 
	}
}

60 
	$maö
 (
¨gc
, **
¨gv
)

62 
evít
 
ev
;

64 #i‚de‡
WIN32


65 i‡(
	`sig«l
(
SIGPIPE
, 
SIG_IGN
Ë=
SIG_ERR
)

69 i‡(
	`evutû_sockë∑ú
(
AF_UNIX
, 
SOCK_STREAM
, 0, 
∑ú
) == -1)

73 
	`evít_öô
();

76 
	`evít_£t
(&
ev
, 
∑ú
[1], 
EV_WRITE
, 
wrôe_cb
, &ev);

78 
	`evít_add
(&
ev
, 
NULL
);

80 
	`evít_di•©ch
();

82  (
ã°_okay
);

83 
	}
}

	@/usr/include/arpa/inet.h

19 #i‚de‡
_ARPA_INET_H


20 
	#_ARPA_INET_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<√töë/ö.h
>

26 #i‚de‡
__sockÀn_t_deföed


27 
__sockÀn_t
 
	tsockÀn_t
;

28 
	#__sockÀn_t_deföed


	)

31 
__BEGIN_DECLS


35 
ö_addr_t
 
	$öë_addr
 (
__c⁄°
 *
__˝
Ë
__THROW
;

38 
ö_addr_t
 
	$öë_ aof
 (
ö_addr
 
__ö
Ë
__THROW
;

42 
ö_addr
 
	$öë_makóddr
 (
ö_addr_t
 
__√t
, in_addr_à
__ho°
)

43 
__THROW
;

46 
ö_addr_t
 
	$öë_√tof
 (
ö_addr
 
__ö
Ë
__THROW
;

50 
ö_addr_t
 
	$öë_√tw‹k
 (
__c⁄°
 *
__˝
Ë
__THROW
;

54 *
	$öë_¡ﬂ
 (
ö_addr
 
__ö
Ë
__THROW
;

59 
	$öë_±⁄
 (
__af
, 
__c⁄°
 *
__ª°ri˘
 
__˝
,

60 *
__ª°ri˘
 
__buf
Ë
__THROW
;

65 
__c⁄°
 *
	$öë_¡›
 (
__af
, 
__c⁄°
 *
__ª°ri˘
 
__˝
,

66 *
__ª°ri˘
 
__buf
, 
sockÀn_t
 
__Àn
)

67 
__THROW
;

71 #ifde‡
__USE_MISC


74 
	$öë_©⁄
 (
__c⁄°
 *
__˝
, 
ö_addr
 *
__öp
Ë
__THROW
;

78 *
	$öë_√è
 (
ö_addr_t
 
__√t
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

83 *
	$öë_√t_¡›
 (
__af
, 
__c⁄°
 *
__˝
, 
__bôs
,

84 *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

89 
	$öë_√t_±⁄
 (
__af
, 
__c⁄°
 *
__˝
,

90 *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

95 
	$öë_nßp_addr
 (
__c⁄°
 *
__˝
,

96 *
__buf
, 
__Àn
Ë
__THROW
;

100 *
	$öë_nßp_¡ﬂ
 (
__Àn
, 
__c⁄°
 *
__˝
,

101 *
__buf
Ë
__THROW
;

104 
__END_DECLS


	@/usr/include/assert.h

24 #ifdef 
_ASSERT_H


26 #unde‡
_ASSERT_H


27 #unde‡
as£π


28 #unde‡
__ASSERT_VOID_CAST


30 #ifdef 
__USE_GNU


31 #unde‡
as£π_≥º‹


36 
	#_ASSERT_H
 1

	)

37 
	~<„©uªs.h
>

39 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,95)

40 
	#__ASSERT_VOID_CAST
 
°©ic_ˇ°
<>

	)

42 
	#__ASSERT_VOID_CAST
 ()

	)

50 #ifdef 
NDEBUG


52 
	#as£π
(
ex¥
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

60 #ifdef 
__USE_GNU


61 
	#as£π_≥º‹
(
î∫um
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

66 
__BEGIN_DECLS


69 
	$__as£π_Áû
 (
__c⁄°
 *
__as£πi⁄
, __c⁄° *
__fûe
,

70 
__löe
, 
__c⁄°
 *
__fun˘i⁄
)

71 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

74 
	$__as£π_≥º‹_Áû
 (
__î∫um
, 
__c⁄°
 *
__fûe
,

75 
__löe
,

76 
__c⁄°
 *
__fun˘i⁄
)

77 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

82 
	$__as£π
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
, 
__löe
)

83 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

86 
__END_DECLS


88 
	#as£π
(
ex¥
) \

89 ((
ex¥
) \

90 ? 
	`__ASSERT_VOID_CAST
 (0) \

91 : 
	`__as£π_Áû
 (
	`__STRING
(
ex¥
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

93 #ifdef 
__USE_GNU


94 
	#as£π_≥º‹
(
î∫um
) \

95 (!(
î∫um
) \

96 ? 
	`__ASSERT_VOID_CAST
 (0) \

97 : 
	`__as£π_≥º‹_Áû
 ((
î∫um
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

105 #i‡
deföed
 
__˝lu•lus
 ? 
	`__GNUC_PREREQ
 (2, 6) : __GNUC_PREREQ (2, 4)

106 
	#__ASSERT_FUNCTION
 
__PRETTY_FUNCTION__


	)

108 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

109 
	#__ASSERT_FUNCTION
 
__func__


	)

111 
	#__ASSERT_FUNCTION
 ((
__c⁄°
 *Ë0)

	)

	@/usr/include/ctype.h

24 #i‚def 
_CTYPE_H


25 
	#_CTYPE_H
 1

	)

27 
	~<„©uªs.h
>

28 
	~<bôs/ty≥s.h
>

30 
	g__BEGIN_DECLS


32 #i‚de‡
_ISbô


41 
	~<ídün.h
>

42 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


43 
	#_ISbô
(
bô
Ë(1 << (bô))

	)

45 
	#_ISbô
(
bô
Ë((bôË< 8 ? ((1 << (bô)Ë<< 8Ë: ((1 << (bô)Ë>> 8))

	)

50 
	m_ISuµî
 = 
_ISbô
 (0),

51 
	m_ISlowî
 = 
_ISbô
 (1),

52 
	m_ISÆpha
 = 
_ISbô
 (2),

53 
	m_ISdigô
 = 
_ISbô
 (3),

54 
	m_ISxdigô
 = 
_ISbô
 (4),

55 
	m_IS•a˚
 = 
_ISbô
 (5),

56 
	m_IS¥öt
 = 
_ISbô
 (6),

57 
	m_ISgøph
 = 
_ISbô
 (7),

58 
	m_ISbœnk
 = 
_ISbô
 (8),

59 
	m_IS˙ål
 = 
_ISbô
 (9),

60 
	m_ISpun˘
 = 
_ISbô
 (10),

61 
	m_ISÆnum
 = 
_ISbô
 (11)

81 
__c⁄°
 **
	$__˘y≥_b_loc
 ()

82 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

83 
__c⁄°
 
__öt32_t
 **
	$__˘y≥_tﬁowî_loc
 ()

84 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

85 
__c⁄°
 
__öt32_t
 **
	$__˘y≥_touµî_loc
 ()

86 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

88 
	#__is˘y≥
(
c
, 
ty≥
) \

89 ((*
	`__˘y≥_b_loc
 ())[(Ë(
c
)] & (Ë
ty≥
)

	)

91 
	#__ißscii
(
c
Ë(((cË& ~0x7fË=0Ë

	)

92 
	#__tﬂscii
(
c
Ë((cË& 0x7fË

	)

94 
	#__ex˘y≥
(
«me
Ë
	`«me
 (Ë
__THROW


	)

96 
__BEGIN_NAMESPACE_STD


102 
	`__ex˘y≥
 (
iß um
);

103 
	`__ex˘y≥
 (
ißÕha
);

104 
	`__ex˘y≥
 (
is˙ål
);

105 
	`__ex˘y≥
 (
isdigô
);

106 
	`__ex˘y≥
 (
i¶owî
);

107 
	`__ex˘y≥
 (
isgøph
);

108 
	`__ex˘y≥
 (
i•röt
);

109 
	`__ex˘y≥
 (
i•un˘
);

110 
	`__ex˘y≥
 (
is•a˚
);

111 
	`__ex˘y≥
 (
isuµî
);

112 
	`__ex˘y≥
 (
isxdigô
);

116 
	$tﬁowî
 (
__c
Ë
__THROW
;

119 
	$touµî
 (
__c
Ë
__THROW
;

121 
__END_NAMESPACE_STD


125 #ifdef 
__USE_ISOC99


126 
__BEGIN_NAMESPACE_C99


128 
	`__ex˘y≥
 (
isbœnk
);

130 
__END_NAMESPACE_C99


133 #ifde‡
__USE_GNU


135 
	$is˘y≥
 (
__c
, 
__mask
Ë
__THROW
;

138 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


142 
	$ißscii
 (
__c
Ë
__THROW
;

146 
	$tﬂscii
 (
__c
Ë
__THROW
;

150 
	`__ex˘y≥
 (
_touµî
);

151 
	`__ex˘y≥
 (
_tﬁowî
);

155 
	#__tobody
(
c
, 
f
, 
a
, 
¨gs
) \

156 (
__exãnsi⁄__
 \

157 ({ 
__ªs
; \

158 i‡( (
c
) > 1) \

160 i‡(
	`__buûtö_c⁄°™t_p
 (
c
)) \

162 
__c
 = (
c
); \

163 
__ªs
 = 
__c
 < -128 || __¯> 255 ? __¯: (
a
)[__c]; \

166 
__ªs
 = 
f
 
¨gs
; \

169 
__ªs
 = (
a
)[(Ë(
c
)]; \

170 
__ªs
; 
	}
}))

	)

172 #i‡!
deföed
 
__NO_CTYPE
 && !deföed 
__˝lu•lus


173 
	#iß um
(
c
Ë
	`__is˘y≥
((c), 
_ISÆnum
)

	)

174 
	#ißÕha
(
c
Ë
	`__is˘y≥
((c), 
_ISÆpha
)

	)

175 
	#is˙ål
(
c
Ë
	`__is˘y≥
((c), 
_IS˙ål
)

	)

176 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISdigô
)

	)

177 
	#i¶owî
(
c
Ë
	`__is˘y≥
((c), 
_ISlowî
)

	)

178 
	#isgøph
(
c
Ë
	`__is˘y≥
((c), 
_ISgøph
)

	)

179 
	#i•röt
(
c
Ë
	`__is˘y≥
((c), 
_IS¥öt
)

	)

180 
	#i•un˘
(
c
Ë
	`__is˘y≥
((c), 
_ISpun˘
)

	)

181 
	#is•a˚
(
c
Ë
	`__is˘y≥
((c), 
_IS•a˚
)

	)

182 
	#isuµî
(
c
Ë
	`__is˘y≥
((c), 
_ISuµî
)

	)

183 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISxdigô
)

	)

185 #ifde‡
__USE_ISOC99


186 
	#isbœnk
(
c
Ë
	`__is˘y≥
((c), 
_ISbœnk
)

	)

189 #ifde‡
__USE_EXTERN_INLINES


190 
__exã∫_ölöe
 

191 
__NTH
 (
	$tﬁowî
 (
__c
))

193  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_tﬁowî_loc
 ())[__c] : __c;

194 
	}
}

196 
__exã∫_ölöe
 

197 
__NTH
 (
	$touµî
 (
__c
))

199  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_touµî_loc
 ())[__c] : __c;

200 
	}
}

203 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


204 
	#tﬁowî
(
c
Ë
	`__tobody
 (c, 
tﬁowî
, *
	`__˘y≥_tﬁowî_loc
 (), (c))

	)

205 
	#touµî
(
c
Ë
	`__tobody
 (c, 
touµî
, *
	`__˘y≥_touµî_loc
 (), (c))

	)

208 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


209 
	#ißscii
(
c
Ë
	`__ißscii
 (c)

	)

210 
	#tﬂscii
(
c
Ë
	`__tﬂscii
 (c)

	)

212 
	#_tﬁowî
(
c
Ë((Ë(*
	`__˘y≥_tﬁowî_loc
 ())[(Ë(c)])

	)

213 
	#_touµî
(
c
Ë((Ë(*
	`__˘y≥_touµî_loc
 ())[(Ë(c)])

	)

219 #ifde‡
__USE_XOPEN2K8


233 
	~<xloˇÀ.h
>

237 
	#__is˘y≥_l
(
c
, 
ty≥
, 
loˇÀ
) \

238 ((
loˇÀ
)->
__˘y≥_b
[(Ë(
c
)] & (Ë
ty≥
)

	)

240 
	#__ex˘y≥_l
(
«me
) \

241 
	`«me
 (, 
__loˇÀ_t
Ë
__THROW


	)

247 
__ex˘y≥_l
 (
iß um_l
);

248 
__ex˘y≥_l
 (
ißÕha_l
);

249 
__ex˘y≥_l
 (
is˙ål_l
);

250 
__ex˘y≥_l
 (
isdigô_l
);

251 
__ex˘y≥_l
 (
i¶owî_l
);

252 
__ex˘y≥_l
 (
isgøph_l
);

253 
__ex˘y≥_l
 (
i•röt_l
);

254 
__ex˘y≥_l
 (
i•un˘_l
);

255 
__ex˘y≥_l
 (
is•a˚_l
);

256 
__ex˘y≥_l
 (
isuµî_l
);

257 
__ex˘y≥_l
 (
isxdigô_l
);

259 
__ex˘y≥_l
 (
isbœnk_l
);

263 
	$__tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

264 
	$tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

267 
	$__touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

268 
	$touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

270 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


271 
	#__tﬁowî_l
(
c
, 
loˇÀ
) \

272 
	`__tobody
 (
c
, 
__tﬁowî_l
, (
loˇÀ
)->
__˘y≥_tﬁowî
, (c,ÜoˇÀ))

	)

273 
	#__touµî_l
(
c
, 
loˇÀ
) \

274 
	`__tobody
 (
c
, 
__touµî_l
, (
loˇÀ
)->
__˘y≥_touµî
, (c,ÜoˇÀ))

	)

275 
	#tﬁowî_l
(
c
, 
loˇÀ
Ë
	`__tﬁowî_l
 ((c), (loˇÀ))

	)

276 
	#touµî_l
(
c
, 
loˇÀ
Ë
	`__touµî_l
 ((c), (loˇÀ))

	)

280 #i‚de‡
__NO_CTYPE


281 
	#__iß um_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆnum
, (l))

	)

282 
	#__ißÕha_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆpha
, (l))

	)

283 
	#__is˙ål_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS˙ål
, (l))

	)

284 
	#__isdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISdigô
, (l))

	)

285 
	#__i¶owî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISlowî
, (l))

	)

286 
	#__isgøph_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISgøph
, (l))

	)

287 
	#__i•röt_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS¥öt
, (l))

	)

288 
	#__i•un˘_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISpun˘
, (l))

	)

289 
	#__is•a˚_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS•a˚
, (l))

	)

290 
	#__isuµî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISuµî
, (l))

	)

291 
	#__isxdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISxdigô
, (l))

	)

293 
	#__isbœnk_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISbœnk
, (l))

	)

295 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


296 
	#__ißscii_l
(
c
,
l
Ë(÷), 
	`__ißscii
 (c))

	)

297 
	#__tﬂscii_l
(
c
,
l
Ë(÷), 
	`__tﬂscii
 (c))

	)

300 
	#iß um_l
(
c
,
l
Ë
	`__iß um_l
 ((c), (l))

	)

301 
	#ißÕha_l
(
c
,
l
Ë
	`__ißÕha_l
 ((c), (l))

	)

302 
	#is˙ål_l
(
c
,
l
Ë
	`__is˙ål_l
 ((c), (l))

	)

303 
	#isdigô_l
(
c
,
l
Ë
	`__isdigô_l
 ((c), (l))

	)

304 
	#i¶owî_l
(
c
,
l
Ë
	`__i¶owî_l
 ((c), (l))

	)

305 
	#isgøph_l
(
c
,
l
Ë
	`__isgøph_l
 ((c), (l))

	)

306 
	#i•röt_l
(
c
,
l
Ë
	`__i•röt_l
 ((c), (l))

	)

307 
	#i•un˘_l
(
c
,
l
Ë
	`__i•un˘_l
 ((c), (l))

	)

308 
	#is•a˚_l
(
c
,
l
Ë
	`__is•a˚_l
 ((c), (l))

	)

309 
	#isuµî_l
(
c
,
l
Ë
	`__isuµî_l
 ((c), (l))

	)

310 
	#isxdigô_l
(
c
,
l
Ë
	`__isxdigô_l
 ((c), (l))

	)

312 
	#isbœnk_l
(
c
,
l
Ë
	`__isbœnk_l
 ((c), (l))

	)

314 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


315 
	#ißscii_l
(
c
,
l
Ë
	`__ißscii_l
 ((c), (l))

	)

316 
	#tﬂscii_l
(
c
,
l
Ë
	`__tﬂscii_l
 ((c), (l))

	)

323 
__END_DECLS


	@/usr/include/errno.h

23 #i‚def 
_ERRNO_H


27 #i‚def 
__√ed_Em©h


28 
	#_ERRNO_H
 1

	)

29 
	~<„©uªs.h
>

32 
	g__BEGIN_DECLS


36 
	~<bôs/î∫o.h
>

37 #unde‡
__√ed_Em©h


39 #ifdef 
_ERRNO_H


46 #i‚def 
î∫o


47 
î∫o
;

50 #ifde‡
__USE_GNU


55 *
¥ogøm_övoˇti⁄_«me
, *
¥ogøm_övoˇti⁄_sh‹t_«me
;

59 
	g__END_DECLS


67 #i‡
deföed
 
__USE_GNU
 || deföed 
__√ed_îr‹_t


68 #i‚de‡
__îr‹_t_deföed


69 
	tîr‹_t
;

70 
	#__îr‹_t_deföed
 1

	)

72 #unde‡
__√ed_îr‹_t


	@/usr/include/event-config.h

6 #i‚de‡
_EVENT_CONFIG_H_


7 
	#_EVENT_CONFIG_H_


	)

12 
	#_EVENT_DNS_USE_CPU_CLOCK_FOR_ID
 1

	)

18 
	#_EVENT_HAVE_CLOCK_GETTIME
 1

	)

24 
	#_EVENT_HAVE_DLFCN_H
 1

	)

27 
	#_EVENT_HAVE_EPOLL
 1

	)

30 
	#_EVENT_HAVE_EPOLL_CTL
 1

	)

36 
	#_EVENT_HAVE_FCNTL
 1

	)

39 
	#_EVENT_HAVE_FCNTL_H
 1

	)

42 
	#_EVENT_HAVE_FD_MASK
 1

	)

45 
	#_EVENT_HAVE_GETADDRINFO
 1

	)

48 
	#_EVENT_HAVE_GETEGID
 1

	)

51 
	#_EVENT_HAVE_GETEUID
 1

	)

54 
	#_EVENT_HAVE_GETNAMEINFO
 1

	)

57 
	#_EVENT_HAVE_GETTIMEOFDAY
 1

	)

60 
	#_EVENT_HAVE_INET_NTOP
 1

	)

63 
	#_EVENT_HAVE_INTTYPES_H
 1

	)

72 
	#_EVENT_HAVE_LIBNSL
 1

	)

75 
	#_EVENT_HAVE_LIBRESOLV
 1

	)

78 
	#_EVENT_HAVE_LIBRT
 1

	)

84 
	#_EVENT_HAVE_MEMORY_H
 1

	)

90 
	#_EVENT_HAVE_POLL
 1

	)

93 
	#_EVENT_HAVE_POLL_H
 1

	)

102 
	#_EVENT_HAVE_SELECT
 1

	)

105 
	#_EVENT_HAVE_SETFD
 1

	)

108 
	#_EVENT_HAVE_SIGACTION
 1

	)

111 
	#_EVENT_HAVE_SIGNAL
 1

	)

114 
	#_EVENT_HAVE_SIGNAL_H
 1

	)

117 
	#_EVENT_HAVE_STDARG_H
 1

	)

120 
	#_EVENT_HAVE_STDINT_H
 1

	)

123 
	#_EVENT_HAVE_STDLIB_H
 1

	)

126 
	#_EVENT_HAVE_STRINGS_H
 1

	)

129 
	#_EVENT_HAVE_STRING_H
 1

	)

135 
	#_EVENT_HAVE_STRSEP
 1

	)

138 
	#_EVENT_HAVE_STRTOK_R
 1

	)

141 
	#_EVENT_HAVE_STRTOLL
 1

	)

144 
	#_EVENT_HAVE_STRUCT_IN6_ADDR
 1

	)

150 
	#_EVENT_HAVE_SYS_EPOLL_H
 1

	)

156 
	#_EVENT_HAVE_SYS_IOCTL_H
 1

	)

159 
	#_EVENT_HAVE_SYS_PARAM_H
 1

	)

162 
	#_EVENT_HAVE_SYS_QUEUE_H
 1

	)

165 
	#_EVENT_HAVE_SYS_SELECT_H
 1

	)

168 
	#_EVENT_HAVE_SYS_SOCKET_H
 1

	)

171 
	#_EVENT_HAVE_SYS_STAT_H
 1

	)

174 
	#_EVENT_HAVE_SYS_TIME_H
 1

	)

177 
	#_EVENT_HAVE_SYS_TYPES_H
 1

	)

180 
	#_EVENT_HAVE_TAILQFOREACH
 1

	)

183 
	#_EVENT_HAVE_TIMERADD
 1

	)

186 
	#_EVENT_HAVE_TIMERCLEAR
 1

	)

189 
	#_EVENT_HAVE_TIMERCMP
 1

	)

192 
	#_EVENT_HAVE_TIMERISSET
 1

	)

195 
	#_EVENT_HAVE_UINT16_T
 1

	)

198 
	#_EVENT_HAVE_UINT32_T
 1

	)

201 
	#_EVENT_HAVE_UINT64_T
 1

	)

204 
	#_EVENT_HAVE_UINT8_T
 1

	)

207 
	#_EVENT_HAVE_UNISTD_H
 1

	)

210 
	#_EVENT_HAVE_VASPRINTF
 1

	)

216 
	#_EVENT_PACKAGE
 "libevít"

	)

219 
	#_EVENT_PACKAGE_BUGREPORT
 ""

	)

222 
	#_EVENT_PACKAGE_NAME
 ""

	)

225 
	#_EVENT_PACKAGE_STRING
 ""

	)

228 
	#_EVENT_PACKAGE_TARNAME
 ""

	)

231 
	#_EVENT_PACKAGE_VERSION
 ""

	)

234 
	#_EVENT_SIZEOF_INT
 4

	)

237 
	#_EVENT_SIZEOF_LONG
 8

	)

240 
	#_EVENT_SIZEOF_LONG_LONG
 8

	)

243 
	#_EVENT_SIZEOF_SHORT
 2

	)

246 
	#_EVENT_STDC_HEADERS
 1

	)

249 
	#_EVENT_TIME_WITH_SYS_TIME
 1

	)

252 
	#_EVENT_VERSION
 "1.4.13-°abÀ"

	)

262 #i‚de‡
_EVENT___˝lu•lus


	@/usr/include/fcntl.h

24 #i‚def 
_FCNTL_H


25 
	#_FCNTL_H
 1

	)

27 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


34 
	~<bôs/f˙é.h
>

37 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


38 
	~<bôs/ty≥s.h
>

39 
	#__√ed_time•ec


	)

40 
	~<time.h
>

41 
	~<bôs/°©.h
>

43 
	#S_IFMT
 
__S_IFMT


	)

44 
	#S_IFDIR
 
__S_IFDIR


	)

45 
	#S_IFCHR
 
__S_IFCHR


	)

46 
	#S_IFBLK
 
__S_IFBLK


	)

47 
	#S_IFREG
 
__S_IFREG


	)

48 #ifde‡
__S_IFIFO


49 
	#S_IFIFO
 
__S_IFIFO


	)

51 #ifde‡
__S_IFLNK


52 
	#S_IFLNK
 
__S_IFLNK


	)

54 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
Ë&& deföed 
__S_IFSOCK


55 
	#S_IFSOCK
 
__S_IFSOCK


	)

60 
	#S_ISUID
 
__S_ISUID


	)

61 
	#S_ISGID
 
__S_ISGID


	)

63 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


65 
	#S_ISVTX
 
__S_ISVTX


	)

68 
	#S_IRUSR
 
__S_IREAD


	)

69 
	#S_IWUSR
 
__S_IWRITE


	)

70 
	#S_IXUSR
 
__S_IEXEC


	)

72 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

74 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

75 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

76 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

78 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

80 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

81 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

82 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

84 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

87 #ifdef 
__USE_MISC


88 #i‚de‡
R_OK


91 
	#R_OK
 4

	)

92 
	#W_OK
 2

	)

93 
	#X_OK
 1

	)

94 
	#F_OK
 0

	)

99 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


100 
	#SEEK_SET
 0

	)

101 
	#SEEK_CUR
 1

	)

102 
	#SEEK_END
 2

	)

105 #ifde‡
__USE_ATFILE


106 
	#AT_FDCWD
 -100

	)

109 
	#AT_SYMLINK_NOFOLLOW
 0x100

	)

110 
	#AT_REMOVEDIR
 0x200

	)

112 
	#AT_SYMLINK_FOLLOW
 0x400

	)

113 
	#AT_EACCESS
 0x200

	)

122 
f˙é
 (
__fd
, 
__cmd
, ...);

130 #i‚de‡
__USE_FILE_OFFSET64


131 
	$›í
 (
__c⁄°
 *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

133 #ifde‡
__REDIRECT


134 
	`__REDIRECT
 (
›í
, (
__c⁄°
 *
__fûe
, 
__oÊag
, ...), 
›í64
)

135 
	`__n⁄nuŒ
 ((1));

137 
	#›í
 
›í64


	)

140 #ifde‡
__USE_LARGEFILE64


141 
	$›í64
 (
__c⁄°
 *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

144 #ifde‡
__USE_ATFILE


154 #i‚de‡
__USE_FILE_OFFSET64


155 
	$›í©
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__oÊag
, ...)

156 
	`__n⁄nuŒ
 ((2));

158 #ifde‡
__REDIRECT


159 
	`__REDIRECT
 (
›í©
, (
__fd
, 
__c⁄°
 *
__fûe
, 
__oÊag
,

160 ...), 
›í©64
Ë
	`__n⁄nuŒ
 ((2));

162 
	#›í©
 
›í©64


	)

165 #ifde‡
__USE_LARGEFILE64


166 
	$›í©64
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__oÊag
, ...)

167 
	`__n⁄nuŒ
 ((2));

176 #i‚de‡
__USE_FILE_OFFSET64


177 
	$¸ót
 (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

179 #ifde‡
__REDIRECT


180 
	`__REDIRECT
 (
¸ót
, (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
),

181 
¸ót64
Ë
	`__n⁄nuŒ
 ((1));

183 
	#¸ót
 
¸ót64


	)

186 #ifde‡
__USE_LARGEFILE64


187 
	$¸ót64
 (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

190 #i‡!
deföed
 
F_LOCK
 && (deföed 
__USE_MISC
 || (deföed 
__USE_XOPEN_EXTENDED
 \

191 && !
deföed
 
__USE_POSIX
))

200 
	#F_ULOCK
 0

	)

201 
	#F_LOCK
 1

	)

202 
	#F_TLOCK
 2

	)

203 
	#F_TEST
 3

	)

205 #i‚de‡
__USE_FILE_OFFSET64


206 
	`lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
);

208 #ifde‡
__REDIRECT


209 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
), 
lockf64
);

211 
	#lockf
 
lockf64


	)

214 #ifde‡
__USE_LARGEFILE64


215 
	`lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
);

219 #ifde‡
__USE_XOPEN2K


222 #i‚de‡
__USE_FILE_OFFSET64


223 
	$posix_Ádvi£
 (
__fd
, 
__off_t
 
__off£t
, __off_à
__Àn
,

224 
__advi£
Ë
__THROW
;

226 #ifde‡
__REDIRECT_NTH


227 
	`__REDIRECT_NTH
 (
posix_Ádvi£
, (
__fd
, 
__off64_t
 
__off£t
,

228 
__off64_t
 
__Àn
, 
__advi£
),

229 
posix_Ádvi£64
);

231 
	#posix_Ádvi£
 
posix_Ádvi£64


	)

234 #ifde‡
__USE_LARGEFILE64


235 
	$posix_Ádvi£64
 (
__fd
, 
__off64_t
 
__off£t
, __off64_à
__Àn
,

236 
__advi£
Ë
__THROW
;

244 #i‚de‡
__USE_FILE_OFFSET64


245 
	`posix_ÁŒoˇã
 (
__fd
, 
__off_t
 
__off£t
, __off_à
__Àn
);

247 #ifde‡
__REDIRECT


248 
	`__REDIRECT
 (
posix_ÁŒoˇã
, (
__fd
, 
__off64_t
 
__off£t
,

249 
__off64_t
 
__Àn
),

250 
posix_ÁŒoˇã64
);

252 
	#posix_ÁŒoˇã
 
posix_ÁŒoˇã64


	)

255 #ifde‡
__USE_LARGEFILE64


256 
	`posix_ÁŒoˇã64
 (
__fd
, 
__off64_t
 
__off£t
, __off64_à
__Àn
);

262 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe
 \

263 && 
deföed
 
__va_¨g_∑ck_Àn


264 
	~<bôs/f˙é2.h
>

267 
__END_DECLS


	@/usr/include/inttypes.h

23 #i‚de‡
_INTTYPES_H


24 
	#_INTTYPES_H
 1

	)

26 
	~<„©uªs.h
>

28 
	~<°döt.h
>

31 #i‚de‡
____gwch¨_t_deföed


32 #ifde‡
__˝lu•lus


33 
	#__gwch¨_t
 
wch¨_t


	)

34 #ñi‡
deföed
 
__WCHAR_TYPE__


35 
__WCHAR_TYPE__
 
	t__gwch¨_t
;

37 
	#__√ed_wch¨_t


	)

38 
	~<°ddef.h
>

39 
wch¨_t
 
	t__gwch¨_t
;

41 
	#____gwch¨_t_deföed
 1

	)

47 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_FORMAT_MACROS


49 #i‡
__WORDSIZE
 == 64

50 
	#__PRI64_PREFIX
 "l"

	)

51 
	#__PRIPTR_PREFIX
 "l"

	)

53 
	#__PRI64_PREFIX
 "Œ"

	)

54 
	#__PRIPTR_PREFIX


	)

60 
	#PRId8
 "d"

	)

61 
	#PRId16
 "d"

	)

62 
	#PRId32
 "d"

	)

63 
	#PRId64
 
__PRI64_PREFIX
 "d"

	)

65 
	#PRIdLEAST8
 "d"

	)

66 
	#PRIdLEAST16
 "d"

	)

67 
	#PRIdLEAST32
 "d"

	)

68 
	#PRIdLEAST64
 
__PRI64_PREFIX
 "d"

	)

70 
	#PRIdFAST8
 "d"

	)

71 
	#PRIdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

72 
	#PRIdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

73 
	#PRIdFAST64
 
__PRI64_PREFIX
 "d"

	)

76 
	#PRIi8
 "i"

	)

77 
	#PRIi16
 "i"

	)

78 
	#PRIi32
 "i"

	)

79 
	#PRIi64
 
__PRI64_PREFIX
 "i"

	)

81 
	#PRIiLEAST8
 "i"

	)

82 
	#PRIiLEAST16
 "i"

	)

83 
	#PRIiLEAST32
 "i"

	)

84 
	#PRIiLEAST64
 
__PRI64_PREFIX
 "i"

	)

86 
	#PRIiFAST8
 "i"

	)

87 
	#PRIiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

88 
	#PRIiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

89 
	#PRIiFAST64
 
__PRI64_PREFIX
 "i"

	)

92 
	#PRIo8
 "o"

	)

93 
	#PRIo16
 "o"

	)

94 
	#PRIo32
 "o"

	)

95 
	#PRIo64
 
__PRI64_PREFIX
 "o"

	)

97 
	#PRIoLEAST8
 "o"

	)

98 
	#PRIoLEAST16
 "o"

	)

99 
	#PRIoLEAST32
 "o"

	)

100 
	#PRIoLEAST64
 
__PRI64_PREFIX
 "o"

	)

102 
	#PRIoFAST8
 "o"

	)

103 
	#PRIoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

104 
	#PRIoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

105 
	#PRIoFAST64
 
__PRI64_PREFIX
 "o"

	)

108 
	#PRIu8
 "u"

	)

109 
	#PRIu16
 "u"

	)

110 
	#PRIu32
 "u"

	)

111 
	#PRIu64
 
__PRI64_PREFIX
 "u"

	)

113 
	#PRIuLEAST8
 "u"

	)

114 
	#PRIuLEAST16
 "u"

	)

115 
	#PRIuLEAST32
 "u"

	)

116 
	#PRIuLEAST64
 
__PRI64_PREFIX
 "u"

	)

118 
	#PRIuFAST8
 "u"

	)

119 
	#PRIuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

120 
	#PRIuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

121 
	#PRIuFAST64
 
__PRI64_PREFIX
 "u"

	)

124 
	#PRIx8
 "x"

	)

125 
	#PRIx16
 "x"

	)

126 
	#PRIx32
 "x"

	)

127 
	#PRIx64
 
__PRI64_PREFIX
 "x"

	)

129 
	#PRIxLEAST8
 "x"

	)

130 
	#PRIxLEAST16
 "x"

	)

131 
	#PRIxLEAST32
 "x"

	)

132 
	#PRIxLEAST64
 
__PRI64_PREFIX
 "x"

	)

134 
	#PRIxFAST8
 "x"

	)

135 
	#PRIxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

136 
	#PRIxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

137 
	#PRIxFAST64
 
__PRI64_PREFIX
 "x"

	)

140 
	#PRIX8
 "X"

	)

141 
	#PRIX16
 "X"

	)

142 
	#PRIX32
 "X"

	)

143 
	#PRIX64
 
__PRI64_PREFIX
 "X"

	)

145 
	#PRIXLEAST8
 "X"

	)

146 
	#PRIXLEAST16
 "X"

	)

147 
	#PRIXLEAST32
 "X"

	)

148 
	#PRIXLEAST64
 
__PRI64_PREFIX
 "X"

	)

150 
	#PRIXFAST8
 "X"

	)

151 
	#PRIXFAST16
 
__PRIPTR_PREFIX
 "X"

	)

152 
	#PRIXFAST32
 
__PRIPTR_PREFIX
 "X"

	)

153 
	#PRIXFAST64
 
__PRI64_PREFIX
 "X"

	)

157 
	#PRIdMAX
 
__PRI64_PREFIX
 "d"

	)

158 
	#PRIiMAX
 
__PRI64_PREFIX
 "i"

	)

159 
	#PRIoMAX
 
__PRI64_PREFIX
 "o"

	)

160 
	#PRIuMAX
 
__PRI64_PREFIX
 "u"

	)

161 
	#PRIxMAX
 
__PRI64_PREFIX
 "x"

	)

162 
	#PRIXMAX
 
__PRI64_PREFIX
 "X"

	)

166 
	#PRIdPTR
 
__PRIPTR_PREFIX
 "d"

	)

167 
	#PRIiPTR
 
__PRIPTR_PREFIX
 "i"

	)

168 
	#PRIoPTR
 
__PRIPTR_PREFIX
 "o"

	)

169 
	#PRIuPTR
 
__PRIPTR_PREFIX
 "u"

	)

170 
	#PRIxPTR
 
__PRIPTR_PREFIX
 "x"

	)

171 
	#PRIXPTR
 
__PRIPTR_PREFIX
 "X"

	)

177 
	#SCNd8
 "hhd"

	)

178 
	#SCNd16
 "hd"

	)

179 
	#SCNd32
 "d"

	)

180 
	#SCNd64
 
__PRI64_PREFIX
 "d"

	)

182 
	#SCNdLEAST8
 "hhd"

	)

183 
	#SCNdLEAST16
 "hd"

	)

184 
	#SCNdLEAST32
 "d"

	)

185 
	#SCNdLEAST64
 
__PRI64_PREFIX
 "d"

	)

187 
	#SCNdFAST8
 "hhd"

	)

188 
	#SCNdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

189 
	#SCNdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

190 
	#SCNdFAST64
 
__PRI64_PREFIX
 "d"

	)

193 
	#SCNi8
 "hhi"

	)

194 
	#SCNi16
 "hi"

	)

195 
	#SCNi32
 "i"

	)

196 
	#SCNi64
 
__PRI64_PREFIX
 "i"

	)

198 
	#SCNiLEAST8
 "hhi"

	)

199 
	#SCNiLEAST16
 "hi"

	)

200 
	#SCNiLEAST32
 "i"

	)

201 
	#SCNiLEAST64
 
__PRI64_PREFIX
 "i"

	)

203 
	#SCNiFAST8
 "hhi"

	)

204 
	#SCNiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

205 
	#SCNiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

206 
	#SCNiFAST64
 
__PRI64_PREFIX
 "i"

	)

209 
	#SCNu8
 "hhu"

	)

210 
	#SCNu16
 "hu"

	)

211 
	#SCNu32
 "u"

	)

212 
	#SCNu64
 
__PRI64_PREFIX
 "u"

	)

214 
	#SCNuLEAST8
 "hhu"

	)

215 
	#SCNuLEAST16
 "hu"

	)

216 
	#SCNuLEAST32
 "u"

	)

217 
	#SCNuLEAST64
 
__PRI64_PREFIX
 "u"

	)

219 
	#SCNuFAST8
 "hhu"

	)

220 
	#SCNuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

221 
	#SCNuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

222 
	#SCNuFAST64
 
__PRI64_PREFIX
 "u"

	)

225 
	#SCNo8
 "hho"

	)

226 
	#SCNo16
 "ho"

	)

227 
	#SCNo32
 "o"

	)

228 
	#SCNo64
 
__PRI64_PREFIX
 "o"

	)

230 
	#SCNoLEAST8
 "hho"

	)

231 
	#SCNoLEAST16
 "ho"

	)

232 
	#SCNoLEAST32
 "o"

	)

233 
	#SCNoLEAST64
 
__PRI64_PREFIX
 "o"

	)

235 
	#SCNoFAST8
 "hho"

	)

236 
	#SCNoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

237 
	#SCNoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

238 
	#SCNoFAST64
 
__PRI64_PREFIX
 "o"

	)

241 
	#SCNx8
 "hhx"

	)

242 
	#SCNx16
 "hx"

	)

243 
	#SCNx32
 "x"

	)

244 
	#SCNx64
 
__PRI64_PREFIX
 "x"

	)

246 
	#SCNxLEAST8
 "hhx"

	)

247 
	#SCNxLEAST16
 "hx"

	)

248 
	#SCNxLEAST32
 "x"

	)

249 
	#SCNxLEAST64
 
__PRI64_PREFIX
 "x"

	)

251 
	#SCNxFAST8
 "hhx"

	)

252 
	#SCNxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

253 
	#SCNxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

254 
	#SCNxFAST64
 
__PRI64_PREFIX
 "x"

	)

258 
	#SCNdMAX
 
__PRI64_PREFIX
 "d"

	)

259 
	#SCNiMAX
 
__PRI64_PREFIX
 "i"

	)

260 
	#SCNoMAX
 
__PRI64_PREFIX
 "o"

	)

261 
	#SCNuMAX
 
__PRI64_PREFIX
 "u"

	)

262 
	#SCNxMAX
 
__PRI64_PREFIX
 "x"

	)

265 
	#SCNdPTR
 
__PRIPTR_PREFIX
 "d"

	)

266 
	#SCNiPTR
 
__PRIPTR_PREFIX
 "i"

	)

267 
	#SCNoPTR
 
__PRIPTR_PREFIX
 "o"

	)

268 
	#SCNuPTR
 
__PRIPTR_PREFIX
 "u"

	)

269 
	#SCNxPTR
 
__PRIPTR_PREFIX
 "x"

	)

274 
	g__BEGIN_DECLS


276 #i‡
__WORDSIZE
 == 64

281 
	mquŸ
;

282 
	mªm
;

283 } 
	timaxdiv_t
;

290 
	mquŸ
;

291 
	mªm
;

292 } 
	timaxdiv_t
;

298 
ötmax_t
 
	$imaxabs
 (
ötmax_t
 
__n
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

301 
imaxdiv_t
 
	$imaxdiv
 (
ötmax_t
 
__numî
, i¡max_à
__díom
)

302 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

305 
ötmax_t
 
	$°πoimax
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

306 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

309 
uötmax_t
 
	$°πoumax
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

310 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

313 
ötmax_t
 
	$wc°oimax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

314 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

315 
__THROW
;

318 
uötmax_t
 
	$wc°oumax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

319 
__gwch¨_t
 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
)

320 
__THROW
;

322 #ifde‡
__USE_EXTERN_INLINES


324 #i‡
__WORDSIZE
 == 64

326 
	$__°πﬁ_öã∫Æ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

327 **
__ª°ri˘
 
__íd±r
,

328 
__ba£
, 
__group
)

329 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

331 
__exã∫_ölöe
 
ötmax_t


332 
	`__NTH
 (
	$°πoimax
 (
__c⁄°
 *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

333 
ba£
))

335  
	`__°πﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

336 
	}
}

338 
	$__°πoul_öã∫Æ
 (
__c⁄°
 *

339 
__ª°ri˘
 
__≈å
,

340 ** 
__ª°ri˘
 
__íd±r
,

341 
__ba£
, 
__group
)

342 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

344 
__exã∫_ölöe
 
uötmax_t


345 
	`__NTH
 (
	$°πoumax
 (
__c⁄°
 *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

346 
ba£
))

348  
	`__°πoul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

349 
	}
}

351 
	$__wc°ﬁ_öã∫Æ
 (
__c⁄°
 
__gwch¨_t
 * 
__ª°ri˘
 
__≈å
,

352 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

353 
__ba£
, 
__group
)

354 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

356 
__exã∫_ölöe
 
ötmax_t


357 
	`__NTH
 (
	$wc°oimax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

358 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

360  
	`__wc°ﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

361 
	}
}

363 
	$__wc°oul_öã∫Æ
 (
__c⁄°
 
__gwch¨_t
 *

364 
__ª°ri˘
 
__≈å
,

365 
__gwch¨_t
 **

366 
__ª°ri˘
 
__íd±r
,

367 
__ba£
, 
__group
)

368 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

370 
__exã∫_ölöe
 
uötmax_t


371 
	`__NTH
 (
	$wc°oumax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

372 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

374  
	`__wc°oul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

375 
	}
}

379 
__exãnsi⁄__


380 
	$__°πﬁl_öã∫Æ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

381 **
__ª°ri˘
 
__íd±r
,

382 
__ba£
, 
__group
)

383 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

385 
__exã∫_ölöe
 
ötmax_t


386 
	`__NTH
 (
	$°πoimax
 (
__c⁄°
 *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

387 
ba£
))

389  
	`__°πﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

390 
	}
}

392 
__exãnsi⁄__


393 
	$__°πouŒ_öã∫Æ
 (
__c⁄°
 *

394 
__ª°ri˘
 
__≈å
,

396 
__ª°ri˘
 
__íd±r
,

397 
__ba£
,

398 
__group
)

399 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

401 
__exã∫_ölöe
 
uötmax_t


402 
	`__NTH
 (
	$°πoumax
 (
__c⁄°
 *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

403 
ba£
))

405  
	`__°πouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

406 
	}
}

408 
__exãnsi⁄__


409 
	$__wc°ﬁl_öã∫Æ
 (
__c⁄°
 
__gwch¨_t
 *

410 
__ª°ri˘
 
__≈å
,

411 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

412 
__ba£
, 
__group
)

413 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

415 
__exã∫_ölöe
 
ötmax_t


416 
	`__NTH
 (
	$wc°oimax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

417 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

419  
	`__wc°ﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

420 
	}
}

423 
__exãnsi⁄__


424 
	$__wc°ouŒ_öã∫Æ
 (
__c⁄°
 
__gwch¨_t
 *

425 
__ª°ri˘
 
__≈å
,

426 
__gwch¨_t
 **

427 
__ª°ri˘
 
__íd±r
,

428 
__ba£
,

429 
__group
)

430 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

432 
__exã∫_ölöe
 
uötmax_t


433 
	`__NTH
 (
	$wc°oumax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

434 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

436  
	`__wc°ouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

437 
	}
}

442 
	g__END_DECLS


	@/usr/include/limits.h

24 #i‚de‡
_LIBC_LIMITS_H_


25 
	#_LIBC_LIMITS_H_
 1

	)

27 
	~<„©uªs.h
>

33 
	#MB_LEN_MAX
 16

	)

38 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

43 #i‚de‡
_LIMITS_H


44 
	#_LIMITS_H
 1

	)

46 
	~<bôs/w‹dsize.h
>

55 
	#CHAR_BIT
 8

	)

58 
	#SCHAR_MIN
 (-128)

	)

59 
	#SCHAR_MAX
 127

	)

62 
	#UCHAR_MAX
 255

	)

65 #ifde‡
__CHAR_UNSIGNED__


66 
	#CHAR_MIN
 0

	)

67 
	#CHAR_MAX
 
UCHAR_MAX


	)

69 
	#CHAR_MIN
 
SCHAR_MIN


	)

70 
	#CHAR_MAX
 
SCHAR_MAX


	)

74 
	#SHRT_MIN
 (-32768)

	)

75 
	#SHRT_MAX
 32767

	)

78 
	#USHRT_MAX
 65535

	)

81 
	#INT_MIN
 (-
INT_MAX
 - 1)

	)

82 
	#INT_MAX
 2147483647

	)

85 
	#UINT_MAX
 4294967295U

	)

88 #i‡
__WORDSIZE
 == 64

89 
	#LONG_MAX
 9223372036854775807L

	)

91 
	#LONG_MAX
 2147483647L

	)

93 
	#LONG_MIN
 (-
LONG_MAX
 - 1L)

	)

96 #i‡
__WORDSIZE
 == 64

97 
	#ULONG_MAX
 18446744073709551615UL

	)

99 
	#ULONG_MAX
 4294967295UL

	)

102 #ifde‡
__USE_ISOC99


105 
	#LLONG_MAX
 9223372036854775807LL

	)

106 
	#LLONG_MIN
 (-
LLONG_MAX
 - 1LL)

	)

109 
	#ULLONG_MAX
 18446744073709551615ULL

	)

123 #i‡
deföed
 
__GNUC__
 && !deföed 
_GCC_LIMITS_H_


125 #ö˛ude_√xà<
limôs
.
h
>

131 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__GNUC__


132 #i‚de‡
LLONG_MIN


133 
	#LLONG_MIN
 (-
LLONG_MAX
-1)

	)

135 #i‚de‡
LLONG_MAX


136 
	#LLONG_MAX
 
__LONG_LONG_MAX__


	)

138 #i‚de‡
ULLONG_MAX


139 
	#ULLONG_MAX
 (
LLONG_MAX
 * 2ULL + 1)

	)

143 #ifdef 
__USE_POSIX


145 
	~<bôs/posix1_lim.h
>

148 #ifdef 
__USE_POSIX2


149 
	~<bôs/posix2_lim.h
>

152 #ifdef 
__USE_XOPEN


153 
	~<bôs/x›í_lim.h
>

	@/usr/include/netdb.h

23 #i‚def 
_NETDB_H


24 
	#_NETDB_H
 1

	)

26 
	~<„©uªs.h
>

28 
	~<√töë/ö.h
>

29 
	~<°döt.h
>

30 #ifde‡
__USE_MISC


33 
	~<Ωc/√tdb.h
>

36 #ifde‡
__USE_GNU


37 
	#__√ed_sigevít_t


	)

38 
	~<bôs/sigöfo.h
>

39 
	#__√ed_time•ec


	)

40 
	~<time.h
>

43 
	~<bôs/√tdb.h
>

46 
	#_PATH_HEQUIV
 "/ëc/ho°s.equiv"

	)

47 
	#_PATH_HOSTS
 "/ëc/ho°s"

	)

48 
	#_PATH_NETWORKS
 "/ëc/√tw‹ks"

	)

49 
	#_PATH_NSSWITCH_CONF
 "/ëc/nsswôch.c⁄f"

	)

50 
	#_PATH_PROTOCOLS
 "/ëc/¥Ÿocﬁs"

	)

51 
	#_PATH_SERVICES
 "/ëc/£rvi˚s"

	)

54 
	g__BEGIN_DECLS


56 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8


59 
	#h_î∫o
 (*
	`__h_î∫o_loˇti⁄
 ())

	)

62 *
	$__h_î∫o_loˇti⁄
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

66 
	#HOST_NOT_FOUND
 1

	)

67 
	#TRY_AGAIN
 2

	)

69 
	#NO_RECOVERY
 3

	)

71 
	#NO_DATA
 4

	)

74 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


75 
	#NETDB_INTERNAL
 -1

	)

76 
	#NETDB_SUCCESS
 0

	)

77 
	#NO_ADDRESS
 
NO_DATA


	)

80 #ifde‡
__USE_XOPEN2K


82 
	#IPPORT_RESERVED
 1024

	)

85 #ifde‡
__USE_GNU


87 
	#SCOPE_DELIMITER
 '%'

	)

90 #ifde‡
__USE_MISC


93 
	$hîr‹
 (
__c⁄°
 *
__°r
Ë
__THROW
;

96 
__c⁄°
 *
	$h°ªº‹
 (
__îr_num
Ë
__THROW
;

101 
	sho°ít


103 *
h_«me
;

104 **
h_Æü£s
;

105 
h_addπy≥
;

106 
h_Àngth
;

107 **
h_addr_li°
;

108 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


109 
	#h_addr
 
h_addr_li°
[0]

	)

118 
	`£tho°ít
 (
__°ay_›í
);

124 
	`ídho°ít
 ();

131 
ho°ít
 *
	`gëho°ít
 ();

138 
ho°ít
 *
	`gëho°byaddr
 (
__c⁄°
 *
__addr
, 
__sockÀn_t
 
__Àn
,

139 
__ty≥
);

145 
ho°ít
 *
	`gëho°by«me
 (
__c⁄°
 *
__«me
);

147 #ifde‡
__USE_MISC


156 
ho°ít
 *
	`gëho°by«me2
 (
__c⁄°
 *
__«me
, 
__af
);

168 
	`gëho°ít_r
 (
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

169 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

170 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

171 *
__ª°ri˘
 
__h_î∫›
);

173 
	`gëho°byaddr_r
 (
__c⁄°
 *
__ª°ri˘
 
__addr
, 
__sockÀn_t
 
__Àn
,

174 
__ty≥
,

175 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

176 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

177 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

178 *
__ª°ri˘
 
__h_î∫›
);

180 
	`gëho°by«me_r
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

181 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

182 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

183 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

184 *
__ª°ri˘
 
__h_î∫›
);

186 
	`gëho°by«me2_r
 (
__c⁄°
 *
__ª°ri˘
 
__«me
, 
__af
,

187 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

188 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

189 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

190 *
__ª°ri˘
 
__h_î∫›
);

199 
	`£äëít
 (
__°ay_›í
);

205 
	`íd√ã¡
 ();

212 
√ã¡
 *
	`gë√ã¡
 ();

219 
√ã¡
 *
	`gë√tbyaddr
 (
uöt32_t
 
__√t
, 
__ty≥
);

225 
√ã¡
 *
	`gë√tby«me
 (
__c⁄°
 *
__«me
);

227 #ifdef 
__USE_MISC


238 
	`gë√ã¡_r
 (
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

239 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

240 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

241 *
__ª°ri˘
 
__h_î∫›
);

243 
	`gë√tbyaddr_r
 (
uöt32_t
 
__√t
, 
__ty≥
,

244 
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

245 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

246 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

247 *
__ª°ri˘
 
__h_î∫›
);

249 
	`gë√tby«me_r
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

250 
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

251 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

252 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

253 *
__ª°ri˘
 
__h_î∫›
);

258 
	s£rvít


260 *
s_«me
;

261 **
s_Æü£s
;

262 
s_p‹t
;

263 *
s_¥Ÿo
;

271 
	`£t£rvít
 (
__°ay_›í
);

277 
	`íd£rvít
 ();

284 
£rvít
 *
	`gë£rvít
 ();

291 
£rvít
 *
	`gë£rvby«me
 (
__c⁄°
 *
__«me
,

292 
__c⁄°
 *
__¥Ÿo
);

299 
£rvít
 *
	`gë£rvbyp‹t
 (
__p‹t
, 
__c⁄°
 *
__¥Ÿo
);

302 #ifdef 
__USE_MISC


310 
	`gë£rvít_r
 (
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

311 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

312 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

314 
	`gë£rvby«me_r
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

315 
__c⁄°
 *
__ª°ri˘
 
__¥Ÿo
,

316 
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

317 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

318 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

320 
	`gë£rvbyp‹t_r
 (
__p‹t
, 
__c⁄°
 *
__ª°ri˘
 
__¥Ÿo
,

321 
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

322 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

323 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

328 
	s¥Ÿ€¡


330 *
p_«me
;

331 **
p_Æü£s
;

332 
p_¥Ÿo
;

340 
	`£çrŸ€¡
 (
__°ay_›í
);

346 
	`íd¥Ÿ€¡
 ();

353 
¥Ÿ€¡
 *
	`gë¥Ÿ€¡
 ();

359 
¥Ÿ€¡
 *
	`gë¥Ÿoby«me
 (
__c⁄°
 *
__«me
);

365 
¥Ÿ€¡
 *
	`gë¥Ÿobynumbî
 (
__¥Ÿo
);

368 #ifdef 
__USE_MISC


376 
	`gë¥Ÿ€¡_r
 (
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

377 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

378 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

380 
	`gë¥Ÿoby«me_r
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

381 
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

382 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

383 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

385 
	`gë¥Ÿobynumbî_r
 (
__¥Ÿo
,

386 
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

387 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

388 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

397 
	`£äëgª¡
 (
__c⁄°
 *
__√tgroup
);

405 
	`íd√tgª¡
 ();

414 
	`gë√tgª¡
 (**
__ª°ri˘
 
__ho°p
,

415 **
__ª°ri˘
 
__u£Ω
,

416 **
__ª°ri˘
 
__domaöp
);

425 
	`ö√tgr
 (
__c⁄°
 *
__√tgroup
, __c⁄° *
__ho°
,

426 
__c⁄°
 *
__u£r
, __c⁄° *
__domaö
);

434 
	`gë√tgª¡_r
 (**
__ª°ri˘
 
__ho°p
,

435 **
__ª°ri˘
 
__u£Ω
,

436 **
__ª°ri˘
 
__domaöp
,

437 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
);

441 #ifde‡
__USE_BSD


453 
	`rcmd
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

454 
__c⁄°
 *
__ª°ri˘
 
__locu£r
,

455 
__c⁄°
 *
__ª°ri˘
 
__ªmu£r
,

456 
__c⁄°
 *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
);

465 
	`rcmd_af
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

466 
__c⁄°
 *
__ª°ri˘
 
__locu£r
,

467 
__c⁄°
 *
__ª°ri˘
 
__ªmu£r
,

468 
__c⁄°
 *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
,

469 
ß_Ámûy_t
 
__af
);

481 
	`ªxec
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

482 
__c⁄°
 *
__ª°ri˘
 
__«me
,

483 
__c⁄°
 *
__ª°ri˘
 
__∑ss
,

484 
__c⁄°
 *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
);

493 
	`ªxec_af
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

494 
__c⁄°
 *
__ª°ri˘
 
__«me
,

495 
__c⁄°
 *
__ª°ri˘
 
__∑ss
,

496 
__c⁄°
 *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
,

497 
ß_Ámûy_t
 
__af
);

507 
	`ru£rok
 (
__c⁄°
 *
__rho°
, 
__su£r
,

508 
__c⁄°
 *
__ªmu£r
, __c⁄° *
__locu£r
);

517 
	`ru£rok_af
 (
__c⁄°
 *
__rho°
, 
__su£r
,

518 
__c⁄°
 *
__ªmu£r
, __c⁄° *
__locu£r
,

519 
ß_Ámûy_t
 
__af
);

530 
	`úu£rok
 (
uöt32_t
 
__øddr
, 
__su£r
,

531 
__c⁄°
 *
__ªmu£r
, __c⁄° *
__locu£r
);

541 
	`úu£rok_af
 (
__c⁄°
 *
__øddr
, 
__su£r
,

542 
__c⁄°
 *
__ªmu£r
, __c⁄° *
__locu£r
,

543 
ß_Ámûy_t
 
__af
);

553 
	`ºesvp‹t
 (*
__Æp‹t
);

562 
	`ºesvp‹t_af
 (*
__Æp‹t
, 
ß_Ámûy_t
 
__af
);

567 #ifdef 
__USE_POSIX


569 
	saddröfo


571 
ai_Êags
;

572 
ai_Ámûy
;

573 
ai_sockty≥
;

574 
ai_¥Ÿocﬁ
;

575 
sockÀn_t
 
ai_addæí
;

576 
sockaddr
 *
ai_addr
;

577 *
ai_ˇn⁄«me
;

578 
addröfo
 *
ai_√xt
;

581 #ifde‡
__USE_GNU


583 
	sgaicb


585 c⁄° *
¨_«me
;

586 c⁄° *
¨_£rvi˚
;

587 c⁄° 
addröfo
 *
¨_ªque°
;

588 
addröfo
 *
¨_ªsu…
;

590 
__ªtu∫
;

591 
__unu£d
[5];

595 
	#GAI_WAIT
 0

	)

596 
	#GAI_NOWAIT
 1

	)

600 
	#AI_PASSIVE
 0x0001

	)

601 
	#AI_CANONNAME
 0x0002

	)

602 
	#AI_NUMERICHOST
 0x0004

	)

603 
	#AI_V4MAPPED
 0x0008

	)

604 
	#AI_ALL
 0x0010

	)

605 
	#AI_ADDRCONFIG
 0x0020

	)

607 #ifde‡
__USE_GNU


608 
	#AI_IDN
 0x0040

	)

611 
	#AI_CANONIDN
 0x0080

	)

612 
	#AI_IDN_ALLOW_UNASSIGNED
 0x0100

	)

614 
	#AI_IDN_USE_STD3_ASCII_RULES
 0x0200

	)

617 
	#AI_NUMERICSERV
 0x0400

	)

620 
	#EAI_BADFLAGS
 -1

	)

621 
	#EAI_NONAME
 -2

	)

622 
	#EAI_AGAIN
 -3

	)

623 
	#EAI_FAIL
 -4

	)

624 
	#EAI_FAMILY
 -6

	)

625 
	#EAI_SOCKTYPE
 -7

	)

626 
	#EAI_SERVICE
 -8

	)

627 
	#EAI_MEMORY
 -10

	)

628 
	#EAI_SYSTEM
 -11

	)

629 
	#EAI_OVERFLOW
 -12

	)

630 #ifde‡
__USE_GNU


631 
	#EAI_NODATA
 -5

	)

632 
	#EAI_ADDRFAMILY
 -9

	)

633 
	#EAI_INPROGRESS
 -100

	)

634 
	#EAI_CANCELED
 -101

	)

635 
	#EAI_NOTCANCELED
 -102

	)

636 
	#EAI_ALLDONE
 -103

	)

637 
	#EAI_INTR
 -104

	)

638 
	#EAI_IDN_ENCODE
 -105

	)

641 #ifde‡
__USE_MISC


642 
	#NI_MAXHOST
 1025

	)

643 
	#NI_MAXSERV
 32

	)

646 
	#NI_NUMERICHOST
 1

	)

647 
	#NI_NUMERICSERV
 2

	)

648 
	#NI_NOFQDN
 4

	)

649 
	#NI_NAMEREQD
 8

	)

650 
	#NI_DGRAM
 16

	)

651 #ifde‡
__USE_GNU


652 
	#NI_IDN
 32

	)

653 
	#NI_IDN_ALLOW_UNASSIGNED
 64

	)

655 
	#NI_IDN_USE_STD3_ASCII_RULES
 128

	)

664 
	`gëaddröfo
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

665 
__c⁄°
 *
__ª°ri˘
 
__£rvi˚
,

666 
__c⁄°
 
addröfo
 *
__ª°ri˘
 
__ªq
,

667 
addröfo
 **
__ª°ri˘
 
__∑i
);

670 
	$‰ìaddröfo
 (
addröfo
 *
__ai
Ë
__THROW
;

673 
__c⁄°
 *
	$gai_°ªº‹
 (
__ecode
Ë
__THROW
;

679 
	`gë«meöfo
 (
__c⁄°
 
sockaddr
 *
__ª°ri˘
 
__ß
,

680 
sockÀn_t
 
__ßÀn
, *
__ª°ri˘
 
__ho°
,

681 
sockÀn_t
 
__ho°Àn
, *
__ª°ri˘
 
__£rv
,

682 
sockÀn_t
 
__£rvÀn
, 
__Êags
);

685 #ifde‡
__USE_GNU


694 
	`gëaddröfo_a
 (
__mode
, 
gaicb
 *
__li°
[
__ª°ri˘_¨r
],

695 
__ít
, 
sigevít
 *
__ª°ri˘
 
__sig
);

705 
	`gai_su•íd
 (
__c⁄°
 
gaicb
 *__c⁄° 
__li°
[], 
__ít
,

706 
__c⁄°
 
time•ec
 *
__timeout
);

709 
	$gai_îr‹
 (
gaicb
 *
__ªq
Ë
__THROW
;

712 
	$gai_ˇn˚l
 (
gaicb
 *
__gaicbp
Ë
__THROW
;

715 
__END_DECLS


	@/usr/include/netinet/in.h

20 #i‚def 
_NETINET_IN_H


21 
	#_NETINET_IN_H
 1

	)

23 
	~<„©uªs.h
>

24 
	~<°döt.h
>

25 
	~<sys/sockë.h
>

26 
	~<bôs/ty≥s.h
>

29 
__BEGIN_DECLS


34 
	mIPPROTO_IP
 = 0,

35 
	#IPPROTO_IP
 
IPPROTO_IP


	)

36 
	mIPPROTO_HOPOPTS
 = 0,

37 
	#IPPROTO_HOPOPTS
 
IPPROTO_HOPOPTS


	)

38 
	mIPPROTO_ICMP
 = 1,

39 
	#IPPROTO_ICMP
 
IPPROTO_ICMP


	)

40 
	mIPPROTO_IGMP
 = 2,

41 
	#IPPROTO_IGMP
 
IPPROTO_IGMP


	)

42 
	mIPPROTO_IPIP
 = 4,

43 
	#IPPROTO_IPIP
 
IPPROTO_IPIP


	)

44 
	mIPPROTO_TCP
 = 6,

45 
	#IPPROTO_TCP
 
IPPROTO_TCP


	)

46 
	mIPPROTO_EGP
 = 8,

47 
	#IPPROTO_EGP
 
IPPROTO_EGP


	)

48 
	mIPPROTO_PUP
 = 12,

49 
	#IPPROTO_PUP
 
IPPROTO_PUP


	)

50 
	mIPPROTO_UDP
 = 17,

51 
	#IPPROTO_UDP
 
IPPROTO_UDP


	)

52 
	mIPPROTO_IDP
 = 22,

53 
	#IPPROTO_IDP
 
IPPROTO_IDP


	)

54 
	mIPPROTO_TP
 = 29,

55 
	#IPPROTO_TP
 
IPPROTO_TP


	)

56 
	mIPPROTO_DCCP
 = 33,

57 
	#IPPROTO_DCCP
 
IPPROTO_DCCP


	)

58 
	mIPPROTO_IPV6
 = 41,

59 
	#IPPROTO_IPV6
 
IPPROTO_IPV6


	)

60 
	mIPPROTO_ROUTING
 = 43,

61 
	#IPPROTO_ROUTING
 
IPPROTO_ROUTING


	)

62 
	mIPPROTO_FRAGMENT
 = 44,

63 
	#IPPROTO_FRAGMENT
 
IPPROTO_FRAGMENT


	)

64 
	mIPPROTO_RSVP
 = 46,

65 
	#IPPROTO_RSVP
 
IPPROTO_RSVP


	)

66 
	mIPPROTO_GRE
 = 47,

67 
	#IPPROTO_GRE
 
IPPROTO_GRE


	)

68 
	mIPPROTO_ESP
 = 50,

69 
	#IPPROTO_ESP
 
IPPROTO_ESP


	)

70 
	mIPPROTO_AH
 = 51,

71 
	#IPPROTO_AH
 
IPPROTO_AH


	)

72 
	mIPPROTO_ICMPV6
 = 58,

73 
	#IPPROTO_ICMPV6
 
IPPROTO_ICMPV6


	)

74 
	mIPPROTO_NONE
 = 59,

75 
	#IPPROTO_NONE
 
IPPROTO_NONE


	)

76 
	mIPPROTO_DSTOPTS
 = 60,

77 
	#IPPROTO_DSTOPTS
 
IPPROTO_DSTOPTS


	)

78 
	mIPPROTO_MTP
 = 92,

79 
	#IPPROTO_MTP
 
IPPROTO_MTP


	)

80 
	mIPPROTO_ENCAP
 = 98,

81 
	#IPPROTO_ENCAP
 
IPPROTO_ENCAP


	)

82 
	mIPPROTO_PIM
 = 103,

83 
	#IPPROTO_PIM
 
IPPROTO_PIM


	)

84 
	mIPPROTO_COMP
 = 108,

85 
	#IPPROTO_COMP
 
IPPROTO_COMP


	)

86 
	mIPPROTO_SCTP
 = 132,

87 
	#IPPROTO_SCTP
 
IPPROTO_SCTP


	)

88 
	mIPPROTO_UDPLITE
 = 136,

89 
	#IPPROTO_UDPLITE
 
IPPROTO_UDPLITE


	)

90 
	mIPPROTO_RAW
 = 255,

91 
	#IPPROTO_RAW
 
IPPROTO_RAW


	)

92 
	mIPPROTO_MAX


97 
uöt16_t
 
	tö_p‹t_t
;

102 
	mIPPORT_ECHO
 = 7,

103 
	mIPPORT_DISCARD
 = 9,

104 
	mIPPORT_SYSTAT
 = 11,

105 
	mIPPORT_DAYTIME
 = 13,

106 
	mIPPORT_NETSTAT
 = 15,

107 
	mIPPORT_FTP
 = 21,

108 
	mIPPORT_TELNET
 = 23,

109 
	mIPPORT_SMTP
 = 25,

110 
	mIPPORT_TIMESERVER
 = 37,

111 
	mIPPORT_NAMESERVER
 = 42,

112 
	mIPPORT_WHOIS
 = 43,

113 
	mIPPORT_MTP
 = 57,

115 
	mIPPORT_TFTP
 = 69,

116 
	mIPPORT_RJE
 = 77,

117 
	mIPPORT_FINGER
 = 79,

118 
	mIPPORT_TTYLINK
 = 87,

119 
	mIPPORT_SUPDUP
 = 95,

122 
	mIPPORT_EXECSERVER
 = 512,

123 
	mIPPORT_LOGINSERVER
 = 513,

124 
	mIPPORT_CMDSERVER
 = 514,

125 
	mIPPORT_EFSSERVER
 = 520,

128 
	mIPPORT_BIFFUDP
 = 512,

129 
	mIPPORT_WHOSERVER
 = 513,

130 
	mIPPORT_ROUTESERVER
 = 520,

133 
	mIPPORT_RESERVED
 = 1024,

136 
	mIPPORT_USERRESERVED
 = 5000

141 
uöt32_t
 
	tö_addr_t
;

142 
	sö_addr


144 
ö_addr_t
 
	ms_addr
;

153 
	#IN_CLASSA
(
a
Ë((((
ö_addr_t
)◊)Ë& 0x80000000Ë=0)

	)

154 
	#IN_CLASSA_NET
 0xff000000

	)

155 
	#IN_CLASSA_NSHIFT
 24

	)

156 
	#IN_CLASSA_HOST
 (0xfffffff‡& ~
IN_CLASSA_NET
)

	)

157 
	#IN_CLASSA_MAX
 128

	)

159 
	#IN_CLASSB
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xc0000000Ë=0x80000000)

	)

160 
	#IN_CLASSB_NET
 0xffff0000

	)

161 
	#IN_CLASSB_NSHIFT
 16

	)

162 
	#IN_CLASSB_HOST
 (0xfffffff‡& ~
IN_CLASSB_NET
)

	)

163 
	#IN_CLASSB_MAX
 65536

	)

165 
	#IN_CLASSC
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xe0000000Ë=0xc0000000)

	)

166 
	#IN_CLASSC_NET
 0xffffff00

	)

167 
	#IN_CLASSC_NSHIFT
 8

	)

168 
	#IN_CLASSC_HOST
 (0xfffffff‡& ~
IN_CLASSC_NET
)

	)

170 
	#IN_CLASSD
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xf0000000Ë=0xe0000000)

	)

171 
	#IN_MULTICAST
(
a
Ë
	`IN_CLASSD
◊)

	)

173 
	#IN_EXPERIMENTAL
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xe0000000Ë=0xe0000000)

	)

174 
	#IN_BADCLASS
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xf0000000Ë=0xf0000000)

	)

177 
	#INADDR_ANY
 ((
ö_addr_t
Ë0x00000000)

	)

179 
	#INADDR_BROADCAST
 ((
ö_addr_t
Ë0xffffffff)

	)

181 
	#INADDR_NONE
 ((
ö_addr_t
Ë0xffffffff)

	)

184 
	#IN_LOOPBACKNET
 127

	)

186 #i‚de‡
INADDR_LOOPBACK


187 
	#INADDR_LOOPBACK
 ((
ö_addr_t
Ë0x7f000001Ë

	)

191 
	#INADDR_UNSPEC_GROUP
 ((
ö_addr_t
Ë0xe0000000Ë

	)

192 
	#INADDR_ALLHOSTS_GROUP
 ((
ö_addr_t
Ë0xe0000001Ë

	)

193 
	#INADDR_ALLRTRS_GROUP
 ((
ö_addr_t
Ë0xe0000002Ë

	)

194 
	#INADDR_MAX_LOCAL_GROUP
 ((
ö_addr_t
Ë0xe00000ffË

	)

198 
	sö6_addr


202 
uöt8_t
 
	m__u6_addr8
[16];

203 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


204 
uöt16_t
 
	m__u6_addr16
[8];

205 
uöt32_t
 
	m__u6_addr32
[4];

207 } 
	m__ö6_u
;

208 
	#s6_addr
 
__ö6_u
.
__u6_addr8


	)

209 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


210 
	#s6_addr16
 
__ö6_u
.
__u6_addr16


	)

211 
	#s6_addr32
 
__ö6_u
.
__u6_addr32


	)

215 c⁄° 
ö6_addr
 
ö6addr_™y
;

216 c⁄° 
ö6_addr
 
ö6addr_lo›back
;

217 
	#IN6ADDR_ANY_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } } }

	)

218 
	#IN6ADDR_LOOPBACK_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1 } } }

	)

220 
	#INET_ADDRSTRLEN
 16

	)

221 
	#INET6_ADDRSTRLEN
 46

	)

225 
	ssockaddr_ö


227 
__SOCKADDR_COMMON
 (
sö_
);

228 
ö_p‹t_t
 
	msö_p‹t
;

229 
ö_addr
 
	msö_addr
;

232 
	msö_zîo
[ (
sockaddr
) -

233 
__SOCKADDR_COMMON_SIZE
 -

234  (
ö_p‹t_t
) -

235  (
ö_addr
)];

239 
	ssockaddr_ö6


241 
__SOCKADDR_COMMON
 (
sö6_
);

242 
ö_p‹t_t
 
	msö6_p‹t
;

243 
uöt32_t
 
	msö6_Êowöfo
;

244 
ö6_addr
 
	msö6_addr
;

245 
uöt32_t
 
	msö6_sc›e_id
;

249 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


251 
	sù_mªq


254 
ö_addr
 
	mimr_mu…üddr
;

257 
ö_addr
 
	mimr_öãrÁ˚
;

260 
	sù_mªq_sour˚


263 
ö_addr
 
	mimr_mu…üddr
;

266 
ö_addr
 
	mimr_öãrÁ˚
;

269 
ö_addr
 
	mimr_sour˚addr
;

275 
	sùv6_mªq


278 
ö6_addr
 
	mùv6mr_mu…üddr
;

281 
	mùv6mr_öãrÁ˚
;

285 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


287 
	sgroup_ªq


290 
uöt32_t
 
	mgr_öãrÁ˚
;

293 
sockaddr_°‹age
 
	mgr_group
;

296 
	sgroup_sour˚_ªq


299 
uöt32_t
 
	mg§_öãrÁ˚
;

302 
sockaddr_°‹age
 
	mg§_group
;

305 
sockaddr_°‹age
 
	mg§_sour˚
;

310 
	sù_msfûãr


313 
ö_addr
 
	mimsf_mu…üddr
;

316 
ö_addr
 
	mimsf_öãrÁ˚
;

319 
uöt32_t
 
	mimsf_fmode
;

322 
uöt32_t
 
	mimsf_num§c
;

324 
ö_addr
 
	mimsf_¶i°
[1];

327 
	#IP_MSFILTER_SIZE
(
num§c
Ë( (
ù_msfûãr
) \

328 -  (
ö_addr
) \

329 + (
num§c
Ë*  (
ö_addr
))

	)

331 
	sgroup_fûãr


334 
uöt32_t
 
	mgf_öãrÁ˚
;

337 
sockaddr_°‹age
 
	mgf_group
;

340 
uöt32_t
 
	mgf_fmode
;

343 
uöt32_t
 
	mgf_num§c
;

345 
sockaddr_°‹age
 
	mgf_¶i°
[1];

348 
	#GROUP_FILTER_SIZE
(
num§c
Ë( (
group_fûãr
) \

349 -  (
sockaddr_°‹age
) \

350 + ((
num§c
) \

351 *  (
sockaddr_°‹age
)))

	)

356 
	~<bôs/ö.h
>

365 
uöt32_t
 
	$¡ohl
 (
uöt32_t
 
__√é⁄g
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

366 
uöt16_t
 
	$¡ohs
 (
uöt16_t
 
__√tsh‹t
)

367 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

368 
uöt32_t
 
	$ht⁄l
 (
uöt32_t
 
__ho°l⁄g
)

369 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

370 
uöt16_t
 
	$ht⁄s
 (
uöt16_t
 
__ho°sh‹t
)

371 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

373 
	~<ídün.h
>

376 
	~<bôs/byãsw≠.h
>

378 #ifde‡
__OPTIMIZE__


382 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


385 
	#¡ohl
(
x
Ë(x)

	)

386 
	#¡ohs
(
x
Ë(x)

	)

387 
	#ht⁄l
(
x
Ë(x)

	)

388 
	#ht⁄s
(
x
Ë(x)

	)

390 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


391 
	#¡ohl
(
x
Ë
	`__bsw≠_32
 (x)

	)

392 
	#¡ohs
(
x
Ë
	`__bsw≠_16
 (x)

	)

393 
	#ht⁄l
(
x
Ë
	`__bsw≠_32
 (x)

	)

394 
	#ht⁄s
(
x
Ë
	`__bsw≠_16
 (x)

	)

399 
	#IN6_IS_ADDR_UNSPECIFIED
(
a
) \

400 (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] == 0 \

401 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[1] == 0 \

402 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[2] == 0 \

403 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[3] =0)

	)

405 
	#IN6_IS_ADDR_LOOPBACK
(
a
) \

406 (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] == 0 \

407 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[1] == 0 \

408 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[2] == 0 \

409 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[3] =
	`ht⁄l
 (1))

	)

411 
	#IN6_IS_ADDR_MULTICAST
(
a
Ë(((
__c⁄°
 
uöt8_t
 *Ë◊))[0] =0xff)

	)

413 
	#IN6_IS_ADDR_LINKLOCAL
(
a
) \

414 ((((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] & 
	`ht⁄l
 (0xffc00000)) \

415 =
	`ht⁄l
 (0x„800000))

	)

417 
	#IN6_IS_ADDR_SITELOCAL
(
a
) \

418 ((((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] & 
	`ht⁄l
 (0xffc00000)) \

419 =
	`ht⁄l
 (0x„c00000))

	)

421 
	#IN6_IS_ADDR_V4MAPPED
(
a
) \

422 ((((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] == 0) \

423 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[1] == 0) \

424 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[2] =
	`ht⁄l
 (0xffff)))

	)

426 
	#IN6_IS_ADDR_V4COMPAT
(
a
) \

427 ((((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] == 0) \

428 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[1] == 0) \

429 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[2] == 0) \

430 && (
	`¡ohl
 (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[3]Ë> 1))

	)

432 
	#IN6_ARE_ADDR_EQUAL
(
a
,
b
) \

433 ((((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] =((__c⁄° uöt32_à*Ë(
b
))[0]) \

434 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[1] =((__c⁄° uöt32_à*Ë(
b
))[1]) \

435 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[2] =((__c⁄° uöt32_à*Ë(
b
))[2]) \

436 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[3] =((__c⁄° uöt32_à*Ë(
b
))[3]))

	)

438 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


440 
	$bödªsvp‹t
 (
__sockfd
, 
sockaddr_ö
 *
__sock_ö
Ë
__THROW
;

443 
	$bödªsvp‹t6
 (
__sockfd
, 
sockaddr_ö6
 *
__sock_ö
)

444 
__THROW
;

448 
	#IN6_IS_ADDR_MC_NODELOCAL
(
a
) \

449 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

450 && ((((
__c⁄°
 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x1))

	)

452 
	#IN6_IS_ADDR_MC_LINKLOCAL
(
a
) \

453 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

454 && ((((
__c⁄°
 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x2))

	)

456 
	#IN6_IS_ADDR_MC_SITELOCAL
(
a
) \

457 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

458 && ((((
__c⁄°
 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x5))

	)

460 
	#IN6_IS_ADDR_MC_ORGLOCAL
(
a
) \

461 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

462 && ((((
__c⁄°
 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x8))

	)

464 
	#IN6_IS_ADDR_MC_GLOBAL
(
a
) \

465 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

466 && ((((
__c⁄°
 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0xe))

	)

469 #ifde‡
__USE_GNU


471 
	sö6_pktöfo


473 
ö6_addr
 
ùi6_addr
;

474 
ùi6_ifödex
;

478 
	sù6_mtuöfo


480 
sockaddr_ö6
 
ù6m_addr
;

481 
uöt32_t
 
ù6m_mtu
;

486 
	$öë6_›ti⁄_•a˚
 (
__nbyãs
)

487 
__THROW
 
__©åibuã_dïªˇãd__
;

488 
	$öë6_›ti⁄_öô
 (*
__bp
, 
cmsghdr
 **
__cmsgp
,

489 
__ty≥
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

490 
	$öë6_›ti⁄_≠≥nd
 (
cmsghdr
 *
__cmsg
,

491 
__c⁄°
 
uöt8_t
 *
__ty≥p
, 
__mu…x
,

492 
__∂usy
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

493 
uöt8_t
 *
	$öë6_›ti⁄_Æloc
 (
cmsghdr
 *
__cmsg
, 
__d©Æí
,

494 
__mu…x
, 
__∂usy
)

495 
__THROW
 
__©åibuã_dïªˇãd__
;

496 
	$öë6_›ti⁄_√xt
 (
__c⁄°
 
cmsghdr
 *
__cmsg
,

497 
uöt8_t
 **
__çåp
)

498 
__THROW
 
__©åibuã_dïªˇãd__
;

499 
	$öë6_›ti⁄_föd
 (
__c⁄°
 
cmsghdr
 *
__cmsg
,

500 
uöt8_t
 **
__çåp
, 
__ty≥
)

501 
__THROW
 
__©åibuã_dïªˇãd__
;

505 
	$öë6_›t_öô
 (*
__extbuf
, 
sockÀn_t
 
__exéí
Ë
__THROW
;

506 
	$öë6_›t_≠≥nd
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

507 
uöt8_t
 
__ty≥
, 
sockÀn_t
 
__Àn
, uöt8_à
__Æign
,

508 **
__d©abuÂ
Ë
__THROW
;

509 
	$öë6_›t_föish
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
)

510 
__THROW
;

511 
	$öë6_›t_£t_vÆ
 (*
__d©abuf
, 
__off£t
, *
__vÆ
,

512 
sockÀn_t
 
__vÆÀn
Ë
__THROW
;

513 
	$öë6_›t_√xt
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

514 
uöt8_t
 *
__ty≥p
, 
sockÀn_t
 *
__À≈
,

515 **
__d©abuÂ
Ë
__THROW
;

516 
	$öë6_›t_föd
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

517 
uöt8_t
 
__ty≥
, 
sockÀn_t
 *
__À≈
,

518 **
__d©abuÂ
Ë
__THROW
;

519 
	$öë6_›t_gë_vÆ
 (*
__d©abuf
, 
__off£t
, *
__vÆ
,

520 
sockÀn_t
 
__vÆÀn
Ë
__THROW
;

524 
sockÀn_t
 
	$öë6_πh_•a˚
 (
__ty≥
, 
__£gmíts
Ë
__THROW
;

525 *
	$öë6_πh_öô
 (*
__bp
, 
sockÀn_t
 
__bp_Àn
, 
__ty≥
,

526 
__£gmíts
Ë
__THROW
;

527 
	$öë6_πh_add
 (*
__bp
, 
__c⁄°
 
ö6_addr
 *
__addr
Ë
__THROW
;

528 
	$öë6_πh_ªvî£
 (
__c⁄°
 *
__ö
, *
__out
Ë
__THROW
;

529 
	$öë6_πh_£gmíts
 (
__c⁄°
 *
__bp
Ë
__THROW
;

530 
ö6_addr
 *
	$öë6_πh_gëaddr
 (
__c⁄°
 *
__bp
, 
__ödex
)

531 
__THROW
;

537 
	$gëùv4sour˚fûãr
 (
__s
, 
ö_addr
 
__öãrÁ˚_addr
,

538 
ö_addr
 
__group
, 
uöt32_t
 *
__fmode
,

539 
uöt32_t
 *
__num§c
, 
ö_addr
 *
__¶i°
)

540 
__THROW
;

543 
	$£tùv4sour˚fûãr
 (
__s
, 
ö_addr
 
__öãrÁ˚_addr
,

544 
ö_addr
 
__group
, 
uöt32_t
 
__fmode
,

545 
uöt32_t
 
__num§c
,

546 
__c⁄°
 
ö_addr
 *
__¶i°
)

547 
__THROW
;

551 
	$gësour˚fûãr
 (
__s
, 
uöt32_t
 
__öãrÁ˚_addr
,

552 
__c⁄°
 
sockaddr
 *
__group
,

553 
sockÀn_t
 
__grou∂í
, 
uöt32_t
 *
__fmode
,

554 
uöt32_t
 *
__num§c
,

555 
sockaddr_°‹age
 *
__¶i°
Ë
__THROW
;

558 
	$£tsour˚fûãr
 (
__s
, 
uöt32_t
 
__öãrÁ˚_addr
,

559 
__c⁄°
 
sockaddr
 *
__group
,

560 
sockÀn_t
 
__grou∂í
, 
uöt32_t
 
__fmode
,

561 
uöt32_t
 
__num§c
,

562 
__c⁄°
 
sockaddr_°‹age
 *
__¶i°
Ë
__THROW
;

565 
__END_DECLS


	@/usr/include/openssl/rand.h

59 #i‚de‡
HEADER_RAND_H


60 
	#HEADER_RAND_H


	)

62 
	~<°dlib.h
>

63 
	~<›ís¶/os¶_typ.h
>

64 
	~<›ís¶/e_os2.h
>

66 #i‡
deföed
(
OPENSSL_SYS_WINDOWS
)

67 
	~<wödows.h
>

70 #ifde‡ 
__˝lu•lus


74 #i‡
deföed
(
OPENSSL_FIPS
)

75 
	#FIPS_RAND_SIZE_T
 
size_t


	)

81 
	sønd_mëh_°


83 (*
£ed
)(c⁄° *
buf
, 
num
);

84 (*
byãs
)(*
buf
, 
num
);

85 (*
˛ónup
)();

86 (*
add
)(c⁄° *
buf
, 
num
, 
íå›y
);

87 (*
p£ud‹™d
)(*
buf
, 
num
);

88 (*
°©us
)();

91 #ifde‡
BN_DEBUG


92 
ønd_¥edi˘abÀ
;

95 
RAND_£t_ønd_mëhod
(c⁄° 
RAND_METHOD
 *
mëh
);

96 c⁄° 
RAND_METHOD
 *
RAND_gë_ønd_mëhod
();

97 #i‚de‡
OPENSSL_NO_ENGINE


98 
RAND_£t_ønd_ígöe
(
ENGINE
 *
ígöe
);

100 
RAND_METHOD
 *
RAND_SSLóy
();

101 
RAND_˛ónup
();

102 
RAND_byãs
(*
buf
,
num
);

103 
RAND_p£udo_byãs
(*
buf
,
num
);

104 
RAND_£ed
(c⁄° *
buf
,
num
);

105 
RAND_add
(c⁄° *
buf
,
num
,
íå›y
);

106 
RAND_lﬂd_fûe
(c⁄° *
fûe
,
max_byãs
);

107 
RAND_wrôe_fûe
(c⁄° *
fûe
);

108 c⁄° *
RAND_fûe_«me
(*
fûe
,
size_t
 
num
);

109 
RAND_°©us
();

110 
RAND_quîy_egd_byãs
(c⁄° *
∑th
, *
buf
, 
byãs
);

111 
RAND_egd
(c⁄° *
∑th
);

112 
RAND_egd_byãs
(c⁄° *
∑th
,
byãs
);

113 
RAND_pﬁl
();

115 #i‡
deföed
(
OPENSSL_SYS_WINDOWS
Ë|| deföed(
OPENSSL_SYS_WIN32
)

117 
RAND_s¸ìn
();

118 
RAND_evít
(
UINT
, 
WPARAM
, 
LPARAM
);

122 #ifde‡
OPENSSL_FIPS


123 
RAND_£t_fùs_drbg_ty≥
(
ty≥
, 
Êags
);

124 
RAND_öô_fùs
();

127 
¥iv©e_RAND_lock
(
lock
);

133 
ERR_lﬂd_RAND_°rögs
();

138 
	#RAND_F_ENG_RAND_GET_RAND_METHOD
 108

	)

139 
	#RAND_F_FIPS_RAND
 103

	)

140 
	#RAND_F_FIPS_RAND_BYTES
 102

	)

141 
	#RAND_F_FIPS_RAND_SET_DT
 106

	)

142 
	#RAND_F_FIPS_X931_SET_DT
 106

	)

143 
	#RAND_F_FIPS_SET_DT
 104

	)

144 
	#RAND_F_FIPS_SET_PRNG_SEED
 107

	)

145 
	#RAND_F_FIPS_SET_TEST_MODE
 105

	)

146 
	#RAND_F_RAND_GET_RAND_METHOD
 101

	)

147 
	#RAND_F_RAND_INIT_FIPS
 109

	)

148 
	#RAND_F_SSLEAY_RAND_BYTES
 100

	)

151 
	#RAND_R_ERROR_INITIALISING_DRBG
 112

	)

152 
	#RAND_R_ERROR_INSTANTIATING_DRBG
 113

	)

153 
	#RAND_R_NON_FIPS_METHOD
 105

	)

154 
	#RAND_R_NOT_IN_TEST_MODE
 106

	)

155 
	#RAND_R_NO_FIPS_RANDOM_METHOD_SET
 111

	)

156 
	#RAND_R_NO_KEY_SET
 107

	)

157 
	#RAND_R_PRNG_ASKING_FOR_TOO_MUCH
 101

	)

158 
	#RAND_R_PRNG_ERROR
 108

	)

159 
	#RAND_R_PRNG_KEYED
 109

	)

160 
	#RAND_R_PRNG_NOT_REKEYED
 102

	)

161 
	#RAND_R_PRNG_NOT_RESEEDED
 103

	)

162 
	#RAND_R_PRNG_NOT_SEEDED
 100

	)

163 
	#RAND_R_PRNG_SEED_MUST_NOT_MATCH_KEY
 110

	)

164 
	#RAND_R_PRNG_STUCK
 104

	)

166 #ifde‡ 
__˝lu•lus


	@/usr/include/poll.h

1 
	~<sys/pﬁl.h
>

	@/usr/include/signal.h

23 #i‚def 
_SIGNAL_H


25 #i‡!
deföed
 
__√ed_sig_©omic_t
 && !deföed 
__√ed_sig£t_t


26 
	#_SIGNAL_H


	)

29 
	~<„©uªs.h
>

31 
	g__BEGIN_DECLS


33 
	~<bôs/sig£t.h
>

37 #i‡
deföed
 
__√ed_sig_©omic_t
 || deföed 
_SIGNAL_H


38 #i‚de‡
__sig_©omic_t_deföed


39 
	#__sig_©omic_t_deföed


	)

40 
__BEGIN_NAMESPACE_STD


41 
__sig_©omic_t
 
	tsig_©omic_t
;

42 
	g__END_NAMESPACE_STD


44 #unde‡
__√ed_sig_©omic_t


47 #i‡
deföed
 
__√ed_sig£t_t
 || (deföed 
_SIGNAL_H
 && deföed 
__USE_POSIX
)

48 #i‚de‡
__sig£t_t_deföed


49 
	#__sig£t_t_deföed


	)

50 
__sig£t_t
 
	tsig£t_t
;

52 #unde‡
__√ed_sig£t_t


55 #ifde‡
_SIGNAL_H


57 
	~<bôs/ty≥s.h
>

58 
	~<bôs/signum.h
>

60 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


61 #i‚de‡
__pid_t_deföed


62 
__pid_t
 
	tpid_t
;

63 
	#__pid_t_deföed


	)

65 #ifde‡
__USE_XOPEN


67 #i‚de‡
__uid_t_deföed


68 
__uid_t
 
	tuid_t
;

69 
	#__uid_t_deföed


	)

73 #ifde‡
__USE_POSIX199309


75 
	#__√ed_time•ec


	)

76 
	~<time.h
>

79 
	~<bôs/sigöfo.h
>

84 (*
	t__sigh™dÀr_t
) ();

89 
__sigh™dÀr_t
 
	$__sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

90 
__THROW
;

91 #ifde‡
__USE_GNU


92 
__sigh™dÀr_t
 
	$sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

93 
__THROW
;

99 
__BEGIN_NAMESPACE_STD


100 #ifde‡
__USE_BSD


101 
__sigh™dÀr_t
 
	$sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

102 
__THROW
;

105 #ifde‡
__REDIRECT_NTH


106 
__sigh™dÀr_t
 
	`__REDIRECT_NTH
 (
sig«l
,

107 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
),

108 
__sysv_sig«l
);

110 
	#sig«l
 
__sysv_sig«l


	)

113 
__END_NAMESPACE_STD


115 #ifde‡
__USE_XOPEN


118 
__sigh™dÀr_t
 
	$bsd_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

119 
__THROW
;

125 #ifde‡
__USE_POSIX


126 
	$kûl
 (
__pid_t
 
__pid
, 
__sig
Ë
__THROW
;

129 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


133 
	$kûÕg
 (
__pid_t
 
__pgΩ
, 
__sig
Ë
__THROW
;

136 
__BEGIN_NAMESPACE_STD


138 
	$øi£
 (
__sig
Ë
__THROW
;

139 
__END_NAMESPACE_STD


141 #ifde‡
__USE_SVID


143 
__sigh™dÀr_t
 
	$ssig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

144 
__THROW
;

145 
	$gsig«l
 (
__sig
Ë
__THROW
;

148 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN2K


150 
	`psig«l
 (
__sig
, 
__c⁄°
 *
__s
);

153 #ifde‡
__USE_XOPEN2K


155 
	`psigöfo
 (
__c⁄°
 
sigöfo_t
 *
__pöfo
, __c⁄° *
__s
);

168 
	`__sig∑u£
 (
__sig_‹_mask
, 
__is_sig
);

170 #ifde‡
__FAVOR_BSD


173 
	$sig∑u£
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

175 #ifde‡
__USE_XOPEN


176 #ifde‡
__GNUC__


177 
	$sig∑u£
 (
__sig
Ë
	`__asm__
 ("__xpg_sigpause");

180 
	#sig∑u£
(
sig
Ë
	`__sig∑u£
 ((sig), 1)

	)

186 #ifde‡
__USE_BSD


193 
	#sigmask
(
sig
Ë
	`__sigmask
(sig)

	)

196 
	$sigblock
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

199 
	$sig£tmask
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

202 
	$siggëmask
 (Ë
__THROW
 
__©åibuã_dïªˇãd__
;

206 #ifde‡
__USE_MISC


207 
	#NSIG
 
_NSIG


	)

210 #ifde‡
__USE_GNU


211 
__sigh™dÀr_t
 
	tsigh™dÀr_t
;

215 #ifde‡
__USE_BSD


216 
__sigh™dÀr_t
 
	tsig_t
;

219 #ifde‡
__USE_POSIX


222 
	$sigem±y£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

225 
	$sigfûl£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

228 
	$sigadd£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

231 
	$sigdñ£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

234 
	$sigismembî
 (
__c⁄°
 
sig£t_t
 *
__£t
, 
__signo
)

235 
__THROW
 
	`__n⁄nuŒ
 ((1));

237 #ifde‡
__USE_GNU


239 
	$sigi£m±y£t
 (
__c⁄°
 
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

242 
	$sig™d£t
 (
sig£t_t
 *
__£t
, 
__c⁄°
 sig£t_à*
__À·
,

243 
__c⁄°
 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

246 
	$sig‹£t
 (
sig£t_t
 *
__£t
, 
__c⁄°
 sig£t_à*
__À·
,

247 
__c⁄°
 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

252 
	~<bôs/siga˘i⁄.h
>

255 
	$sig¥ocmask
 (
__how
, 
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
,

256 
sig£t_t
 *
__ª°ri˘
 
__o£t
Ë
__THROW
;

263 
	$sigsu•íd
 (
__c⁄°
 
sig£t_t
 *
__£t
Ë
	`__n⁄nuŒ
 ((1));

266 
	$siga˘i⁄
 (
__sig
, 
__c⁄°
 
siga˘i⁄
 *
__ª°ri˘
 
__a˘
,

267 
siga˘i⁄
 *
__ª°ri˘
 
__ﬂ˘
Ë
__THROW
;

270 
	$sig≥ndög
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

277 
	$sigwaô
 (
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
, *__ª°ri˘ 
__sig
)

278 
	`__n⁄nuŒ
 ((1, 2));

280 #ifde‡
__USE_POSIX199309


285 
	$sigwaôöfo
 (
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
,

286 
sigöfo_t
 *
__ª°ri˘
 
__öfo
Ë
	`__n⁄nuŒ
 ((1));

293 
	$sigtimedwaô
 (
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
,

294 
sigöfo_t
 *
__ª°ri˘
 
__öfo
,

295 
__c⁄°
 
time•ec
 *
__ª°ri˘
 
__timeout
)

296 
	`__n⁄nuŒ
 ((1));

300 
	$sigqueue
 (
__pid_t
 
__pid
, 
__sig
, 
__c⁄°
 
sigvÆ
 
__vÆ
)

301 
__THROW
;

306 #ifde‡
__USE_BSD


310 
__c⁄°
 *__c⁄° 
_sys_sigli°
[
_NSIG
];

311 
__c⁄°
 *__c⁄° 
sys_sigli°
[
_NSIG
];

314 
	ssigvec


316 
__sigh™dÀr_t
 
sv_h™dÀr
;

317 
sv_mask
;

319 
sv_Êags
;

320 
	#sv_⁄°ack
 
sv_Êags


	)

324 
	#SV_ONSTACK
 (1 << 0)

	)

325 
	#SV_INTERRUPT
 (1 << 1)

	)

326 
	#SV_RESETHAND
 (1 << 2)

	)

334 
	$sigvec
 (
__sig
, 
__c⁄°
 
sigvec
 *
__vec
,

335 
sigvec
 *
__ovec
Ë
__THROW
;

339 
	~<bôs/sigc⁄ãxt.h
>

342 
	$sigªtu∫
 (
sigc⁄ãxt
 *
__s˝
Ë
__THROW
;

347 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


348 
	#__√ed_size_t


	)

349 
	~<°ddef.h
>

354 
	$sigöãºu±
 (
__sig
, 
__öãºu±
Ë
__THROW
;

356 
	~<bôs/sig°ack.h
>

357 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


359 
	~<sys/uc⁄ãxt.h
>

365 
	$sig°ack
 (
sig°ack
 *
__ss
, sig°ack *
__oss
)

366 
__THROW
 
__©åibuã_dïªˇãd__
;

370 
	$sigÆt°ack
 (
__c⁄°
 
sigÆt°ack
 *
__ª°ri˘
 
__ss
,

371 
sigÆt°ack
 *
__ª°ri˘
 
__oss
Ë
__THROW
;

375 #ifde‡
__USE_XOPEN_EXTENDED


379 
	$sighﬁd
 (
__sig
Ë
__THROW
;

382 
	$sigªl£
 (
__sig
Ë
__THROW
;

385 
	$sigign‹e
 (
__sig
Ë
__THROW
;

388 
__sigh™dÀr_t
 
	$sig£t
 (
__sig
, 
__sigh™dÀr_t
 
__di•
Ë
__THROW
;

391 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


394 
	~<bôs/±hªadty≥s.h
>

395 
	~<bôs/sigthªad.h
>

402 
	$__libc_cuºít_sigπmö
 (Ë
__THROW
;

404 
	$__libc_cuºít_sigπmax
 (Ë
__THROW
;

408 
__END_DECLS


	@/usr/include/stdint.h

23 #i‚de‡
_STDINT_H


24 
	#_STDINT_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/wch¨.h
>

28 
	~<bôs/w‹dsize.h
>

35 #i‚de‡
__öt8_t_deföed


36 
	#__öt8_t_deföed


	)

37 sig√d 
	töt8_t
;

38 
	töt16_t
;

39 
	töt32_t
;

40 #i‡
__WORDSIZE
 == 64

41 
	töt64_t
;

43 
__exãnsi⁄__


44 
	töt64_t
;

49 
	tuöt8_t
;

50 
	tuöt16_t
;

51 #i‚de‡
__uöt32_t_deföed


52 
	tuöt32_t
;

53 
	#__uöt32_t_deföed


	)

55 #i‡
__WORDSIZE
 == 64

56 
	tuöt64_t
;

58 
__exãnsi⁄__


59 
	tuöt64_t
;

66 sig√d 
	töt_Àa°8_t
;

67 
	töt_Àa°16_t
;

68 
	töt_Àa°32_t
;

69 #i‡
__WORDSIZE
 == 64

70 
	töt_Àa°64_t
;

72 
__exãnsi⁄__


73 
	töt_Àa°64_t
;

77 
	tuöt_Àa°8_t
;

78 
	tuöt_Àa°16_t
;

79 
	tuöt_Àa°32_t
;

80 #i‡
__WORDSIZE
 == 64

81 
	tuöt_Àa°64_t
;

83 
__exãnsi⁄__


84 
	tuöt_Àa°64_t
;

91 sig√d 
	töt_Á°8_t
;

92 #i‡
__WORDSIZE
 == 64

93 
	töt_Á°16_t
;

94 
	töt_Á°32_t
;

95 
	töt_Á°64_t
;

97 
	töt_Á°16_t
;

98 
	töt_Á°32_t
;

99 
__exãnsi⁄__


100 
	töt_Á°64_t
;

104 
	tuöt_Á°8_t
;

105 #i‡
__WORDSIZE
 == 64

106 
	tuöt_Á°16_t
;

107 
	tuöt_Á°32_t
;

108 
	tuöt_Á°64_t
;

110 
	tuöt_Á°16_t
;

111 
	tuöt_Á°32_t
;

112 
__exãnsi⁄__


113 
	tuöt_Á°64_t
;

118 #i‡
__WORDSIZE
 == 64

119 #i‚de‡
__öçå_t_deföed


120 
	töçå_t
;

121 
	#__öçå_t_deföed


	)

123 
	tuöçå_t
;

125 #i‚de‡
__öçå_t_deföed


126 
	töçå_t
;

127 
	#__öçå_t_deföed


	)

129 
	tuöçå_t
;

134 #i‡
__WORDSIZE
 == 64

135 
	tötmax_t
;

136 
	tuötmax_t
;

138 
__exãnsi⁄__


139 
	tötmax_t
;

140 
__exãnsi⁄__


141 
	tuötmax_t
;

147 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_LIMIT_MACROS


149 #i‡
__WORDSIZE
 == 64

150 
	#__INT64_C
(
c
Ë¯## 
L


	)

151 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

153 
	#__INT64_C
(
c
Ë¯## 
LL


	)

154 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

160 
	#INT8_MIN
 (-128)

	)

161 
	#INT16_MIN
 (-32767-1)

	)

162 
	#INT32_MIN
 (-2147483647-1)

	)

163 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

165 
	#INT8_MAX
 (127)

	)

166 
	#INT16_MAX
 (32767)

	)

167 
	#INT32_MAX
 (2147483647)

	)

168 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

171 
	#UINT8_MAX
 (255)

	)

172 
	#UINT16_MAX
 (65535)

	)

173 
	#UINT32_MAX
 (4294967295U)

	)

174 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

178 
	#INT_LEAST8_MIN
 (-128)

	)

179 
	#INT_LEAST16_MIN
 (-32767-1)

	)

180 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

181 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

183 
	#INT_LEAST8_MAX
 (127)

	)

184 
	#INT_LEAST16_MAX
 (32767)

	)

185 
	#INT_LEAST32_MAX
 (2147483647)

	)

186 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

189 
	#UINT_LEAST8_MAX
 (255)

	)

190 
	#UINT_LEAST16_MAX
 (65535)

	)

191 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

192 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

196 
	#INT_FAST8_MIN
 (-128)

	)

197 #i‡
__WORDSIZE
 == 64

198 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

199 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

201 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

202 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

204 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

206 
	#INT_FAST8_MAX
 (127)

	)

207 #i‡
__WORDSIZE
 == 64

208 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

209 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

211 
	#INT_FAST16_MAX
 (2147483647)

	)

212 
	#INT_FAST32_MAX
 (2147483647)

	)

214 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

217 
	#UINT_FAST8_MAX
 (255)

	)

218 #i‡
__WORDSIZE
 == 64

219 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

220 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

222 
	#UINT_FAST16_MAX
 (4294967295U)

	)

223 
	#UINT_FAST32_MAX
 (4294967295U)

	)

225 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

229 #i‡
__WORDSIZE
 == 64

230 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

231 
	#INTPTR_MAX
 (9223372036854775807L)

	)

232 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

234 
	#INTPTR_MIN
 (-2147483647-1)

	)

235 
	#INTPTR_MAX
 (2147483647)

	)

236 
	#UINTPTR_MAX
 (4294967295U)

	)

241 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

243 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

246 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

252 #i‡
__WORDSIZE
 == 64

253 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

254 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

256 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

257 
	#PTRDIFF_MAX
 (2147483647)

	)

261 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

262 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

265 #i‡
__WORDSIZE
 == 64

266 
	#SIZE_MAX
 (18446744073709551615UL)

	)

268 
	#SIZE_MAX
 (4294967295U)

	)

272 #i‚de‡
WCHAR_MIN


274 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

275 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

279 
	#WINT_MIN
 (0u)

	)

280 
	#WINT_MAX
 (4294967295u)

	)

287 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_CONSTANT_MACROS


290 
	#INT8_C
(
c
Ë
	)
c

291 
	#INT16_C
(
c
Ë
	)
c

292 
	#INT32_C
(
c
Ë
	)
c

293 #i‡
__WORDSIZE
 == 64

294 
	#INT64_C
(
c
Ë¯## 
L


	)

296 
	#INT64_C
(
c
Ë¯## 
LL


	)

300 
	#UINT8_C
(
c
Ë
	)
c

301 
	#UINT16_C
(
c
Ë
	)
c

302 
	#UINT32_C
(
c
Ë¯## 
U


	)

303 #i‡
__WORDSIZE
 == 64

304 
	#UINT64_C
(
c
Ë¯## 
UL


	)

306 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

310 #i‡
__WORDSIZE
 == 64

311 
	#INTMAX_C
(
c
Ë¯## 
L


	)

312 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

314 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

315 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

	@/usr/include/stdio.h

24 #i‚de‡
_STDIO_H


26 #i‡!
deföed
 
__√ed_FILE
 && !deföed 
__√ed___FILE


27 
	#_STDIO_H
 1

	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


32 
	#__√ed_size_t


	)

33 
	#__√ed_NULL


	)

34 
	~<°ddef.h
>

36 
	~<bôs/ty≥s.h
>

37 
	#__√ed_FILE


	)

38 
	#__√ed___FILE


	)

42 #i‡!
deföed
 
__FILE_deföed
 && deföed 
__√ed_FILE


45 
	g_IO_FILE
;

47 
__BEGIN_NAMESPACE_STD


49 
_IO_FILE
 
	tFILE
;

50 
	g__END_NAMESPACE_STD


51 #i‡
deföed
 
__USE_LARGEFILE64
 || deföed 
__USE_SVID
 || deföed 
__USE_POSIX
 \

52 || 
deföed
 
	g__USE_BSD
 || deföed 
	g__USE_ISOC99
 || deföed 
	g__USE_XOPEN
 \

53 || 
deföed
 
__USE_POSIX2


54 
	$__USING_NAMESPACE_STD
(
FILE
)

57 
	#__FILE_deföed
 1

	)

59 #unde‡
__√ed_FILE


62 #i‡!
deföed
 
____FILE_deföed
 && deföed 
__√ed___FILE


65 
_IO_FILE
 
	t__FILE
;

67 
	#____FILE_deföed
 1

	)

69 #unde‡
__√ed___FILE


72 #ifdef 
_STDIO_H


73 
	#_STDIO_USES_IOSTREAM


	)

75 
	~<libio.h
>

77 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


78 #ifde‡
__GNUC__


79 #i‚de‡
_VA_LIST_DEFINED


80 
_G_va_li°
 
	tva_li°
;

81 
	#_VA_LIST_DEFINED


	)

84 
	~<°d¨g.h
>

88 #ifde‡
__USE_XOPEN2K8


89 #i‚de‡
__off_t_deföed


90 #i‚de‡
__USE_FILE_OFFSET64


91 
__off_t
 
	toff_t
;

93 
__off64_t
 
	toff_t
;

95 
	#__off_t_deföed


	)

97 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


98 
__off64_t
 
	toff64_t
;

99 
	#__off64_t_deföed


	)

102 #i‚de‡
__ssize_t_deföed


103 
__ssize_t
 
	tssize_t
;

104 
	#__ssize_t_deföed


	)

109 
__BEGIN_NAMESPACE_STD


110 #i‚de‡
__USE_FILE_OFFSET64


111 
_G_Âos_t
 
	tÂos_t
;

113 
_G_Âos64_t
 
	tÂos_t
;

115 
__END_NAMESPACE_STD


116 #ifde‡
__USE_LARGEFILE64


117 
_G_Âos64_t
 
	tÂos64_t
;

121 
	#_IOFBF
 0

	)

122 
	#_IOLBF
 1

	)

123 
	#_IONBF
 2

	)

127 #i‚de‡
BUFSIZ


128 
	#BUFSIZ
 
_IO_BUFSIZ


	)

134 #i‚de‡
EOF


135 
	#EOF
 (-1)

	)

141 
	#SEEK_SET
 0

	)

142 
	#SEEK_CUR
 1

	)

143 
	#SEEK_END
 2

	)

146 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


148 
	#P_tmpdú
 "/tmp"

	)

161 
	~<bôs/°dio_lim.h
>

165 
_IO_FILE
 *
°dö
;

166 
_IO_FILE
 *
°dout
;

167 
_IO_FILE
 *
°dîr
;

168 #ifde‡
__STDC__


170 
	#°dö
 
°dö


	)

171 
	#°dout
 
°dout


	)

172 
	#°dîr
 
°dîr


	)

175 
__BEGIN_NAMESPACE_STD


177 
	$ªmove
 (
__c⁄°
 *
__fûíame
Ë
__THROW
;

179 
	$ª«me
 (
__c⁄°
 *
__ﬁd
, __c⁄° *
__√w
Ë
__THROW
;

180 
__END_NAMESPACE_STD


182 #ifde‡
__USE_ATFILE


184 
	$ª«mót
 (
__ﬁdfd
, 
__c⁄°
 *
__ﬁd
, 
__√wfd
,

185 
__c⁄°
 *
__√w
Ë
__THROW
;

188 
__BEGIN_NAMESPACE_STD


193 #i‚de‡
__USE_FILE_OFFSET64


194 
FILE
 *
	$tmpfûe
 (Ë
__wur
;

196 #ifde‡
__REDIRECT


197 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
Ë
__wur
;

199 
	#tmpfûe
 
tmpfûe64


	)

203 #ifde‡
__USE_LARGEFILE64


204 
FILE
 *
	$tmpfûe64
 (Ë
__wur
;

208 *
	$tm≤am
 (*
__s
Ë
__THROW
 
__wur
;

209 
__END_NAMESPACE_STD


211 #ifde‡
__USE_MISC


214 *
	$tm≤am_r
 (*
__s
Ë
__THROW
 
__wur
;

218 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


226 *
	$ãm≤am
 (
__c⁄°
 *
__dú
, __c⁄° *
__pfx
)

227 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

231 
__BEGIN_NAMESPACE_STD


236 
	`f˛o£
 (
FILE
 *
__°ªam
);

241 
	`fÊush
 (
FILE
 *
__°ªam
);

242 
__END_NAMESPACE_STD


244 #ifde‡
__USE_MISC


251 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

254 #ifde‡
__USE_GNU


261 
	`f˛o£Æl
 ();

265 
__BEGIN_NAMESPACE_STD


266 #i‚de‡
__USE_FILE_OFFSET64


271 
FILE
 *
	$f›í
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

272 
__c⁄°
 *
__ª°ri˘
 
__modes
Ë
__wur
;

277 
FILE
 *
	$‰e›í
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

278 
__c⁄°
 *
__ª°ri˘
 
__modes
,

279 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

281 #ifde‡
__REDIRECT


282 
FILE
 *
	`__REDIRECT
 (
f›í
, (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

283 
__c⁄°
 *
__ª°ri˘
 
__modes
), 
f›í64
)

284 
__wur
;

285 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

286 
__c⁄°
 *
__ª°ri˘
 
__modes
,

287 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

288 
__wur
;

290 
	#f›í
 
f›í64


	)

291 
	#‰e›í
 
‰e›í64


	)

294 
__END_NAMESPACE_STD


295 #ifde‡
__USE_LARGEFILE64


296 
FILE
 *
	$f›í64
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

297 
__c⁄°
 *
__ª°ri˘
 
__modes
Ë
__wur
;

298 
FILE
 *
	$‰e›í64
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

299 
__c⁄°
 *
__ª°ri˘
 
__modes
,

300 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

303 #ifdef 
__USE_POSIX


305 
FILE
 *
	$fd›í
 (
__fd
, 
__c⁄°
 *
__modes
Ë
__THROW
 
__wur
;

308 #ifdef 
__USE_GNU


311 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

312 
__c⁄°
 *
__ª°ri˘
 
__modes
,

313 
_IO_cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW
 
__wur
;

316 #ifde‡
__USE_XOPEN2K8


318 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, 
__c⁄°
 *
__modes
)

319 
__THROW
 
__wur
;

324 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
 
__wur
;

328 
__BEGIN_NAMESPACE_STD


331 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

335 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

336 
__modes
, 
size_t
 
__n
Ë
__THROW
;

337 
__END_NAMESPACE_STD


339 #ifdef 
__USE_BSD


342 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

343 
size_t
 
__size
Ë
__THROW
;

346 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

350 
__BEGIN_NAMESPACE_STD


355 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

356 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

361 
	`¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

363 
	$•rötf
 (*
__ª°ri˘
 
__s
,

364 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

370 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

371 
_G_va_li°
 
__¨g
);

376 
	`v¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
);

378 
	$v•rötf
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

379 
_G_va_li°
 
__¨g
Ë
__THROW
;

380 
__END_NAMESPACE_STD


382 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


383 
__BEGIN_NAMESPACE_C99


385 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

386 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...)

387 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

389 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

390 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

391 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

392 
__END_NAMESPACE_C99


395 #ifde‡
__USE_GNU


398 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__f
,

399 
_G_va_li°
 
__¨g
)

400 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

401 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

402 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

403 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

404 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

405 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

406 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

409 #ifde‡
__USE_XOPEN2K8


416 
	$vd¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
,

417 
_G_va_li°
 
__¨g
)

418 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

419 
	$d¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

420 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

424 
__BEGIN_NAMESPACE_STD


429 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

430 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

435 
	$sˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

437 
	$ssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

438 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

440 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

441 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

442 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

443 #ifde‡
__REDIRECT


447 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

448 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

449 
__isoc99_fsˇnf
Ë
__wur
;

450 
	`__REDIRECT
 (
sˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

451 
__isoc99_sˇnf
Ë
__wur
;

452 
	`__REDIRECT
 (
ssˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__s
,

453 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

454 
__isoc99_ssˇnf
Ë
__THROW
;

456 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

457 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

458 
	$__isoc99_sˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

459 
	$__isoc99_ssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

460 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

461 
	#fsˇnf
 
__isoc99_fsˇnf


	)

462 
	#sˇnf
 
__isoc99_sˇnf


	)

463 
	#ssˇnf
 
__isoc99_ssˇnf


	)

467 
__END_NAMESPACE_STD


469 #ifdef 
__USE_ISOC99


470 
__BEGIN_NAMESPACE_C99


475 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

476 
_G_va_li°
 
__¨g
)

477 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

483 
	$vsˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

484 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

487 
	$vssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

488 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

489 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

491 #i‡!
deföed
 
__USE_GNU
 \

492 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

493 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

494 #ifde‡
__REDIRECT


498 
	`__REDIRECT
 (
vfsˇnf
,

499 (
FILE
 *
__ª°ri˘
 
__s
,

500 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

501 
__isoc99_vfsˇnf
)

502 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

503 
	`__REDIRECT
 (
vsˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

504 
_G_va_li°
 
__¨g
), 
__isoc99_vsˇnf
)

505 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

506 
	`__REDIRECT
 (
vssˇnf
,

507 (
__c⁄°
 *
__ª°ri˘
 
__s
,

508 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

509 
__isoc99_vssˇnf
)

510 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

512 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

513 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

514 
_G_va_li°
 
__¨g
Ë
__wur
;

515 
	$__isoc99_vsˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

516 
_G_va_li°
 
__¨g
Ë
__wur
;

517 
	$__isoc99_vssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

518 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

519 
_G_va_li°
 
__¨g
Ë
__THROW
;

520 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

521 
	#vsˇnf
 
__isoc99_vsˇnf


	)

522 
	#vssˇnf
 
__isoc99_vssˇnf


	)

526 
__END_NAMESPACE_C99


530 
__BEGIN_NAMESPACE_STD


535 
	`fgëc
 (
FILE
 *
__°ªam
);

536 
	`gëc
 (
FILE
 *
__°ªam
);

542 
	`gëch¨
 ();

543 
__END_NAMESPACE_STD


547 
	#gëc
(
_Â
Ë
	`_IO_gëc
 (_Â)

	)

549 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


554 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

555 
	`gëch¨_u∆ocked
 ();

558 #ifde‡
__USE_MISC


565 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

569 
__BEGIN_NAMESPACE_STD


577 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

578 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

584 
	`putch¨
 (
__c
);

585 
__END_NAMESPACE_STD


589 
	#putc
(
_ch
, 
_Â
Ë
	`_IO_putc
 (_ch, _Â)

	)

591 #ifde‡
__USE_MISC


598 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

601 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


606 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

607 
	`putch¨_u∆ocked
 (
__c
);

611 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 \

612 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

614 
	`gëw
 (
FILE
 *
__°ªam
);

617 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

621 
__BEGIN_NAMESPACE_STD


626 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

627 
__wur
;

634 *
	$gës
 (*
__s
Ë
__wur
;

635 
__END_NAMESPACE_STD


637 #ifde‡
__USE_GNU


644 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

645 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

649 #ifdef 
__USE_XOPEN2K8


660 
_IO_ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

661 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

662 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

663 
_IO_ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

664 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

665 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

673 
_IO_ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

674 
size_t
 *
__ª°ri˘
 
__n
,

675 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

679 
__BEGIN_NAMESPACE_STD


684 
	`Âuts
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

690 
	`puts
 (
__c⁄°
 *
__s
);

697 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

704 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

705 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

710 
size_t
 
	$fwrôe
 (
__c⁄°
 *
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

711 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
Ë
__wur
;

712 
__END_NAMESPACE_STD


714 #ifde‡
__USE_GNU


721 
	`Âuts_u∆ocked
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

722 
FILE
 *
__ª°ri˘
 
__°ªam
);

725 #ifde‡
__USE_MISC


732 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

733 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

734 
size_t
 
	$fwrôe_u∆ocked
 (
__c⁄°
 *
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

735 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

739 
__BEGIN_NAMESPACE_STD


744 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

749 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

754 
	`ªwöd
 (
FILE
 *
__°ªam
);

755 
__END_NAMESPACE_STD


762 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


763 #i‚de‡
__USE_FILE_OFFSET64


768 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

773 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

775 #ifde‡
__REDIRECT


776 
	`__REDIRECT
 (
f£eko
,

777 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

778 
f£eko64
);

779 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

781 
	#f£eko
 
f£eko64


	)

782 
	#·ñlo
 
·ñlo64


	)

787 
__BEGIN_NAMESPACE_STD


788 #i‚de‡
__USE_FILE_OFFSET64


793 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

798 
	`f£ços
 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos_t
 *
__pos
);

800 #ifde‡
__REDIRECT


801 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

802 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

803 
	`__REDIRECT
 (
f£ços
,

804 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos_t
 *
__pos
), 
f£ços64
);

806 
	#fgëpos
 
fgëpos64


	)

807 
	#f£ços
 
f£ços64


	)

810 
__END_NAMESPACE_STD


812 #ifde‡
__USE_LARGEFILE64


813 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

814 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

815 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

816 
	`f£ços64
 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos64_t
 *
__pos
);

819 
__BEGIN_NAMESPACE_STD


821 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

823 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

825 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

826 
__END_NAMESPACE_STD


828 #ifde‡
__USE_MISC


830 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

831 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

832 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

836 
__BEGIN_NAMESPACE_STD


841 
	`≥º‹
 (
__c⁄°
 *
__s
);

842 
__END_NAMESPACE_STD


848 
	~<bôs/sys_îæi°.h
>

851 #ifdef 
__USE_POSIX


853 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

856 #ifde‡
__USE_MISC


858 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

862 #i‡(
deföed
 
__USE_POSIX2
 || deföed 
__USE_SVID
 || deföed 
__USE_BSD
 || \

863 
deföed
 
__USE_MISC
)

868 
FILE
 *
	$p›í
 (
__c⁄°
 *
__comm™d
, __c⁄° *
__modes
Ë
__wur
;

874 
	`p˛o£
 (
FILE
 *
__°ªam
);

878 #ifdef 
__USE_POSIX


880 *
	$˘îmid
 (*
__s
Ë
__THROW
;

884 #ifde‡
__USE_XOPEN


886 *
	`cu£rid
 (*
__s
);

890 #ifdef 
__USE_GNU


891 
ob°ack
;

894 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

895 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...)

896 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

897 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

898 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

899 
_G_va_li°
 
__¨gs
)

900 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

904 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


908 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

912 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

915 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

918 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


922 
	#__√ed_gë›t


	)

923 
	~<gë›t.h
>

928 #ifde‡
__USE_EXTERN_INLINES


929 
	~<bôs/°dio.h
>

931 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


932 
	~<bôs/°dio2.h
>

934 #ifde‡
__LDBL_COMPAT


935 
	~<bôs/°dio-ldbl.h
>

938 
__END_DECLS


	@/usr/include/stdlib.h

23 #i‚def 
_STDLIB_H


25 
	~<„©uªs.h
>

28 
	#__√ed_size_t


	)

29 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


30 
	#__√ed_wch¨_t


	)

31 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	g__BEGIN_DECLS


37 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


38 
	#_STDLIB_H
 1

	)

40 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
Ë&& !deföed 
_SYS_WAIT_H


42 
	~<bôs/waôÊags.h
>

43 
	~<bôs/waô°©us.h
>

45 #ifde‡
__USE_BSD


50 #i‡
deföed
 
__GNUC__
 && !deföed 
__˝lu•lus


51 
	#__WAIT_INT
(
°©us
) \

52 (
	`__exãnsi⁄__
 (((uni⁄ { 
	`__ty≥of
(
°©us
Ë
__ö
; 
__i
; }) \

53 { .
__ö
 = (
°©us
Ë}).
__i
))

	)

55 
	#__WAIT_INT
(
°©us
Ë(*(*Ë&(°©us))

	)

63 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2 || deföed 
__˝lu•lus


64 
	#__WAIT_STATUS
 *

	)

65 
	#__WAIT_STATUS_DEFN
 *

	)

70 
waô
 *
	m__u±r
;

71 *
	m__ùå
;

72 } 
	t__WAIT_STATUS
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

73 
	#__WAIT_STATUS_DEFN
 *

	)

78 
	#__WAIT_INT
(
°©us
Ë(°©us)

	)

79 
	#__WAIT_STATUS
 *

	)

80 
	#__WAIT_STATUS_DEFN
 *

	)

85 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (
	`__WAIT_INT
 (°©us))

	)

86 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (
	`__WAIT_INT
 (°©us))

	)

87 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (
	`__WAIT_INT
 (°©us))

	)

88 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (
	`__WAIT_INT
 (°©us))

	)

89 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (
	`__WAIT_INT
 (°©us))

	)

90 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (
	`__WAIT_INT
 (°©us))

	)

91 #ifde‡
__WIFCONTINUED


92 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (
	`__WAIT_INT
 (°©us))

	)

96 
__BEGIN_NAMESPACE_STD


100 
	mquŸ
;

101 
	mªm
;

102 } 
	tdiv_t
;

105 #i‚de‡
__ldiv_t_deföed


108 
	mquŸ
;

109 
	mªm
;

110 } 
	tldiv_t
;

111 
	#__ldiv_t_deföed
 1

	)

113 
	g__END_NAMESPACE_STD


115 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


116 
__BEGIN_NAMESPACE_C99


118 
__exãnsi⁄__
 struct

120 
	mquŸ
;

121 
	mªm
;

122 } 
	tŒdiv_t
;

123 
	#__Œdiv_t_deföed
 1

	)

124 
	g__END_NAMESPACE_C99


129 
	#RAND_MAX
 2147483647

	)

134 
	#EXIT_FAILURE
 1

	)

135 
	#EXIT_SUCCESS
 0

	)

139 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

140 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

143 
__BEGIN_NAMESPACE_STD


145 
	$©of
 (
__c⁄°
 *
__≈å
)

146 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

148 
	$©oi
 (
__c⁄°
 *
__≈å
)

149 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

151 
	$©ﬁ
 (
__c⁄°
 *
__≈å
)

152 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

153 
__END_NAMESPACE_STD


155 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_MISC
)

156 
__BEGIN_NAMESPACE_C99


158 
__exãnsi⁄__
 
	$©ﬁl
 (
__c⁄°
 *
__≈å
)

159 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

160 
__END_NAMESPACE_C99


163 
__BEGIN_NAMESPACE_STD


165 
	$°πod
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

166 **
__ª°ri˘
 
__íd±r
)

167 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

168 
__END_NAMESPACE_STD


170 #ifdef 
__USE_ISOC99


171 
__BEGIN_NAMESPACE_C99


173 
	$°πof
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

174 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

176 
	$°πﬁd
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

177 **
__ª°ri˘
 
__íd±r
)

178 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

179 
__END_NAMESPACE_C99


182 
__BEGIN_NAMESPACE_STD


184 
	$°πﬁ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

185 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

186 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

188 
	$°πoul
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

189 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

190 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

191 
__END_NAMESPACE_STD


193 #i‡
deföed
 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_BSD


195 
__exãnsi⁄__


196 
	$°πoq
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

197 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

198 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

200 
__exãnsi⁄__


201 
	$°πouq
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

202 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

203 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

206 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_MISC
)

207 
__BEGIN_NAMESPACE_C99


209 
__exãnsi⁄__


210 
	$°πﬁl
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

211 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

212 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

214 
__exãnsi⁄__


215 
	$°πouŒ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

216 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

217 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

218 
__END_NAMESPACE_C99


222 #ifde‡
__USE_GNU


236 
	~<xloˇÀ.h
>

240 
	$°πﬁ_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

241 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

242 
__loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

244 
	$°πoul_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

245 **
__ª°ri˘
 
__íd±r
,

246 
__ba£
, 
__loˇÀ_t
 
__loc
)

247 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

249 
__exãnsi⁄__


250 
	$°πﬁl_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

251 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

252 
__loˇÀ_t
 
__loc
)

253 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

255 
__exãnsi⁄__


256 
	$°πouŒ_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

257 **
__ª°ri˘
 
__íd±r
,

258 
__ba£
, 
__loˇÀ_t
 
__loc
)

259 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

261 
	$°πod_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

262 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

263 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

265 
	$°πof_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

266 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

267 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

269 
	$°πﬁd_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

270 **
__ª°ri˘
 
__íd±r
,

271 
__loˇÀ_t
 
__loc
)

272 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

276 #ifde‡
__USE_EXTERN_INLINES


277 
__BEGIN_NAMESPACE_STD


278 
__exã∫_ölöe
 

279 
	`__NTH
 (
	$©of
 (
__c⁄°
 *
__≈å
))

281  
	`°πod
 (
__≈å
, (**Ë
NULL
);

282 
	}
}

283 
__exã∫_ölöe
 

284 
__NTH
 (
	$©oi
 (
__c⁄°
 *
__≈å
))

286  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

287 
	}
}

288 
__exã∫_ölöe
 

289 
__NTH
 (
	$©ﬁ
 (
__c⁄°
 *
__≈å
))

291  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

292 
	}
}

293 
	g__END_NAMESPACE_STD


295 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


296 
__BEGIN_NAMESPACE_C99


297 
__exãnsi⁄__
 
__exã∫_ölöe
 

298 
__NTH
 (
	$©ﬁl
 (
__c⁄°
 *
__≈å
))

300  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

301 
	}
}

302 
	g__END_NAMESPACE_C99


307 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


311 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

314 
	$a64l
 (
__c⁄°
 *
__s
)

315 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

319 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_BSD


320 
	~<sys/ty≥s.h
>

327 
	$øndom
 (Ë
__THROW
;

330 
	$§™dom
 (
__£ed
Ë
__THROW
;

336 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

337 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

341 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

344 #ifde‡
__USE_MISC


349 
	søndom_d©a


351 
öt32_t
 *
Âå
;

352 
öt32_t
 *
Ωå
;

353 
öt32_t
 *
°©e
;

354 
ønd_ty≥
;

355 
ønd_deg
;

356 
ønd_£p
;

357 
öt32_t
 *
íd_±r
;

360 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

361 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

363 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

364 
__THROW
 
	`__n⁄nuŒ
 ((2));

366 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

367 
size_t
 
__°©ñí
,

368 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

369 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

371 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

372 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

373 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

378 
__BEGIN_NAMESPACE_STD


380 
	$ønd
 (Ë
__THROW
;

382 
	$§™d
 (
__£ed
Ë
__THROW
;

383 
__END_NAMESPACE_STD


385 #ifde‡
__USE_POSIX


387 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

391 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


395 
	$dønd48
 (Ë
__THROW
;

396 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

399 
	$Ã™d48
 (Ë
__THROW
;

400 
	$ƒ™d48
 (
__xsubi
[3])

401 
__THROW
 
	`__n⁄nuŒ
 ((1));

404 
	$mønd48
 (Ë
__THROW
;

405 
	$jønd48
 (
__xsubi
[3])

406 
__THROW
 
	`__n⁄nuŒ
 ((1));

409 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

410 *
	$£ed48
 (
__£ed16v
[3])

411 
__THROW
 
	`__n⁄nuŒ
 ((1));

412 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

414 #ifde‡
__USE_MISC


418 
	sdønd48_d©a


420 
__x
[3];

421 
__ﬁd_x
[3];

422 
__c
;

423 
__öô
;

424 
__a
;

428 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

429 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

430 
	$î™d48_r
 (
__xsubi
[3],

431 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

432 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

435 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

436 *
__ª°ri˘
 
__ªsu…
)

437 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

438 
	$ƒ™d48_r
 (
__xsubi
[3],

439 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

440 *
__ª°ri˘
 
__ªsu…
)

441 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

444 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

445 *
__ª°ri˘
 
__ªsu…
)

446 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

447 
	$jønd48_r
 (
__xsubi
[3],

448 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

449 *
__ª°ri˘
 
__ªsu…
)

450 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

453 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

454 
__THROW
 
	`__n⁄nuŒ
 ((2));

456 
	$£ed48_r
 (
__£ed16v
[3],

457 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

459 
	$lc⁄g48_r
 (
__∑øm
[7],

460 
dønd48_d©a
 *
__buf„r
)

461 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

467 #i‚de‡
__mÆloc_™d_ˇŒoc_deföed


468 
	#__mÆloc_™d_ˇŒoc_deföed


	)

469 
__BEGIN_NAMESPACE_STD


471 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

473 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

474 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

475 
__END_NAMESPACE_STD


478 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


479 
__BEGIN_NAMESPACE_STD


485 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

486 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

488 
	$‰ì
 (*
__±r
Ë
__THROW
;

489 
__END_NAMESPACE_STD


491 #ifdef 
__USE_MISC


493 
	$c‰ì
 (*
__±r
Ë
__THROW
;

496 #i‡
deföed
 
__USE_GNU
 || deföed 
__USE_BSD
 || deföed 
__USE_MISC


497 
	~<Æloˇ.h
>

500 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

501 || 
deföed
 
__USE_BSD


503 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

506 #ifde‡
__USE_XOPEN2K


508 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

509 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

512 
__BEGIN_NAMESPACE_STD


514 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

518 
	`©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

520 #ifde‡
__USE_GNU


524 #ifde‡
__˝lu•lus


525 "C++" 
	`©_quick_exô
 ((*
__func
) ())

526 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

528 
	`©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

531 
__END_NAMESPACE_STD


533 #ifdef 
__USE_MISC


536 
	`⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

537 
__THROW
 
	`__n⁄nuŒ
 ((1));

540 
__BEGIN_NAMESPACE_STD


544 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

546 #ifde‡
__USE_GNU


552 
	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

554 
__END_NAMESPACE_STD


556 #ifde‡
__USE_ISOC99


557 
__BEGIN_NAMESPACE_C99


560 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

561 
__END_NAMESPACE_C99


565 
__BEGIN_NAMESPACE_STD


567 *
	$gëív
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

568 
__END_NAMESPACE_STD


572 *
	$__£cuª_gëív
 (
__c⁄°
 *
__«me
)

573 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

575 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


579 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

582 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


585 
	$£ãnv
 (
__c⁄°
 *
__«me
, __c⁄° *
__vÆue
, 
__ª∂a˚
)

586 
__THROW
 
	`__n⁄nuŒ
 ((2));

589 
	$un£ãnv
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

592 #ifdef 
__USE_MISC


596 
	$˛óªnv
 (Ë
__THROW
;

600 #i‡
deföed
 
__USE_MISC
 \

601 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
)

606 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

609 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 \

610 || 
deföed
 
__USE_XOPEN2K8


619 #i‚de‡
__USE_FILE_OFFSET64


620 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

622 #ifde‡
__REDIRECT


623 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

624 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

626 
	#mk°emp
 
mk°emp64


	)

629 #ifde‡
__USE_LARGEFILE64


630 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

634 #ifde‡
__USE_MISC


641 #i‚de‡
__USE_FILE_OFFSET64


642 
	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

644 #ifde‡
__REDIRECT


645 
	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

646 
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

648 
	#mk°emps
 
mk°emps64


	)

651 #ifde‡
__USE_LARGEFILE64


652 
	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

653 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

657 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K8


663 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

666 #ifde‡
__USE_GNU


673 #i‚de‡
__USE_FILE_OFFSET64


674 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

676 #ifde‡
__REDIRECT


677 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

678 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

680 
	#mko°emp
 
mko°emp64


	)

683 #ifde‡
__USE_LARGEFILE64


684 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

693 #i‚de‡
__USE_FILE_OFFSET64


694 
	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

695 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

697 #ifde‡
__REDIRECT


698 
	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

699 
__Êags
), 
mko°emps64
)

700 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

702 
	#mko°emps
 
mko°emps64


	)

705 #ifde‡
__USE_LARGEFILE64


706 
	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

707 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

712 
__BEGIN_NAMESPACE_STD


717 
	$sy°em
 (
__c⁄°
 *
__comm™d
Ë
__wur
;

718 
__END_NAMESPACE_STD


721 #ifdef 
__USE_GNU


724 *
	$ˇn⁄iˇlize_fûe_«me
 (
__c⁄°
 *
__«me
)

725 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

728 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


734 *
	$ªÆ∑th
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

735 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

740 #i‚de‡
__COMPAR_FN_T


741 
	#__COMPAR_FN_T


	)

742 (*
	t__com∑r_‚_t
Ë(
	t__c⁄°
 *, __const *);

744 #ifdef 
__USE_GNU


745 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

748 #ifde‡
__USE_GNU


749 (*
	t__com∑r_d_‚_t
Ë(
	t__c⁄°
 *, __const *, *);

752 
__BEGIN_NAMESPACE_STD


755 *
	$b£¨ch
 (
__c⁄°
 *
__key
, __c⁄° *
__ba£
,

756 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

757 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

761 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

762 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

763 #ifde‡
__USE_GNU


764 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

765 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

766 
	`__n⁄nuŒ
 ((1, 4));

771 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

772 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

773 
__END_NAMESPACE_STD


775 #ifde‡
__USE_ISOC99


776 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

777 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

781 
__BEGIN_NAMESPACE_STD


785 
div_t
 
	$div
 (
__numî
, 
__díom
)

786 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

787 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

788 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

789 
__END_NAMESPACE_STD


791 #ifde‡
__USE_ISOC99


792 
__BEGIN_NAMESPACE_C99


793 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

794 
__díom
)

795 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

796 
__END_NAMESPACE_C99


800 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

801 || 
deföed
 
__USE_SVID


808 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

809 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

814 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

815 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

820 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

821 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

824 #ifde‡
__USE_MISC


826 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

827 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

828 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

829 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

830 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

831 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

832 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

833 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

838 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

839 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

840 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

841 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

842 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

843 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

845 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

846 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

847 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

848 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

849 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

850 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

851 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

852 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

857 
__BEGIN_NAMESPACE_STD


860 
	$mbÀn
 (
__c⁄°
 *
__s
, 
size_t
 
__n
Ë
__THROW
 
__wur
;

863 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

864 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
 
__wur
;

867 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
 
__wur
;

871 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

872 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

874 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

875 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

876 
__THROW
;

877 
__END_NAMESPACE_STD


880 #ifde‡
__USE_SVID


885 
	$Ωm©ch
 (
__c⁄°
 *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

889 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


896 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

897 *
__c⁄°
 *
__ª°ri˘
 
__tokís
,

898 **
__ª°ri˘
 
__vÆuï
)

899 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

903 #ifde‡
__USE_XOPEN


905 
	$£tkey
 (
__c⁄°
 *
__key
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

911 #ifde‡
__USE_XOPEN2KXSI


913 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

916 #ifde‡
__USE_XOPEN


921 
	$gø¡±
 (
__fd
Ë
__THROW
;

925 
	$u∆ock±
 (
__fd
Ë
__THROW
;

930 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

933 #ifde‡
__USE_GNU


937 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

938 
__THROW
 
	`__n⁄nuŒ
 ((2));

941 
	`gë±
 ();

944 #ifde‡
__USE_BSD


948 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

949 
__THROW
 
	`__n⁄nuŒ
 ((1));

954 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


955 
	~<bôs/°dlib.h
>

957 #ifde‡
__LDBL_COMPAT


958 
	~<bôs/°dlib-ldbl.h
>

962 #unde‡
__√ed_mÆloc_™d_ˇŒoc


964 
__END_DECLS


	@/usr/include/string.h

24 #i‚def 
_STRING_H


25 
	#_STRING_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


32 
	#__√ed_size_t


	)

33 
	#__√ed_NULL


	)

34 
	~<°ddef.h
>

37 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

38 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

42 
__BEGIN_NAMESPACE_STD


44 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
,

45 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

46 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

49 *
	$memmove
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
)

50 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

51 
__END_NAMESPACE_STD


56 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN


57 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

58 
__c
, 
size_t
 
__n
)

59 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

63 
__BEGIN_NAMESPACE_STD


65 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

68 
	$memcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

69 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

72 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


75 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

76 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

77 
__c⁄°
 *
	`memchr
 (__c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

78 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

80 #ifde‡
__OPTIMIZE__


81 
__exã∫_Æways_ölöe
 *

82 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


84  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

87 
__exã∫_Æways_ölöe
 
__c⁄°
 *

88 
	`memchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


90  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

93 
	}
}

95 *
	$memchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

96 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

98 
__END_NAMESPACE_STD


100 #ifde‡
__USE_GNU


103 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


104 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

105 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

106 "C++" 
__c⁄°
 *
	$øwmemchr
 (
__c⁄°
 *
__s
, 
__c
)

107 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

109 *
	$øwmemchr
 (
__c⁄°
 *
__s
, 
__c
)

110 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

114 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


115 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

116 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

117 "C++" 
__c⁄°
 *
	$memrchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

118 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

120 *
	$memrchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

121 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

126 
__BEGIN_NAMESPACE_STD


128 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

129 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

131 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

132 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

133 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

136 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

137 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

139 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

140 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

143 
	$°rcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

144 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

146 
	$°∫cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

147 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

150 
	$°rcﬁl
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

151 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

153 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

154 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

155 
__THROW
 
	`__n⁄nuŒ
 ((2));

156 
__END_NAMESPACE_STD


158 #ifde‡
__USE_XOPEN2K8


162 
	~<xloˇÀ.h
>

165 
	$°rcﬁl_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
__loˇÀ_t
 
__l
)

166 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

168 
size_t
 
	$°rx‰m_l
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
,

169 
__loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

172 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 \

173 || 
deföed
 
__USE_XOPEN2K8


175 *
	$°rdup
 (
__c⁄°
 *
__s
)

176 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

182 #i‡
deföed
 
__USE_XOPEN2K8


183 *
	$°∫dup
 (
__c⁄°
 *
__°rög
, 
size_t
 
__n
)

184 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

187 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


189 
	#°rdu∑
(
s
) \

190 (
__exãnsi⁄__
 \

192 
__c⁄°
 *
__ﬁd
 = (
s
); \

193 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

194 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

195 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

196 
	}
}))

	)

199 
	#°∫du∑
(
s
, 
n
) \

200 (
__exãnsi⁄__
 \

202 
__c⁄°
 *
__ﬁd
 = (
s
); \

203 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

204 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

205 
__√w
[
__Àn
] = '\0'; \

206 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

207 }))

	)

210 
	g__BEGIN_NAMESPACE_STD


212 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


215 *
°rchr
 (*
__s
, 
__c
)

216 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

217 
__c⁄°
 *
°rchr
 (__c⁄° *
__s
, 
__c
)

218 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

220 #ifde‡
__OPTIMIZE__


221 
__exã∫_Æways_ölöe
 *

222 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


224  
__buûtö_°rchr
 (
__s
, 
__c
);

227 
__exã∫_Æways_ölöe
 
__c⁄°
 *

228 
°rchr
 (
__c⁄°
 *
__s
, 
__c
Ë
	g__THROW


230  
__buûtö_°rchr
 (
__s
, 
__c
);

235 *
	$°rchr
 (
__c⁄°
 *
__s
, 
__c
)

236 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

239 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


242 *
	`°ºchr
 (*
__s
, 
__c
)

243 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

244 
__c⁄°
 *
	`°ºchr
 (__c⁄° *
__s
, 
__c
)

245 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

247 #ifde‡
__OPTIMIZE__


248 
__exã∫_Æways_ölöe
 *

249 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


251  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

254 
__exã∫_Æways_ölöe
 
__c⁄°
 *

255 
	`°ºchr
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


257  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

260 
	}
}

262 *
	$°ºchr
 (
__c⁄°
 *
__s
, 
__c
)

263 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

265 
__END_NAMESPACE_STD


267 #ifde‡
__USE_GNU


270 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


271 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

272 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

273 "C++" 
__c⁄°
 *
	$°rch∫ul
 (
__c⁄°
 *
__s
, 
__c
)

274 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

276 *
	$°rch∫ul
 (
__c⁄°
 *
__s
, 
__c
)

277 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

281 
__BEGIN_NAMESPACE_STD


284 
size_t
 
	$°rc•n
 (
__c⁄°
 *
__s
, __c⁄° *
__ªje˘
)

285 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

288 
size_t
 
	$°r•n
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

289 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

291 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


294 *
	`°Ωbrk
 (*
__s
, 
__c⁄°
 *
__ac˚±
)

295 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

296 
__c⁄°
 *
	`°Ωbrk
 (__c⁄° *
__s
, __c⁄° *
__ac˚±
)

297 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

299 #ifde‡
__OPTIMIZE__


300 
__exã∫_Æways_ölöe
 *

301 
	`°Ωbrk
 (*
__s
, 
__c⁄°
 *
__ac˚±
Ë
__THROW


303  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

306 
__exã∫_Æways_ölöe
 
__c⁄°
 *

307 
	`°Ωbrk
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
Ë
__THROW


309  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

312 
	}
}

314 *
	$°Ωbrk
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

315 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

318 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


321 *
	`°r°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
)

322 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

323 
__c⁄°
 *
	`°r°r
 (__c⁄° *
__hay°ack
,

324 
__c⁄°
 *
__√edÀ
)

325 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

327 #ifde‡
__OPTIMIZE__


328 
__exã∫_Æways_ölöe
 *

329 
	`°r°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
Ë
__THROW


331  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

334 
__exã∫_Æways_ölöe
 
__c⁄°
 *

335 
	`°r°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
Ë
__THROW


337  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

340 
	}
}

342 *
	$°r°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
)

343 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

348 *
	$°πok
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__dñim
)

349 
__THROW
 
	`__n⁄nuŒ
 ((2));

350 
__END_NAMESPACE_STD


354 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

355 
__c⁄°
 *
__ª°ri˘
 
__dñim
,

356 **
__ª°ri˘
 
__ßve_±r
)

357 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

358 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


359 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__dñim
,

360 **
__ª°ri˘
 
__ßve_±r
)

361 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

364 #ifde‡
__USE_GNU


366 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


367 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
)

368 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

369 "C++" 
__c⁄°
 *
	$°rˇ£°r
 (
__c⁄°
 *
__hay°ack
,

370 
__c⁄°
 *
__√edÀ
)

371 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

373 *
	$°rˇ£°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
)

374 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

378 #ifde‡
__USE_GNU


382 *
	$memmem
 (
__c⁄°
 *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

383 
__c⁄°
 *
__√edÀ
, 
size_t
 
__√edÀÀn
)

384 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

388 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

389 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

390 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

391 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

392 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

393 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

397 
__BEGIN_NAMESPACE_STD


399 
size_t
 
	$°æí
 (
__c⁄°
 *
__s
)

400 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

401 
__END_NAMESPACE_STD


403 #ifdef 
__USE_XOPEN2K8


406 
size_t
 
	$°∫Àn
 (
__c⁄°
 *
__°rög
, 
size_t
 
__maxÀn
)

407 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

411 
__BEGIN_NAMESPACE_STD


413 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

414 
__END_NAMESPACE_STD


415 #i‡
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_MISC


423 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


426 #ifde‡
__REDIRECT_NTH


427 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

428 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

429 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

431 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

432 
__THROW
 
	`__n⁄nuŒ
 ((2));

433 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

438 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

439 
__THROW
 
	`__n⁄nuŒ
 ((2));

443 #ifde‡
__USE_XOPEN2K8


445 *
	$°ªº‹_l
 (
__î∫um
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

451 
	$__bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

453 #ifde‡
__USE_BSD


455 
	$bc›y
 (
__c⁄°
 *
__§c
, *
__de°
, 
size_t
 
__n
)

456 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

459 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

462 
	$bcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

463 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

466 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


469 *
	`ödex
 (*
__s
, 
__c
)

470 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

471 
__c⁄°
 *
	`ödex
 (__c⁄° *
__s
, 
__c
)

472 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

474 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


475 
__exã∫_Æways_ölöe
 *

476 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


478  
	`__buûtö_ödex
 (
__s
, 
__c
);

481 
__exã∫_Æways_ölöe
 
__c⁄°
 *

482 
	`ödex
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


484  
	`__buûtö_ödex
 (
__s
, 
__c
);

487 
	}
}

489 *
	$ödex
 (
__c⁄°
 *
__s
, 
__c
)

490 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

494 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


497 *
	`rödex
 (*
__s
, 
__c
)

498 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

499 
__c⁄°
 *
	`rödex
 (__c⁄° *
__s
, 
__c
)

500 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

502 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


503 
__exã∫_Æways_ölöe
 *

504 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


506  
	`__buûtö_rödex
 (
__s
, 
__c
);

509 
__exã∫_Æways_ölöe
 
__c⁄°
 *

510 
	`rödex
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


512  
	`__buûtö_rödex
 (
__s
, 
__c
);

515 
	}
}

517 *
	$rödex
 (
__c⁄°
 *
__s
, 
__c
)

518 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

523 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

527 #ifdef 
__USE_GNU


528 
	$ff¶
 (
__l
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

529 #ifde‡
__GNUC__


530 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

531 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

536 
	$°rˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

537 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

540 
	$°∫ˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

541 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

544 #ifdef 
__USE_GNU


547 
	$°rˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

548 
__loˇÀ_t
 
__loc
)

549 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

551 
	$°∫ˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

552 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

553 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

556 #ifdef 
__USE_BSD


559 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

560 
__c⁄°
 *
__ª°ri˘
 
__dñim
)

561 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

564 #ifdef 
__USE_XOPEN2K8


566 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

569 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

570 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

571 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

572 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

576 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

577 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

578 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

579 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

580 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

581 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

584 #ifdef 
__USE_GNU


586 
	$°rvîscmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

587 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

590 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

593 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

595 #i‚de‡
ba£«me


600 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


601 "C++" *
	$ba£«me
 (*
__fûíame
)

602 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

603 "C++" 
__c⁄°
 *
	$ba£«me
 (
__c⁄°
 *
__fûíame
)

604 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

606 *
	$ba£«me
 (
__c⁄°
 *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

612 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

613 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__OPTIMIZE_SIZE__
 \

614 && !
deföed
 
__NO_INLINE__
 && !deföed 
__˝lu•lus


634 
	~<bôs/°rög.h
>

637 
	~<bôs/°rög2.h
>

640 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


642 
	~<bôs/°rög3.h
>

646 
__END_DECLS


	@/usr/include/sys/epoll.h

19 #i‚def 
_SYS_EPOLL_H


20 
	#_SYS_EPOLL_H
 1

	)

22 
	~<°döt.h
>

23 
	~<sys/ty≥s.h
>

26 
	~<bôs/sig£t.h
>

28 #i‚de‡
__sig£t_t_deföed


29 
	#__sig£t_t_deföed


	)

30 
__sig£t_t
 
	tsig£t_t
;

37 
	mEPOLL_CLOEXEC
 = 02000000,

38 
	#EPOLL_CLOEXEC
 
EPOLL_CLOEXEC


	)

39 
	mEPOLL_NONBLOCK
 = 04000

40 
	#EPOLL_NONBLOCK
 
EPOLL_NONBLOCK


	)

44 
	eEPOLL_EVENTS


46 
	mEPOLLIN
 = 0x001,

47 
	#EPOLLIN
 
EPOLLIN


	)

48 
	mEPOLLPRI
 = 0x002,

49 
	#EPOLLPRI
 
EPOLLPRI


	)

50 
	mEPOLLOUT
 = 0x004,

51 
	#EPOLLOUT
 
EPOLLOUT


	)

52 
	mEPOLLRDNORM
 = 0x040,

53 
	#EPOLLRDNORM
 
EPOLLRDNORM


	)

54 
	mEPOLLRDBAND
 = 0x080,

55 
	#EPOLLRDBAND
 
EPOLLRDBAND


	)

56 
	mEPOLLWRNORM
 = 0x100,

57 
	#EPOLLWRNORM
 
EPOLLWRNORM


	)

58 
	mEPOLLWRBAND
 = 0x200,

59 
	#EPOLLWRBAND
 
EPOLLWRBAND


	)

60 
	mEPOLLMSG
 = 0x400,

61 
	#EPOLLMSG
 
EPOLLMSG


	)

62 
	mEPOLLERR
 = 0x008,

63 
	#EPOLLERR
 
EPOLLERR


	)

64 
	mEPOLLHUP
 = 0x010,

65 
	#EPOLLHUP
 
EPOLLHUP


	)

66 
	mEPOLLRDHUP
 = 0x2000,

67 
	#EPOLLRDHUP
 
EPOLLRDHUP


	)

68 
	mEPOLLONESHOT
 = (1 << 30),

69 
	#EPOLLONESHOT
 
EPOLLONESHOT


	)

70 
	mEPOLLET
 = (1 << 31)

71 
	#EPOLLET
 
EPOLLET


	)

76 
	#EPOLL_CTL_ADD
 1

	)

77 
	#EPOLL_CTL_DEL
 2

	)

78 
	#EPOLL_CTL_MOD
 3

	)

81 
	uïﬁl_d©a


83 *
	m±r
;

84 
	mfd
;

85 
uöt32_t
 
	mu32
;

86 
uöt64_t
 
	mu64
;

87 } 
	tïﬁl_d©a_t
;

89 
	sïﬁl_evít


91 
uöt32_t
 
	mevíts
;

92 
ïﬁl_d©a_t
 
	md©a
;

93 } 
__©åibuã__
 ((
__∑cked__
));

96 
__BEGIN_DECLS


102 
	$ïﬁl_¸óã
 (
__size
Ë
__THROW
;

106 
	$ïﬁl_¸óã1
 (
__Êags
Ë
__THROW
;

115 
	$ïﬁl_˘l
 (
__ïfd
, 
__›
, 
__fd
,

116 
ïﬁl_evít
 *
__evít
Ë
__THROW
;

129 
	`ïﬁl_waô
 (
__ïfd
, 
ïﬁl_evít
 *
__evíts
,

130 
__maxevíts
, 
__timeout
);

138 
	`ïﬁl_pwaô
 (
__ïfd
, 
ïﬁl_evít
 *
__evíts
,

139 
__maxevíts
, 
__timeout
,

140 
__c⁄°
 
__sig£t_t
 *
__ss
);

142 
__END_DECLS


	@/usr/include/sys/ioctl.h

19 #i‚def 
_SYS_IOCTL_H


20 
	#_SYS_IOCTL_H
 1

	)

22 
	~<„©uªs.h
>

24 
	g__BEGIN_DECLS


27 
	~<bôs/io˘ls.h
>

30 
	~<bôs/io˘l-ty≥s.h
>

37 
	~<sys/âydeÁu…s.h
>

42 
	$io˘l
 (
__fd
, 
__ªque°
, ...Ë
__THROW
;

44 
__END_DECLS


	@/usr/include/sys/param.h

19 #i‚de‡
_SYS_PARAM_H


20 
	#_SYS_PARAM_H
 1

	)

22 #i‚de‡
ARG_MAX


23 
	#__undef_ARG_MAX


	)

26 
	~<limôs.h
>

27 
	~<löux/limôs.h
>

28 
	~<löux/∑øm.h
>

31 #i‚de‡
__undef_ARG_MAX


32 #unde‡
ARG_MAX


33 #unde‡
__undef_ARG_MAX


38 
	#NBBY
 
CHAR_BIT


	)

39 #i‚def 
NGROUPS


40 
	#NGROUPS
 
NGROUPS_MAX


	)

42 
	#MAXSYMLINKS
 20

	)

43 
	#CANBSIZ
 
MAX_CANON


	)

44 
	#MAXPATHLEN
 
PATH_MAX


	)

48 
	#NOFILE
 256

	)

49 
	#NCARGS
 131072

	)

52 
	~<sys/ty≥s.h
>

55 
	#£tbô
(
a
,
i
Ë(◊)[(i)/
NBBY
] |1<<((i)%NBBY))

	)

56 
	#˛rbô
(
a
,
i
Ë(◊)[(i)/
NBBY
] &~(1<<((i)%NBBY)))

	)

57 
	#is£t
(
a
,
i
Ë(◊)[(i)/
NBBY
] & (1<<((i)%NBBY)))

	)

58 
	#is˛r
(
a
,
i
Ë((◊)[(i)/
NBBY
] & (1<<((i)%NBBY))Ë=0)

	)

61 #i‚de‡
howm™y


62 
	#howm™y
(
x
, 
y
Ë(((xË+ ((yË- 1)Ë/ (y))

	)

64 #ifde‡
__GNUC__


65 
	#roundup
(
x
, 
y
Ë(
	`__buûtö_c⁄°™t_p
 (yË&& 
	`powîof2
 (y) \

66 ? (((
x
Ë+ (
y
) - 1) & ~((y) - 1)) \

67 : ((((
x
Ë+ ((
y
Ë- 1)Ë/ (y)Ë* (y)))

	)

69 
	#roundup
(
x
, 
y
Ë((((xË+ ((yË- 1)Ë/ (y)Ë* (y))

	)

71 
	#powîof2
(
x
Ë((((xË- 1Ë& (x)Ë=0)

	)

74 
	#MIN
(
a
,
b
Ë((◊)<(b))?◊):(b))

	)

75 
	#MAX
(
a
,
b
Ë((◊)>(b))?◊):(b))

	)

79 
	#DEV_BSIZE
 512

	)

	@/usr/include/sys/queue.h

32 #i‚def 
_SYS_QUEUE_H_


33 
	#_SYS_QUEUE_H_


	)

84 
	#LIST_HEAD
(
«me
, 
ty≥
) \

85 
	s«me
 { \

86 
ty≥
 *
lh_fú°
; \

87 }

	)

89 
	#LIST_HEAD_INITIALIZER
(
hód
) \

90 { 
NULL
 }

	)

92 
	#LIST_ENTRY
(
ty≥
) \

94 
ty≥
 *
À_√xt
; \

95 
ty≥
 **
À_¥ev
; \

96 }

	)

101 
	#LIST_INIT
(
hód
) do { \

102 (
hód
)->
lh_fú°
 = 
NULL
; \

103 }  0)

	)

105 
	#LIST_INSERT_AFTER
(
li°ñm
, 
ñm
, 
fõld
) do { \

106 i‡(((
ñm
)->
fõld
.
À_√xt
 = (
li°ñm
)->fõld.À_√xtË!
NULL
) \

107 (
li°ñm
)->
fõld
.
À_√xt
->fõld.
À_¥ev
 = \

108 &(
ñm
)->
fõld
.
À_√xt
; \

109 (
li°ñm
)->
fõld
.
À_√xt
 = (
ñm
); \

110 (
ñm
)->
fõld
.
À_¥ev
 = &(
li°ñm
)->fõld.
À_√xt
; \

111 }  0)

	)

113 
	#LIST_INSERT_BEFORE
(
li°ñm
, 
ñm
, 
fõld
) do { \

114 (
ñm
)->
fõld
.
À_¥ev
 = (
li°ñm
)->field.le_prev; \

115 (
ñm
)->
fõld
.
À_√xt
 = (
li°ñm
); \

116 *(
li°ñm
)->
fõld
.
À_¥ev
 = (
ñm
); \

117 (
li°ñm
)->
fõld
.
À_¥ev
 = &(
ñm
)->fõld.
À_√xt
; \

118 }  0)

	)

120 
	#LIST_INSERT_HEAD
(
hód
, 
ñm
, 
fõld
) do { \

121 i‡(((
ñm
)->
fõld
.
À_√xt
 = (
hód
)->
lh_fú°
Ë!
NULL
) \

122 (
hód
)->
lh_fú°
->
fõld
.
À_¥ev
 = &(
ñm
)->fõld.
À_√xt
;\

123 (
hód
)->
lh_fú°
 = (
ñm
); \

124 (
ñm
)->
fõld
.
À_¥ev
 = &(
hód
)->
lh_fú°
; \

125 }  0)

	)

127 
	#LIST_REMOVE
(
ñm
, 
fõld
) do { \

128 i‡((
ñm
)->
fõld
.
À_√xt
 !
NULL
) \

129 (
ñm
)->
fõld
.
À_√xt
->fõld.
À_¥ev
 = \

130 (
ñm
)->
fõld
.
À_¥ev
; \

131 *(
ñm
)->
fõld
.
À_¥ev
 = (ñm)->fõld.
À_√xt
; \

132 }  0)

	)

134 
	#LIST_FOREACH
(
v¨
, 
hód
, 
fõld
) \

135 (
v¨
Ë((
hód
)->
lh_fú°
); \

136 (
v¨
); \

137 (
v¨
Ë((v¨)->
fõld
.
À_√xt
))

	)

142 
	#LIST_EMPTY
(
hód
Ë((hód)->
lh_fú°
 =
NULL
)

	)

143 
	#LIST_FIRST
(
hód
Ë((hód)->
lh_fú°
)

	)

144 
	#LIST_NEXT
(
ñm
, 
fõld
Ë(”lm)->fõld.
À_√xt
)

	)

150 
	#SLIST_HEAD
(
«me
, 
ty≥
) \

151 
	s«me
 { \

152 
ty≥
 *
¶h_fú°
; \

153 }

	)

155 
	#SLIST_HEAD_INITIALIZER
(
hód
) \

156 { 
NULL
 }

	)

158 
	#SLIST_ENTRY
(
ty≥
) \

160 
ty≥
 *
¶e_√xt
; \

161 }

	)

166 
	#SLIST_INIT
(
hód
) do { \

167 (
hód
)->
¶h_fú°
 = 
NULL
; \

168 }  0)

	)

170 
	#SLIST_INSERT_AFTER
(
¶i°ñm
, 
ñm
, 
fõld
) do { \

171 (
ñm
)->
fõld
.
¶e_√xt
 = (
¶i°ñm
)->field.sle_next; \

172 (
¶i°ñm
)->
fõld
.
¶e_√xt
 = (
ñm
); \

173 }  0)

	)

175 
	#SLIST_INSERT_HEAD
(
hód
, 
ñm
, 
fõld
) do { \

176 (
ñm
)->
fõld
.
¶e_√xt
 = (
hód
)->
¶h_fú°
; \

177 (
hód
)->
¶h_fú°
 = (
ñm
); \

178 }  0)

	)

180 
	#SLIST_REMOVE_HEAD
(
hód
, 
fõld
) do { \

181 (
hód
)->
¶h_fú°
 = (hód)->¶h_fú°->
fõld
.
¶e_√xt
; \

182 }  0)

	)

184 
	#SLIST_REMOVE
(
hód
, 
ñm
, 
ty≥
, 
fõld
) do { \

185 i‡((
hód
)->
¶h_fú°
 =(
ñm
)) { \

186 
	`SLIST_REMOVE_HEAD
((
hód
), 
fõld
); \

189 
ty≥
 *
cuªlm
 = (
hód
)->
¶h_fú°
; \

190 
cuªlm
->
fõld
.
¶e_√xt
 !(
ñm
)) \

191 
cuªlm
 = cuªlm->
fõld
.
¶e_√xt
; \

192 
cuªlm
->
fõld
.
¶e_√xt
 = \

193 
cuªlm
->
fõld
.
¶e_√xt
->field.sle_next; \

195 }  0)

	)

197 
	#SLIST_FOREACH
(
v¨
, 
hód
, 
fõld
) \

198 (
v¨
Ë(
hód
)->
¶h_fú°
; (v¨); (v¨Ë(v¨)->
fõld
.
¶e_√xt
)

	)

203 
	#SLIST_EMPTY
(
hód
Ë((hód)->
¶h_fú°
 =
NULL
)

	)

204 
	#SLIST_FIRST
(
hód
Ë((hód)->
¶h_fú°
)

	)

205 
	#SLIST_NEXT
(
ñm
, 
fõld
Ë(”lm)->fõld.
¶e_√xt
)

	)

211 
	#STAILQ_HEAD
(
«me
, 
ty≥
) \

212 
	s«me
 { \

213 
ty≥
 *
°qh_fú°
; \

214 
ty≥
 **
°qh_œ°
; \

215 }

	)

217 
	#STAILQ_HEAD_INITIALIZER
(
hód
) \

218 { 
NULL
, &(
hód
).
°qh_fú°
 }

	)

220 
	#STAILQ_ENTRY
(
ty≥
) \

222 
ty≥
 *
°qe_√xt
; \

223 }

	)

228 
	#STAILQ_INIT
(
hód
) do { \

229 (
hód
)->
°qh_fú°
 = 
NULL
; \

230 (
hód
)->
°qh_œ°
 = &(hód)->
°qh_fú°
; \

231 }  0)

	)

233 
	#STAILQ_INSERT_HEAD
(
hód
, 
ñm
, 
fõld
) do { \

234 i‡(((
ñm
)->
fõld
.
°qe_√xt
 = (
hód
)->
°qh_fú°
Ë=
NULL
) \

235 (
hód
)->
°qh_œ°
 = &(
ñm
)->
fõld
.
°qe_√xt
; \

236 (
hód
)->
°qh_fú°
 = (
ñm
); \

237 }  0)

	)

239 
	#STAILQ_INSERT_TAIL
(
hód
, 
ñm
, 
fõld
) do { \

240 (
ñm
)->
fõld
.
°qe_√xt
 = 
NULL
; \

241 *(
hód
)->
°qh_œ°
 = (
ñm
); \

242 (
hód
)->
°qh_œ°
 = &(
ñm
)->
fõld
.
°qe_√xt
; \

243 }  0)

	)

245 
	#STAILQ_INSERT_AFTER
(
hód
, 
li°ñm
, 
ñm
, 
fõld
) do { \

246 i‡(((
ñm
)->
fõld
.
°qe_√xt
 = (
li°ñm
)->fõld.°qe_√xtË=
NULL
)\

247 (
hód
)->
°qh_œ°
 = &(
ñm
)->
fõld
.
°qe_√xt
; \

248 (
li°ñm
)->
fõld
.
°qe_√xt
 = (
ñm
); \

249 }  0)

	)

251 
	#STAILQ_REMOVE_HEAD
(
hód
, 
fõld
) do { \

252 i‡(((
hód
)->
°qh_fú°
 = (hód)->°qh_fú°->
fõld
.
°qe_√xt
Ë=
NULL
) \

253 (
hód
)->
°qh_œ°
 = &(hód)->
°qh_fú°
; \

254 }  0)

	)

256 
	#STAILQ_REMOVE
(
hód
, 
ñm
, 
ty≥
, 
fõld
) do { \

257 i‡((
hód
)->
°qh_fú°
 =(
ñm
)) { \

258 
	`STAILQ_REMOVE_HEAD
((
hód
), 
fõld
); \

260 
ty≥
 *
cuªlm
 = (
hód
)->
°qh_fú°
; \

261 
cuªlm
->
fõld
.
°qe_√xt
 !(
ñm
)) \

262 
cuªlm
 = cuªlm->
fõld
.
°qe_√xt
; \

263 i‡((
cuªlm
->
fõld
.
°qe_√xt
 = \

264 
cuªlm
->
fõld
.
°qe_√xt
->fõld.°qe_√xtË=
NULL
) \

265 (
hód
)->
°qh_œ°
 = &(
cuªlm
)->
fõld
.
°qe_√xt
; \

267 }  0)

	)

269 
	#STAILQ_FOREACH
(
v¨
, 
hód
, 
fõld
) \

270 (
v¨
Ë((
hód
)->
°qh_fú°
); \

271 (
v¨
); \

272 (
v¨
Ë((v¨)->
fõld
.
°qe_√xt
))

	)

274 
	#STAILQ_CONCAT
(
hód1
, 
hód2
) do { \

275 i‡(!
	`STAILQ_EMPTY
((
hód2
))) { \

276 *(
hód1
)->
°qh_œ°
 = (
hód2
)->
°qh_fú°
; \

277 (
hód1
)->
°qh_œ°
 = (
hód2
)->stqh_last; \

278 
	`STAILQ_INIT
((
hód2
)); \

280 }  0)

	)

285 
	#STAILQ_EMPTY
(
hód
Ë((hód)->
°qh_fú°
 =
NULL
)

	)

286 
	#STAILQ_FIRST
(
hód
Ë((hód)->
°qh_fú°
)

	)

287 
	#STAILQ_NEXT
(
ñm
, 
fõld
Ë(”lm)->fõld.
°qe_√xt
)

	)

293 
	#SIMPLEQ_HEAD
(
«me
, 
ty≥
) \

294 
	s«me
 { \

295 
ty≥
 *
sqh_fú°
; \

296 
ty≥
 **
sqh_œ°
; \

297 }

	)

299 
	#SIMPLEQ_HEAD_INITIALIZER
(
hód
) \

300 { 
NULL
, &(
hód
).
sqh_fú°
 }

	)

302 
	#SIMPLEQ_ENTRY
(
ty≥
) \

304 
ty≥
 *
sqe_√xt
; \

305 }

	)

310 
	#SIMPLEQ_INIT
(
hód
) do { \

311 (
hód
)->
sqh_fú°
 = 
NULL
; \

312 (
hód
)->
sqh_œ°
 = &(hód)->
sqh_fú°
; \

313 }  0)

	)

315 
	#SIMPLEQ_INSERT_HEAD
(
hód
, 
ñm
, 
fõld
) do { \

316 i‡(((
ñm
)->
fõld
.
sqe_√xt
 = (
hód
)->
sqh_fú°
Ë=
NULL
) \

317 (
hód
)->
sqh_œ°
 = &(
ñm
)->
fõld
.
sqe_√xt
; \

318 (
hód
)->
sqh_fú°
 = (
ñm
); \

319 }  0)

	)

321 
	#SIMPLEQ_INSERT_TAIL
(
hód
, 
ñm
, 
fõld
) do { \

322 (
ñm
)->
fõld
.
sqe_√xt
 = 
NULL
; \

323 *(
hód
)->
sqh_œ°
 = (
ñm
); \

324 (
hód
)->
sqh_œ°
 = &(
ñm
)->
fõld
.
sqe_√xt
; \

325 }  0)

	)

327 
	#SIMPLEQ_INSERT_AFTER
(
hód
, 
li°ñm
, 
ñm
, 
fõld
) do { \

328 i‡(((
ñm
)->
fõld
.
sqe_√xt
 = (
li°ñm
)->fõld.sqe_√xtË=
NULL
)\

329 (
hód
)->
sqh_œ°
 = &(
ñm
)->
fõld
.
sqe_√xt
; \

330 (
li°ñm
)->
fõld
.
sqe_√xt
 = (
ñm
); \

331 }  0)

	)

333 
	#SIMPLEQ_REMOVE_HEAD
(
hód
, 
fõld
) do { \

334 i‡(((
hód
)->
sqh_fú°
 = (hód)->sqh_fú°->
fõld
.
sqe_√xt
Ë=
NULL
) \

335 (
hód
)->
sqh_œ°
 = &(hód)->
sqh_fú°
; \

336 }  0)

	)

338 
	#SIMPLEQ_REMOVE
(
hód
, 
ñm
, 
ty≥
, 
fõld
) do { \

339 i‡((
hód
)->
sqh_fú°
 =(
ñm
)) { \

340 
	`SIMPLEQ_REMOVE_HEAD
((
hód
), 
fõld
); \

342 
ty≥
 *
cuªlm
 = (
hód
)->
sqh_fú°
; \

343 
cuªlm
->
fõld
.
sqe_√xt
 !(
ñm
)) \

344 
cuªlm
 = cuªlm->
fõld
.
sqe_√xt
; \

345 i‡((
cuªlm
->
fõld
.
sqe_√xt
 = \

346 
cuªlm
->
fõld
.
sqe_√xt
->fõld.sqe_√xtË=
NULL
) \

347 (
hód
)->
sqh_œ°
 = &(
cuªlm
)->
fõld
.
sqe_√xt
; \

349 }  0)

	)

351 
	#SIMPLEQ_FOREACH
(
v¨
, 
hód
, 
fõld
) \

352 (
v¨
Ë((
hód
)->
sqh_fú°
); \

353 (
v¨
); \

354 (
v¨
Ë((v¨)->
fõld
.
sqe_√xt
))

	)

359 
	#SIMPLEQ_EMPTY
(
hód
Ë((hód)->
sqh_fú°
 =
NULL
)

	)

360 
	#SIMPLEQ_FIRST
(
hód
Ë((hód)->
sqh_fú°
)

	)

361 
	#SIMPLEQ_NEXT
(
ñm
, 
fõld
Ë(”lm)->fõld.
sqe_√xt
)

	)

367 
	#_TAILQ_HEAD
(
«me
, 
ty≥
, 
quÆ
) \

368 
	s«me
 { \

369 
quÆ
 
ty≥
 *
tqh_fú°
; \

370 
quÆ
 
ty≥
 *quÆ *
tqh_œ°
; \

371 }

	)

372 
	#TAILQ_HEAD
(
«me
, 
ty≥
Ë
	`_TAILQ_HEAD
“ame, ty≥,)

	)

374 
	#TAILQ_HEAD_INITIALIZER
(
hód
) \

375 { 
NULL
, &(
hód
).
tqh_fú°
 }

	)

377 
	#_TAILQ_ENTRY
(
ty≥
, 
quÆ
) \

379 
quÆ
 
ty≥
 *
tqe_√xt
; \

380 
quÆ
 
ty≥
 *quÆ *
tqe_¥ev
; \

381 }

	)

382 
	#TAILQ_ENTRY
(
ty≥
Ë
	`_TAILQ_ENTRY
(ty≥,)

	)

387 
	#TAILQ_INIT
(
hód
) do { \

388 (
hód
)->
tqh_fú°
 = 
NULL
; \

389 (
hód
)->
tqh_œ°
 = &(hód)->
tqh_fú°
; \

390 }  0)

	)

392 
	#TAILQ_INSERT_HEAD
(
hód
, 
ñm
, 
fõld
) do { \

393 i‡(((
ñm
)->
fõld
.
tqe_√xt
 = (
hód
)->
tqh_fú°
Ë!
NULL
) \

394 (
hód
)->
tqh_fú°
->
fõld
.
tqe_¥ev
 = \

395 &(
ñm
)->
fõld
.
tqe_√xt
; \

397 (
hód
)->
tqh_œ°
 = &(
ñm
)->
fõld
.
tqe_√xt
; \

398 (
hód
)->
tqh_fú°
 = (
ñm
); \

399 (
ñm
)->
fõld
.
tqe_¥ev
 = &(
hód
)->
tqh_fú°
; \

400 }  0)

	)

402 
	#TAILQ_INSERT_TAIL
(
hód
, 
ñm
, 
fõld
) do { \

403 (
ñm
)->
fõld
.
tqe_√xt
 = 
NULL
; \

404 (
ñm
)->
fõld
.
tqe_¥ev
 = (
hód
)->
tqh_œ°
; \

405 *(
hód
)->
tqh_œ°
 = (
ñm
); \

406 (
hód
)->
tqh_œ°
 = &(
ñm
)->
fõld
.
tqe_√xt
; \

407 }  0)

	)

409 
	#TAILQ_INSERT_AFTER
(
hód
, 
li°ñm
, 
ñm
, 
fõld
) do { \

410 i‡(((
ñm
)->
fõld
.
tqe_√xt
 = (
li°ñm
)->fõld.tqe_√xtË!
NULL
)\

411 (
ñm
)->
fõld
.
tqe_√xt
->fõld.
tqe_¥ev
 = \

412 &(
ñm
)->
fõld
.
tqe_√xt
; \

414 (
hód
)->
tqh_œ°
 = &(
ñm
)->
fõld
.
tqe_√xt
; \

415 (
li°ñm
)->
fõld
.
tqe_√xt
 = (
ñm
); \

416 (
ñm
)->
fõld
.
tqe_¥ev
 = &(
li°ñm
)->fõld.
tqe_√xt
; \

417 }  0)

	)

419 
	#TAILQ_INSERT_BEFORE
(
li°ñm
, 
ñm
, 
fõld
) do { \

420 (
ñm
)->
fõld
.
tqe_¥ev
 = (
li°ñm
)->field.tqe_prev; \

421 (
ñm
)->
fõld
.
tqe_√xt
 = (
li°ñm
); \

422 *(
li°ñm
)->
fõld
.
tqe_¥ev
 = (
ñm
); \

423 (
li°ñm
)->
fõld
.
tqe_¥ev
 = &(
ñm
)->fõld.
tqe_√xt
; \

424 }  0)

	)

426 
	#TAILQ_REMOVE
(
hód
, 
ñm
, 
fõld
) do { \

427 i‡(((
ñm
)->
fõld
.
tqe_√xt
Ë!
NULL
) \

428 (
ñm
)->
fõld
.
tqe_√xt
->fõld.
tqe_¥ev
 = \

429 (
ñm
)->
fõld
.
tqe_¥ev
; \

431 (
hód
)->
tqh_œ°
 = (
ñm
)->
fõld
.
tqe_¥ev
; \

432 *(
ñm
)->
fõld
.
tqe_¥ev
 = (ñm)->fõld.
tqe_√xt
; \

433 }  0)

	)

435 
	#TAILQ_FOREACH
(
v¨
, 
hód
, 
fõld
) \

436 (
v¨
Ë((
hód
)->
tqh_fú°
); \

437 (
v¨
); \

438 (
v¨
Ë((v¨)->
fõld
.
tqe_√xt
))

	)

440 
	#TAILQ_FOREACH_REVERSE
(
v¨
, 
hód
, 
hód«me
, 
fõld
) \

441 (
v¨
Ë(*(((
hód«me
 *)((
hód
)->
tqh_œ°
))->tqh_last)); \

442 (
v¨
); \

443 (
v¨
Ë(*(((
hód«me
 *)((v¨)->
fõld
.
tqe_¥ev
))->
tqh_œ°
)))

	)

445 
	#TAILQ_CONCAT
(
hód1
, 
hód2
, 
fõld
) do { \

446 i‡(!
	`TAILQ_EMPTY
(
hód2
)) { \

447 *(
hód1
)->
tqh_œ°
 = (
hód2
)->
tqh_fú°
; \

448 (
hód2
)->
tqh_fú°
->
fõld
.
tqe_¥ev
 = (
hód1
)->
tqh_œ°
; \

449 (
hód1
)->
tqh_œ°
 = (
hód2
)->tqh_last; \

450 
	`TAILQ_INIT
((
hód2
)); \

452 }  0)

	)

457 
	#TAILQ_EMPTY
(
hód
Ë((hód)->
tqh_fú°
 =
NULL
)

	)

458 
	#TAILQ_FIRST
(
hód
Ë((hód)->
tqh_fú°
)

	)

459 
	#TAILQ_NEXT
(
ñm
, 
fõld
Ë(”lm)->fõld.
tqe_√xt
)

	)

461 
	#TAILQ_LAST
(
hód
, 
hód«me
) \

462 (*(((
hód«me
 *)((
hód
)->
tqh_œ°
))->tqh_œ°))

	)

463 
	#TAILQ_PREV
(
ñm
, 
hód«me
, 
fõld
) \

464 (*(((
hód«me
 *)((
ñm
)->
fõld
.
tqe_¥ev
))->
tqh_œ°
))

	)

470 
	#CIRCLEQ_HEAD
(
«me
, 
ty≥
) \

471 
	s«me
 { \

472 
ty≥
 *
cqh_fú°
; \

473 
ty≥
 *
cqh_œ°
; \

474 }

	)

476 
	#CIRCLEQ_HEAD_INITIALIZER
(
hód
) \

477 { (*)&
hód
, (*)&hód }

	)

479 
	#CIRCLEQ_ENTRY
(
ty≥
) \

481 
ty≥
 *
cqe_√xt
; \

482 
ty≥
 *
cqe_¥ev
; \

483 }

	)

488 
	#CIRCLEQ_INIT
(
hód
) do { \

489 (
hód
)->
cqh_fú°
 = (*)(head); \

490 (
hód
)->
cqh_œ°
 = (*)(head); \

491 }  0)

	)

493 
	#CIRCLEQ_INSERT_AFTER
(
hód
, 
li°ñm
, 
ñm
, 
fõld
) do { \

494 (
ñm
)->
fõld
.
cqe_√xt
 = (
li°ñm
)->field.cqe_next; \

495 (
ñm
)->
fõld
.
cqe_¥ev
 = (
li°ñm
); \

496 i‡((
li°ñm
)->
fõld
.
cqe_√xt
 =(*)(
hód
)) \

497 (
hód
)->
cqh_œ°
 = (
ñm
); \

499 (
li°ñm
)->
fõld
.
cqe_√xt
->fõld.
cqe_¥ev
 = (
ñm
); \

500 (
li°ñm
)->
fõld
.
cqe_√xt
 = (
ñm
); \

501 }  0)

	)

503 
	#CIRCLEQ_INSERT_BEFORE
(
hód
, 
li°ñm
, 
ñm
, 
fõld
) do { \

504 (
ñm
)->
fõld
.
cqe_√xt
 = (
li°ñm
); \

505 (
ñm
)->
fõld
.
cqe_¥ev
 = (
li°ñm
)->field.cqe_prev; \

506 i‡((
li°ñm
)->
fõld
.
cqe_¥ev
 =(*)(
hód
)) \

507 (
hód
)->
cqh_fú°
 = (
ñm
); \

509 (
li°ñm
)->
fõld
.
cqe_¥ev
->fõld.
cqe_√xt
 = (
ñm
); \

510 (
li°ñm
)->
fõld
.
cqe_¥ev
 = (
ñm
); \

511 }  0)

	)

513 
	#CIRCLEQ_INSERT_HEAD
(
hód
, 
ñm
, 
fõld
) do { \

514 (
ñm
)->
fõld
.
cqe_√xt
 = (
hód
)->
cqh_fú°
; \

515 (
ñm
)->
fõld
.
cqe_¥ev
 = (*)(
hód
); \

516 i‡((
hód
)->
cqh_œ°
 == (*)(head)) \

517 (
hód
)->
cqh_œ°
 = (
ñm
); \

519 (
hód
)->
cqh_fú°
->
fõld
.
cqe_¥ev
 = (
ñm
); \

520 (
hód
)->
cqh_fú°
 = (
ñm
); \

521 }  0)

	)

523 
	#CIRCLEQ_INSERT_TAIL
(
hód
, 
ñm
, 
fõld
) do { \

524 (
ñm
)->
fõld
.
cqe_√xt
 = (*)(
hód
); \

525 (
ñm
)->
fõld
.
cqe_¥ev
 = (
hód
)->
cqh_œ°
; \

526 i‡((
hód
)->
cqh_fú°
 == (*)(head)) \

527 (
hód
)->
cqh_fú°
 = (
ñm
); \

529 (
hód
)->
cqh_œ°
->
fõld
.
cqe_√xt
 = (
ñm
); \

530 (
hód
)->
cqh_œ°
 = (
ñm
); \

531 }  0)

	)

533 
	#CIRCLEQ_REMOVE
(
hód
, 
ñm
, 
fõld
) do { \

534 i‡((
ñm
)->
fõld
.
cqe_√xt
 =(*)(
hód
)) \

535 (
hód
)->
cqh_œ°
 = (
ñm
)->
fõld
.
cqe_¥ev
; \

537 (
ñm
)->
fõld
.
cqe_√xt
->fõld.
cqe_¥ev
 = \

538 (
ñm
)->
fõld
.
cqe_¥ev
; \

539 i‡((
ñm
)->
fõld
.
cqe_¥ev
 =(*)(
hód
)) \

540 (
hód
)->
cqh_fú°
 = (
ñm
)->
fõld
.
cqe_√xt
; \

542 (
ñm
)->
fõld
.
cqe_¥ev
->fõld.
cqe_√xt
 = \

543 (
ñm
)->
fõld
.
cqe_√xt
; \

544 }  0)

	)

546 
	#CIRCLEQ_FOREACH
(
v¨
, 
hód
, 
fõld
) \

547 (
v¨
Ë((
hód
)->
cqh_fú°
); \

548 (
v¨
Ë!(c⁄° *)(
hód
); \

549 (
v¨
Ë((v¨)->
fõld
.
cqe_√xt
))

	)

551 
	#CIRCLEQ_FOREACH_REVERSE
(
v¨
, 
hód
, 
fõld
) \

552 (
v¨
Ë((
hód
)->
cqh_œ°
); \

553 (
v¨
Ë!(c⁄° *)(
hód
); \

554 (
v¨
Ë((v¨)->
fõld
.
cqe_¥ev
))

	)

559 
	#CIRCLEQ_EMPTY
(
hód
Ë((hód)->
cqh_fú°
 =(*)(hód))

	)

560 
	#CIRCLEQ_FIRST
(
hód
Ë((hód)->
cqh_fú°
)

	)

561 
	#CIRCLEQ_LAST
(
hód
Ë((hód)->
cqh_œ°
)

	)

562 
	#CIRCLEQ_NEXT
(
ñm
, 
fõld
Ë(”lm)->fõld.
cqe_√xt
)

	)

563 
	#CIRCLEQ_PREV
(
ñm
, 
fõld
Ë(”lm)->fõld.
cqe_¥ev
)

	)

565 
	#CIRCLEQ_LOOP_NEXT
(
hód
, 
ñm
, 
fõld
) \

566 (((
ñm
)->
fõld
.
cqe_√xt
 =(*)(
hód
)) \

567 ? ((
hód
)->
cqh_fú°
) \

568 : (
ñm
->
fõld
.
cqe_√xt
))

	)

569 
	#CIRCLEQ_LOOP_PREV
(
hód
, 
ñm
, 
fõld
) \

570 (((
ñm
)->
fõld
.
cqe_¥ev
 =(*)(
hód
)) \

571 ? ((
hód
)->
cqh_œ°
) \

572 : (
ñm
->
fõld
.
cqe_¥ev
))

	)

	@/usr/include/sys/resource.h

19 #i‚def 
_SYS_RESOURCE_H


20 
	#_SYS_RESOURCE_H
 1

	)

22 
	~<„©uªs.h
>

25 
	~<bôs/ªsour˚.h
>

27 #i‚de‡
__id_t_deföed


28 
__id_t
 
	tid_t
;

29 
	#__id_t_deföed


	)

32 
	g__BEGIN_DECLS


38 #i‡
deföed
 
__USE_GNU
 && !deföed 
__˝lu•lus


39 
__æimô_ªsour˚
 
	t__æimô_ªsour˚_t
;

40 
__rußge_who
 
	t__rußge_who_t
;

41 
__¥i‹ôy_which
 
	t__¥i‹ôy_which_t
;

43 
	t__æimô_ªsour˚_t
;

44 
	t__rußge_who_t
;

45 
	t__¥i‹ôy_which_t
;

50 #i‚de‡
__USE_FILE_OFFSET64


51 
	$gëæimô
 (
__æimô_ªsour˚_t
 
__ªsour˚
,

52 
æimô
 *
__æimôs
Ë
__THROW
;

54 #ifde‡
__REDIRECT_NTH


55 
	`__REDIRECT_NTH
 (
gëæimô
, (
__æimô_ªsour˚_t
 
__ªsour˚
,

56 
æimô
 *
__æimôs
), 
gëæimô64
);

58 
	#gëæimô
 
gëæimô64


	)

61 #ifde‡
__USE_LARGEFILE64


62 
	$gëæimô64
 (
__æimô_ªsour˚_t
 
__ªsour˚
,

63 
æimô64
 *
__æimôs
Ë
__THROW
;

69 #i‚de‡
__USE_FILE_OFFSET64


70 
	$£ålimô
 (
__æimô_ªsour˚_t
 
__ªsour˚
,

71 
__c⁄°
 
æimô
 *
__æimôs
Ë
__THROW
;

73 #ifde‡
__REDIRECT_NTH


74 
	`__REDIRECT_NTH
 (
£ålimô
, (
__æimô_ªsour˚_t
 
__ªsour˚
,

75 
__c⁄°
 
æimô
 *
__æimôs
),

76 
£ålimô64
);

78 
	#£ålimô
 
£ålimô64


	)

81 #ifde‡
__USE_LARGEFILE64


82 
	$£ålimô64
 (
__æimô_ªsour˚_t
 
__ªsour˚
,

83 
__c⁄°
 
æimô64
 *
__æimôs
Ë
__THROW
;

88 
	$gërußge
 (
__rußge_who_t
 
__who
, 
rußge
 *
__ußge
Ë
__THROW
;

94 
	$gë¥i‹ôy
 (
__¥i‹ôy_which_t
 
__which
, 
id_t
 
__who
Ë
__THROW
;

98 
	$£çri‹ôy
 (
__¥i‹ôy_which_t
 
__which
, 
id_t
 
__who
, 
__¥io
)

99 
__THROW
;

101 
__END_DECLS


	@/usr/include/sys/select.h

22 #i‚de‡
_SYS_SELECT_H


23 
	#_SYS_SELECT_H
 1

	)

25 
	~<„©uªs.h
>

28 
	~<bôs/ty≥s.h
>

31 
	~<bôs/£À˘.h
>

34 
	~<bôs/sig£t.h
>

36 #i‚de‡
__sig£t_t_deföed


37 
	#__sig£t_t_deföed


	)

38 
__sig£t_t
 
	tsig£t_t
;

42 
	#__√ed_time_t


	)

43 
	#__√ed_time•ec


	)

44 
	~<time.h
>

45 
	#__√ed_timevÆ


	)

46 
	~<bôs/time.h
>

48 #i‚de‡
__su£c⁄ds_t_deföed


49 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

50 
	#__su£c⁄ds_t_deföed


	)

55 
	t__fd_mask
;

58 #unde‡
__NFDBITS


59 #unde‡
__FDELT


60 #unde‡
__FDMASK


62 
	#__NFDBITS
 (8 * (Ë (
__fd_mask
))

	)

63 
	#__FDELT
(
d
Ë((dË/ 
__NFDBITS
)

	)

64 
	#__FDMASK
(
d
Ë((
__fd_mask
Ë1 << ((dË% 
__NFDBITS
))

	)

71 #ifde‡
__USE_XOPEN


72 
__fd_mask
 
	mfds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

73 
	#__FDS_BITS
(
£t
Ë((£t)->
fds_bôs
)

	)

75 
__fd_mask
 
	m__fds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

76 
	#__FDS_BITS
(
£t
Ë((£t)->
__fds_bôs
)

	)

78 } 
	tfd_£t
;

81 
	#FD_SETSIZE
 
__FD_SETSIZE


	)

83 #ifde‡
__USE_MISC


85 
__fd_mask
 
	tfd_mask
;

88 
	#NFDBITS
 
__NFDBITS


	)

93 
	#FD_SET
(
fd
, 
fd£ç
Ë
	`__FD_SET
 (fd, fd£ç)

	)

94 
	#FD_CLR
(
fd
, 
fd£ç
Ë
	`__FD_CLR
 (fd, fd£ç)

	)

95 
	#FD_ISSET
(
fd
, 
fd£ç
Ë
	`__FD_ISSET
 (fd, fd£ç)

	)

96 
	#FD_ZERO
(
fd£ç
Ë
	`__FD_ZERO
 (fd£ç)

	)

99 
__BEGIN_DECLS


109 
£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

110 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

111 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

112 
timevÆ
 *
__ª°ri˘
 
__timeout
);

114 #ifde‡
__USE_XOPEN2K


121 
p£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

122 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

123 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

124 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
,

125 c⁄° 
__sig£t_t
 *
__ª°ri˘
 
__sigmask
);

128 
	g__END_DECLS


	@/usr/include/sys/socket.h

21 #i‚def 
_SYS_SOCKET_H


22 
	#_SYS_SOCKET_H
 1

	)

24 
	~<„©uªs.h
>

26 
	g__BEGIN_DECLS


28 
	~<sys/uio.h
>

29 
	#__√ed_size_t


	)

30 
	~<°ddef.h
>

31 #ifde‡
__USE_GNU


33 
	~<bôs/sig£t.h
>

40 
	~<bôs/sockë.h
>

42 #ifde‡
__USE_BSD


45 
	sosockaddr


47 
	mß_Ámûy
;

48 
	mß_d©a
[14];

56 
	mSHUT_RD
 = 0,

57 
	#SHUT_RD
 
SHUT_RD


	)

58 
	mSHUT_WR
,

59 
	#SHUT_WR
 
SHUT_WR


	)

60 
	mSHUT_RDWR


61 
	#SHUT_RDWR
 
SHUT_RDWR


	)

70 #i‡
deföed
 
__˝lu•lus
 || !
__GNUC_PREREQ
 (2, 7Ë|| !deföed 
__USE_GNU


71 
	#__SOCKADDR_ARG
 
sockaddr
 *
__ª°ri˘


	)

72 
	#__CONST_SOCKADDR_ARG
 
__c⁄°
 
sockaddr
 *

	)

76 
	#__SOCKADDR_ALLTYPES
 \

77 
	`__SOCKADDR_ONETYPE
 (
sockaddr
) \

78 
	`__SOCKADDR_ONETYPE
 (
sockaddr_©
) \

79 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ax25
) \

80 
	`__SOCKADDR_ONETYPE
 (
sockaddr_dl
) \

81 
	`__SOCKADDR_ONETYPE
 (
sockaddr_e⁄
) \

82 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ö
) \

83 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ö6
) \

84 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ö¨p
) \

85 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ùx
) \

86 
	`__SOCKADDR_ONETYPE
 (
sockaddr_iso
) \

87 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ns
) \

88 
	`__SOCKADDR_ONETYPE
 (
sockaddr_un
) \

89 
	`__SOCKADDR_ONETYPE
 (
sockaddr_x25
)

	)

91 
	#__SOCKADDR_ONETYPE
(
ty≥
Ëty≥ *
__ª°ri˘
 
__
##ty≥##__;

	)

92 uni⁄ { 
	m__SOCKADDR_ALLTYPES


93 } 
	t__SOCKADDR_ARG
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

94 #unde‡
__SOCKADDR_ONETYPE


95 
	#__SOCKADDR_ONETYPE
(
ty≥
Ë
__c⁄°
 ty≥ *
__ª°ri˘
 
__
##ty≥##__;

	)

96 uni⁄ { 
	m__SOCKADDR_ALLTYPES


97 } 
	t__CONST_SOCKADDR_ARG
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

98 #unde‡
__SOCKADDR_ONETYPE


105 
	$sockë
 (
__domaö
, 
__ty≥
, 
__¥Ÿocﬁ
Ë
__THROW
;

111 
	$sockë∑ú
 (
__domaö
, 
__ty≥
, 
__¥Ÿocﬁ
,

112 
__fds
[2]Ë
__THROW
;

115 
	$böd
 (
__fd
, 
__CONST_SOCKADDR_ARG
 
__addr
, 
sockÀn_t
 
__Àn
)

116 
__THROW
;

119 
	$gësock«me
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

120 
sockÀn_t
 *
__ª°ri˘
 
__Àn
Ë
__THROW
;

129 
	`c⁄√˘
 (
__fd
, 
__CONST_SOCKADDR_ARG
 
__addr
, 
sockÀn_t
 
__Àn
);

133 
	$gë≥î«me
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

134 
sockÀn_t
 *
__ª°ri˘
 
__Àn
Ë
__THROW
;

141 
ssize_t
 
	`£nd
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
, 
__Êags
);

148 
ssize_t
 
	`ªcv
 (
__fd
, *
__buf
, 
size_t
 
__n
, 
__Êags
);

155 
ssize_t
 
	`£ndto
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
,

156 
__Êags
, 
__CONST_SOCKADDR_ARG
 
__addr
,

157 
sockÀn_t
 
__addr_Àn
);

166 
ssize_t
 
	`ªcv‰om
 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
,

167 
__Êags
, 
__SOCKADDR_ARG
 
__addr
,

168 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
);

176 
ssize_t
 
	`£ndmsg
 (
__fd
, 
__c⁄°
 
msghdr
 *
__mesßge
,

177 
__Êags
);

184 
ssize_t
 
	`ªcvmsg
 (
__fd
, 
msghdr
 *
__mesßge
, 
__Êags
);

190 
	$gësock›t
 (
__fd
, 
__Àvñ
, 
__›äame
,

191 *
__ª°ri˘
 
__›tvÆ
,

192 
sockÀn_t
 *
__ª°ri˘
 
__›éí
Ë
__THROW
;

197 
	$£tsock›t
 (
__fd
, 
__Àvñ
, 
__›äame
,

198 
__c⁄°
 *
__›tvÆ
, 
sockÀn_t
 
__›éí
Ë
__THROW
;

204 
	$li°í
 (
__fd
, 
__n
Ë
__THROW
;

214 
	`ac˚±
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

215 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
);

217 #ifde‡
__USE_GNU


222 
	`ac˚±4
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

223 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
, 
__Êags
);

232 
	$shutdown
 (
__fd
, 
__how
Ë
__THROW
;

235 #ifde‡
__USE_XOPEN2K


237 
	$sock©m¨k
 (
__fd
Ë
__THROW
;

241 #ifde‡
__USE_MISC


245 
	$isfdty≥
 (
__fd
, 
__fdty≥
Ë
__THROW
;

250 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


251 
	~<bôs/sockë2.h
>

254 
__END_DECLS


	@/usr/include/sys/stat.h

24 #i‚def 
_SYS_STAT_H


25 
	#_SYS_STAT_H
 1

	)

27 
	~<„©uªs.h
>

29 
	~<bôs/ty≥s.h
>

31 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K
 || deföed 
__USE_MISC
 \

32 || 
deföed
 
	g__USE_ATFILE


33 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


34 
	#__√ed_time_t


	)

36 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ATFILE


37 
	#__√ed_time•ec


	)

39 
	~<time.h
>

42 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


45 #i‚de‡
__dev_t_deföed


46 
__dev_t
 
	tdev_t
;

47 
	#__dev_t_deföed


	)

50 #i‚de‡
__gid_t_deföed


51 
__gid_t
 
	tgid_t
;

52 
	#__gid_t_deföed


	)

55 #i‚de‡
__öo_t_deföed


56 #i‚de‡
__USE_FILE_OFFSET64


57 
__öo_t
 
	töo_t
;

59 
__öo64_t
 
	töo_t
;

61 
	#__öo_t_deföed


	)

64 #i‚de‡
__mode_t_deföed


65 
__mode_t
 
	tmode_t
;

66 
	#__mode_t_deföed


	)

69 #i‚de‡
__∆ök_t_deföed


70 
__∆ök_t
 
	t∆ök_t
;

71 
	#__∆ök_t_deföed


	)

74 #i‚de‡
__off_t_deföed


75 #i‚de‡
__USE_FILE_OFFSET64


76 
__off_t
 
	toff_t
;

78 
__off64_t
 
	toff_t
;

80 
	#__off_t_deföed


	)

83 #i‚de‡
__uid_t_deföed


84 
__uid_t
 
	tuid_t
;

85 
	#__uid_t_deföed


	)

89 #ifde‡
__USE_UNIX98


90 #i‚de‡
__blk˙t_t_deföed


91 #i‚de‡
__USE_FILE_OFFSET64


92 
__blk˙t_t
 
	tblk˙t_t
;

94 
__blk˙t64_t
 
	tblk˙t_t
;

96 
	#__blk˙t_t_deföed


	)

99 #i‚de‡
__blksize_t_deföed


100 
__blksize_t
 
	tblksize_t
;

101 
	#__blksize_t_deföed


	)

105 
	g__BEGIN_DECLS


107 
	~<bôs/°©.h
>

109 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


110 
	#S_IFMT
 
__S_IFMT


	)

111 
	#S_IFDIR
 
__S_IFDIR


	)

112 
	#S_IFCHR
 
__S_IFCHR


	)

113 
	#S_IFBLK
 
__S_IFBLK


	)

114 
	#S_IFREG
 
__S_IFREG


	)

115 #ifde‡
__S_IFIFO


116 
	#S_IFIFO
 
__S_IFIFO


	)

118 #ifde‡
__S_IFLNK


119 
	#S_IFLNK
 
__S_IFLNK


	)

121 #i‡(
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_UNIX98
) \

122 && 
deföed
 
	g__S_IFSOCK


123 
	#S_IFSOCK
 
__S_IFSOCK


	)

129 
	#__S_ISTYPE
(
mode
, 
mask
Ë(((modeË& 
__S_IFMT
Ë=(mask))

	)

131 
	#S_ISDIR
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFDIR
)

	)

132 
	#S_ISCHR
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFCHR
)

	)

133 
	#S_ISBLK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFBLK
)

	)

134 
	#S_ISREG
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFREG
)

	)

135 #ifde‡
__S_IFIFO


136 
	#S_ISFIFO
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFIFO
)

	)

138 #ifde‡
__S_IFLNK


139 
	#S_ISLNK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFLNK
)

	)

142 #i‡
deföed
 
__USE_BSD
 && !deföed 
__S_IFLNK


143 
	#S_ISLNK
(
mode
Ë0

	)

146 #i‡(
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K
) \

147 && 
deföed
 
	g__S_IFSOCK


148 
	#S_ISSOCK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFSOCK
)

	)

149 #ñi‡
deföed
 
__USE_XOPEN2K


150 
	#S_ISSOCK
(
mode
Ë0

	)

157 #ifdef 
__USE_POSIX199309


158 
	#S_TYPEISMQ
(
buf
Ë
	`__S_TYPEISMQ
(buf)

	)

159 
	#S_TYPEISSEM
(
buf
Ë
	`__S_TYPEISSEM
(buf)

	)

160 
	#S_TYPEISSHM
(
buf
Ë
	`__S_TYPEISSHM
(buf)

	)

166 
	#S_ISUID
 
__S_ISUID


	)

167 
	#S_ISGID
 
__S_ISGID


	)

169 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


171 
	#S_ISVTX
 
__S_ISVTX


	)

174 
	#S_IRUSR
 
__S_IREAD


	)

175 
	#S_IWUSR
 
__S_IWRITE


	)

176 
	#S_IXUSR
 
__S_IEXEC


	)

178 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

180 #i‡
deföed
 
__USE_MISC
 && deföed 
__USE_BSD


181 
	#S_IREAD
 
S_IRUSR


	)

182 
	#S_IWRITE
 
S_IWUSR


	)

183 
	#S_IEXEC
 
S_IXUSR


	)

186 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

187 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

188 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

190 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

192 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

193 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

194 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

196 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

199 #ifdef 
__USE_BSD


201 
	#ACCESSPERMS
 (
S_IRWXU
|
S_IRWXG
|
S_IRWXO
Ë

	)

202 
	#ALLPERMS
 (
S_ISUID
|
S_ISGID
|
S_ISVTX
|
S_IRWXU
|
S_IRWXG
|
S_IRWXO
)

	)

203 
	#DEFFILEMODE
 (
S_IRUSR
|
S_IWUSR
|
S_IRGRP
|
S_IWGRP
|
S_IROTH
|
S_IWOTH
)

	)

205 
	#S_BLKSIZE
 512

	)

209 #i‚de‡
__USE_FILE_OFFSET64


211 
	$°©
 (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

212 
°©
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

216 
	$f°©
 (
__fd
, 
°©
 *
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

218 #ifde‡
__REDIRECT_NTH


219 
	`__REDIRECT_NTH
 (
°©
, (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

220 
°©
 *
__ª°ri˘
 
__buf
), 
°©64
)

221 
	`__n⁄nuŒ
 ((1, 2));

222 
	`__REDIRECT_NTH
 (
f°©
, (
__fd
, 
°©
 *
__buf
), 
f°©64
)

223 
	`__n⁄nuŒ
 ((2));

225 
	#°©
 
°©64


	)

226 
	#f°©
 
f°©64


	)

229 #ifde‡
__USE_LARGEFILE64


230 
	$°©64
 (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

231 
°©64
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

232 
	$f°©64
 (
__fd
, 
°©64
 *
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

235 #ifde‡
__USE_ATFILE


239 #i‚de‡
__USE_FILE_OFFSET64


240 
	$f°©©
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fûe
,

241 
°©
 *
__ª°ri˘
 
__buf
, 
__Êag
)

242 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

244 #ifde‡
__REDIRECT_NTH


245 
	`__REDIRECT_NTH
 (
f°©©
, (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fûe
,

246 
°©
 *
__ª°ri˘
 
__buf
,

247 
__Êag
),

248 
f°©©64
Ë
	`__n⁄nuŒ
 ((2, 3));

250 
	#f°©©
 
f°©©64


	)

254 #ifde‡
__USE_LARGEFILE64


255 
	$f°©©64
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fûe
,

256 
°©64
 *
__ª°ri˘
 
__buf
, 
__Êag
)

257 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

261 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


262 #i‚de‡
__USE_FILE_OFFSET64


265 
	$l°©
 (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

266 
°©
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

268 #ifde‡
__REDIRECT_NTH


269 
	`__REDIRECT_NTH
 (
l°©
,

270 (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

271 
°©
 *
__ª°ri˘
 
__buf
), 
l°©64
)

272 
	`__n⁄nuŒ
 ((1, 2));

274 
	#l°©
 
l°©64


	)

277 #ifde‡
__USE_LARGEFILE64


278 
	$l°©64
 (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

279 
°©64
 *
__ª°ri˘
 
__buf
)

280 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

286 
	$chmod
 (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
)

287 
__THROW
 
	`__n⁄nuŒ
 ((1));

289 #ifde‡
__USE_BSD


293 
	$lchmod
 (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
)

294 
__THROW
 
	`__n⁄nuŒ
 ((1));

298 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


299 
	$fchmod
 (
__fd
, 
__mode_t
 
__mode
Ë
__THROW
;

302 #ifde‡
__USE_ATFILE


305 
	$fchmod©
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
,

306 
__Êag
)

307 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

314 
__mode_t
 
	$umask
 (
__mode_t
 
__mask
Ë
__THROW
;

316 #ifdef 
__USE_GNU


319 
__mode_t
 
	$gëumask
 (Ë
__THROW
;

323 
	$mkdú
 (
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
)

324 
__THROW
 
	`__n⁄nuŒ
 ((1));

326 #ifde‡
__USE_ATFILE


330 
	$mkdú©
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
)

331 
__THROW
 
	`__n⁄nuŒ
 ((2));

337 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


338 
	$mknod
 (
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
, 
__dev_t
 
__dev
)

339 
__THROW
 
	`__n⁄nuŒ
 ((1));

341 #ifde‡
__USE_ATFILE


345 
	$mknod©
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
,

346 
__dev_t
 
__dev
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

352 
	$mkfifo
 (
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
)

353 
__THROW
 
	`__n⁄nuŒ
 ((1));

355 #ifde‡
__USE_ATFILE


359 
	$mkfifﬂt
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
)

360 
__THROW
 
	`__n⁄nuŒ
 ((2));

363 #ifde‡
__USE_ATFILE


366 
	$utimíßt
 (
__fd
, 
__c⁄°
 *
__∑th
,

367 
__c⁄°
 
time•ec
 
__times
[2],

368 
__Êags
)

369 
__THROW
 
	`__n⁄nuŒ
 ((2));

372 #ifde‡
__USE_XOPEN2K8


374 
	$futimís
 (
__fd
, 
__c⁄°
 
time•ec
 
__times
[2]Ë
__THROW
;

392 #i‚de‡
_STAT_VER


393 
	#_STAT_VER
 0

	)

395 #i‚de‡
_MKNOD_VER


396 
	#_MKNOD_VER
 0

	)

400 #i‚de‡
__USE_FILE_OFFSET64


401 
	$__fx°©
 (
__vî
, 
__fûdes
, 
°©
 *
__°©_buf
)

402 
__THROW
 
	`__n⁄nuŒ
 ((3));

403 
	$__x°©
 (
__vî
, 
__c⁄°
 *
__fûíame
,

404 
°©
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

405 
	$__lx°©
 (
__vî
, 
__c⁄°
 *
__fûíame
,

406 
°©
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

407 
	$__fx°©©
 (
__vî
, 
__fûdes
, 
__c⁄°
 *
__fûíame
,

408 
°©
 *
__°©_buf
, 
__Êag
)

409 
__THROW
 
	`__n⁄nuŒ
 ((3, 4));

411 #ifde‡
__REDIRECT_NTH


412 
	`__REDIRECT_NTH
 (
__fx°©
, (
__vî
, 
__fûdes
,

413 
°©
 *
__°©_buf
), 
__fx°©64
)

414 
	`__n⁄nuŒ
 ((3));

415 
	`__REDIRECT_NTH
 (
__x°©
, (
__vî
, 
__c⁄°
 *
__fûíame
,

416 
°©
 *
__°©_buf
), 
__x°©64
)

417 
	`__n⁄nuŒ
 ((2, 3));

418 
	`__REDIRECT_NTH
 (
__lx°©
, (
__vî
, 
__c⁄°
 *
__fûíame
,

419 
°©
 *
__°©_buf
), 
__lx°©64
)

420 
	`__n⁄nuŒ
 ((2, 3));

421 
	`__REDIRECT_NTH
 (
__fx°©©
, (
__vî
, 
__fûdes
,

422 
__c⁄°
 *
__fûíame
,

423 
°©
 *
__°©_buf
, 
__Êag
),

424 
__fx°©©64
Ë
	`__n⁄nuŒ
 ((3, 4));

427 
	#__fx°©
 
__fx°©64


	)

428 
	#__x°©
 
__x°©64


	)

429 
	#__lx°©
 
__lx°©64


	)

433 #ifde‡
__USE_LARGEFILE64


434 
	$__fx°©64
 (
__vî
, 
__fûdes
, 
°©64
 *
__°©_buf
)

435 
__THROW
 
	`__n⁄nuŒ
 ((3));

436 
	$__x°©64
 (
__vî
, 
__c⁄°
 *
__fûíame
,

437 
°©64
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

438 
	$__lx°©64
 (
__vî
, 
__c⁄°
 *
__fûíame
,

439 
°©64
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

440 
	$__fx°©©64
 (
__vî
, 
__fûdes
, 
__c⁄°
 *
__fûíame
,

441 
°©64
 *
__°©_buf
, 
__Êag
)

442 
__THROW
 
	`__n⁄nuŒ
 ((3, 4));

444 
	$__xmknod
 (
__vî
, 
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
,

445 
__dev_t
 *
__dev
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

447 
	$__xmknod©
 (
__vî
, 
__fd
, 
__c⁄°
 *
__∑th
,

448 
__mode_t
 
__mode
, 
__dev_t
 *
__dev
)

449 
__THROW
 
	`__n⁄nuŒ
 ((3, 5));

451 #i‡
deföed
 
__GNUC__
 && __GNUC__ >2 && deföed 
__USE_EXTERN_INLINES


454 
__exã∫_ölöe
 

455 
	`__NTH
 (
	$°©
 (
__c⁄°
 *
__∑th
, 
°©
 *
__°©buf
))

457  
	`__x°©
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

458 
	}
}

460 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


461 
__exã∫_ölöe
 

462 
__NTH
 (
	$l°©
 (
__c⁄°
 *
__∑th
, 
°©
 *
__°©buf
))

464  
	`__lx°©
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

465 
	}
}

468 
__exã∫_ölöe
 

469 
__NTH
 (
	$f°©
 (
__fd
, 
°©
 *
__°©buf
))

471  
	`__fx°©
 (
_STAT_VER
, 
__fd
, 
__°©buf
);

472 
	}
}

474 #ifde‡
__USE_ATFILE


475 
__exã∫_ölöe
 

476 
__NTH
 (
	$f°©©
 (
__fd
, 
__c⁄°
 *
__fûíame
, 
°©
 *
__°©buf
,

477 
__Êag
))

479  
	`__fx°©©
 (
_STAT_VER
, 
__fd
, 
__fûíame
, 
__°©buf
, 
__Êag
);

480 
	}
}

483 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_BSD


484 
__exã∫_ölöe
 

485 
__NTH
 (
	$mknod
 (
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
, 
__dev_t
 
__dev
))

487  
	`__xmknod
 (
_MKNOD_VER
, 
__∑th
, 
__mode
, &
__dev
);

488 
	}
}

491 #ifde‡
__USE_ATFILE


492 
__exã∫_ölöe
 

493 
__NTH
 (
	$mknod©
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
,

494 
__dev_t
 
__dev
))

496  
	`__xmknod©
 (
_MKNOD_VER
, 
__fd
, 
__∑th
, 
__mode
, &
__dev
);

497 
	}
}

500 #i‡
deföed
 
__USE_LARGEFILE64
 \

501 && (! 
deföed
 
	g__USE_FILE_OFFSET64
 \

502 || (
deföed
 
	g__REDIRECT_NTH
 && deföed 
	g__OPTIMIZE__
))

503 
__exã∫_ölöe
 

504 
__NTH
 (
	$°©64
 (
__c⁄°
 *
__∑th
, 
°©64
 *
__°©buf
))

506  
	`__x°©64
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

507 
	}
}

509 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


510 
__exã∫_ölöe
 

511 
__NTH
 (
	$l°©64
 (
__c⁄°
 *
__∑th
, 
°©64
 *
__°©buf
))

513  
	`__lx°©64
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

514 
	}
}

517 
__exã∫_ölöe
 

518 
__NTH
 (
	$f°©64
 (
__fd
, 
°©64
 *
__°©buf
))

520  
	`__fx°©64
 (
_STAT_VER
, 
__fd
, 
__°©buf
);

521 
	}
}

523 #ifde‡
__USE_ATFILE


524 
__exã∫_ölöe
 

525 
__NTH
 (
	$f°©©64
 (
__fd
, 
__c⁄°
 *
__fûíame
, 
°©64
 *
__°©buf
,

526 
__Êag
))

528  
	`__fx°©©64
 (
_STAT_VER
, 
__fd
, 
__fûíame
, 
__°©buf
, 
__Êag
);

529 
	}
}

536 
	g__END_DECLS


	@/usr/include/sys/syscall.h

19 #i‚de‡
_SYSCALL_H


20 
	#_SYSCALL_H
 1

	)

25 
	~<asm/uni°d.h
>

27 #i‚de‡
_LIBC


32 
	~<bôs/sysˇŒ.h
>

	@/usr/include/sys/time.h

20 #i‚de‡
_SYS_TIME_H


21 
	#_SYS_TIME_H
 1

	)

23 
	~<„©uªs.h
>

25 
	~<bôs/ty≥s.h
>

26 
	#__√ed_time_t


	)

27 
	~<time.h
>

28 
	#__√ed_timevÆ


	)

29 
	~<bôs/time.h
>

31 
	~<sys/£À˘.h
>

33 #i‚de‡
__su£c⁄ds_t_deföed


34 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

35 
	#__su£c⁄ds_t_deföed


	)

39 
	g__BEGIN_DECLS


41 #ifde‡
__USE_GNU


43 
	#TIMEVAL_TO_TIMESPEC
(
tv
, 
ts
) { \

44 (
ts
)->
tv_£c
 = (
tv
)->tv_sec; \

45 (
ts
)->
tv_n£c
 = (
tv
)->
tv_u£c
 * 1000; \

46 }

	)

47 
	#TIMESPEC_TO_TIMEVAL
(
tv
, 
ts
) { \

48 (
tv
)->
tv_£c
 = (
ts
)->tv_sec; \

49 (
tv
)->
tv_u£c
 = (
ts
)->
tv_n£c
 / 1000; \

50 }

	)

54 #ifde‡
__USE_BSD


57 
	stimez⁄e


59 
	mtz_möuãswe°
;

60 
	mtz_d°time
;

63 
timez⁄e
 *
	t__ª°ri˘
 
	t__timez⁄e_±r_t
;

65 *
	t__ª°ri˘
 
	t__timez⁄e_±r_t
;

73 
	$gëtimeofday
 (
timevÆ
 *
__ª°ri˘
 
__tv
,

74 
__timez⁄e_±r_t
 
__tz
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

76 #ifde‡
__USE_BSD


79 
	$£âimeofday
 (
__c⁄°
 
timevÆ
 *
__tv
,

80 
__c⁄°
 
timez⁄e
 *
__tz
)

81 
__THROW
 
	`__n⁄nuŒ
 ((1));

87 
	$adjtime
 (
__c⁄°
 
timevÆ
 *
__dñè
,

88 
timevÆ
 *
__ﬁddñè
Ë
__THROW
;

93 
	e__ôimî_which


96 
ITIMER_REAL
 = 0,

97 
	#ITIMER_REAL
 
ITIMER_REAL


	)

99 
ITIMER_VIRTUAL
 = 1,

100 
	#ITIMER_VIRTUAL
 
ITIMER_VIRTUAL


	)

103 
ITIMER_PROF
 = 2

104 
	#ITIMER_PROF
 
ITIMER_PROF


	)

109 
	sôimîvÆ


112 
timevÆ
 
ô_öãrvÆ
;

114 
timevÆ
 
ô_vÆue
;

117 #i‡
deföed
 
__USE_GNU
 && !deföed 
__˝lu•lus


120 
__ôimî_which
 
	t__ôimî_which_t
;

122 
	t__ôimî_which_t
;

127 
	$gëôimî
 (
__ôimî_which_t
 
__which
,

128 
ôimîvÆ
 *
__vÆue
Ë
__THROW
;

133 
	$£tôimî
 (
__ôimî_which_t
 
__which
,

134 
__c⁄°
 
ôimîvÆ
 *
__ª°ri˘
 
__√w
,

135 
ôimîvÆ
 *
__ª°ri˘
 
__ﬁd
Ë
__THROW
;

140 
	$utimes
 (
__c⁄°
 *
__fûe
, __c⁄° 
timevÆ
 
__tvp
[2])

141 
__THROW
 
	`__n⁄nuŒ
 ((1));

143 #ifde‡
__USE_BSD


145 
	$lutimes
 (
__c⁄°
 *
__fûe
, __c⁄° 
timevÆ
 
__tvp
[2])

146 
__THROW
 
	`__n⁄nuŒ
 ((1));

149 
	$futimes
 (
__fd
, 
__c⁄°
 
timevÆ
 
__tvp
[2]Ë
__THROW
;

152 #ifde‡
__USE_GNU


156 
	$futimeßt
 (
__fd
, 
__c⁄°
 *
__fûe
,

157 
__c⁄°
 
timevÆ
 
__tvp
[2]Ë
__THROW
;

161 #ifde‡
__USE_BSD


164 
	#timîis£t
(
tvp
Ë(—vp)->
tv_£c
 || (tvp)->
tv_u£c
)

	)

165 
	#timî˛ór
(
tvp
Ë(—vp)->
tv_£c
 = (tvp)->
tv_u£c
 = 0)

	)

166 
	#timîcmp
(
a
, 
b
, 
CMP
) \

167 (((
a
)->
tv_£c
 =(
b
)->tv_sec) ? \

168 ((
a
)->
tv_u£c
 
	`CMP
 (
b
)->tv_usec) : \

169 ((
a
)->
tv_£c
 
	`CMP
 (
b
)->tv_£c))

	)

170 
	#timîadd
(
a
, 
b
, 
ªsu…
) \

172 (
ªsu…
)->
tv_£c
 = (
a
)->tv_£¯+ (
b
)->tv_sec; \

173 (
ªsu…
)->
tv_u£c
 = (
a
)->tv_u£¯+ (
b
)->tv_usec; \

174 i‡((
ªsu…
)->
tv_u£c
 >= 1000000) \

176 ++(
ªsu…
)->
tv_£c
; \

177 (
ªsu…
)->
tv_u£c
 -= 1000000; \

179 
	}
} 0)

	)

180 
	#timîsub
(
a
, 
b
, 
ªsu…
) \

182 (
ªsu…
)->
tv_£c
 = (
a
)->tv_£¯- (
b
)->tv_sec; \

183 (
ªsu…
)->
tv_u£c
 = (
a
)->tv_u£¯- (
b
)->tv_usec; \

184 i‡((
ªsu…
)->
tv_u£c
 < 0) { \

185 --(
ªsu…
)->
tv_£c
; \

186 (
ªsu…
)->
tv_u£c
 += 1000000; \

188 } 0)

	)

191 
	g__END_DECLS


	@/usr/include/sys/timeb.h

19 #i‚de‡
_SYS_TIMEB_H


20 
	#_SYS_TIMEB_H
 1

	)

22 
	~<„©uªs.h
>

24 
	#__√ed_time_t


	)

25 
	~<time.h
>

28 
__BEGIN_DECLS


32 
	stimeb


34 
time_t
 
	mtime
;

35 
	mmûlôm
;

36 
	mtimez⁄e
;

37 
	md°Êag
;

42 
·ime
 (
timeb
 *
__timebuf
);

44 
	g__END_DECLS


	@/usr/include/sys/types.h

23 #i‚def 
_SYS_TYPES_H


24 
	#_SYS_TYPES_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


30 
	~<bôs/ty≥s.h
>

32 #ifdef 
__USE_BSD


33 #i‚de‡
__u_ch¨_deföed


34 
__u_ch¨
 
	tu_ch¨
;

35 
__u_sh‹t
 
	tu_sh‹t
;

36 
__u_öt
 
	tu_öt
;

37 
__u_l⁄g
 
	tu_l⁄g
;

38 
__quad_t
 
	tquad_t
;

39 
__u_quad_t
 
	tu_quad_t
;

40 
__fsid_t
 
	tfsid_t
;

41 
	#__u_ch¨_deföed


	)

45 
__loff_t
 
	tloff_t
;

47 #i‚de‡
__öo_t_deföed


48 #i‚de‡
__USE_FILE_OFFSET64


49 
__öo_t
 
	töo_t
;

51 
__öo64_t
 
	töo_t
;

53 
	#__öo_t_deföed


	)

55 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__öo64_t_deföed


56 
__öo64_t
 
	töo64_t
;

57 
	#__öo64_t_deföed


	)

60 #i‚de‡
__dev_t_deföed


61 
__dev_t
 
	tdev_t
;

62 
	#__dev_t_deföed


	)

65 #i‚de‡
__gid_t_deföed


66 
__gid_t
 
	tgid_t
;

67 
	#__gid_t_deföed


	)

70 #i‚de‡
__mode_t_deföed


71 
__mode_t
 
	tmode_t
;

72 
	#__mode_t_deföed


	)

75 #i‚de‡
__∆ök_t_deföed


76 
__∆ök_t
 
	t∆ök_t
;

77 
	#__∆ök_t_deföed


	)

80 #i‚de‡
__uid_t_deföed


81 
__uid_t
 
	tuid_t
;

82 
	#__uid_t_deföed


	)

85 #i‚de‡
__off_t_deföed


86 #i‚de‡
__USE_FILE_OFFSET64


87 
__off_t
 
	toff_t
;

89 
__off64_t
 
	toff_t
;

91 
	#__off_t_deföed


	)

93 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


94 
__off64_t
 
	toff64_t
;

95 
	#__off64_t_deföed


	)

98 #i‚de‡
__pid_t_deföed


99 
__pid_t
 
	tpid_t
;

100 
	#__pid_t_deföed


	)

103 #i‡(
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
) \

104 && !
deföed
 
__id_t_deföed


105 
__id_t
 
	tid_t
;

106 
	#__id_t_deföed


	)

109 #i‚de‡
__ssize_t_deföed


110 
__ssize_t
 
	tssize_t
;

111 
	#__ssize_t_deföed


	)

114 #ifdef 
__USE_BSD


115 #i‚de‡
__daddr_t_deföed


116 
__daddr_t
 
	tdaddr_t
;

117 
__ˇddr_t
 
	tˇddr_t
;

118 
	#__daddr_t_deföed


	)

122 #i‡(
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
Ë&& !deföed 
__key_t_deföed


123 
__key_t
 
	tkey_t
;

124 
	#__key_t_deföed


	)

127 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


128 
	#__√ed_˛ock_t


	)

130 
	#__√ed_time_t


	)

131 
	#__√ed_timî_t


	)

132 
	#__√ed_˛ockid_t


	)

133 
	~<time.h
>

135 #ifde‡
__USE_XOPEN


136 #i‚de‡
__u£c⁄ds_t_deföed


137 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

138 
	#__u£c⁄ds_t_deföed


	)

140 #i‚de‡
__su£c⁄ds_t_deföed


141 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

142 
	#__su£c⁄ds_t_deföed


	)

146 
	#__√ed_size_t


	)

147 
	~<°ddef.h
>

149 #ifde‡
__USE_MISC


151 
	tul⁄g
;

152 
	tush‹t
;

153 
	tuöt
;

158 #i‡!
__GNUC_PREREQ
 (2, 7)

161 #i‚de‡
__öt8_t_deföed


162 
	#__öt8_t_deföed


	)

163 
	töt8_t
;

164 
	töt16_t
;

165 
	töt32_t
;

166 #i‡
__WORDSIZE
 == 64

167 
	töt64_t
;

168 #ñi‡
__GLIBC_HAVE_LONG_LONG


169 
__exãnsi⁄__
 
	töt64_t
;

174 
	tu_öt8_t
;

175 
	tu_öt16_t
;

176 
	tu_öt32_t
;

177 #i‡
__WORDSIZE
 == 64

178 
	tu_öt64_t
;

179 #ñi‡
__GLIBC_HAVE_LONG_LONG


180 
__exãnsi⁄__
 
	tu_öt64_t
;

183 
	tªgi°î_t
;

188 
	#__ötN_t
(
N
, 
MODE
) \

189 ##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

190 
	t__u_ötN_t
(
	tN
, 
	tMODE
) \

191 
	tu_öt
##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

193 #i‚de‡
	t__öt8_t_deföed


194 
	t__öt8_t_deföed


	)

195 
	t__ötN_t
 (8, 
	t__QI__
);

196 
__ötN_t
 (16, 
__HI__
);

197 
__ötN_t
 (32, 
__SI__
);

198 
__ötN_t
 (64, 
__DI__
);

201 
__u_ötN_t
 (8, 
__QI__
);

202 
__u_ötN_t
 (16, 
__HI__
);

203 
__u_ötN_t
 (32, 
__SI__
);

204 
__u_ötN_t
 (64, 
__DI__
);

206 
	tªgi°î_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__w‹d__
)));

212 
	#__BIT_TYPES_DEFINED__
 1

	)

215 #ifdef 
__USE_BSD


217 
	~<ídün.h
>

220 
	~<sys/£À˘.h
>

223 
	~<sys/sysma¸os.h
>

227 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
) \

228 && !
deföed
 
__blksize_t_deföed


229 
__blksize_t
 
	tblksize_t
;

230 
	#__blksize_t_deföed


	)

234 #i‚de‡
__USE_FILE_OFFSET64


235 #i‚de‡
__blk˙t_t_deföed


236 
__blk˙t_t
 
	tblk˙t_t
;

237 
	#__blk˙t_t_deföed


	)

239 #i‚de‡
__fsblk˙t_t_deföed


240 
__fsblk˙t_t
 
	tfsblk˙t_t
;

241 
	#__fsblk˙t_t_deföed


	)

243 #i‚de‡
__fsfû˙t_t_deföed


244 
__fsfû˙t_t
 
	tfsfû˙t_t
;

245 
	#__fsfû˙t_t_deföed


	)

248 #i‚de‡
__blk˙t_t_deföed


249 
__blk˙t64_t
 
	tblk˙t_t
;

250 
	#__blk˙t_t_deföed


	)

252 #i‚de‡
__fsblk˙t_t_deföed


253 
__fsblk˙t64_t
 
	tfsblk˙t_t
;

254 
	#__fsblk˙t_t_deföed


	)

256 #i‚de‡
__fsfû˙t_t_deföed


257 
__fsfû˙t64_t
 
	tfsfû˙t_t
;

258 
	#__fsfû˙t_t_deföed


	)

262 #ifde‡
__USE_LARGEFILE64


263 
__blk˙t64_t
 
	tblk˙t64_t
;

264 
__fsblk˙t64_t
 
	tfsblk˙t64_t
;

265 
__fsfû˙t64_t
 
	tfsfû˙t64_t
;

270 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


271 
	~<bôs/±hªadty≥s.h
>

274 
	g__END_DECLS


	@/usr/include/sys/wait.h

24 #i‚def 
_SYS_WAIT_H


25 
	#_SYS_WAIT_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


31 
	~<sig«l.h
>

32 
	~<sys/ªsour˚.h
>

35 #i‡!
deföed
 
_STDLIB_H
 || (!deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K8
)

38 
	~<bôs/waôÊags.h
>

40 #ifdef 
__USE_BSD


45 #i‡
deföed
 
__GNUC__
 && !deföed 
__˝lu•lus


46 
	#__WAIT_INT
(
°©us
) \

47 (
	`__exãnsi⁄__
 (((uni⁄ { 
	`__ty≥of
(
°©us
Ë
__ö
; 
__i
; }) \

48 { .
__ö
 = (
°©us
Ë}).
__i
))

	)

50 
	#__WAIT_INT
(
°©us
Ë(*(
__c⁄°
 *Ë&(°©us))

	)

58 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2 || deföed 
__˝lu•lus


59 
	#__WAIT_STATUS
 *

	)

60 
	#__WAIT_STATUS_DEFN
 *

	)

65 
waô
 *
	m__u±r
;

66 *
	m__ùå
;

67 } 
	t__WAIT_STATUS
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

68 
	#__WAIT_STATUS_DEFN
 *

	)

73 
	#__WAIT_INT
(
°©us
Ë(°©us)

	)

74 
	#__WAIT_STATUS
 *

	)

75 
	#__WAIT_STATUS_DEFN
 *

	)

80 
	~<bôs/waô°©us.h
>

82 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (
	`__WAIT_INT
 (°©us))

	)

83 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (
	`__WAIT_INT
 (°©us))

	)

84 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (
	`__WAIT_INT
 (°©us))

	)

85 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (
	`__WAIT_INT
 (°©us))

	)

86 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (
	`__WAIT_INT
 (°©us))

	)

87 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (
	`__WAIT_INT
 (°©us))

	)

88 #ifde‡
__WIFCONTINUED


89 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (
	`__WAIT_INT
 (°©us))

	)

93 #ifdef 
__USE_BSD


94 
	#WCOREFLAG
 
__WCOREFLAG


	)

95 
	#WCOREDUMP
(
°©us
Ë
	`__WCOREDUMP
 (
	`__WAIT_INT
 (°©us))

	)

96 
	#W_EXITCODE
(
ªt
, 
sig
Ë
	`__W_EXITCODE
 (ªt, sig)

	)

97 
	#W_STOPCODE
(
sig
Ë
	`__W_STOPCODE
 (sig)

	)

101 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


104 
	mP_ALL
,

105 
	mP_PID
,

106 
	mP_PGID


107 } 
	tidty≥_t
;

116 
__pid_t
 
waô
 (
__WAIT_STATUS
 
__°©_loc
);

118 #ifdef 
__USE_BSD


120 
	#WAIT_ANY
 (-1Ë

	)

121 
	#WAIT_MYPGRP
 0

	)

139 
__pid_t
 
waôpid
 (__pid_à
__pid
, *
__°©_loc
, 
__›ti⁄s
);

141 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


142 
	#__√ed_sigöfo_t


	)

143 
	~<bôs/sigöfo.h
>

155 
waôid
 (
idty≥_t
 
__idty≥
, 
__id_t
 
__id
, 
sigöfo_t
 *
__öf›
,

156 
__›ti⁄s
);

159 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


162 
	grußge
;

169 
__pid_t
 
	$waô3
 (
__WAIT_STATUS
 
__°©_loc
, 
__›ti⁄s
,

170 
rußge
 * 
__ußge
Ë
__THROW
;

173 #ifde‡
__USE_BSD


175 
__pid_t
 
	$waô4
 (
__pid_t
 
__pid
, 
__WAIT_STATUS
 
__°©_loc
, 
__›ti⁄s
,

176 
rußge
 *
__ußge
Ë
__THROW
;

180 
__END_DECLS


	@/usr/include/syslog.h

1 
	~<sys/sy¶og.h
>

	@/usr/include/time.h

23 #i‚def 
_TIME_H


25 #i‡(! 
deföed
 
__√ed_time_t
 && !deföed 
__√ed_˛ock_t
 && \

26 ! 
deföed
 
	g__√ed_time•ec
)

27 
	#_TIME_H
 1

	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


34 #ifdef 
_TIME_H


36 
	#__√ed_size_t


	)

37 
	#__√ed_NULL


	)

38 
	~<°ddef.h
>

42 
	~<bôs/time.h
>

45 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


46 #i‚de‡
CLK_TCK


47 
	#CLK_TCK
 
CLOCKS_PER_SEC


	)

53 #i‡!
deföed
 
__˛ock_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_˛ock_t
)

54 
	#__˛ock_t_deföed
 1

	)

56 
	~<bôs/ty≥s.h
>

58 
__BEGIN_NAMESPACE_STD


60 
__˛ock_t
 
	t˛ock_t
;

61 
	g__END_NAMESPACE_STD


62 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


63 
	$__USING_NAMESPACE_STD
(
˛ock_t
)

67 #unde‡
__√ed_˛ock_t


69 #i‡!
deföed
 
__time_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_time_t
)

70 
	#__time_t_deföed
 1

	)

72 
	~<bôs/ty≥s.h
>

74 
__BEGIN_NAMESPACE_STD


76 
__time_t
 
	ttime_t
;

77 
__END_NAMESPACE_STD


78 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC
 || deföed 
__USE_SVID


79 
	$__USING_NAMESPACE_STD
(
time_t
)

83 #unde‡
__√ed_time_t


85 #i‡!
deföed
 
__˛ockid_t_deföed
 && \

86 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_˛ockid_t
)

87 
	#__˛ockid_t_deföed
 1

	)

89 
	~<bôs/ty≥s.h
>

92 
__˛ockid_t
 
	t˛ockid_t
;

95 #unde‡
__˛ockid_time_t


97 #i‡!
deföed
 
__timî_t_deföed
 && \

98 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_timî_t
)

99 
	#__timî_t_deföed
 1

	)

101 
	~<bôs/ty≥s.h
>

104 
__timî_t
 
	ttimî_t
;

107 #unde‡
__√ed_timî_t


110 #i‡!
deföed
 
__time•ec_deföed
 && \

111 ((
deföed
 
_TIME_H
 && \

112 (
deföed
 
__USE_POSIX199309
 || deföed 
__USE_MISC
)) || \

113 
deföed
 
__√ed_time•ec
)

114 
	#__time•ec_deföed
 1

	)

116 
	~<bôs/ty≥s.h
>

120 
	stime•ec


122 
__time_t
 
tv_£c
;

123 
tv_n£c
;

127 #unde‡
__√ed_time•ec


130 #ifdef 
_TIME_H


131 
__BEGIN_NAMESPACE_STD


133 
	stm


135 
tm_£c
;

136 
tm_mö
;

137 
tm_hour
;

138 
tm_mday
;

139 
tm_m⁄
;

140 
tm_yór
;

141 
tm_wday
;

142 
tm_yday
;

143 
tm_isd°
;

145 #ifdef 
__USE_BSD


146 
tm_gmtoff
;

147 
__c⁄°
 *
tm_z⁄e
;

149 
__tm_gmtoff
;

150 
__c⁄°
 *
__tm_z⁄e
;

153 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


155 
	$__USING_NAMESPACE_STD
(
tm
)

159 #ifde‡
__USE_POSIX199309


161 
	sôimî•ec


163 
time•ec
 
ô_öãrvÆ
;

164 
time•ec
 
ô_vÆue
;

168 
sigevít
;

172 #ifde‡
__USE_XOPEN2K


173 #i‚de‡
__pid_t_deföed


174 
__pid_t
 
	tpid_t
;

175 
	#__pid_t_deföed


	)

180 
__BEGIN_NAMESPACE_STD


183 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

186 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

189 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

190 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

193 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

199 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

200 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

201 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

202 
__END_NAMESPACE_STD


204 #ifde‡
__USE_XOPEN


207 *
	$°Ωtime
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

208 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

209 
__THROW
;

212 #ifde‡
__USE_XOPEN2K8


215 
	~<xloˇÀ.h
>

217 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

218 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

219 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

220 
__loˇÀ_t
 
__loc
Ë
__THROW
;

223 #ifde‡
__USE_GNU


224 *
	$°Ωtime_l
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

225 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

226 
__loˇÀ_t
 
__loc
Ë
__THROW
;

230 
__BEGIN_NAMESPACE_STD


233 
tm
 *
	$gmtime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

237 
tm
 *
	$loˇ…ime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

238 
__END_NAMESPACE_STD


240 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


243 
tm
 *
	$gmtime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

244 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

248 
tm
 *
	$loˇ…ime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

249 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

252 
__BEGIN_NAMESPACE_STD


255 *
	$as˘ime
 (
__c⁄°
 
tm
 *
__ç
Ë
__THROW
;

258 *
	$˘ime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

259 
__END_NAMESPACE_STD


261 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


266 *
	$as˘ime_r
 (
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

267 *
__ª°ri˘
 
__buf
Ë
__THROW
;

270 *
	$˘ime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

271 *
__ª°ri˘
 
__buf
Ë
__THROW
;

276 *
__tz«me
[2];

277 
__daylight
;

278 
__timez⁄e
;

281 #ifdef 
__USE_POSIX


283 *
tz«me
[2];

287 
	$tz£t
 (Ë
__THROW
;

290 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


291 
daylight
;

292 
timez⁄e
;

295 #ifde‡
__USE_SVID


298 
	$°ime
 (
__c⁄°
 
time_t
 *
__whí
Ë
__THROW
;

304 
	#__i¶óp
(
yór
) \

305 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

308 #ifde‡
__USE_MISC


313 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

316 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

319 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

323 #ifde‡
__USE_POSIX199309


328 
	`«no¶ìp
 (
__c⁄°
 
time•ec
 *
__ªque°ed_time
,

329 
time•ec
 *
__ªmaöög
);

333 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

336 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

339 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, 
__c⁄°
 
time•ec
 *
__ç
)

340 
__THROW
;

342 #ifde‡
__USE_XOPEN2K


347 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

348 
__c⁄°
 
time•ec
 *
__ªq
,

349 
time•ec
 *
__ªm
);

352 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

357 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

358 
sigevít
 *
__ª°ri˘
 
__evp
,

359 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

362 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

365 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

366 
__c⁄°
 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

367 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

370 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

371 
__THROW
;

374 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

378 #ifde‡
__USE_XOPEN_EXTENDED


390 
gëd©e_îr
;

399 
tm
 *
	`gëd©e
 (
__c⁄°
 *
__°rög
);

402 #ifde‡
__USE_GNU


413 
	`gëd©e_r
 (
__c⁄°
 *
__ª°ri˘
 
__°rög
,

414 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

417 
__END_DECLS


	@/usr/include/unistd.h

23 #i‚def 
_UNISTD_H


24 
	#_UNISTD_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


33 #ifde‡
__USE_XOPEN2K8


35 
	#_POSIX_VERSION
 200809L

	)

36 #ñi‡
deföed
 
__USE_XOPEN2K


38 
	#_POSIX_VERSION
 200112L

	)

39 #ñi‡
deföed
 
__USE_POSIX199506


41 
	#_POSIX_VERSION
 199506L

	)

42 #ñi‡
deföed
 
__USE_POSIX199309


44 
	#_POSIX_VERSION
 199309L

	)

47 
	#_POSIX_VERSION
 199009L

	)

53 #ifde‡
__USE_XOPEN2K8


54 
	#__POSIX2_THIS_VERSION
 200809L

	)

56 #ñi‡
deföed
 
__USE_XOPEN2K


58 
	#__POSIX2_THIS_VERSION
 200112L

	)

59 #ñi‡
deföed
 
__USE_POSIX199506


61 
	#__POSIX2_THIS_VERSION
 199506L

	)

64 
	#__POSIX2_THIS_VERSION
 199209L

	)

68 
	#_POSIX2_VERSION
 
__POSIX2_THIS_VERSION


	)

72 
	#_POSIX2_C_BIND
 
__POSIX2_THIS_VERSION


	)

76 
	#_POSIX2_C_DEV
 
__POSIX2_THIS_VERSION


	)

80 
	#_POSIX2_SW_DEV
 
__POSIX2_THIS_VERSION


	)

84 
	#_POSIX2_LOCALEDEF
 
__POSIX2_THIS_VERSION


	)

87 #ifde‡
__USE_XOPEN2K8


88 
	#_XOPEN_VERSION
 700

	)

89 #ñi‡
deföed
 
__USE_XOPEN2K


90 
	#_XOPEN_VERSION
 600

	)

91 #ñi‡
deföed
 
__USE_UNIX98


92 
	#_XOPEN_VERSION
 500

	)

94 
	#_XOPEN_VERSION
 4

	)

98 
	#_XOPEN_XCU_VERSION
 4

	)

101 
	#_XOPEN_XPG2
 1

	)

102 
	#_XOPEN_XPG3
 1

	)

103 
	#_XOPEN_XPG4
 1

	)

106 
	#_XOPEN_UNIX
 1

	)

109 
	#_XOPEN_CRYPT
 1

	)

113 
	#_XOPEN_ENH_I18N
 1

	)

116 
	#_XOPEN_LEGACY
 1

	)

203 
	~<bôs/posix_›t.h
>

206 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


207 
	~<bôs/ívú⁄míts.h
>

211 
	#STDIN_FILENO
 0

	)

212 
	#STDOUT_FILENO
 1

	)

213 
	#STDERR_FILENO
 2

	)

218 
	~<bôs/ty≥s.h
>

220 #i‚def 
__ssize_t_deföed


221 
__ssize_t
 
	tssize_t
;

222 
	#__ssize_t_deföed


	)

225 
	#__√ed_size_t


	)

226 
	#__√ed_NULL


	)

227 
	~<°ddef.h
>

229 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


232 #i‚de‡
__gid_t_deföed


233 
__gid_t
 
	tgid_t
;

234 
	#__gid_t_deföed


	)

237 #i‚de‡
__uid_t_deföed


238 
__uid_t
 
	tuid_t
;

239 
	#__uid_t_deföed


	)

242 #i‚de‡
__off_t_deföed


243 #i‚de‡
__USE_FILE_OFFSET64


244 
__off_t
 
	toff_t
;

246 
__off64_t
 
	toff_t
;

248 
	#__off_t_deföed


	)

250 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


251 
__off64_t
 
	toff64_t
;

252 
	#__off64_t_deföed


	)

255 #i‚de‡
__u£c⁄ds_t_deföed


256 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

257 
	#__u£c⁄ds_t_deföed


	)

260 #i‚de‡
__pid_t_deföed


261 
__pid_t
 
	tpid_t
;

262 
	#__pid_t_deföed


	)

266 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


267 #i‚de‡
__öçå_t_deföed


268 
__öçå_t
 
	töçå_t
;

269 
	#__öçå_t_deföed


	)

273 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN


274 #i‚de‡
__sockÀn_t_deföed


275 
__sockÀn_t
 
	tsockÀn_t
;

276 
	#__sockÀn_t_deföed


	)

282 
	#R_OK
 4

	)

283 
	#W_OK
 2

	)

284 
	#X_OK
 1

	)

285 
	#F_OK
 0

	)

288 
	$ac˚ss
 (
__c⁄°
 *
__«me
, 
__ty≥
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

290 #ifde‡
__USE_GNU


293 
	$euidac˚ss
 (
__c⁄°
 *
__«me
, 
__ty≥
)

294 
__THROW
 
	`__n⁄nuŒ
 ((1));

297 
	$óc˚ss
 (
__c⁄°
 *
__«me
, 
__ty≥
)

298 
__THROW
 
	`__n⁄nuŒ
 ((1));

301 #ifde‡
__USE_ATFILE


305 
	$Ác˚sßt
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__ty≥
, 
__Êag
)

306 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

311 #i‚def 
_STDIO_H


312 
	#SEEK_SET
 0

	)

313 
	#SEEK_CUR
 1

	)

314 
	#SEEK_END
 2

	)

317 #i‡
deföed
 
__USE_BSD
 && !deföed 
L_SET


319 
	#L_SET
 
SEEK_SET


	)

320 
	#L_INCR
 
SEEK_CUR


	)

321 
	#L_XTND
 
SEEK_END


	)

330 #i‚de‡
__USE_FILE_OFFSET64


331 
__off_t
 
	$l£ek
 (
__fd
, 
__off_t
 
__off£t
, 
__whí˚
Ë
__THROW
;

333 #ifde‡
__REDIRECT_NTH


334 
__off64_t
 
	`__REDIRECT_NTH
 (
l£ek
,

335 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
),

336 
l£ek64
);

338 
	#l£ek
 
l£ek64


	)

341 #ifde‡
__USE_LARGEFILE64


342 
__off64_t
 
	$l£ek64
 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
)

343 
__THROW
;

350 
	`˛o£
 (
__fd
);

357 
ssize_t
 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
Ë
__wur
;

363 
ssize_t
 
	$wrôe
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
Ë
__wur
;

365 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


366 #i‚de‡
__USE_FILE_OFFSET64


373 
ssize_t
 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

374 
__off_t
 
__off£t
Ë
__wur
;

381 
ssize_t
 
	$pwrôe
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
,

382 
__off_t
 
__off£t
Ë
__wur
;

384 #ifde‡
__REDIRECT


385 
ssize_t
 
	`__REDIRECT
 (
¥ód
, (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

386 
__off64_t
 
__off£t
),

387 
¥ód64
Ë
__wur
;

388 
ssize_t
 
	`__REDIRECT
 (
pwrôe
, (
__fd
, 
__c⁄°
 *
__buf
,

389 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
),

390 
pwrôe64
Ë
__wur
;

392 
	#¥ód
 
¥ód64


	)

393 
	#pwrôe
 
pwrôe64


	)

397 #ifde‡
__USE_LARGEFILE64


401 
ssize_t
 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

402 
__off64_t
 
__off£t
Ë
__wur
;

405 
ssize_t
 
	$pwrôe64
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
,

406 
__off64_t
 
__off£t
Ë
__wur
;

414 
	$pùe
 (
__pùedes
[2]Ë
__THROW
 
__wur
;

416 #ifde‡
__USE_GNU


419 
	$pùe2
 (
__pùedes
[2], 
__Êags
Ë
__THROW
 
__wur
;

429 
	$Æ¨m
 (
__£c⁄ds
Ë
__THROW
;

441 
	`¶ìp
 (
__£c⁄ds
);

443 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

444 || 
deföed
 
__USE_BSD


449 
__u£c⁄ds_t
 
	$uÆ¨m
 (
__u£c⁄ds_t
 
__vÆue
, __u£c⁄ds_à
__öãrvÆ
)

450 
__THROW
;

457 
	`u¶ìp
 (
__u£c⁄ds_t
 
__u£c⁄ds
);

466 
	`∑u£
 ();

470 
	$chown
 (
__c⁄°
 *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

471 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

473 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


475 
	$fchown
 (
__fd
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
Ë
__THROW
 
__wur
;

480 
	$lchown
 (
__c⁄°
 *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

481 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

485 #ifde‡
__USE_ATFILE


488 
	$fchow«t
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__uid_t
 
__ow√r
,

489 
__gid_t
 
__group
, 
__Êag
)

490 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

494 
	$chdú
 (
__c⁄°
 *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

496 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


498 
	$fchdú
 (
__fd
Ë
__THROW
 
__wur
;

508 *
	$gëcwd
 (*
__buf
, 
size_t
 
__size
Ë
__THROW
 
__wur
;

510 #ifdef 
__USE_GNU


514 *
	$gë_cuºít_dú_«me
 (Ë
__THROW
;

517 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

518 || 
deföed
 
__USE_BSD


522 *
	$gëwd
 (*
__buf
)

523 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
;

528 
	$dup
 (
__fd
Ë
__THROW
 
__wur
;

531 
	$dup2
 (
__fd
, 
__fd2
Ë
__THROW
;

533 #ifde‡
__USE_GNU


536 
	$dup3
 (
__fd
, 
__fd2
, 
__Êags
Ë
__THROW
;

540 **
__ívú⁄
;

541 #ifde‡
__USE_GNU


542 **
ívú⁄
;

548 
	$execve
 (
__c⁄°
 *
__∑th
, *__c⁄° 
__¨gv
[],

549 *
__c⁄°
 
__ívp
[]Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

551 #ifde‡
__USE_XOPEN2K8


554 
	$„xecve
 (
__fd
, *
__c⁄°
 
__¨gv
[], *__c⁄° 
__ívp
[])

555 
__THROW
 
	`__n⁄nuŒ
 ((2));

560 
	$execv
 (
__c⁄°
 *
__∑th
, *__c⁄° 
__¨gv
[])

561 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

565 
	$exe˛e
 (
__c⁄°
 *
__∑th
, __c⁄° *
__¨g
, ...)

566 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

570 
	$exe˛
 (
__c⁄°
 *
__∑th
, __c⁄° *
__¨g
, ...)

571 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

575 
	$execvp
 (
__c⁄°
 *
__fûe
, *__c⁄° 
__¨gv
[])

576 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

581 
	$exe˛p
 (
__c⁄°
 *
__fûe
, __c⁄° *
__¨g
, ...)

582 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

584 #ifde‡
__USE_GNU


587 
	$execv≥
 (
__c⁄°
 *
__fûe
, *__c⁄° 
__¨gv
[],

588 *
__c⁄°
 
__ívp
[])

589 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

593 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


595 
	$ni˚
 (
__öc
Ë
__THROW
 
__wur
;

600 
	$_exô
 (
__°©us
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

606 
	~<bôs/c⁄‚ame.h
>

609 
	$∑thc⁄f
 (
__c⁄°
 *
__∑th
, 
__«me
)

610 
__THROW
 
	`__n⁄nuŒ
 ((1));

613 
	$Â©hc⁄f
 (
__fd
, 
__«me
Ë
__THROW
;

616 
	$sysc⁄f
 (
__«me
Ë
__THROW
;

618 #ifdef 
__USE_POSIX2


620 
size_t
 
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

625 
__pid_t
 
	$gëpid
 (Ë
__THROW
;

628 
__pid_t
 
	$gëµid
 (Ë
__THROW
;

632 #i‚de‡
__FAVOR_BSD


633 
__pid_t
 
	$gëpgΩ
 (Ë
__THROW
;

635 #ifde‡
__REDIRECT_NTH


636 
__pid_t
 
	`__REDIRECT_NTH
 (
gëpgΩ
, (__pid_à
__pid
), 
__gëpgid
);

638 
	#gëpgΩ
 
__gëpgid


	)

643 
__pid_t
 
	$__gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

644 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


645 
__pid_t
 
	$gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

652 
	$£çgid
 (
__pid_t
 
__pid
, __pid_à
__pgid
Ë
__THROW
;

654 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


665 #i‚de‡
__FAVOR_BSD


669 
	$£çgΩ
 (Ë
__THROW
;

674 #ifde‡
__REDIRECT_NTH


675 
	`__REDIRECT_NTH
 (
£çgΩ
, (
__pid_t
 
__pid
, __pid_à
__pgΩ
), 
£çgid
);

677 
	#£çgΩ
 
£çgid


	)

686 
__pid_t
 
	$£tsid
 (Ë
__THROW
;

688 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


690 
__pid_t
 
	$gësid
 (
__pid_t
 
__pid
Ë
__THROW
;

694 
__uid_t
 
	$gëuid
 (Ë
__THROW
;

697 
__uid_t
 
	$gëeuid
 (Ë
__THROW
;

700 
__gid_t
 
	$gëgid
 (Ë
__THROW
;

703 
__gid_t
 
	$gëegid
 (Ë
__THROW
;

708 
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]Ë
__THROW
 
__wur
;

710 #ifdef 
__USE_GNU


712 
	$group_membî
 (
__gid_t
 
__gid
Ë
__THROW
;

719 
	$£tuid
 (
__uid_t
 
__uid
Ë
__THROW
;

721 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


724 
	$£åeuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
Ë
__THROW
;

727 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


729 
	$£ãuid
 (
__uid_t
 
__uid
Ë
__THROW
;

736 
	$£tgid
 (
__gid_t
 
__gid
Ë
__THROW
;

738 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


741 
	$£åegid
 (
__gid_t
 
__rgid
, __gid_à
__egid
Ë
__THROW
;

744 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


746 
	$£ãgid
 (
__gid_t
 
__gid
Ë
__THROW
;

749 #ifde‡
__USE_GNU


752 
	$gëªsuid
 (
__uid_t
 *
__ruid
, __uid_à*
__euid
, __uid_à*
__suid
)

753 
__THROW
;

757 
	$gëªsgid
 (
__gid_t
 *
__rgid
, __gid_à*
__egid
, __gid_à*
__sgid
)

758 
__THROW
;

762 
	$£åesuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
, __uid_à
__suid
)

763 
__THROW
;

767 
	$£åesgid
 (
__gid_t
 
__rgid
, __gid_à
__egid
, __gid_à
__sgid
)

768 
__THROW
;

775 
__pid_t
 
	$f‹k
 (Ë
__THROW
;

777 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

778 || 
deföed
 
__USE_BSD


783 
__pid_t
 
	$vf‹k
 (Ë
__THROW
;

789 *
	$ây«me
 (
__fd
Ë
__THROW
;

793 
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

794 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

798 
	$ißây
 (
__fd
Ë
__THROW
;

800 #i‡
deföed
 
__USE_BSD
 \

801 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_UNIX98
)

804 
	$ây¶Ÿ
 (Ë
__THROW
;

809 
	$lök
 (
__c⁄°
 *
__‰om
, __c⁄° *
__to
)

810 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

812 #ifde‡
__USE_ATFILE


815 
	$lök©
 (
__‰omfd
, 
__c⁄°
 *
__‰om
, 
__tofd
,

816 
__c⁄°
 *
__to
, 
__Êags
)

817 
__THROW
 
	`__n⁄nuŒ
 ((2, 4)Ë
__wur
;

820 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


822 
	$symlök
 (
__c⁄°
 *
__‰om
, __c⁄° *
__to
)

823 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

828 
ssize_t
 
	$ªadlök
 (
__c⁄°
 *
__ª°ri˘
 
__∑th
,

829 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

830 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

833 #ifde‡
__USE_ATFILE


835 
	$symlök©
 (
__c⁄°
 *
__‰om
, 
__tofd
,

836 
__c⁄°
 *
__to
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

839 
ssize_t
 
	$ªadlök©
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

840 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

841 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

845 
	$u∆ök
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

847 #ifde‡
__USE_ATFILE


849 
	$u∆ök©
 (
__fd
, 
__c⁄°
 *
__«me
, 
__Êag
)

850 
__THROW
 
	`__n⁄nuŒ
 ((2));

854 
	$rmdú
 (
__c⁄°
 *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

858 
__pid_t
 
	$tcgëpgΩ
 (
__fd
Ë
__THROW
;

861 
	$tc£çgΩ
 (
__fd
, 
__pid_t
 
__pgΩ_id
Ë
__THROW
;

868 *
	`gëlogö
 ();

869 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


876 
	$gëlogö_r
 (*
__«me
, 
size_t
 
__«me_Àn
Ë
	`__n⁄nuŒ
 ((1));

879 #ifdef 
__USE_BSD


881 
	$£éogö
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

885 #ifdef 
__USE_POSIX2


889 
	#__√ed_gë›t


	)

890 
	~<gë›t.h
>

894 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


898 
	$gëho°«me
 (*
__«me
, 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

902 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_UNIX98
)

905 
	$£tho°«me
 (
__c⁄°
 *
__«me
, 
size_t
 
__Àn
)

906 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

910 
	$£tho°id
 (
__id
Ë
__THROW
 
__wur
;

916 
	$gëdomaö«me
 (*
__«me
, 
size_t
 
__Àn
)

917 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

918 
	$£tdomaö«me
 (
__c⁄°
 *
__«me
, 
size_t
 
__Àn
)

919 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

925 
	$vh™gup
 (Ë
__THROW
;

928 
	$ªvoke
 (
__c⁄°
 *
__fûe
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

936 
	$¥ofû
 (*
__ßm∂e_buf„r
, 
size_t
 
__size
,

937 
size_t
 
__off£t
, 
__sˇÀ
)

938 
__THROW
 
	`__n⁄nuŒ
 ((1));

944 
	$ac˘
 (
__c⁄°
 *
__«me
Ë
__THROW
;

948 *
	$gëu£rshñl
 (Ë
__THROW
;

949 
	$ídu£rshñl
 (Ë
__THROW
;

950 
	$£tu£rshñl
 (Ë
__THROW
;

956 
	$d´m⁄
 (
__nochdú
, 
__no˛o£
Ë
__THROW
 
__wur
;

960 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

963 
	$chroŸ
 (
__c⁄°
 *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

967 *
	$gë∑ss
 (
__c⁄°
 *
__¥om±
Ë
	`__n⁄nuŒ
 ((1));

971 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


976 
	`fsync
 (
__fd
);

980 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


983 
	`gëho°id
 ();

986 
	$sync
 (Ë
__THROW
;

989 #i‡
deföed
 
__USE_BSD
 || !deföed 
__USE_XOPEN2K


992 
	$gë∑gesize
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

997 
	$gëdèbÀsize
 (Ë
__THROW
;

1003 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


1006 #i‚de‡
__USE_FILE_OFFSET64


1007 
	$åunˇã
 (
__c⁄°
 *
__fûe
, 
__off_t
 
__Àngth
)

1008 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1010 #ifde‡
__REDIRECT_NTH


1011 
	`__REDIRECT_NTH
 (
åunˇã
,

1012 (
__c⁄°
 *
__fûe
, 
__off64_t
 
__Àngth
),

1013 
åunˇã64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1015 
	#åunˇã
 
åunˇã64


	)

1018 #ifde‡
__USE_LARGEFILE64


1019 
	$åunˇã64
 (
__c⁄°
 *
__fûe
, 
__off64_t
 
__Àngth
)

1020 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1025 #i‚de‡
__USE_FILE_OFFSET64


1026 
	$·runˇã
 (
__fd
, 
__off_t
 
__Àngth
Ë
__THROW
 
__wur
;

1028 #ifde‡
__REDIRECT_NTH


1029 
	`__REDIRECT_NTH
 (
·runˇã
, (
__fd
, 
__off64_t
 
__Àngth
),

1030 
·runˇã64
Ë
__wur
;

1032 
	#·runˇã
 
·runˇã64


	)

1035 #ifde‡
__USE_LARGEFILE64


1036 
	$·runˇã64
 (
__fd
, 
__off64_t
 
__Àngth
Ë
__THROW
 
__wur
;

1042 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

1043 || 
deföed
 
__USE_MISC


1047 
	$brk
 (*
__addr
Ë
__THROW
 
__wur
;

1053 *
	$sbrk
 (
öçå_t
 
__dñè
Ë
__THROW
;

1057 #ifde‡
__USE_MISC


1068 
	$sysˇŒ
 (
__sy¢o
, ...Ë
__THROW
;

1073 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
Ë&& !deföed 
F_LOCK


1085 
	#F_ULOCK
 0

	)

1086 
	#F_LOCK
 1

	)

1087 
	#F_TLOCK
 2

	)

1088 
	#F_TEST
 3

	)

1090 #i‚de‡
__USE_FILE_OFFSET64


1091 
	$lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
Ë
__wur
;

1093 #ifde‡
__REDIRECT


1094 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
),

1095 
lockf64
Ë
__wur
;

1097 
	#lockf
 
lockf64


	)

1100 #ifde‡
__USE_LARGEFILE64


1101 
	$lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
Ë
__wur
;

1106 #ifde‡
__USE_GNU


1111 
	#TEMP_FAILURE_RETRY
(
ex¥essi⁄
) \

1112 (
__exãnsi⁄__
 \

1113 ({ 
__ªsu…
; \

1114 dÿ
__ªsu…
 = (Ë(
ex¥essi⁄
); \

1115 
__ªsu…
 =-1L && 
î∫o
 =
EINTR
); \

1116 
__ªsu…
; 
	}
}))

	)

1119 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


1122 
fd©async
 (
__fûdes
);

1128 #ifdef 
__USE_XOPEN


1130 *
	$¸y±
 (
__c⁄°
 *
__key
, __c⁄° *
__ß…
)

1131 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1135 
	$í¸y±
 (*
__block
, 
__edÊag
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1142 
	$swab
 (
__c⁄°
 *
__ª°ri˘
 
__‰om
, *__ª°ri˘ 
__to
,

1143 
ssize_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1149 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


1151 *
	$˘îmid
 (*
__s
Ë
__THROW
;

1156 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


1157 
	~<bôs/uni°d.h
>

1160 
__END_DECLS


	@/usr/include/alloca.h

19 #i‚def 
_ALLOCA_H


20 
	#_ALLOCA_H
 1

	)

22 
	~<„©uªs.h
>

24 
	#__√ed_size_t


	)

25 
	~<°ddef.h
>

27 
	g__BEGIN_DECLS


30 #unde‡
Æloˇ


33 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

35 #ifdef 
__GNUC__


36 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

39 
__END_DECLS


	@/usr/include/asm/unistd.h

1 #ifde‡
__i386__


2 
	~"uni°d_32.h
"

4 
	~"uni°d_64.h
"

	@/usr/include/bits/byteswap.h

21 #i‡!
deföed
 
_BYTESWAP_H
 && !deföed 
_NETINET_IN_H
 && !deföed 
_ENDIAN_H


25 #i‚de‡
_BITS_BYTESWAP_H


26 
	#_BITS_BYTESWAP_H
 1

	)

28 
	~<bôs/w‹dsize.h
>

31 
	#__bsw≠_c⁄°™t_16
(
x
) \

32 ((Ë((((
x
Ë>> 8Ë& 0xffË| (((xË& 0xffË<< 8)))

	)

34 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

35 
	#__bsw≠_16
(
x
) \

36 (
__exãnsi⁄__
 \

37 ({ 
__v
, 
__x
 = (Ë(
x
); \

38 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

39 
__v
 = 
	`__bsw≠_c⁄°™t_16
 (
__x
); \

41 
	`__asm__
 ("rorw $8, %w0" \

42 : "Ù" (
__v
) \

43 : "0" (
__x
) \

45 
__v
; }))

	)

48 
	#__bsw≠_16
(
x
) \

49 (
__exãnsi⁄__
 \

50 ({ 
__x
 = (Ë(
x
); \

51 
	`__bsw≠_c⁄°™t_16
 (
__x
); }))

	)

56 
	#__bsw≠_c⁄°™t_32
(
x
) \

57 ((((
x
) & 0xff000000) >> 24) | (((x) & 0x00ff0000) >> 8) | \

58 (((
x
Ë& 0x0000ff00Ë<< 8Ë| (((xË& 0x000000ffË<< 24))

	)

60 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

61 #i‡
__WORDSIZE
 =64 || (
deföed
 
__i486__
 || deföed 
__≥¡ium__
 \

62 || 
deföed
 
	g__≥¡ium¥o__
 || deföed 
	g__≥¡ium4__
 \

63 || 
deföed
 
	g__k8__
 || deföed 
	g__©hl⁄__
 \

64 || 
deföed
 
	g__k6__
 || deföed 
	g__noc⁄a__
 \

65 || 
deföed
 
	g__c‹e2__
 || deföed 
	g__geode__
 \

66 || 
deföed
 
	g__amdÁm10__
)

69 
	#__bsw≠_32
(
x
) \

70 (
__exãnsi⁄__
 \

71 ({ 
__v
, 
__x
 = (
x
); \

72 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

73 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

75 
	`__asm__
 ("bsw≠ %0" : "Ù" (
__v
Ë: "0" (
__x
)); \

76 
__v
; }))

	)

78 
	#__bsw≠_32
(
x
) \

79 (
__exãnsi⁄__
 \

80 ({ 
__v
, 
__x
 = (
x
); \

81 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

82 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

84 
	`__asm__
 ("rorw $8, %w0;" \

87 : "Ù" (
__v
) \

88 : "0" (
__x
) \

90 
__v
; }))

	)

93 
	#__bsw≠_32
(
x
) \

94 (
__exãnsi⁄__
 \

95 ({ 
__x
 = (
x
); 
	`__bsw≠_c⁄°™t_32
 (__x); }))

	)

99 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

101 
	#__bsw≠_c⁄°™t_64
(
x
) \

102 ((((
x
) & 0xff00000000000000ull) >> 56) \

103 | (((
x
) & 0x00ff000000000000ull) >> 40) \

104 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

105 | (((
x
) & 0x000000ff00000000ull) >> 8) \

106 | (((
x
) & 0x00000000ff000000ull) << 8) \

107 | (((
x
) & 0x0000000000ff0000ull) << 24) \

108 | (((
x
) & 0x000000000000ff00ull) << 40) \

109 | (((
x
Ë& 0x00000000000000ffuŒË<< 56))

	)

111 #i‡
__WORDSIZE
 == 64

112 
	#__bsw≠_64
(
x
) \

113 (
__exãnsi⁄__
 \

114 ({ 
__v
, 
__x
 = (
x
); \

115 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

116 
__v
 = 
	`__bsw≠_c⁄°™t_64
 (
__x
); \

118 
	`__asm__
 ("bsw≠ %q0" : "Ù" (
__v
Ë: "0" (
__x
)); \

119 
__v
; }))

	)

121 
	#__bsw≠_64
(
x
) \

122 (
__exãnsi⁄__
 \

123 ({ uni⁄ { 
__exãnsi⁄__
 
__Œ
; \

124 
__l
[2]; } 
__w
, 
__r
; \

125 i‡(
	`__buûtö_c⁄°™t_p
 (
x
)) \

126 
__r
.
__Œ
 = 
	`__bsw≠_c⁄°™t_64
 (
x
); \

129 
__w
.
__Œ
 = (
x
); \

130 
__r
.
__l
[0] = 
	`__bsw≠_32
 (
__w
.__l[1]); \

131 
__r
.
__l
[1] = 
	`__bsw≠_32
 (
__w
.__l[0]); \

133 
__r
.
__Œ
; }))

	)

	@/usr/include/bits/confname.h

21 #i‚de‡
_UNISTD_H


28 
	m_PC_LINK_MAX
,

29 
	#_PC_LINK_MAX
 
_PC_LINK_MAX


	)

30 
	m_PC_MAX_CANON
,

31 
	#_PC_MAX_CANON
 
_PC_MAX_CANON


	)

32 
	m_PC_MAX_INPUT
,

33 
	#_PC_MAX_INPUT
 
_PC_MAX_INPUT


	)

34 
	m_PC_NAME_MAX
,

35 
	#_PC_NAME_MAX
 
_PC_NAME_MAX


	)

36 
	m_PC_PATH_MAX
,

37 
	#_PC_PATH_MAX
 
_PC_PATH_MAX


	)

38 
	m_PC_PIPE_BUF
,

39 
	#_PC_PIPE_BUF
 
_PC_PIPE_BUF


	)

40 
	m_PC_CHOWN_RESTRICTED
,

41 
	#_PC_CHOWN_RESTRICTED
 
_PC_CHOWN_RESTRICTED


	)

42 
	m_PC_NO_TRUNC
,

43 
	#_PC_NO_TRUNC
 
_PC_NO_TRUNC


	)

44 
	m_PC_VDISABLE
,

45 
	#_PC_VDISABLE
 
_PC_VDISABLE


	)

46 
	m_PC_SYNC_IO
,

47 
	#_PC_SYNC_IO
 
_PC_SYNC_IO


	)

48 
	m_PC_ASYNC_IO
,

49 
	#_PC_ASYNC_IO
 
_PC_ASYNC_IO


	)

50 
	m_PC_PRIO_IO
,

51 
	#_PC_PRIO_IO
 
_PC_PRIO_IO


	)

52 
	m_PC_SOCK_MAXBUF
,

53 
	#_PC_SOCK_MAXBUF
 
_PC_SOCK_MAXBUF


	)

54 
	m_PC_FILESIZEBITS
,

55 
	#_PC_FILESIZEBITS
 
_PC_FILESIZEBITS


	)

56 
	m_PC_REC_INCR_XFER_SIZE
,

57 
	#_PC_REC_INCR_XFER_SIZE
 
_PC_REC_INCR_XFER_SIZE


	)

58 
	m_PC_REC_MAX_XFER_SIZE
,

59 
	#_PC_REC_MAX_XFER_SIZE
 
_PC_REC_MAX_XFER_SIZE


	)

60 
	m_PC_REC_MIN_XFER_SIZE
,

61 
	#_PC_REC_MIN_XFER_SIZE
 
_PC_REC_MIN_XFER_SIZE


	)

62 
	m_PC_REC_XFER_ALIGN
,

63 
	#_PC_REC_XFER_ALIGN
 
_PC_REC_XFER_ALIGN


	)

64 
	m_PC_ALLOC_SIZE_MIN
,

65 
	#_PC_ALLOC_SIZE_MIN
 
_PC_ALLOC_SIZE_MIN


	)

66 
	m_PC_SYMLINK_MAX
,

67 
	#_PC_SYMLINK_MAX
 
_PC_SYMLINK_MAX


	)

68 
	m_PC_2_SYMLINKS


69 
	#_PC_2_SYMLINKS
 
_PC_2_SYMLINKS


	)

75 
	m_SC_ARG_MAX
,

76 
	#_SC_ARG_MAX
 
_SC_ARG_MAX


	)

77 
	m_SC_CHILD_MAX
,

78 
	#_SC_CHILD_MAX
 
_SC_CHILD_MAX


	)

79 
	m_SC_CLK_TCK
,

80 
	#_SC_CLK_TCK
 
_SC_CLK_TCK


	)

81 
	m_SC_NGROUPS_MAX
,

82 
	#_SC_NGROUPS_MAX
 
_SC_NGROUPS_MAX


	)

83 
	m_SC_OPEN_MAX
,

84 
	#_SC_OPEN_MAX
 
_SC_OPEN_MAX


	)

85 
	m_SC_STREAM_MAX
,

86 
	#_SC_STREAM_MAX
 
_SC_STREAM_MAX


	)

87 
	m_SC_TZNAME_MAX
,

88 
	#_SC_TZNAME_MAX
 
_SC_TZNAME_MAX


	)

89 
	m_SC_JOB_CONTROL
,

90 
	#_SC_JOB_CONTROL
 
_SC_JOB_CONTROL


	)

91 
	m_SC_SAVED_IDS
,

92 
	#_SC_SAVED_IDS
 
_SC_SAVED_IDS


	)

93 
	m_SC_REALTIME_SIGNALS
,

94 
	#_SC_REALTIME_SIGNALS
 
_SC_REALTIME_SIGNALS


	)

95 
	m_SC_PRIORITY_SCHEDULING
,

96 
	#_SC_PRIORITY_SCHEDULING
 
_SC_PRIORITY_SCHEDULING


	)

97 
	m_SC_TIMERS
,

98 
	#_SC_TIMERS
 
_SC_TIMERS


	)

99 
	m_SC_ASYNCHRONOUS_IO
,

100 
	#_SC_ASYNCHRONOUS_IO
 
_SC_ASYNCHRONOUS_IO


	)

101 
	m_SC_PRIORITIZED_IO
,

102 
	#_SC_PRIORITIZED_IO
 
_SC_PRIORITIZED_IO


	)

103 
	m_SC_SYNCHRONIZED_IO
,

104 
	#_SC_SYNCHRONIZED_IO
 
_SC_SYNCHRONIZED_IO


	)

105 
	m_SC_FSYNC
,

106 
	#_SC_FSYNC
 
_SC_FSYNC


	)

107 
	m_SC_MAPPED_FILES
,

108 
	#_SC_MAPPED_FILES
 
_SC_MAPPED_FILES


	)

109 
	m_SC_MEMLOCK
,

110 
	#_SC_MEMLOCK
 
_SC_MEMLOCK


	)

111 
	m_SC_MEMLOCK_RANGE
,

112 
	#_SC_MEMLOCK_RANGE
 
_SC_MEMLOCK_RANGE


	)

113 
	m_SC_MEMORY_PROTECTION
,

114 
	#_SC_MEMORY_PROTECTION
 
_SC_MEMORY_PROTECTION


	)

115 
	m_SC_MESSAGE_PASSING
,

116 
	#_SC_MESSAGE_PASSING
 
_SC_MESSAGE_PASSING


	)

117 
	m_SC_SEMAPHORES
,

118 
	#_SC_SEMAPHORES
 
_SC_SEMAPHORES


	)

119 
	m_SC_SHARED_MEMORY_OBJECTS
,

120 
	#_SC_SHARED_MEMORY_OBJECTS
 
_SC_SHARED_MEMORY_OBJECTS


	)

121 
	m_SC_AIO_LISTIO_MAX
,

122 
	#_SC_AIO_LISTIO_MAX
 
_SC_AIO_LISTIO_MAX


	)

123 
	m_SC_AIO_MAX
,

124 
	#_SC_AIO_MAX
 
_SC_AIO_MAX


	)

125 
	m_SC_AIO_PRIO_DELTA_MAX
,

126 
	#_SC_AIO_PRIO_DELTA_MAX
 
_SC_AIO_PRIO_DELTA_MAX


	)

127 
	m_SC_DELAYTIMER_MAX
,

128 
	#_SC_DELAYTIMER_MAX
 
_SC_DELAYTIMER_MAX


	)

129 
	m_SC_MQ_OPEN_MAX
,

130 
	#_SC_MQ_OPEN_MAX
 
_SC_MQ_OPEN_MAX


	)

131 
	m_SC_MQ_PRIO_MAX
,

132 
	#_SC_MQ_PRIO_MAX
 
_SC_MQ_PRIO_MAX


	)

133 
	m_SC_VERSION
,

134 
	#_SC_VERSION
 
_SC_VERSION


	)

135 
	m_SC_PAGESIZE
,

136 
	#_SC_PAGESIZE
 
_SC_PAGESIZE


	)

137 
	#_SC_PAGE_SIZE
 
_SC_PAGESIZE


	)

138 
	m_SC_RTSIG_MAX
,

139 
	#_SC_RTSIG_MAX
 
_SC_RTSIG_MAX


	)

140 
	m_SC_SEM_NSEMS_MAX
,

141 
	#_SC_SEM_NSEMS_MAX
 
_SC_SEM_NSEMS_MAX


	)

142 
	m_SC_SEM_VALUE_MAX
,

143 
	#_SC_SEM_VALUE_MAX
 
_SC_SEM_VALUE_MAX


	)

144 
	m_SC_SIGQUEUE_MAX
,

145 
	#_SC_SIGQUEUE_MAX
 
_SC_SIGQUEUE_MAX


	)

146 
	m_SC_TIMER_MAX
,

147 
	#_SC_TIMER_MAX
 
_SC_TIMER_MAX


	)

151 
	m_SC_BC_BASE_MAX
,

152 
	#_SC_BC_BASE_MAX
 
_SC_BC_BASE_MAX


	)

153 
	m_SC_BC_DIM_MAX
,

154 
	#_SC_BC_DIM_MAX
 
_SC_BC_DIM_MAX


	)

155 
	m_SC_BC_SCALE_MAX
,

156 
	#_SC_BC_SCALE_MAX
 
_SC_BC_SCALE_MAX


	)

157 
	m_SC_BC_STRING_MAX
,

158 
	#_SC_BC_STRING_MAX
 
_SC_BC_STRING_MAX


	)

159 
	m_SC_COLL_WEIGHTS_MAX
,

160 
	#_SC_COLL_WEIGHTS_MAX
 
_SC_COLL_WEIGHTS_MAX


	)

161 
	m_SC_EQUIV_CLASS_MAX
,

162 
	#_SC_EQUIV_CLASS_MAX
 
_SC_EQUIV_CLASS_MAX


	)

163 
	m_SC_EXPR_NEST_MAX
,

164 
	#_SC_EXPR_NEST_MAX
 
_SC_EXPR_NEST_MAX


	)

165 
	m_SC_LINE_MAX
,

166 
	#_SC_LINE_MAX
 
_SC_LINE_MAX


	)

167 
	m_SC_RE_DUP_MAX
,

168 
	#_SC_RE_DUP_MAX
 
_SC_RE_DUP_MAX


	)

169 
	m_SC_CHARCLASS_NAME_MAX
,

170 
	#_SC_CHARCLASS_NAME_MAX
 
_SC_CHARCLASS_NAME_MAX


	)

172 
	m_SC_2_VERSION
,

173 
	#_SC_2_VERSION
 
_SC_2_VERSION


	)

174 
	m_SC_2_C_BIND
,

175 
	#_SC_2_C_BIND
 
_SC_2_C_BIND


	)

176 
	m_SC_2_C_DEV
,

177 
	#_SC_2_C_DEV
 
_SC_2_C_DEV


	)

178 
	m_SC_2_FORT_DEV
,

179 
	#_SC_2_FORT_DEV
 
_SC_2_FORT_DEV


	)

180 
	m_SC_2_FORT_RUN
,

181 
	#_SC_2_FORT_RUN
 
_SC_2_FORT_RUN


	)

182 
	m_SC_2_SW_DEV
,

183 
	#_SC_2_SW_DEV
 
_SC_2_SW_DEV


	)

184 
	m_SC_2_LOCALEDEF
,

185 
	#_SC_2_LOCALEDEF
 
_SC_2_LOCALEDEF


	)

187 
	m_SC_PII
,

188 
	#_SC_PII
 
_SC_PII


	)

189 
	m_SC_PII_XTI
,

190 
	#_SC_PII_XTI
 
_SC_PII_XTI


	)

191 
	m_SC_PII_SOCKET
,

192 
	#_SC_PII_SOCKET
 
_SC_PII_SOCKET


	)

193 
	m_SC_PII_INTERNET
,

194 
	#_SC_PII_INTERNET
 
_SC_PII_INTERNET


	)

195 
	m_SC_PII_OSI
,

196 
	#_SC_PII_OSI
 
_SC_PII_OSI


	)

197 
	m_SC_POLL
,

198 
	#_SC_POLL
 
_SC_POLL


	)

199 
	m_SC_SELECT
,

200 
	#_SC_SELECT
 
_SC_SELECT


	)

201 
	m_SC_UIO_MAXIOV
,

202 
	#_SC_UIO_MAXIOV
 
_SC_UIO_MAXIOV


	)

203 
	m_SC_IOV_MAX
 = 
_SC_UIO_MAXIOV
,

204 
	#_SC_IOV_MAX
 
_SC_IOV_MAX


	)

205 
	m_SC_PII_INTERNET_STREAM
,

206 
	#_SC_PII_INTERNET_STREAM
 
_SC_PII_INTERNET_STREAM


	)

207 
	m_SC_PII_INTERNET_DGRAM
,

208 
	#_SC_PII_INTERNET_DGRAM
 
_SC_PII_INTERNET_DGRAM


	)

209 
	m_SC_PII_OSI_COTS
,

210 
	#_SC_PII_OSI_COTS
 
_SC_PII_OSI_COTS


	)

211 
	m_SC_PII_OSI_CLTS
,

212 
	#_SC_PII_OSI_CLTS
 
_SC_PII_OSI_CLTS


	)

213 
	m_SC_PII_OSI_M
,

214 
	#_SC_PII_OSI_M
 
_SC_PII_OSI_M


	)

215 
	m_SC_T_IOV_MAX
,

216 
	#_SC_T_IOV_MAX
 
_SC_T_IOV_MAX


	)

219 
	m_SC_THREADS
,

220 
	#_SC_THREADS
 
_SC_THREADS


	)

221 
	m_SC_THREAD_SAFE_FUNCTIONS
,

222 
	#_SC_THREAD_SAFE_FUNCTIONS
 
_SC_THREAD_SAFE_FUNCTIONS


	)

223 
	m_SC_GETGR_R_SIZE_MAX
,

224 
	#_SC_GETGR_R_SIZE_MAX
 
_SC_GETGR_R_SIZE_MAX


	)

225 
	m_SC_GETPW_R_SIZE_MAX
,

226 
	#_SC_GETPW_R_SIZE_MAX
 
_SC_GETPW_R_SIZE_MAX


	)

227 
	m_SC_LOGIN_NAME_MAX
,

228 
	#_SC_LOGIN_NAME_MAX
 
_SC_LOGIN_NAME_MAX


	)

229 
	m_SC_TTY_NAME_MAX
,

230 
	#_SC_TTY_NAME_MAX
 
_SC_TTY_NAME_MAX


	)

231 
	m_SC_THREAD_DESTRUCTOR_ITERATIONS
,

232 
	#_SC_THREAD_DESTRUCTOR_ITERATIONS
 
_SC_THREAD_DESTRUCTOR_ITERATIONS


	)

233 
	m_SC_THREAD_KEYS_MAX
,

234 
	#_SC_THREAD_KEYS_MAX
 
_SC_THREAD_KEYS_MAX


	)

235 
	m_SC_THREAD_STACK_MIN
,

236 
	#_SC_THREAD_STACK_MIN
 
_SC_THREAD_STACK_MIN


	)

237 
	m_SC_THREAD_THREADS_MAX
,

238 
	#_SC_THREAD_THREADS_MAX
 
_SC_THREAD_THREADS_MAX


	)

239 
	m_SC_THREAD_ATTR_STACKADDR
,

240 
	#_SC_THREAD_ATTR_STACKADDR
 
_SC_THREAD_ATTR_STACKADDR


	)

241 
	m_SC_THREAD_ATTR_STACKSIZE
,

242 
	#_SC_THREAD_ATTR_STACKSIZE
 
_SC_THREAD_ATTR_STACKSIZE


	)

243 
	m_SC_THREAD_PRIORITY_SCHEDULING
,

244 
	#_SC_THREAD_PRIORITY_SCHEDULING
 
_SC_THREAD_PRIORITY_SCHEDULING


	)

245 
	m_SC_THREAD_PRIO_INHERIT
,

246 
	#_SC_THREAD_PRIO_INHERIT
 
_SC_THREAD_PRIO_INHERIT


	)

247 
	m_SC_THREAD_PRIO_PROTECT
,

248 
	#_SC_THREAD_PRIO_PROTECT
 
_SC_THREAD_PRIO_PROTECT


	)

249 
	m_SC_THREAD_PROCESS_SHARED
,

250 
	#_SC_THREAD_PROCESS_SHARED
 
_SC_THREAD_PROCESS_SHARED


	)

252 
	m_SC_NPROCESSORS_CONF
,

253 
	#_SC_NPROCESSORS_CONF
 
_SC_NPROCESSORS_CONF


	)

254 
	m_SC_NPROCESSORS_ONLN
,

255 
	#_SC_NPROCESSORS_ONLN
 
_SC_NPROCESSORS_ONLN


	)

256 
	m_SC_PHYS_PAGES
,

257 
	#_SC_PHYS_PAGES
 
_SC_PHYS_PAGES


	)

258 
	m_SC_AVPHYS_PAGES
,

259 
	#_SC_AVPHYS_PAGES
 
_SC_AVPHYS_PAGES


	)

260 
	m_SC_ATEXIT_MAX
,

261 
	#_SC_ATEXIT_MAX
 
_SC_ATEXIT_MAX


	)

262 
	m_SC_PASS_MAX
,

263 
	#_SC_PASS_MAX
 
_SC_PASS_MAX


	)

265 
	m_SC_XOPEN_VERSION
,

266 
	#_SC_XOPEN_VERSION
 
_SC_XOPEN_VERSION


	)

267 
	m_SC_XOPEN_XCU_VERSION
,

268 
	#_SC_XOPEN_XCU_VERSION
 
_SC_XOPEN_XCU_VERSION


	)

269 
	m_SC_XOPEN_UNIX
,

270 
	#_SC_XOPEN_UNIX
 
_SC_XOPEN_UNIX


	)

271 
	m_SC_XOPEN_CRYPT
,

272 
	#_SC_XOPEN_CRYPT
 
_SC_XOPEN_CRYPT


	)

273 
	m_SC_XOPEN_ENH_I18N
,

274 
	#_SC_XOPEN_ENH_I18N
 
_SC_XOPEN_ENH_I18N


	)

275 
	m_SC_XOPEN_SHM
,

276 
	#_SC_XOPEN_SHM
 
_SC_XOPEN_SHM


	)

278 
	m_SC_2_CHAR_TERM
,

279 
	#_SC_2_CHAR_TERM
 
_SC_2_CHAR_TERM


	)

280 
	m_SC_2_C_VERSION
,

281 
	#_SC_2_C_VERSION
 
_SC_2_C_VERSION


	)

282 
	m_SC_2_UPE
,

283 
	#_SC_2_UPE
 
_SC_2_UPE


	)

285 
	m_SC_XOPEN_XPG2
,

286 
	#_SC_XOPEN_XPG2
 
_SC_XOPEN_XPG2


	)

287 
	m_SC_XOPEN_XPG3
,

288 
	#_SC_XOPEN_XPG3
 
_SC_XOPEN_XPG3


	)

289 
	m_SC_XOPEN_XPG4
,

290 
	#_SC_XOPEN_XPG4
 
_SC_XOPEN_XPG4


	)

292 
	m_SC_CHAR_BIT
,

293 
	#_SC_CHAR_BIT
 
_SC_CHAR_BIT


	)

294 
	m_SC_CHAR_MAX
,

295 
	#_SC_CHAR_MAX
 
_SC_CHAR_MAX


	)

296 
	m_SC_CHAR_MIN
,

297 
	#_SC_CHAR_MIN
 
_SC_CHAR_MIN


	)

298 
	m_SC_INT_MAX
,

299 
	#_SC_INT_MAX
 
_SC_INT_MAX


	)

300 
	m_SC_INT_MIN
,

301 
	#_SC_INT_MIN
 
_SC_INT_MIN


	)

302 
	m_SC_LONG_BIT
,

303 
	#_SC_LONG_BIT
 
_SC_LONG_BIT


	)

304 
	m_SC_WORD_BIT
,

305 
	#_SC_WORD_BIT
 
_SC_WORD_BIT


	)

306 
	m_SC_MB_LEN_MAX
,

307 
	#_SC_MB_LEN_MAX
 
_SC_MB_LEN_MAX


	)

308 
	m_SC_NZERO
,

309 
	#_SC_NZERO
 
_SC_NZERO


	)

310 
	m_SC_SSIZE_MAX
,

311 
	#_SC_SSIZE_MAX
 
_SC_SSIZE_MAX


	)

312 
	m_SC_SCHAR_MAX
,

313 
	#_SC_SCHAR_MAX
 
_SC_SCHAR_MAX


	)

314 
	m_SC_SCHAR_MIN
,

315 
	#_SC_SCHAR_MIN
 
_SC_SCHAR_MIN


	)

316 
	m_SC_SHRT_MAX
,

317 
	#_SC_SHRT_MAX
 
_SC_SHRT_MAX


	)

318 
	m_SC_SHRT_MIN
,

319 
	#_SC_SHRT_MIN
 
_SC_SHRT_MIN


	)

320 
	m_SC_UCHAR_MAX
,

321 
	#_SC_UCHAR_MAX
 
_SC_UCHAR_MAX


	)

322 
	m_SC_UINT_MAX
,

323 
	#_SC_UINT_MAX
 
_SC_UINT_MAX


	)

324 
	m_SC_ULONG_MAX
,

325 
	#_SC_ULONG_MAX
 
_SC_ULONG_MAX


	)

326 
	m_SC_USHRT_MAX
,

327 
	#_SC_USHRT_MAX
 
_SC_USHRT_MAX


	)

329 
	m_SC_NL_ARGMAX
,

330 
	#_SC_NL_ARGMAX
 
_SC_NL_ARGMAX


	)

331 
	m_SC_NL_LANGMAX
,

332 
	#_SC_NL_LANGMAX
 
_SC_NL_LANGMAX


	)

333 
	m_SC_NL_MSGMAX
,

334 
	#_SC_NL_MSGMAX
 
_SC_NL_MSGMAX


	)

335 
	m_SC_NL_NMAX
,

336 
	#_SC_NL_NMAX
 
_SC_NL_NMAX


	)

337 
	m_SC_NL_SETMAX
,

338 
	#_SC_NL_SETMAX
 
_SC_NL_SETMAX


	)

339 
	m_SC_NL_TEXTMAX
,

340 
	#_SC_NL_TEXTMAX
 
_SC_NL_TEXTMAX


	)

342 
	m_SC_XBS5_ILP32_OFF32
,

343 
	#_SC_XBS5_ILP32_OFF32
 
_SC_XBS5_ILP32_OFF32


	)

344 
	m_SC_XBS5_ILP32_OFFBIG
,

345 
	#_SC_XBS5_ILP32_OFFBIG
 
_SC_XBS5_ILP32_OFFBIG


	)

346 
	m_SC_XBS5_LP64_OFF64
,

347 
	#_SC_XBS5_LP64_OFF64
 
_SC_XBS5_LP64_OFF64


	)

348 
	m_SC_XBS5_LPBIG_OFFBIG
,

349 
	#_SC_XBS5_LPBIG_OFFBIG
 
_SC_XBS5_LPBIG_OFFBIG


	)

351 
	m_SC_XOPEN_LEGACY
,

352 
	#_SC_XOPEN_LEGACY
 
_SC_XOPEN_LEGACY


	)

353 
	m_SC_XOPEN_REALTIME
,

354 
	#_SC_XOPEN_REALTIME
 
_SC_XOPEN_REALTIME


	)

355 
	m_SC_XOPEN_REALTIME_THREADS
,

356 
	#_SC_XOPEN_REALTIME_THREADS
 
_SC_XOPEN_REALTIME_THREADS


	)

358 
	m_SC_ADVISORY_INFO
,

359 
	#_SC_ADVISORY_INFO
 
_SC_ADVISORY_INFO


	)

360 
	m_SC_BARRIERS
,

361 
	#_SC_BARRIERS
 
_SC_BARRIERS


	)

362 
	m_SC_BASE
,

363 
	#_SC_BASE
 
_SC_BASE


	)

364 
	m_SC_C_LANG_SUPPORT
,

365 
	#_SC_C_LANG_SUPPORT
 
_SC_C_LANG_SUPPORT


	)

366 
	m_SC_C_LANG_SUPPORT_R
,

367 
	#_SC_C_LANG_SUPPORT_R
 
_SC_C_LANG_SUPPORT_R


	)

368 
	m_SC_CLOCK_SELECTION
,

369 
	#_SC_CLOCK_SELECTION
 
_SC_CLOCK_SELECTION


	)

370 
	m_SC_CPUTIME
,

371 
	#_SC_CPUTIME
 
_SC_CPUTIME


	)

372 
	m_SC_THREAD_CPUTIME
,

373 
	#_SC_THREAD_CPUTIME
 
_SC_THREAD_CPUTIME


	)

374 
	m_SC_DEVICE_IO
,

375 
	#_SC_DEVICE_IO
 
_SC_DEVICE_IO


	)

376 
	m_SC_DEVICE_SPECIFIC
,

377 
	#_SC_DEVICE_SPECIFIC
 
_SC_DEVICE_SPECIFIC


	)

378 
	m_SC_DEVICE_SPECIFIC_R
,

379 
	#_SC_DEVICE_SPECIFIC_R
 
_SC_DEVICE_SPECIFIC_R


	)

380 
	m_SC_FD_MGMT
,

381 
	#_SC_FD_MGMT
 
_SC_FD_MGMT


	)

382 
	m_SC_FIFO
,

383 
	#_SC_FIFO
 
_SC_FIFO


	)

384 
	m_SC_PIPE
,

385 
	#_SC_PIPE
 
_SC_PIPE


	)

386 
	m_SC_FILE_ATTRIBUTES
,

387 
	#_SC_FILE_ATTRIBUTES
 
_SC_FILE_ATTRIBUTES


	)

388 
	m_SC_FILE_LOCKING
,

389 
	#_SC_FILE_LOCKING
 
_SC_FILE_LOCKING


	)

390 
	m_SC_FILE_SYSTEM
,

391 
	#_SC_FILE_SYSTEM
 
_SC_FILE_SYSTEM


	)

392 
	m_SC_MONOTONIC_CLOCK
,

393 
	#_SC_MONOTONIC_CLOCK
 
_SC_MONOTONIC_CLOCK


	)

394 
	m_SC_MULTI_PROCESS
,

395 
	#_SC_MULTI_PROCESS
 
_SC_MULTI_PROCESS


	)

396 
	m_SC_SINGLE_PROCESS
,

397 
	#_SC_SINGLE_PROCESS
 
_SC_SINGLE_PROCESS


	)

398 
	m_SC_NETWORKING
,

399 
	#_SC_NETWORKING
 
_SC_NETWORKING


	)

400 
	m_SC_READER_WRITER_LOCKS
,

401 
	#_SC_READER_WRITER_LOCKS
 
_SC_READER_WRITER_LOCKS


	)

402 
	m_SC_SPIN_LOCKS
,

403 
	#_SC_SPIN_LOCKS
 
_SC_SPIN_LOCKS


	)

404 
	m_SC_REGEXP
,

405 
	#_SC_REGEXP
 
_SC_REGEXP


	)

406 
	m_SC_REGEX_VERSION
,

407 
	#_SC_REGEX_VERSION
 
_SC_REGEX_VERSION


	)

408 
	m_SC_SHELL
,

409 
	#_SC_SHELL
 
_SC_SHELL


	)

410 
	m_SC_SIGNALS
,

411 
	#_SC_SIGNALS
 
_SC_SIGNALS


	)

412 
	m_SC_SPAWN
,

413 
	#_SC_SPAWN
 
_SC_SPAWN


	)

414 
	m_SC_SPORADIC_SERVER
,

415 
	#_SC_SPORADIC_SERVER
 
_SC_SPORADIC_SERVER


	)

416 
	m_SC_THREAD_SPORADIC_SERVER
,

417 
	#_SC_THREAD_SPORADIC_SERVER
 
_SC_THREAD_SPORADIC_SERVER


	)

418 
	m_SC_SYSTEM_DATABASE
,

419 
	#_SC_SYSTEM_DATABASE
 
_SC_SYSTEM_DATABASE


	)

420 
	m_SC_SYSTEM_DATABASE_R
,

421 
	#_SC_SYSTEM_DATABASE_R
 
_SC_SYSTEM_DATABASE_R


	)

422 
	m_SC_TIMEOUTS
,

423 
	#_SC_TIMEOUTS
 
_SC_TIMEOUTS


	)

424 
	m_SC_TYPED_MEMORY_OBJECTS
,

425 
	#_SC_TYPED_MEMORY_OBJECTS
 
_SC_TYPED_MEMORY_OBJECTS


	)

426 
	m_SC_USER_GROUPS
,

427 
	#_SC_USER_GROUPS
 
_SC_USER_GROUPS


	)

428 
	m_SC_USER_GROUPS_R
,

429 
	#_SC_USER_GROUPS_R
 
_SC_USER_GROUPS_R


	)

430 
	m_SC_2_PBS
,

431 
	#_SC_2_PBS
 
_SC_2_PBS


	)

432 
	m_SC_2_PBS_ACCOUNTING
,

433 
	#_SC_2_PBS_ACCOUNTING
 
_SC_2_PBS_ACCOUNTING


	)

434 
	m_SC_2_PBS_LOCATE
,

435 
	#_SC_2_PBS_LOCATE
 
_SC_2_PBS_LOCATE


	)

436 
	m_SC_2_PBS_MESSAGE
,

437 
	#_SC_2_PBS_MESSAGE
 
_SC_2_PBS_MESSAGE


	)

438 
	m_SC_2_PBS_TRACK
,

439 
	#_SC_2_PBS_TRACK
 
_SC_2_PBS_TRACK


	)

440 
	m_SC_SYMLOOP_MAX
,

441 
	#_SC_SYMLOOP_MAX
 
_SC_SYMLOOP_MAX


	)

442 
	m_SC_STREAMS
,

443 
	#_SC_STREAMS
 
_SC_STREAMS


	)

444 
	m_SC_2_PBS_CHECKPOINT
,

445 
	#_SC_2_PBS_CHECKPOINT
 
_SC_2_PBS_CHECKPOINT


	)

447 
	m_SC_V6_ILP32_OFF32
,

448 
	#_SC_V6_ILP32_OFF32
 
_SC_V6_ILP32_OFF32


	)

449 
	m_SC_V6_ILP32_OFFBIG
,

450 
	#_SC_V6_ILP32_OFFBIG
 
_SC_V6_ILP32_OFFBIG


	)

451 
	m_SC_V6_LP64_OFF64
,

452 
	#_SC_V6_LP64_OFF64
 
_SC_V6_LP64_OFF64


	)

453 
	m_SC_V6_LPBIG_OFFBIG
,

454 
	#_SC_V6_LPBIG_OFFBIG
 
_SC_V6_LPBIG_OFFBIG


	)

456 
	m_SC_HOST_NAME_MAX
,

457 
	#_SC_HOST_NAME_MAX
 
_SC_HOST_NAME_MAX


	)

458 
	m_SC_TRACE
,

459 
	#_SC_TRACE
 
_SC_TRACE


	)

460 
	m_SC_TRACE_EVENT_FILTER
,

461 
	#_SC_TRACE_EVENT_FILTER
 
_SC_TRACE_EVENT_FILTER


	)

462 
	m_SC_TRACE_INHERIT
,

463 
	#_SC_TRACE_INHERIT
 
_SC_TRACE_INHERIT


	)

464 
	m_SC_TRACE_LOG
,

465 
	#_SC_TRACE_LOG
 
_SC_TRACE_LOG


	)

467 
	m_SC_LEVEL1_ICACHE_SIZE
,

468 
	#_SC_LEVEL1_ICACHE_SIZE
 
_SC_LEVEL1_ICACHE_SIZE


	)

469 
	m_SC_LEVEL1_ICACHE_ASSOC
,

470 
	#_SC_LEVEL1_ICACHE_ASSOC
 
_SC_LEVEL1_ICACHE_ASSOC


	)

471 
	m_SC_LEVEL1_ICACHE_LINESIZE
,

472 
	#_SC_LEVEL1_ICACHE_LINESIZE
 
_SC_LEVEL1_ICACHE_LINESIZE


	)

473 
	m_SC_LEVEL1_DCACHE_SIZE
,

474 
	#_SC_LEVEL1_DCACHE_SIZE
 
_SC_LEVEL1_DCACHE_SIZE


	)

475 
	m_SC_LEVEL1_DCACHE_ASSOC
,

476 
	#_SC_LEVEL1_DCACHE_ASSOC
 
_SC_LEVEL1_DCACHE_ASSOC


	)

477 
	m_SC_LEVEL1_DCACHE_LINESIZE
,

478 
	#_SC_LEVEL1_DCACHE_LINESIZE
 
_SC_LEVEL1_DCACHE_LINESIZE


	)

479 
	m_SC_LEVEL2_CACHE_SIZE
,

480 
	#_SC_LEVEL2_CACHE_SIZE
 
_SC_LEVEL2_CACHE_SIZE


	)

481 
	m_SC_LEVEL2_CACHE_ASSOC
,

482 
	#_SC_LEVEL2_CACHE_ASSOC
 
_SC_LEVEL2_CACHE_ASSOC


	)

483 
	m_SC_LEVEL2_CACHE_LINESIZE
,

484 
	#_SC_LEVEL2_CACHE_LINESIZE
 
_SC_LEVEL2_CACHE_LINESIZE


	)

485 
	m_SC_LEVEL3_CACHE_SIZE
,

486 
	#_SC_LEVEL3_CACHE_SIZE
 
_SC_LEVEL3_CACHE_SIZE


	)

487 
	m_SC_LEVEL3_CACHE_ASSOC
,

488 
	#_SC_LEVEL3_CACHE_ASSOC
 
_SC_LEVEL3_CACHE_ASSOC


	)

489 
	m_SC_LEVEL3_CACHE_LINESIZE
,

490 
	#_SC_LEVEL3_CACHE_LINESIZE
 
_SC_LEVEL3_CACHE_LINESIZE


	)

491 
	m_SC_LEVEL4_CACHE_SIZE
,

492 
	#_SC_LEVEL4_CACHE_SIZE
 
_SC_LEVEL4_CACHE_SIZE


	)

493 
	m_SC_LEVEL4_CACHE_ASSOC
,

494 
	#_SC_LEVEL4_CACHE_ASSOC
 
_SC_LEVEL4_CACHE_ASSOC


	)

495 
	m_SC_LEVEL4_CACHE_LINESIZE
,

496 
	#_SC_LEVEL4_CACHE_LINESIZE
 
_SC_LEVEL4_CACHE_LINESIZE


	)

499 
	m_SC_IPV6
 = 
_SC_LEVEL1_ICACHE_SIZE
 + 50,

500 
	#_SC_IPV6
 
_SC_IPV6


	)

501 
	m_SC_RAW_SOCKETS
,

502 
	#_SC_RAW_SOCKETS
 
_SC_RAW_SOCKETS


	)

504 
	m_SC_V7_ILP32_OFF32
,

505 
	#_SC_V7_ILP32_OFF32
 
_SC_V7_ILP32_OFF32


	)

506 
	m_SC_V7_ILP32_OFFBIG
,

507 
	#_SC_V7_ILP32_OFFBIG
 
_SC_V7_ILP32_OFFBIG


	)

508 
	m_SC_V7_LP64_OFF64
,

509 
	#_SC_V7_LP64_OFF64
 
_SC_V7_LP64_OFF64


	)

510 
	m_SC_V7_LPBIG_OFFBIG
,

511 
	#_SC_V7_LPBIG_OFFBIG
 
_SC_V7_LPBIG_OFFBIG


	)

513 
	m_SC_SS_REPL_MAX
,

514 
	#_SC_SS_REPL_MAX
 
_SC_SS_REPL_MAX


	)

516 
	m_SC_TRACE_EVENT_NAME_MAX
,

517 
	#_SC_TRACE_EVENT_NAME_MAX
 
_SC_TRACE_EVENT_NAME_MAX


	)

518 
	m_SC_TRACE_NAME_MAX
,

519 
	#_SC_TRACE_NAME_MAX
 
_SC_TRACE_NAME_MAX


	)

520 
	m_SC_TRACE_SYS_MAX
,

521 
	#_SC_TRACE_SYS_MAX
 
_SC_TRACE_SYS_MAX


	)

522 
	m_SC_TRACE_USER_EVENT_MAX
,

523 
	#_SC_TRACE_USER_EVENT_MAX
 
_SC_TRACE_USER_EVENT_MAX


	)

525 
	m_SC_XOPEN_STREAMS
,

526 
	#_SC_XOPEN_STREAMS
 
_SC_XOPEN_STREAMS


	)

528 
	m_SC_THREAD_ROBUST_PRIO_INHERIT
,

529 
	#_SC_THREAD_ROBUST_PRIO_INHERIT
 
_SC_THREAD_ROBUST_PRIO_INHERIT


	)

530 
	m_SC_THREAD_ROBUST_PRIO_PROTECT


531 
	#_SC_THREAD_ROBUST_PRIO_PROTECT
 
_SC_THREAD_ROBUST_PRIO_PROTECT


	)

537 
	m_CS_PATH
,

538 
	#_CS_PATH
 
_CS_PATH


	)

540 
	m_CS_V6_WIDTH_RESTRICTED_ENVS
,

541 
	#_CS_V6_WIDTH_RESTRICTED_ENVS
 
_CS_V6_WIDTH_RESTRICTED_ENVS


	)

542 
	#_CS_POSIX_V6_WIDTH_RESTRICTED_ENVS
 
_CS_V6_WIDTH_RESTRICTED_ENVS


	)

544 
	m_CS_GNU_LIBC_VERSION
,

545 
	#_CS_GNU_LIBC_VERSION
 
_CS_GNU_LIBC_VERSION


	)

546 
	m_CS_GNU_LIBPTHREAD_VERSION
,

547 
	#_CS_GNU_LIBPTHREAD_VERSION
 
_CS_GNU_LIBPTHREAD_VERSION


	)

549 
	m_CS_V5_WIDTH_RESTRICTED_ENVS
,

550 
	#_CS_V5_WIDTH_RESTRICTED_ENVS
 
_CS_V5_WIDTH_RESTRICTED_ENVS


	)

551 
	#_CS_POSIX_V5_WIDTH_RESTRICTED_ENVS
 
_CS_V5_WIDTH_RESTRICTED_ENVS


	)

553 
	m_CS_V7_WIDTH_RESTRICTED_ENVS
,

554 
	#_CS_V7_WIDTH_RESTRICTED_ENVS
 
_CS_V7_WIDTH_RESTRICTED_ENVS


	)

555 
	#_CS_POSIX_V7_WIDTH_RESTRICTED_ENVS
 
_CS_V7_WIDTH_RESTRICTED_ENVS


	)

557 
	m_CS_LFS_CFLAGS
 = 1000,

558 
	#_CS_LFS_CFLAGS
 
_CS_LFS_CFLAGS


	)

559 
	m_CS_LFS_LDFLAGS
,

560 
	#_CS_LFS_LDFLAGS
 
_CS_LFS_LDFLAGS


	)

561 
	m_CS_LFS_LIBS
,

562 
	#_CS_LFS_LIBS
 
_CS_LFS_LIBS


	)

563 
	m_CS_LFS_LINTFLAGS
,

564 
	#_CS_LFS_LINTFLAGS
 
_CS_LFS_LINTFLAGS


	)

565 
	m_CS_LFS64_CFLAGS
,

566 
	#_CS_LFS64_CFLAGS
 
_CS_LFS64_CFLAGS


	)

567 
	m_CS_LFS64_LDFLAGS
,

568 
	#_CS_LFS64_LDFLAGS
 
_CS_LFS64_LDFLAGS


	)

569 
	m_CS_LFS64_LIBS
,

570 
	#_CS_LFS64_LIBS
 
_CS_LFS64_LIBS


	)

571 
	m_CS_LFS64_LINTFLAGS
,

572 
	#_CS_LFS64_LINTFLAGS
 
_CS_LFS64_LINTFLAGS


	)

574 
	m_CS_XBS5_ILP32_OFF32_CFLAGS
 = 1100,

575 
	#_CS_XBS5_ILP32_OFF32_CFLAGS
 
_CS_XBS5_ILP32_OFF32_CFLAGS


	)

576 
	m_CS_XBS5_ILP32_OFF32_LDFLAGS
,

577 
	#_CS_XBS5_ILP32_OFF32_LDFLAGS
 
_CS_XBS5_ILP32_OFF32_LDFLAGS


	)

578 
	m_CS_XBS5_ILP32_OFF32_LIBS
,

579 
	#_CS_XBS5_ILP32_OFF32_LIBS
 
_CS_XBS5_ILP32_OFF32_LIBS


	)

580 
	m_CS_XBS5_ILP32_OFF32_LINTFLAGS
,

581 
	#_CS_XBS5_ILP32_OFF32_LINTFLAGS
 
_CS_XBS5_ILP32_OFF32_LINTFLAGS


	)

582 
	m_CS_XBS5_ILP32_OFFBIG_CFLAGS
,

583 
	#_CS_XBS5_ILP32_OFFBIG_CFLAGS
 
_CS_XBS5_ILP32_OFFBIG_CFLAGS


	)

584 
	m_CS_XBS5_ILP32_OFFBIG_LDFLAGS
,

585 
	#_CS_XBS5_ILP32_OFFBIG_LDFLAGS
 
_CS_XBS5_ILP32_OFFBIG_LDFLAGS


	)

586 
	m_CS_XBS5_ILP32_OFFBIG_LIBS
,

587 
	#_CS_XBS5_ILP32_OFFBIG_LIBS
 
_CS_XBS5_ILP32_OFFBIG_LIBS


	)

588 
	m_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
,

589 
	#_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
 
_CS_XBS5_ILP32_OFFBIG_LINTFLAGS


	)

590 
	m_CS_XBS5_LP64_OFF64_CFLAGS
,

591 
	#_CS_XBS5_LP64_OFF64_CFLAGS
 
_CS_XBS5_LP64_OFF64_CFLAGS


	)

592 
	m_CS_XBS5_LP64_OFF64_LDFLAGS
,

593 
	#_CS_XBS5_LP64_OFF64_LDFLAGS
 
_CS_XBS5_LP64_OFF64_LDFLAGS


	)

594 
	m_CS_XBS5_LP64_OFF64_LIBS
,

595 
	#_CS_XBS5_LP64_OFF64_LIBS
 
_CS_XBS5_LP64_OFF64_LIBS


	)

596 
	m_CS_XBS5_LP64_OFF64_LINTFLAGS
,

597 
	#_CS_XBS5_LP64_OFF64_LINTFLAGS
 
_CS_XBS5_LP64_OFF64_LINTFLAGS


	)

598 
	m_CS_XBS5_LPBIG_OFFBIG_CFLAGS
,

599 
	#_CS_XBS5_LPBIG_OFFBIG_CFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_CFLAGS


	)

600 
	m_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
,

601 
	#_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_LDFLAGS


	)

602 
	m_CS_XBS5_LPBIG_OFFBIG_LIBS
,

603 
	#_CS_XBS5_LPBIG_OFFBIG_LIBS
 
_CS_XBS5_LPBIG_OFFBIG_LIBS


	)

604 
	m_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
,

605 
	#_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS


	)

607 
	m_CS_POSIX_V6_ILP32_OFF32_CFLAGS
,

608 
	#_CS_POSIX_V6_ILP32_OFF32_CFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_CFLAGS


	)

609 
	m_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
,

610 
	#_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_LDFLAGS


	)

611 
	m_CS_POSIX_V6_ILP32_OFF32_LIBS
,

612 
	#_CS_POSIX_V6_ILP32_OFF32_LIBS
 
_CS_POSIX_V6_ILP32_OFF32_LIBS


	)

613 
	m_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
,

614 
	#_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS


	)

615 
	m_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
,

616 
	#_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS


	)

617 
	m_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
,

618 
	#_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS


	)

619 
	m_CS_POSIX_V6_ILP32_OFFBIG_LIBS
,

620 
	#_CS_POSIX_V6_ILP32_OFFBIG_LIBS
 
_CS_POSIX_V6_ILP32_OFFBIG_LIBS


	)

621 
	m_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
,

622 
	#_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS


	)

623 
	m_CS_POSIX_V6_LP64_OFF64_CFLAGS
,

624 
	#_CS_POSIX_V6_LP64_OFF64_CFLAGS
 
_CS_POSIX_V6_LP64_OFF64_CFLAGS


	)

625 
	m_CS_POSIX_V6_LP64_OFF64_LDFLAGS
,

626 
	#_CS_POSIX_V6_LP64_OFF64_LDFLAGS
 
_CS_POSIX_V6_LP64_OFF64_LDFLAGS


	)

627 
	m_CS_POSIX_V6_LP64_OFF64_LIBS
,

628 
	#_CS_POSIX_V6_LP64_OFF64_LIBS
 
_CS_POSIX_V6_LP64_OFF64_LIBS


	)

629 
	m_CS_POSIX_V6_LP64_OFF64_LINTFLAGS
,

630 
	#_CS_POSIX_V6_LP64_OFF64_LINTFLAGS
 
_CS_POSIX_V6_LP64_OFF64_LINTFLAGS


	)

631 
	m_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
,

632 
	#_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS


	)

633 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
,

634 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS


	)

635 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
,

636 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LIBS


	)

637 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS
,

638 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS


	)

640 
	m_CS_POSIX_V7_ILP32_OFF32_CFLAGS
,

641 
	#_CS_POSIX_V7_ILP32_OFF32_CFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_CFLAGS


	)

642 
	m_CS_POSIX_V7_ILP32_OFF32_LDFLAGS
,

643 
	#_CS_POSIX_V7_ILP32_OFF32_LDFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_LDFLAGS


	)

644 
	m_CS_POSIX_V7_ILP32_OFF32_LIBS
,

645 
	#_CS_POSIX_V7_ILP32_OFF32_LIBS
 
_CS_POSIX_V7_ILP32_OFF32_LIBS


	)

646 
	m_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS
,

647 
	#_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS


	)

648 
	m_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS
,

649 
	#_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS


	)

650 
	m_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS
,

651 
	#_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS


	)

652 
	m_CS_POSIX_V7_ILP32_OFFBIG_LIBS
,

653 
	#_CS_POSIX_V7_ILP32_OFFBIG_LIBS
 
_CS_POSIX_V7_ILP32_OFFBIG_LIBS


	)

654 
	m_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS
,

655 
	#_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS


	)

656 
	m_CS_POSIX_V7_LP64_OFF64_CFLAGS
,

657 
	#_CS_POSIX_V7_LP64_OFF64_CFLAGS
 
_CS_POSIX_V7_LP64_OFF64_CFLAGS


	)

658 
	m_CS_POSIX_V7_LP64_OFF64_LDFLAGS
,

659 
	#_CS_POSIX_V7_LP64_OFF64_LDFLAGS
 
_CS_POSIX_V7_LP64_OFF64_LDFLAGS


	)

660 
	m_CS_POSIX_V7_LP64_OFF64_LIBS
,

661 
	#_CS_POSIX_V7_LP64_OFF64_LIBS
 
_CS_POSIX_V7_LP64_OFF64_LIBS


	)

662 
	m_CS_POSIX_V7_LP64_OFF64_LINTFLAGS
,

663 
	#_CS_POSIX_V7_LP64_OFF64_LINTFLAGS
 
_CS_POSIX_V7_LP64_OFF64_LINTFLAGS


	)

664 
	m_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS
,

665 
	#_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS


	)

666 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS
,

667 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS


	)

668 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LIBS
,

669 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LIBS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LIBS


	)

670 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS
,

671 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS


	)

673 
	m_CS_V6_ENV
,

674 
	#_CS_V6_ENV
 
_CS_V6_ENV


	)

675 
	m_CS_V7_ENV


676 
	#_CS_V7_ENV
 
_CS_V7_ENV


	)

	@/usr/include/bits/environments.h

19 #i‚de‡
_UNISTD_H


23 
	~<bôs/w‹dsize.h
>

43 #i‡
__WORDSIZE
 == 64

57 
	#_POSIX_V7_LPBIG_OFFBIG
 -1

	)

58 
	#_POSIX_V6_LPBIG_OFFBIG
 -1

	)

59 
	#_XBS5_LPBIG_OFFBIG
 -1

	)

62 
	#_POSIX_V7_LP64_OFF64
 1

	)

63 
	#_POSIX_V6_LP64_OFF64
 1

	)

64 
	#_XBS5_LP64_OFF64
 1

	)

70 
	#_POSIX_V7_ILP32_OFF32
 1

	)

71 
	#_POSIX_V7_ILP32_OFFBIG
 1

	)

72 
	#_POSIX_V6_ILP32_OFF32
 1

	)

73 
	#_POSIX_V6_ILP32_OFFBIG
 1

	)

74 
	#_XBS5_ILP32_OFF32
 1

	)

75 
	#_XBS5_ILP32_OFFBIG
 1

	)

92 
	#__ILP32_OFF32_CFLAGS
 "-m32"

	)

93 
	#__ILP32_OFFBIG_CFLAGS
 "-m32 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64"

	)

94 
	#__ILP32_OFF32_LDFLAGS
 "-m32"

	)

95 
	#__ILP32_OFFBIG_LDFLAGS
 "-m32"

	)

96 
	#__LP64_OFF64_CFLAGS
 "-m64"

	)

97 
	#__LP64_OFF64_LDFLAGS
 "-m64"

	)

	@/usr/include/bits/errno.h

20 #ifde‡
_ERRNO_H


22 #unde‡
EDOM


23 #unde‡
EILSEQ


24 #unde‡
ERANGE


25 
	~<löux/î∫o.h
>

28 
	#ENOTSUP
 
EOPNOTSUPP


	)

31 #i‚de‡
ECANCELED


32 
	#ECANCELED
 125

	)

36 #i‚de‡
EOWNERDEAD


37 
	#EOWNERDEAD
 130

	)

38 
	#ENOTRECOVERABLE
 131

	)

41 #i‚de‡
ERFKILL


42 
	#ERFKILL
 132

	)

45 #i‚de‡
__ASSEMBLER__


47 *
	$__î∫o_loˇti⁄
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

49 #i‡!
deföed
 
_LIBC
 || deföed 
_LIBC_REENTRANT


51 
	#î∫o
 (*
	`__î∫o_loˇti⁄
 ())

	)

56 #i‡!
deföed
 
_ERRNO_H
 && deföed 
__√ed_Em©h


60 
	#EDOM
 33

	)

61 
	#EILSEQ
 84

	)

62 
	#ERANGE
 34

	)

	@/usr/include/bits/fcntl.h

21 #i‚def 
_FCNTL_H


25 
	~<sys/ty≥s.h
>

26 
	~<bôs/w‹dsize.h
>

27 #ifde‡
__USE_GNU


28 
	~<bôs/uio.h
>

34 
	#O_ACCMODE
 0003

	)

35 
	#O_RDONLY
 00

	)

36 
	#O_WRONLY
 01

	)

37 
	#O_RDWR
 02

	)

38 
	#O_CREAT
 0100

	)

39 
	#O_EXCL
 0200

	)

40 
	#O_NOCTTY
 0400

	)

41 
	#O_TRUNC
 01000

	)

42 
	#O_APPEND
 02000

	)

43 
	#O_NONBLOCK
 04000

	)

44 
	#O_NDELAY
 
O_NONBLOCK


	)

45 
	#O_SYNC
 04010000

	)

46 
	#O_FSYNC
 
O_SYNC


	)

47 
	#O_ASYNC
 020000

	)

49 #ifde‡
__USE_XOPEN2K8


50 
	#O_DIRECTORY
 0200000

	)

51 
	#O_NOFOLLOW
 0400000

	)

52 
	#O_CLOEXEC
 02000000

	)

54 #ifde‡
__USE_GNU


55 
	#O_DIRECT
 040000

	)

56 
	#O_NOATIME
 01000000

	)

62 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


63 
	#O_DSYNC
 010000

	)

64 
	#O_RSYNC
 
O_SYNC


	)

67 #ifde‡
__USE_LARGEFILE64


68 #i‡
__WORDSIZE
 == 64

69 
	#O_LARGEFILE
 0

	)

71 
	#O_LARGEFILE
 0100000

	)

76 
	#F_DUPFD
 0

	)

77 
	#F_GETFD
 1

	)

78 
	#F_SETFD
 2

	)

79 
	#F_GETFL
 3

	)

80 
	#F_SETFL
 4

	)

81 #i‡
__WORDSIZE
 == 64

82 
	#F_GETLK
 5

	)

83 
	#F_SETLK
 6

	)

84 
	#F_SETLKW
 7

	)

86 
	#F_GETLK64
 5

	)

87 
	#F_SETLK64
 6

	)

88 
	#F_SETLKW64
 7

	)

90 #i‚de‡
__USE_FILE_OFFSET64


91 
	#F_GETLK
 5

	)

92 
	#F_SETLK
 6

	)

93 
	#F_SETLKW
 7

	)

95 
	#F_GETLK
 
F_GETLK64


	)

96 
	#F_SETLK
 
F_SETLK64


	)

97 
	#F_SETLKW
 
F_SETLKW64


	)

99 
	#F_GETLK64
 12

	)

100 
	#F_SETLK64
 13

	)

101 
	#F_SETLKW64
 14

	)

104 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


105 
	#F_SETOWN
 8

	)

106 
	#F_GETOWN
 9

	)

109 #ifde‡
__USE_GNU


110 
	#F_SETSIG
 10

	)

111 
	#F_GETSIG
 11

	)

112 
	#F_SETOWN_EX
 15

	)

113 
	#F_GETOWN_EX
 16

	)

116 #ifde‡
__USE_GNU


117 
	#F_SETLEASE
 1024

	)

118 
	#F_GETLEASE
 1025

	)

119 
	#F_NOTIFY
 1026

	)

121 #ifde‡
__USE_XOPEN2K8


122 
	#F_DUPFD_CLOEXEC
 1030

	)

127 
	#FD_CLOEXEC
 1

	)

130 
	#F_RDLCK
 0

	)

131 
	#F_WRLCK
 1

	)

132 
	#F_UNLCK
 2

	)

135 
	#F_EXLCK
 4

	)

136 
	#F_SHLCK
 8

	)

138 #ifde‡
__USE_BSD


140 
	#LOCK_SH
 1

	)

141 
	#LOCK_EX
 2

	)

142 
	#LOCK_NB
 4

	)

144 
	#LOCK_UN
 8

	)

147 #ifde‡
__USE_GNU


148 
	#LOCK_MAND
 32

	)

149 
	#LOCK_READ
 64

	)

150 
	#LOCK_WRITE
 128

	)

151 
	#LOCK_RW
 192

	)

154 #ifde‡
__USE_GNU


156 
	#DN_ACCESS
 0x00000001

	)

157 
	#DN_MODIFY
 0x00000002

	)

158 
	#DN_CREATE
 0x00000004

	)

159 
	#DN_DELETE
 0x00000008

	)

160 
	#DN_RENAME
 0x00000010

	)

161 
	#DN_ATTRIB
 0x00000020

	)

162 
	#DN_MULTISHOT
 0x80000000

	)

165 
	sÊock


167 
	ml_ty≥
;

168 
	ml_whí˚
;

169 #i‚de‡
__USE_FILE_OFFSET64


170 
__off_t
 
	ml_°¨t
;

171 
__off_t
 
	ml_Àn
;

173 
__off64_t
 
	ml_°¨t
;

174 
__off64_t
 
	ml_Àn
;

176 
__pid_t
 
	ml_pid
;

179 #ifde‡
__USE_LARGEFILE64


180 
	sÊock64


182 
	ml_ty≥
;

183 
	ml_whí˚
;

184 
__off64_t
 
	ml_°¨t
;

185 
__off64_t
 
	ml_Àn
;

186 
__pid_t
 
	ml_pid
;

190 #ifde‡
__USE_GNU


192 
	e__pid_ty≥


194 
	mF_OWNER_TID
 = 0,

195 
	mF_OWNER_PID
,

196 
	mF_OWNER_PGRP
,

197 
	mF_OWNER_GID
 = 
F_OWNER_PGRP


201 
	sf_ow√r_ex


203 
__pid_ty≥
 
	mty≥
;

204 
__pid_t
 
	mpid
;

210 #ifdef 
__USE_BSD


211 
	#FAPPEND
 
O_APPEND


	)

212 
	#FFSYNC
 
O_FSYNC


	)

213 
	#FASYNC
 
O_ASYNC


	)

214 
	#FNONBLOCK
 
O_NONBLOCK


	)

215 
	#FNDELAY
 
O_NDELAY


	)

219 #ifde‡
__USE_XOPEN2K


220 
	#POSIX_FADV_NORMAL
 0

	)

221 
	#POSIX_FADV_RANDOM
 1

	)

222 
	#POSIX_FADV_SEQUENTIAL
 2

	)

223 
	#POSIX_FADV_WILLNEED
 3

	)

224 
	#POSIX_FADV_DONTNEED
 4

	)

225 
	#POSIX_FADV_NOREUSE
 5

	)

229 #ifde‡
__USE_GNU


231 
	#SYNC_FILE_RANGE_WAIT_BEFORE
 1

	)

234 
	#SYNC_FILE_RANGE_WRITE
 2

	)

237 
	#SYNC_FILE_RANGE_WAIT_AFTER
 4

	)

242 
	#SPLICE_F_MOVE
 1

	)

243 
	#SPLICE_F_NONBLOCK
 2

	)

246 
	#SPLICE_F_MORE
 4

	)

247 
	#SPLICE_F_GIFT
 8

	)

250 
	g__BEGIN_DECLS


252 #ifde‡
__USE_GNU


255 
ssize_t
 
	$ªadahód
 (
__fd
, 
__off64_t
 
__off£t
, 
size_t
 
__cou¡
)

256 
__THROW
;

260 
	`sync_fûe_ønge
 (
__fd
, 
__off64_t
 
__off£t
, __off64_à
__cou¡
,

261 
__Êags
);

265 
ssize_t
 
	`vm•li˚
 (
__fdout
, c⁄° 
iovec
 *
__iov
,

266 
size_t
 
__cou¡
, 
__Êags
);

269 
ssize_t
 
	`•li˚
 (
__fdö
, 
__off64_t
 *
__offö
, 
__fdout
,

270 
__off64_t
 *
__offout
, 
size_t
 
__Àn
,

271 
__Êags
);

274 
ssize_t
 
	`ãe
 (
__fdö
, 
__fdout
, 
size_t
 
__Àn
,

275 
__Êags
);

278 #i‚de‡
__USE_FILE_OFFSET64


279 
	`ÁŒoˇã
 (
__fd
, 
__mode
, 
__off_t
 
__off£t
, __off_à
__Àn
);

281 #ifde‡
__REDIRECT


282 
	`__REDIRECT
 (
ÁŒoˇã
, (
__fd
, 
__mode
, 
__off64_t
 
__off£t
,

283 
__off64_t
 
__Àn
),

284 
ÁŒoˇã64
);

286 
	#ÁŒoˇã
 
ÁŒoˇã64


	)

289 #ifde‡
__USE_LARGEFILE64


290 
	`ÁŒoˇã64
 (
__fd
, 
__mode
, 
__off64_t
 
__off£t
,

291 
__off64_t
 
__Àn
);

295 
__END_DECLS


	@/usr/include/bits/fcntl2.h

20 #i‚def 
_FCNTL_H


26 #i‚de‡
__USE_FILE_OFFSET64


27 
	$__›í_2
 (
__c⁄°
 *
__∑th
, 
__oÊag
Ë
	`__n⁄nuŒ
 ((1));

28 
	`__REDIRECT
 (
__›í_Æüs
, (
__c⁄°
 *
__∑th
, 
__oÊag
, ...),

29 
›í
Ë
	`__n⁄nuŒ
 ((1));

31 
	`__REDIRECT
 (
__›í_2
, (
__c⁄°
 *
__∑th
, 
__oÊag
),

32 
__›í64_2
Ë
	`__n⁄nuŒ
 ((1));

33 
	`__REDIRECT
 (
__›í_Æüs
, (
__c⁄°
 *
__∑th
, 
__oÊag
, ...),

34 
›í64
Ë
	`__n⁄nuŒ
 ((1));

36 
	`__îr‹de˛
 (
__›í_too_m™y_¨gs
,

38 
	`__îr‹de˛
 (
__›í_missög_mode
,

41 
__exã∫_Æways_ölöe
 

42 
	$›í
 (
__c⁄°
 *
__∑th
, 
__oÊag
, ...)

44 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

45 
	`__›í_too_m™y_¨gs
 ();

47 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

49 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () < 1)

51 
	`__›í_missög_mode
 ();

52  
	`__›í_2
 (
__∑th
, 
__oÊag
);

54  
	`__›í_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

57 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

58  
	`__›í_2
 (
__∑th
, 
__oÊag
);

60  
	`__›í_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

61 
	}
}

64 #ifde‡
__USE_LARGEFILE64


65 
	$__›í64_2
 (
__c⁄°
 *
__∑th
, 
__oÊag
Ë
	`__n⁄nuŒ
 ((1));

66 
	`__REDIRECT
 (
__›í64_Æüs
, (
__c⁄°
 *
__∑th
, 
__oÊag
,

67 ...), 
›í64
Ë
	`__n⁄nuŒ
 ((1));

68 
	`__îr‹de˛
 (
__›í64_too_m™y_¨gs
,

70 
	`__îr‹de˛
 (
__›í64_missög_mode
,

73 
__exã∫_Æways_ölöe
 

74 
	$›í64
 (
__c⁄°
 *
__∑th
, 
__oÊag
, ...)

76 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

77 
	`__›í64_too_m™y_¨gs
 ();

79 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

81 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () < 1)

83 
	`__›í64_missög_mode
 ();

84  
	`__›í64_2
 (
__∑th
, 
__oÊag
);

86  
	`__›í64_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

89 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

90  
	`__›í64_2
 (
__∑th
, 
__oÊag
);

92  
	`__›í64_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

93 
	}
}

97 #ifde‡
__USE_ATFILE


98 #i‚de‡
__USE_FILE_OFFSET64


99 
	$__›í©_2
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__oÊag
)

100 
	`__n⁄nuŒ
 ((2));

101 
	`__REDIRECT
 (
__›í©_Æüs
, (
__fd
, 
__c⁄°
 *
__∑th
,

102 
__oÊag
, ...), 
›í©
)

103 
	`__n⁄nuŒ
 ((2));

105 
	`__REDIRECT
 (
__›í©_2
, (
__fd
, 
__c⁄°
 *
__∑th
,

106 
__oÊag
), 
__›í©64_2
)

107 
	`__n⁄nuŒ
 ((2));

108 
	`__REDIRECT
 (
__›í©_Æüs
, (
__fd
, 
__c⁄°
 *
__∑th
,

109 
__oÊag
, ...), 
›í©64
)

110 
	`__n⁄nuŒ
 ((2));

112 
	`__îr‹de˛
 (
__›í©_too_m™y_¨gs
,

114 
	`__îr‹de˛
 (
__›í©_missög_mode
,

117 
__exã∫_Æways_ölöe
 

118 
	$›í©
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__oÊag
, ...)

120 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

121 
	`__›í©_too_m™y_¨gs
 ();

123 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

125 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () < 1)

127 
	`__›í©_missög_mode
 ();

128  
	`__›í©_2
 (
__fd
, 
__∑th
, 
__oÊag
);

130  
	`__›í©_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

133 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

134  
	`__›í©_2
 (
__fd
, 
__∑th
, 
__oÊag
);

136  
	`__›í©_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

137 
	}
}

140 #ifde‡
__USE_LARGEFILE64


141 
	$__›í©64_2
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__oÊag
)

142 
	`__n⁄nuŒ
 ((2));

143 
	`__REDIRECT
 (
__›í©64_Æüs
, (
__fd
, 
__c⁄°
 *
__∑th
,

144 
__oÊag
, ...), 
›í©64
)

145 
	`__n⁄nuŒ
 ((2));

146 
	`__îr‹de˛
 (
__›í©64_too_m™y_¨gs
,

148 
	`__îr‹de˛
 (
__›í©64_missög_mode
,

151 
__exã∫_Æways_ölöe
 

152 
	$›í©64
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__oÊag
, ...)

154 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

155 
	`__›í©64_too_m™y_¨gs
 ();

157 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

159 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () < 1)

161 
	`__›í©64_missög_mode
 ();

162  
	`__›í©64_2
 (
__fd
, 
__∑th
, 
__oÊag
);

164  
	`__›í©64_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

167 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

168  
	`__›í©64_2
 (
__fd
, 
__∑th
, 
__oÊag
);

170  
	`__›í©64_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

171 
	}
}

	@/usr/include/bits/in.h

21 #i‚de‡
_NETINET_IN_H


28 
	#IP_OPTIONS
 4

	)

29 
	#IP_HDRINCL
 3

	)

30 
	#IP_TOS
 1

	)

31 
	#IP_TTL
 2

	)

32 
	#IP_RECVOPTS
 6

	)

34 
	#IP_RECVRETOPTS
 
IP_RETOPTS


	)

35 
	#IP_RETOPTS
 7

	)

36 
	#IP_MULTICAST_IF
 32

	)

37 
	#IP_MULTICAST_TTL
 33

	)

38 
	#IP_MULTICAST_LOOP
 34

	)

39 
	#IP_ADD_MEMBERSHIP
 35

	)

40 
	#IP_DROP_MEMBERSHIP
 36

	)

41 
	#IP_UNBLOCK_SOURCE
 37

	)

42 
	#IP_BLOCK_SOURCE
 38

	)

43 
	#IP_ADD_SOURCE_MEMBERSHIP
 39

	)

44 
	#IP_DROP_SOURCE_MEMBERSHIP
 40

	)

45 
	#IP_MSFILTER
 41

	)

46 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


47 
	#MCAST_JOIN_GROUP
 42

	)

48 
	#MCAST_BLOCK_SOURCE
 43

	)

49 
	#MCAST_UNBLOCK_SOURCE
 44

	)

50 
	#MCAST_LEAVE_GROUP
 45

	)

51 
	#MCAST_JOIN_SOURCE_GROUP
 46

	)

52 
	#MCAST_LEAVE_SOURCE_GROUP
 47

	)

53 
	#MCAST_MSFILTER
 48

	)

55 
	#MCAST_EXCLUDE
 0

	)

56 
	#MCAST_INCLUDE
 1

	)

59 
	#IP_ROUTER_ALERT
 5

	)

60 
	#IP_PKTINFO
 8

	)

61 
	#IP_PKTOPTIONS
 9

	)

62 
	#IP_PMTUDISC
 10

	)

63 
	#IP_MTU_DISCOVER
 10

	)

64 
	#IP_RECVERR
 11

	)

65 
	#IP_RECVTTL
 12

	)

66 
	#IP_RECVTOS
 13

	)

67 
	#IP_MTU
 14

	)

68 
	#IP_FREEBIND
 15

	)

69 
	#IP_IPSEC_POLICY
 16

	)

70 
	#IP_XFRM_POLICY
 17

	)

71 
	#IP_PASSSEC
 18

	)

72 
	#IP_TRANSPARENT
 19

	)

73 
	#IP_MULTICAST_ALL
 49

	)

76 
	#IP_ORIGDSTADDR
 20

	)

77 
	#IP_RECVORIGDSTADDR
 
IP_ORIGDSTADDR


	)

79 
	#IP_MINTTL
 21

	)

83 
	#IP_PMTUDISC_DONT
 0

	)

84 
	#IP_PMTUDISC_WANT
 1

	)

85 
	#IP_PMTUDISC_DO
 2

	)

86 
	#IP_PMTUDISC_PROBE
 3

	)

89 
	#SOL_IP
 0

	)

91 
	#IP_DEFAULT_MULTICAST_TTL
 1

	)

92 
	#IP_DEFAULT_MULTICAST_LOOP
 1

	)

93 
	#IP_MAX_MEMBERSHIPS
 20

	)

95 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


99 
	sù_›ts


101 
ö_addr
 
	mù_d°
;

102 
	mù_›ts
[40];

106 
	sù_mªqn


108 
ö_addr
 
	mimr_mu…üddr
;

109 
ö_addr
 
	mimr_addªss
;

110 
	mimr_ifödex
;

114 
	sö_pktöfo


116 
	mùi_ifödex
;

117 
ö_addr
 
	mùi_•ec_d°
;

118 
ö_addr
 
	mùi_addr
;

125 
	#IPV6_ADDRFORM
 1

	)

126 
	#IPV6_2292PKTINFO
 2

	)

127 
	#IPV6_2292HOPOPTS
 3

	)

128 
	#IPV6_2292DSTOPTS
 4

	)

129 
	#IPV6_2292RTHDR
 5

	)

130 
	#IPV6_2292PKTOPTIONS
 6

	)

131 
	#IPV6_CHECKSUM
 7

	)

132 
	#IPV6_2292HOPLIMIT
 8

	)

134 
	#SCM_SRCRT
 
IPV6_RXSRCRT


	)

136 
	#IPV6_NEXTHOP
 9

	)

137 
	#IPV6_AUTHHDR
 10

	)

138 
	#IPV6_UNICAST_HOPS
 16

	)

139 
	#IPV6_MULTICAST_IF
 17

	)

140 
	#IPV6_MULTICAST_HOPS
 18

	)

141 
	#IPV6_MULTICAST_LOOP
 19

	)

142 
	#IPV6_JOIN_GROUP
 20

	)

143 
	#IPV6_LEAVE_GROUP
 21

	)

144 
	#IPV6_ROUTER_ALERT
 22

	)

145 
	#IPV6_MTU_DISCOVER
 23

	)

146 
	#IPV6_MTU
 24

	)

147 
	#IPV6_RECVERR
 25

	)

148 
	#IPV6_V6ONLY
 26

	)

149 
	#IPV6_JOIN_ANYCAST
 27

	)

150 
	#IPV6_LEAVE_ANYCAST
 28

	)

151 
	#IPV6_IPSEC_POLICY
 34

	)

152 
	#IPV6_XFRM_POLICY
 35

	)

154 
	#IPV6_RECVPKTINFO
 49

	)

155 
	#IPV6_PKTINFO
 50

	)

156 
	#IPV6_RECVHOPLIMIT
 51

	)

157 
	#IPV6_HOPLIMIT
 52

	)

158 
	#IPV6_RECVHOPOPTS
 53

	)

159 
	#IPV6_HOPOPTS
 54

	)

160 
	#IPV6_RTHDRDSTOPTS
 55

	)

161 
	#IPV6_RECVRTHDR
 56

	)

162 
	#IPV6_RTHDR
 57

	)

163 
	#IPV6_RECVDSTOPTS
 58

	)

164 
	#IPV6_DSTOPTS
 59

	)

166 
	#IPV6_RECVTCLASS
 66

	)

167 
	#IPV6_TCLASS
 67

	)

170 
	#IPV6_ADD_MEMBERSHIP
 
IPV6_JOIN_GROUP


	)

171 
	#IPV6_DROP_MEMBERSHIP
 
IPV6_LEAVE_GROUP


	)

172 
	#IPV6_RXHOPOPTS
 
IPV6_HOPOPTS


	)

173 
	#IPV6_RXDSTOPTS
 
IPV6_DSTOPTS


	)

176 
	#IPV6_PMTUDISC_DONT
 0

	)

177 
	#IPV6_PMTUDISC_WANT
 1

	)

178 
	#IPV6_PMTUDISC_DO
 2

	)

179 
	#IPV6_PMTUDISC_PROBE
 3

	)

182 
	#SOL_IPV6
 41

	)

183 
	#SOL_ICMPV6
 58

	)

186 
	#IPV6_RTHDR_LOOSE
 0

	)

187 
	#IPV6_RTHDR_STRICT
 1

	)

189 
	#IPV6_RTHDR_TYPE_0
 0

	)

	@/usr/include/bits/ioctl-types.h

20 #i‚de‡
_SYS_IOCTL_H


25 
	~<asm/io˘ls.h
>

28 
	swösize


30 
	mws_row
;

31 
	mws_cﬁ
;

32 
	mws_xpixñ
;

33 
	mws_ypixñ
;

36 
	#NCC
 8

	)

37 
	sãrmio


39 
	mc_iÊag
;

40 
	mc_oÊag
;

41 
	mc_cÊag
;

42 
	mc_lÊag
;

43 
	mc_löe
;

44 
	mc_cc
[
NCC
];

48 
	#TIOCM_LE
 0x001

	)

49 
	#TIOCM_DTR
 0x002

	)

50 
	#TIOCM_RTS
 0x004

	)

51 
	#TIOCM_ST
 0x008

	)

52 
	#TIOCM_SR
 0x010

	)

53 
	#TIOCM_CTS
 0x020

	)

54 
	#TIOCM_CAR
 0x040

	)

55 
	#TIOCM_RNG
 0x080

	)

56 
	#TIOCM_DSR
 0x100

	)

57 
	#TIOCM_CD
 
TIOCM_CAR


	)

58 
	#TIOCM_RI
 
TIOCM_RNG


	)

63 
	#N_TTY
 0

	)

64 
	#N_SLIP
 1

	)

65 
	#N_MOUSE
 2

	)

66 
	#N_PPP
 3

	)

67 
	#N_STRIP
 4

	)

68 
	#N_AX25
 5

	)

69 
	#N_X25
 6

	)

70 
	#N_6PACK
 7

	)

71 
	#N_MASC
 8

	)

72 
	#N_R3964
 9

	)

73 
	#N_PROFIBUS_FDL
 10

	)

74 
	#N_IRDA
 11

	)

75 
	#N_SMSBLOCK
 12

	)

76 
	#N_HDLC
 13

	)

77 
	#N_SYNC_PPP
 14

	)

78 
	#N_HCI
 15

	)

	@/usr/include/bits/ioctls.h

19 #i‚de‡
_SYS_IOCTL_H


24 
	~<asm/io˘ls.h
>

27 
	#SIOCADDRT
 0x890B

	)

28 
	#SIOCDELRT
 0x890C

	)

29 
	#SIOCRTMSG
 0x890D

	)

32 
	#SIOCGIFNAME
 0x8910

	)

33 
	#SIOCSIFLINK
 0x8911

	)

34 
	#SIOCGIFCONF
 0x8912

	)

35 
	#SIOCGIFFLAGS
 0x8913

	)

36 
	#SIOCSIFFLAGS
 0x8914

	)

37 
	#SIOCGIFADDR
 0x8915

	)

38 
	#SIOCSIFADDR
 0x8916

	)

39 
	#SIOCGIFDSTADDR
 0x8917

	)

40 
	#SIOCSIFDSTADDR
 0x8918

	)

41 
	#SIOCGIFBRDADDR
 0x8919

	)

42 
	#SIOCSIFBRDADDR
 0x891®

	)

43 
	#SIOCGIFNETMASK
 0x891b

	)

44 
	#SIOCSIFNETMASK
 0x891¯

	)

45 
	#SIOCGIFMETRIC
 0x891d

	)

46 
	#SIOCSIFMETRIC
 0x891ê

	)

47 
	#SIOCGIFMEM
 0x891‡

	)

48 
	#SIOCSIFMEM
 0x8920

	)

49 
	#SIOCGIFMTU
 0x8921

	)

50 
	#SIOCSIFMTU
 0x8922

	)

51 
	#SIOCSIFNAME
 0x8923

	)

52 
	#SIOCSIFHWADDR
 0x8924

	)

53 
	#SIOCGIFENCAP
 0x8925

	)

54 
	#SIOCSIFENCAP
 0x8926

	)

55 
	#SIOCGIFHWADDR
 0x8927

	)

56 
	#SIOCGIFSLAVE
 0x8929

	)

57 
	#SIOCSIFSLAVE
 0x8930

	)

58 
	#SIOCADDMULTI
 0x8931

	)

59 
	#SIOCDELMULTI
 0x8932

	)

60 
	#SIOCGIFINDEX
 0x8933

	)

61 
	#SIOGIFINDEX
 
SIOCGIFINDEX


	)

62 
	#SIOCSIFPFLAGS
 0x8934

	)

63 
	#SIOCGIFPFLAGS
 0x8935

	)

64 
	#SIOCDIFADDR
 0x8936

	)

65 
	#SIOCSIFHWBROADCAST
 0x8937

	)

66 
	#SIOCGIFCOUNT
 0x8938

	)

68 
	#SIOCGIFBR
 0x8940

	)

69 
	#SIOCSIFBR
 0x8941

	)

71 
	#SIOCGIFTXQLEN
 0x8942

	)

72 
	#SIOCSIFTXQLEN
 0x8943

	)

77 
	#SIOCDARP
 0x8953

	)

78 
	#SIOCGARP
 0x8954

	)

79 
	#SIOCSARP
 0x8955

	)

82 
	#SIOCDRARP
 0x8960

	)

83 
	#SIOCGRARP
 0x8961

	)

84 
	#SIOCSRARP
 0x8962

	)

88 
	#SIOCGIFMAP
 0x8970

	)

89 
	#SIOCSIFMAP
 0x8971

	)

93 
	#SIOCADDDLCI
 0x8980

	)

94 
	#SIOCDELDLCI
 0x8981

	)

103 
	#SIOCDEVPRIVATE
 0x89F0

	)

109 
	#SIOCPROTOPRIVATE
 0x89E0

	)

	@/usr/include/bits/netdb.h

19 #i‚de‡
_NETDB_H


27 
	s√ã¡


29 *
	mn_«me
;

30 **
	mn_Æü£s
;

31 
	mn_addπy≥
;

32 
uöt32_t
 
	mn_√t
;

	@/usr/include/bits/posix1_lim.h

25 #i‚def 
_BITS_POSIX1_LIM_H


26 
	#_BITS_POSIX1_LIM_H
 1

	)

32 
	#_POSIX_AIO_LISTIO_MAX
 2

	)

35 
	#_POSIX_AIO_MAX
 1

	)

38 
	#_POSIX_ARG_MAX
 4096

	)

41 #ifde‡
__USE_XOPEN2K


42 
	#_POSIX_CHILD_MAX
 25

	)

44 
	#_POSIX_CHILD_MAX
 6

	)

48 
	#_POSIX_DELAYTIMER_MAX
 32

	)

52 
	#_POSIX_HOST_NAME_MAX
 255

	)

55 
	#_POSIX_LINK_MAX
 8

	)

58 
	#_POSIX_LOGIN_NAME_MAX
 9

	)

61 
	#_POSIX_MAX_CANON
 255

	)

65 
	#_POSIX_MAX_INPUT
 255

	)

68 
	#_POSIX_MQ_OPEN_MAX
 8

	)

71 
	#_POSIX_MQ_PRIO_MAX
 32

	)

74 
	#_POSIX_NAME_MAX
 14

	)

77 #ifde‡
__USE_XOPEN2K


78 
	#_POSIX_NGROUPS_MAX
 8

	)

80 
	#_POSIX_NGROUPS_MAX
 0

	)

84 #ifde‡
__USE_XOPEN2K


85 
	#_POSIX_OPEN_MAX
 20

	)

87 
	#_POSIX_OPEN_MAX
 16

	)

90 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


93 
	#_POSIX_FD_SETSIZE
 
_POSIX_OPEN_MAX


	)

97 
	#_POSIX_PATH_MAX
 256

	)

100 
	#_POSIX_PIPE_BUF
 512

	)

104 
	#_POSIX_RE_DUP_MAX
 255

	)

107 
	#_POSIX_RTSIG_MAX
 8

	)

110 
	#_POSIX_SEM_NSEMS_MAX
 256

	)

113 
	#_POSIX_SEM_VALUE_MAX
 32767

	)

116 
	#_POSIX_SIGQUEUE_MAX
 32

	)

119 
	#_POSIX_SSIZE_MAX
 32767

	)

122 
	#_POSIX_STREAM_MAX
 8

	)

125 
	#_POSIX_SYMLINK_MAX
 255

	)

129 
	#_POSIX_SYMLOOP_MAX
 8

	)

132 
	#_POSIX_TIMER_MAX
 32

	)

135 
	#_POSIX_TTY_NAME_MAX
 9

	)

138 
	#_POSIX_TZNAME_MAX
 6

	)

140 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


142 
	#_POSIX_QLIMIT
 1

	)

146 
	#_POSIX_HIWAT
 
_POSIX_PIPE_BUF


	)

149 
	#_POSIX_UIO_MAXIOV
 16

	)

153 
	#_POSIX_CLOCKRES_MIN
 20000000

	)

157 
	~<bôs/loˇl_lim.h
>

160 #i‚def 
SSIZE_MAX


161 
	#SSIZE_MAX
 
LONG_MAX


	)

168 #i‚def 
NGROUPS_MAX


169 
	#NGROUPS_MAX
 8

	)

	@/usr/include/bits/posix2_lim.h

23 #i‚def 
_BITS_POSIX2_LIM_H


24 
	#_BITS_POSIX2_LIM_H
 1

	)

28 
	#_POSIX2_BC_BASE_MAX
 99

	)

31 
	#_POSIX2_BC_DIM_MAX
 2048

	)

34 
	#_POSIX2_BC_SCALE_MAX
 99

	)

37 
	#_POSIX2_BC_STRING_MAX
 1000

	)

41 
	#_POSIX2_COLL_WEIGHTS_MAX
 2

	)

45 
	#_POSIX2_EXPR_NEST_MAX
 32

	)

48 
	#_POSIX2_LINE_MAX
 2048

	)

52 
	#_POSIX2_RE_DUP_MAX
 255

	)

56 
	#_POSIX2_CHARCLASS_NAME_MAX
 14

	)

63 #i‚def 
BC_BASE_MAX


64 
	#BC_BASE_MAX
 
_POSIX2_BC_BASE_MAX


	)

66 #i‚def 
BC_DIM_MAX


67 
	#BC_DIM_MAX
 
_POSIX2_BC_DIM_MAX


	)

69 #i‚def 
BC_SCALE_MAX


70 
	#BC_SCALE_MAX
 
_POSIX2_BC_SCALE_MAX


	)

72 #i‚def 
BC_STRING_MAX


73 
	#BC_STRING_MAX
 
_POSIX2_BC_STRING_MAX


	)

75 #i‚def 
COLL_WEIGHTS_MAX


76 
	#COLL_WEIGHTS_MAX
 255

	)

78 #i‚def 
EXPR_NEST_MAX


79 
	#EXPR_NEST_MAX
 
_POSIX2_EXPR_NEST_MAX


	)

81 #i‚def 
LINE_MAX


82 
	#LINE_MAX
 
_POSIX2_LINE_MAX


	)

84 #i‚def 
CHARCLASS_NAME_MAX


85 
	#CHARCLASS_NAME_MAX
 2048

	)

89 
	#RE_DUP_MAX
 (0x7fff)

	)

	@/usr/include/bits/posix_opt.h

20 #i‚def 
_BITS_POSIX_OPT_H


21 
	#_BITS_POSIX_OPT_H
 1

	)

24 
	#_POSIX_JOB_CONTROL
 1

	)

27 
	#_POSIX_SAVED_IDS
 1

	)

30 
	#_POSIX_PRIORITY_SCHEDULING
 200809L

	)

33 
	#_POSIX_SYNCHRONIZED_IO
 200809L

	)

36 
	#_POSIX_FSYNC
 200809L

	)

39 
	#_POSIX_MAPPED_FILES
 200809L

	)

42 
	#_POSIX_MEMLOCK
 200809L

	)

45 
	#_POSIX_MEMLOCK_RANGE
 200809L

	)

48 
	#_POSIX_MEMORY_PROTECTION
 200809L

	)

51 
	#_POSIX_CHOWN_RESTRICTED
 0

	)

55 
	#_POSIX_VDISABLE
 '\0'

	)

58 
	#_POSIX_NO_TRUNC
 1

	)

61 
	#_XOPEN_REALTIME
 1

	)

64 
	#_XOPEN_REALTIME_THREADS
 1

	)

67 
	#_XOPEN_SHM
 1

	)

70 
	#_POSIX_THREADS
 200809L

	)

73 
	#_POSIX_REENTRANT_FUNCTIONS
 1

	)

74 
	#_POSIX_THREAD_SAFE_FUNCTIONS
 200809L

	)

77 
	#_POSIX_THREAD_PRIORITY_SCHEDULING
 200809L

	)

80 
	#_POSIX_THREAD_ATTR_STACKSIZE
 200809L

	)

83 
	#_POSIX_THREAD_ATTR_STACKADDR
 200809L

	)

86 
	#_POSIX_THREAD_PRIO_INHERIT
 200809L

	)

90 
	#_POSIX_THREAD_PRIO_PROTECT
 200809L

	)

92 #ifde‡
__USE_XOPEN2K8


94 
	#_POSIX_THREAD_ROBUST_PRIO_INHERIT
 200809L

	)

97 
	#_POSIX_THREAD_ROBUST_PRIO_PROTECT
 -1

	)

101 
	#_POSIX_SEMAPHORES
 200809L

	)

104 
	#_POSIX_REALTIME_SIGNALS
 200809L

	)

107 
	#_POSIX_ASYNCHRONOUS_IO
 200809L

	)

108 
	#_POSIX_ASYNC_IO
 1

	)

110 
	#_LFS_ASYNCHRONOUS_IO
 1

	)

112 
	#_POSIX_PRIORITIZED_IO
 200809L

	)

115 
	#_LFS64_ASYNCHRONOUS_IO
 1

	)

118 
	#_LFS_LARGEFILE
 1

	)

119 
	#_LFS64_LARGEFILE
 1

	)

120 
	#_LFS64_STDIO
 1

	)

123 
	#_POSIX_SHARED_MEMORY_OBJECTS
 200809L

	)

126 
	#_POSIX_CPUTIME
 0

	)

129 
	#_POSIX_THREAD_CPUTIME
 0

	)

132 
	#_POSIX_REGEXP
 1

	)

135 
	#_POSIX_READER_WRITER_LOCKS
 200809L

	)

138 
	#_POSIX_SHELL
 1

	)

141 
	#_POSIX_TIMEOUTS
 200809L

	)

144 
	#_POSIX_SPIN_LOCKS
 200809L

	)

147 
	#_POSIX_SPAWN
 200809L

	)

150 
	#_POSIX_TIMERS
 200809L

	)

153 
	#_POSIX_BARRIERS
 200809L

	)

156 
	#_POSIX_MESSAGE_PASSING
 200809L

	)

159 
	#_POSIX_THREAD_PROCESS_SHARED
 200809L

	)

162 
	#_POSIX_MONOTONIC_CLOCK
 0

	)

165 
	#_POSIX_CLOCK_SELECTION
 200809L

	)

168 
	#_POSIX_ADVISORY_INFO
 200809L

	)

171 
	#_POSIX_IPV6
 200809L

	)

174 
	#_POSIX_RAW_SOCKETS
 200809L

	)

177 
	#_POSIX2_CHAR_TERM
 200809L

	)

180 
	#_POSIX_SPORADIC_SERVER
 -1

	)

181 
	#_POSIX_THREAD_SPORADIC_SERVER
 -1

	)

184 
	#_POSIX_TRACE
 -1

	)

185 
	#_POSIX_TRACE_EVENT_FILTER
 -1

	)

186 
	#_POSIX_TRACE_INHERIT
 -1

	)

187 
	#_POSIX_TRACE_LOG
 -1

	)

190 
	#_POSIX_TYPED_MEMORY_OBJECTS
 -1

	)

193 
	#_XOPEN_STREAMS
 -1

	)

	@/usr/include/bits/pthreadtypes.h

20 #i‚de‡
_BITS_PTHREADTYPES_H


21 
	#_BITS_PTHREADTYPES_H
 1

	)

23 
	~<bôs/w‹dsize.h
>

25 #i‡
__WORDSIZE
 == 64

26 
	#__SIZEOF_PTHREAD_ATTR_T
 56

	)

27 
	#__SIZEOF_PTHREAD_MUTEX_T
 40

	)

28 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

29 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

30 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

31 
	#__SIZEOF_PTHREAD_RWLOCK_T
 56

	)

32 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

33 
	#__SIZEOF_PTHREAD_BARRIER_T
 32

	)

34 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

36 
	#__SIZEOF_PTHREAD_ATTR_T
 36

	)

37 
	#__SIZEOF_PTHREAD_MUTEX_T
 24

	)

38 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

39 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

40 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

41 
	#__SIZEOF_PTHREAD_RWLOCK_T
 32

	)

42 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

43 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

44 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

50 
	t±hªad_t
;

55 
	m__size
[
__SIZEOF_PTHREAD_ATTR_T
];

56 
	m__Æign
;

57 } 
	t±hªad_©å_t
;

60 #i‡
__WORDSIZE
 == 64

61 
	s__±hªad_öã∫Æ_li°


63 
__±hªad_öã∫Æ_li°
 *
	m__¥ev
;

64 
__±hªad_öã∫Æ_li°
 *
	m__√xt
;

65 } 
	t__±hªad_li°_t
;

67 
	s__±hªad_öã∫Æ_¶i°


69 
__±hªad_öã∫Æ_¶i°
 *
	m__√xt
;

70 } 
	t__±hªad_¶i°_t
;

78 
	s__±hªad_muãx_s


80 
	m__lock
;

81 
	m__cou¡
;

82 
	m__ow√r
;

83 #i‡
__WORDSIZE
 == 64

84 
	m__nu£rs
;

88 
	m__köd
;

89 #i‡
__WORDSIZE
 == 64

90 
	m__•ös
;

91 
__±hªad_li°_t
 
	m__li°
;

92 
	#__PTHREAD_MUTEX_HAVE_PREV
 1

	)

94 
	m__nu£rs
;

95 
__exãnsi⁄__
 union

97 
	m__•ös
;

98 
__±hªad_¶i°_t
 
	m__li°
;

101 } 
	m__d©a
;

102 
	m__size
[
__SIZEOF_PTHREAD_MUTEX_T
];

103 
	m__Æign
;

104 } 
	t±hªad_muãx_t
;

108 
	m__size
[
__SIZEOF_PTHREAD_MUTEXATTR_T
];

109 
	m__Æign
;

110 } 
	t±hªad_muãx©å_t
;

119 
	m__lock
;

120 
	m__fuãx
;

121 
__exãnsi⁄__
 
	m__tŸÆ_£q
;

122 
__exãnsi⁄__
 
	m__wakeup_£q
;

123 
__exãnsi⁄__
 
	m__wokí_£q
;

124 *
	m__muãx
;

125 
	m__nwaôîs
;

126 
	m__brﬂdˇ°_£q
;

127 } 
	m__d©a
;

128 
	m__size
[
__SIZEOF_PTHREAD_COND_T
];

129 
__exãnsi⁄__
 
	m__Æign
;

130 } 
	t±hªad_c⁄d_t
;

134 
	m__size
[
__SIZEOF_PTHREAD_CONDATTR_T
];

135 
	m__Æign
;

136 } 
	t±hªad_c⁄d©å_t
;

140 
	t±hªad_key_t
;

144 
	t±hªad_⁄˚_t
;

147 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


152 #i‡
__WORDSIZE
 == 64

155 
	m__lock
;

156 
	m__ƒ_ªadîs
;

157 
	m__ªadîs_wakeup
;

158 
	m__wrôî_wakeup
;

159 
	m__ƒ_ªadîs_queued
;

160 
	m__ƒ_wrôîs_queued
;

161 
	m__wrôî
;

162 
	m__sh¨ed
;

163 
	m__∑d1
;

164 
	m__∑d2
;

167 
	m__Êags
;

168 } 
	m__d©a
;

172 
	m__lock
;

173 
	m__ƒ_ªadîs
;

174 
	m__ªadîs_wakeup
;

175 
	m__wrôî_wakeup
;

176 
	m__ƒ_ªadîs_queued
;

177 
	m__ƒ_wrôîs_queued
;

180 
	m__Êags
;

181 
	m__sh¨ed
;

182 
	m__∑d1
;

183 
	m__∑d2
;

184 
	m__wrôî
;

185 } 
	m__d©a
;

187 
	m__size
[
__SIZEOF_PTHREAD_RWLOCK_T
];

188 
	m__Æign
;

189 } 
	t±hªad_rwlock_t
;

193 
	m__size
[
__SIZEOF_PTHREAD_RWLOCKATTR_T
];

194 
	m__Æign
;

195 } 
	t±hªad_rwlock©å_t
;

199 #ifde‡
__USE_XOPEN2K


201 vﬁ©ûê
	t±hªad_•ölock_t
;

208 
	m__size
[
__SIZEOF_PTHREAD_BARRIER_T
];

209 
	m__Æign
;

210 } 
	t±hªad_b¨rõr_t
;

214 
	m__size
[
__SIZEOF_PTHREAD_BARRIERATTR_T
];

215 
	m__Æign
;

216 } 
	t±hªad_b¨rõøâr_t
;

220 #i‡
__WORDSIZE
 == 32

222 
	#__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
	`__ªg∑rm__
 (1)))

	)

	@/usr/include/bits/resource.h

21 #i‚de‡
_SYS_RESOURCE_H


25 
	~<bôs/ty≥s.h
>

33 
	e__æimô_ªsour˚


36 
	mRLIMIT_CPU
 = 0,

37 
	#RLIMIT_CPU
 
RLIMIT_CPU


	)

40 
	mRLIMIT_FSIZE
 = 1,

41 
	#RLIMIT_FSIZE
 
RLIMIT_FSIZE


	)

44 
	mRLIMIT_DATA
 = 2,

45 
	#RLIMIT_DATA
 
RLIMIT_DATA


	)

48 
	mRLIMIT_STACK
 = 3,

49 
	#RLIMIT_STACK
 
RLIMIT_STACK


	)

52 
	mRLIMIT_CORE
 = 4,

53 
	#RLIMIT_CORE
 
RLIMIT_CORE


	)

59 
	m__RLIMIT_RSS
 = 5,

60 
	#RLIMIT_RSS
 
__RLIMIT_RSS


	)

63 
	mRLIMIT_NOFILE
 = 7,

64 
	m__RLIMIT_OFILE
 = 
RLIMIT_NOFILE
,

65 
	#RLIMIT_NOFILE
 
RLIMIT_NOFILE


	)

66 
	#RLIMIT_OFILE
 
__RLIMIT_OFILE


	)

69 
	mRLIMIT_AS
 = 9,

70 
	#RLIMIT_AS
 
RLIMIT_AS


	)

73 
	m__RLIMIT_NPROC
 = 6,

74 
	#RLIMIT_NPROC
 
__RLIMIT_NPROC


	)

77 
	m__RLIMIT_MEMLOCK
 = 8,

78 
	#RLIMIT_MEMLOCK
 
__RLIMIT_MEMLOCK


	)

81 
	m__RLIMIT_LOCKS
 = 10,

82 
	#RLIMIT_LOCKS
 
__RLIMIT_LOCKS


	)

85 
	m__RLIMIT_SIGPENDING
 = 11,

86 
	#RLIMIT_SIGPENDING
 
__RLIMIT_SIGPENDING


	)

89 
	m__RLIMIT_MSGQUEUE
 = 12,

90 
	#RLIMIT_MSGQUEUE
 
__RLIMIT_MSGQUEUE


	)

95 
	m__RLIMIT_NICE
 = 13,

96 
	#RLIMIT_NICE
 
__RLIMIT_NICE


	)

100 
	m__RLIMIT_RTPRIO
 = 14,

101 
	#RLIMIT_RTPRIO
 
__RLIMIT_RTPRIO


	)

103 
	m__RLIMIT_NLIMITS
 = 15,

104 
	m__RLIM_NLIMITS
 = 
__RLIMIT_NLIMITS


105 
	#RLIMIT_NLIMITS
 
__RLIMIT_NLIMITS


	)

106 
	#RLIM_NLIMITS
 
__RLIM_NLIMITS


	)

110 #i‚de‡
__USE_FILE_OFFSET64


111 
	#RLIM_INFINITY
 (()(~0UL))

	)

113 
	#RLIM_INFINITY
 0xffffffffffffffffuLL

	)

116 #ifde‡
__USE_LARGEFILE64


117 
	#RLIM64_INFINITY
 0xffffffffffffffffuLL

	)

121 
	#RLIM_SAVED_MAX
 
RLIM_INFINITY


	)

122 
	#RLIM_SAVED_CUR
 
RLIM_INFINITY


	)

126 #i‚de‡
__USE_FILE_OFFSET64


127 
__æim_t
 
	tæim_t
;

129 
__æim64_t
 
	tæim_t
;

131 #ifde‡
__USE_LARGEFILE64


132 
__æim64_t
 
	tæim64_t
;

135 
	sæimô


138 
æim_t
 
	mæim_cur
;

140 
æim_t
 
	mæim_max
;

143 #ifde‡
__USE_LARGEFILE64


144 
	sæimô64


147 
æim64_t
 
	mæim_cur
;

149 
æim64_t
 
	mæim_max
;

154 
	e__rußge_who


157 
	mRUSAGE_SELF
 = 0,

158 
	#RUSAGE_SELF
 
RUSAGE_SELF


	)

161 
	mRUSAGE_CHILDREN
 = -1

162 
	#RUSAGE_CHILDREN
 
RUSAGE_CHILDREN


	)

164 #ifde‡
__USE_GNU


167 
	mRUSAGE_THREAD
 = 1

168 
	#RUSAGE_THREAD
 
RUSAGE_THREAD


	)

170 
	#RUSAGE_LWP
 
RUSAGE_THREAD


	)

174 
	#__√ed_timevÆ


	)

175 
	~<bôs/time.h
>

178 
	srußge


181 
timevÆ
 
	mru_utime
;

183 
timevÆ
 
	mru_°ime
;

185 
	mru_maxrss
;

188 
	mru_ixrss
;

190 
	mru_idrss
;

192 
	mru_i§ss
;

195 
	mru_möÊt
;

197 
	mru_majÊt
;

199 
	mru_nsw≠
;

202 
	mru_öblock
;

204 
	mru_oublock
;

206 
	mru_msg¢d
;

208 
	mru_msgrcv
;

210 
	mru_nsig«ls
;

214 
	mru_nvcsw
;

217 
	mru_nivcsw
;

221 
	#PRIO_MIN
 -20

	)

222 
	#PRIO_MAX
 20

	)

226 
	e__¥i‹ôy_which


228 
	mPRIO_PROCESS
 = 0,

229 
	#PRIO_PROCESS
 
PRIO_PROCESS


	)

230 
	mPRIO_PGRP
 = 1,

231 
	#PRIO_PGRP
 
PRIO_PGRP


	)

232 
	mPRIO_USER
 = 2

233 
	#PRIO_USER
 
PRIO_USER


	)

	@/usr/include/bits/select.h

19 #i‚de‡
_SYS_SELECT_H


23 
	~<bôs/w‹dsize.h
>

26 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

28 #i‡
__WORDSIZE
 == 64

29 
	#__FD_ZERO_STOS
 "°osq"

	)

31 
	#__FD_ZERO_STOS
 "°o¶"

	)

34 
	#__FD_ZERO
(
fd•
) \

36 
__d0
, 
__d1
; \

37 
__asm__
 
	`__vﬁ©ûe__
 ("˛d;Ñï; " 
__FD_ZERO_STOS
 \

38 : "=c" (
__d0
), "=D" (
__d1
) \

39 : "a" (0), "0" ( (
fd_£t
) \

40 /  (
__fd_mask
)), \

41 "1" (&
	`__FDS_BITS
 (
fd•
)[0]) \

43 } 0)

	)

49 
	#__FD_ZERO
(
£t
) \

51 
__i
; \

52 
fd_£t
 *
__¨r
 = (
£t
); \

53 
__i
 = 0; __ò<  (
fd_£t
Ë/  (
__fd_mask
); ++__i) \

54 
	`__FDS_BITS
 (
__¨r
)[
__i
] = 0; \

55 } 0)

	)

59 
	#__FD_SET
(
d
, 
£t
Ë(
	`__FDS_BITS
 (£t)[
	`__FDELT
 (d)] |
	`__FDMASK
 (d))

	)

60 
	#__FD_CLR
(
d
, 
£t
Ë(
	`__FDS_BITS
 (£t)[
	`__FDELT
 (d)] &~
	`__FDMASK
 (d))

	)

61 
	#__FD_ISSET
(
d
, 
£t
) \

62 ((
	`__FDS_BITS
 (
£t
)[
	`__FDELT
 (
d
)] & 
	`__FDMASK
 (d)Ë!0)

	)

	@/usr/include/bits/sigaction.h

20 #i‚de‡
_SIGNAL_H


25 
	ssiga˘i⁄


28 #ifde‡
__USE_POSIX199309


32 
__sigh™dÀr_t
 
	mß_h™dÀr
;

34 (*
	mß_siga˘i⁄
Ë(, 
	msigöfo_t
 *, *);

36 
	m__siga˘i⁄_h™dÀr
;

37 
	#ß_h™dÀr
 
__siga˘i⁄_h™dÀr
.
ß_h™dÀr


	)

38 
	#ß_siga˘i⁄
 
__siga˘i⁄_h™dÀr
.
ß_siga˘i⁄


	)

40 
__sigh™dÀr_t
 
	mß_h™dÀr
;

44 
__sig£t_t
 
	mß_mask
;

47 
	mß_Êags
;

50 (*
	mß_ª°‹î
) ();

54 
	#SA_NOCLDSTOP
 1

	)

55 
	#SA_NOCLDWAIT
 2

	)

56 
	#SA_SIGINFO
 4

	)

58 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_MISC


59 
	#SA_ONSTACK
 0x08000000

	)

61 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN2K8


62 
	#SA_RESTART
 0x10000000

	)

63 
	#SA_NODEFER
 0x40000000

	)

65 
	#SA_RESETHAND
 0x80000000

	)

67 #ifde‡
__USE_MISC


68 
	#SA_INTERRUPT
 0x20000000

	)

71 
	#SA_NOMASK
 
SA_NODEFER


	)

72 
	#SA_ONESHOT
 
SA_RESETHAND


	)

73 
	#SA_STACK
 
SA_ONSTACK


	)

77 
	#SIG_BLOCK
 0

	)

78 
	#SIG_UNBLOCK
 1

	)

79 
	#SIG_SETMASK
 2

	)

	@/usr/include/bits/sigcontext.h

19 #i‚de‡
_BITS_SIGCONTEXT_H


20 
	#_BITS_SIGCONTEXT_H
 1

	)

22 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_SYS_UCONTEXT_H


26 
	~<bôs/w‹dsize.h
>

28 
	s_Âªg


30 
	msignifiˇnd
[4];

31 
	mexp⁄ít
;

34 
	s_Âxªg


36 
	msignifiˇnd
[4];

37 
	mexp⁄ít
;

38 
	m∑ddög
[3];

41 
	s_xmmªg


43 
__uöt32_t
 
	mñemít
[4];

48 #i‡
__WORDSIZE
 == 32

50 
	s_Â°©e


53 
__uöt32_t
 
	mcw
;

54 
__uöt32_t
 
	msw
;

55 
__uöt32_t
 
	mèg
;

56 
__uöt32_t
 
	mùoff
;

57 
__uöt32_t
 
	mcs£l
;

58 
__uöt32_t
 
	md©aoff
;

59 
__uöt32_t
 
	md©a£l
;

60 
_Âªg
 
	m_°
[8];

61 
	m°©us
;

62 
	mmagic
;

65 
__uöt32_t
 
	m_fx§_ív
[6];

66 
__uöt32_t
 
	mmxc§
;

67 
__uöt32_t
 
	mª£rved
;

68 
_Âxªg
 
	m_fx§_°
[8];

69 
_xmmªg
 
	m_xmm
[8];

70 
__uöt32_t
 
	m∑ddög
[56];

73 #i‚de‡
sigc⁄ãxt_°ru˘


78 
	#sigc⁄ãxt_°ru˘
 
sigc⁄ãxt


	)

81 
	ssigc⁄ãxt


83 
	mgs
, 
	m__gsh
;

84 
	mfs
, 
	m__fsh
;

85 
	mes
, 
	m__esh
;

86 
	mds
, 
	m__dsh
;

87 
	medi
;

88 
	mesi
;

89 
	mebp
;

90 
	me•
;

91 
	mebx
;

92 
	medx
;

93 
	mecx
;

94 
	móx
;

95 
	må≠no
;

96 
	mîr
;

97 
	meù
;

98 
	mcs
, 
	m__csh
;

99 
	meÊags
;

100 
	me•_©_sig«l
;

101 
	mss
, 
	m__ssh
;

102 
_Â°©e
 * 
	mÂ°©e
;

103 
	mﬁdmask
;

104 
	m¸2
;

109 
	s_Â°©e


112 
__uöt16_t
 
	mcwd
;

113 
__uöt16_t
 
	mswd
;

114 
__uöt16_t
 
	m·w
;

115 
__uöt16_t
 
	mf›
;

116 
__uöt64_t
 
	mrù
;

117 
__uöt64_t
 
	mrdp
;

118 
__uöt32_t
 
	mmxc§
;

119 
__uöt32_t
 
	mmx¸_mask
;

120 
_Âxªg
 
	m_°
[8];

121 
_xmmªg
 
	m_xmm
[16];

122 
__uöt32_t
 
	m∑ddög
[24];

125 
	ssigc⁄ãxt


127 
	mr8
;

128 
	mr9
;

129 
	mr10
;

130 
	mr11
;

131 
	mr12
;

132 
	mr13
;

133 
	mr14
;

134 
	mr15
;

135 
	mrdi
;

136 
	mrsi
;

137 
	mrbp
;

138 
	mrbx
;

139 
	mrdx
;

140 
	møx
;

141 
	mrcx
;

142 
	mr•
;

143 
	mrù
;

144 
	meÊags
;

145 
	mcs
;

146 
	mgs
;

147 
	mfs
;

148 
	m__∑d0
;

149 
	mîr
;

150 
	må≠no
;

151 
	mﬁdmask
;

152 
	m¸2
;

153 
_Â°©e
 * 
	mÂ°©e
;

154 
	m__ª£rved1
 [8];

	@/usr/include/bits/siginfo.h

20 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
__√ed_sigöfo_t
 \

21 && !
deföed
 
	g__√ed_sigevít_t


25 
	~<bôs/w‹dsize.h
>

27 #i‡(!
deföed
 
__have_sigvÆ_t
 \

28 && (
deföed
 
	g_SIGNAL_H
 || deföed 
	g__√ed_sigöfo_t
 \

29 || 
deföed
 
	g__√ed_sigevít_t
))

30 
	#__have_sigvÆ_t
 1

	)

33 
	usigvÆ


35 
	msivÆ_öt
;

36 *
	msivÆ_±r
;

37 } 
	tsigvÆ_t
;

40 #i‡(!
deföed
 
__have_sigöfo_t
 \

41 && (
deföed
 
	g_SIGNAL_H
 || deföed 
	g__√ed_sigöfo_t
))

42 
	#__have_sigöfo_t
 1

	)

44 
	#__SI_MAX_SIZE
 128

	)

45 #i‡
__WORDSIZE
 == 64

46 
	#__SI_PAD_SIZE
 ((
__SI_MAX_SIZE
 /  ()Ë- 4)

	)

48 
	#__SI_PAD_SIZE
 ((
__SI_MAX_SIZE
 /  ()Ë- 3)

	)

51 
	ssigöfo


53 
	msi_signo
;

54 
	msi_î∫o
;

56 
	msi_code
;

60 
	m_∑d
[
__SI_PAD_SIZE
];

65 
__pid_t
 
	msi_pid
;

66 
__uid_t
 
	msi_uid
;

67 } 
	m_kûl
;

72 
	msi_tid
;

73 
	msi_ovîrun
;

74 
sigvÆ_t
 
	msi_sigvÆ
;

75 } 
	m_timî
;

80 
__pid_t
 
	msi_pid
;

81 
__uid_t
 
	msi_uid
;

82 
sigvÆ_t
 
	msi_sigvÆ
;

83 } 
	m_π
;

88 
__pid_t
 
	msi_pid
;

89 
__uid_t
 
	msi_uid
;

90 
	msi_°©us
;

91 
__˛ock_t
 
	msi_utime
;

92 
__˛ock_t
 
	msi_°ime
;

93 } 
	m_sigchld
;

98 *
	msi_addr
;

99 } 
	m_sigÁu…
;

104 
	msi_b™d
;

105 
	msi_fd
;

106 } 
	m_sigpﬁl
;

107 } 
	m_sifõlds
;

108 } 
	tsigöfo_t
;

112 
	#si_pid
 
_sifõlds
.
_kûl
.
si_pid


	)

113 
	#si_uid
 
_sifõlds
.
_kûl
.
si_uid


	)

114 
	#si_timîid
 
_sifõlds
.
_timî
.
si_tid


	)

115 
	#si_ovîrun
 
_sifõlds
.
_timî
.
si_ovîrun


	)

116 
	#si_°©us
 
_sifõlds
.
_sigchld
.
si_°©us


	)

117 
	#si_utime
 
_sifõlds
.
_sigchld
.
si_utime


	)

118 
	#si_°ime
 
_sifõlds
.
_sigchld
.
si_°ime


	)

119 
	#si_vÆue
 
_sifõlds
.
_π
.
si_sigvÆ


	)

120 
	#si_öt
 
_sifõlds
.
_π
.
si_sigvÆ
.
sivÆ_öt


	)

121 
	#si_±r
 
_sifõlds
.
_π
.
si_sigvÆ
.
sivÆ_±r


	)

122 
	#si_addr
 
_sifõlds
.
_sigÁu…
.
si_addr


	)

123 
	#si_b™d
 
_sifõlds
.
_sigpﬁl
.
si_b™d


	)

124 
	#si_fd
 
_sifõlds
.
_sigpﬁl
.
si_fd


	)

131 
	mSI_ASYNCNL
 = -60,

132 
	#SI_ASYNCNL
 
SI_ASYNCNL


	)

133 
	mSI_TKILL
 = -6,

134 
	#SI_TKILL
 
SI_TKILL


	)

135 
	mSI_SIGIO
,

136 
	#SI_SIGIO
 
SI_SIGIO


	)

137 
	mSI_ASYNCIO
,

138 
	#SI_ASYNCIO
 
SI_ASYNCIO


	)

139 
	mSI_MESGQ
,

140 
	#SI_MESGQ
 
SI_MESGQ


	)

141 
	mSI_TIMER
,

142 
	#SI_TIMER
 
SI_TIMER


	)

143 
	mSI_QUEUE
,

144 
	#SI_QUEUE
 
SI_QUEUE


	)

145 
	mSI_USER
,

146 
	#SI_USER
 
SI_USER


	)

147 
	mSI_KERNEL
 = 0x80

148 
	#SI_KERNEL
 
SI_KERNEL


	)

155 
	mILL_ILLOPC
 = 1,

156 
	#ILL_ILLOPC
 
ILL_ILLOPC


	)

157 
	mILL_ILLOPN
,

158 
	#ILL_ILLOPN
 
ILL_ILLOPN


	)

159 
	mILL_ILLADR
,

160 
	#ILL_ILLADR
 
ILL_ILLADR


	)

161 
	mILL_ILLTRP
,

162 
	#ILL_ILLTRP
 
ILL_ILLTRP


	)

163 
	mILL_PRVOPC
,

164 
	#ILL_PRVOPC
 
ILL_PRVOPC


	)

165 
	mILL_PRVREG
,

166 
	#ILL_PRVREG
 
ILL_PRVREG


	)

167 
	mILL_COPROC
,

168 
	#ILL_COPROC
 
ILL_COPROC


	)

169 
	mILL_BADSTK


170 
	#ILL_BADSTK
 
ILL_BADSTK


	)

176 
	mFPE_INTDIV
 = 1,

177 
	#FPE_INTDIV
 
FPE_INTDIV


	)

178 
	mFPE_INTOVF
,

179 
	#FPE_INTOVF
 
FPE_INTOVF


	)

180 
	mFPE_FLTDIV
,

181 
	#FPE_FLTDIV
 
FPE_FLTDIV


	)

182 
	mFPE_FLTOVF
,

183 
	#FPE_FLTOVF
 
FPE_FLTOVF


	)

184 
	mFPE_FLTUND
,

185 
	#FPE_FLTUND
 
FPE_FLTUND


	)

186 
	mFPE_FLTRES
,

187 
	#FPE_FLTRES
 
FPE_FLTRES


	)

188 
	mFPE_FLTINV
,

189 
	#FPE_FLTINV
 
FPE_FLTINV


	)

190 
	mFPE_FLTSUB


191 
	#FPE_FLTSUB
 
FPE_FLTSUB


	)

197 
	mSEGV_MAPERR
 = 1,

198 
	#SEGV_MAPERR
 
SEGV_MAPERR


	)

199 
	mSEGV_ACCERR


200 
	#SEGV_ACCERR
 
SEGV_ACCERR


	)

206 
	mBUS_ADRALN
 = 1,

207 
	#BUS_ADRALN
 
BUS_ADRALN


	)

208 
	mBUS_ADRERR
,

209 
	#BUS_ADRERR
 
BUS_ADRERR


	)

210 
	mBUS_OBJERR


211 
	#BUS_OBJERR
 
BUS_OBJERR


	)

217 
	mTRAP_BRKPT
 = 1,

218 
	#TRAP_BRKPT
 
TRAP_BRKPT


	)

219 
	mTRAP_TRACE


220 
	#TRAP_TRACE
 
TRAP_TRACE


	)

226 
	mCLD_EXITED
 = 1,

227 
	#CLD_EXITED
 
CLD_EXITED


	)

228 
	mCLD_KILLED
,

229 
	#CLD_KILLED
 
CLD_KILLED


	)

230 
	mCLD_DUMPED
,

231 
	#CLD_DUMPED
 
CLD_DUMPED


	)

232 
	mCLD_TRAPPED
,

233 
	#CLD_TRAPPED
 
CLD_TRAPPED


	)

234 
	mCLD_STOPPED
,

235 
	#CLD_STOPPED
 
CLD_STOPPED


	)

236 
	mCLD_CONTINUED


237 
	#CLD_CONTINUED
 
CLD_CONTINUED


	)

243 
	mPOLL_IN
 = 1,

244 
	#POLL_IN
 
POLL_IN


	)

245 
	mPOLL_OUT
,

246 
	#POLL_OUT
 
POLL_OUT


	)

247 
	mPOLL_MSG
,

248 
	#POLL_MSG
 
POLL_MSG


	)

249 
	mPOLL_ERR
,

250 
	#POLL_ERR
 
POLL_ERR


	)

251 
	mPOLL_PRI
,

252 
	#POLL_PRI
 
POLL_PRI


	)

253 
	mPOLL_HUP


254 
	#POLL_HUP
 
POLL_HUP


	)

257 #unde‡
__√ed_sigöfo_t


261 #i‡(
deföed
 
_SIGNAL_H
 || deföed 
__√ed_sigevít_t
) \

262 && !
deföed
 
	g__have_sigevít_t


263 
	#__have_sigevít_t
 1

	)

266 
	#__SIGEV_MAX_SIZE
 64

	)

267 #i‡
__WORDSIZE
 == 64

268 
	#__SIGEV_PAD_SIZE
 ((
__SIGEV_MAX_SIZE
 /  ()Ë- 4)

	)

270 
	#__SIGEV_PAD_SIZE
 ((
__SIGEV_MAX_SIZE
 /  ()Ë- 3)

	)

273 
	ssigevít


275 
sigvÆ_t
 
	msigev_vÆue
;

276 
	msigev_signo
;

277 
	msigev_nŸify
;

281 
	m_∑d
[
__SIGEV_PAD_SIZE
];

285 
__pid_t
 
	m_tid
;

289 (*
	m_fun˘i⁄
Ë(
	msigvÆ_t
);

290 *
	m_©åibuã
;

291 } 
	m_sigev_thªad
;

292 } 
	m_sigev_un
;

293 } 
	tsigevít_t
;

296 
	#sigev_nŸify_fun˘i⁄
 
_sigev_un
.
_sigev_thªad
.
_fun˘i⁄


	)

297 
	#sigev_nŸify_©åibuãs
 
_sigev_un
.
_sigev_thªad
.
_©åibuã


	)

302 
	mSIGEV_SIGNAL
 = 0,

303 
	#SIGEV_SIGNAL
 
SIGEV_SIGNAL


	)

304 
	mSIGEV_NONE
,

305 
	#SIGEV_NONE
 
SIGEV_NONE


	)

306 
	mSIGEV_THREAD
,

307 
	#SIGEV_THREAD
 
SIGEV_THREAD


	)

309 
	mSIGEV_THREAD_ID
 = 4

310 
	#SIGEV_THREAD_ID
 
SIGEV_THREAD_ID


	)

	@/usr/include/bits/signum.h

20 #ifdef 
_SIGNAL_H


23 
	#SIG_ERR
 ((
__sigh™dÀr_t
Ë-1Ë

	)

24 
	#SIG_DFL
 ((
__sigh™dÀr_t
Ë0Ë

	)

25 
	#SIG_IGN
 ((
__sigh™dÀr_t
Ë1Ë

	)

27 #ifde‡
__USE_UNIX98


28 
	#SIG_HOLD
 ((
__sigh™dÀr_t
Ë2Ë

	)

33 
	#SIGHUP
 1

	)

34 
	#SIGINT
 2

	)

35 
	#SIGQUIT
 3

	)

36 
	#SIGILL
 4

	)

37 
	#SIGTRAP
 5

	)

38 
	#SIGABRT
 6

	)

39 
	#SIGIOT
 6

	)

40 
	#SIGBUS
 7

	)

41 
	#SIGFPE
 8

	)

42 
	#SIGKILL
 9

	)

43 
	#SIGUSR1
 10

	)

44 
	#SIGSEGV
 11

	)

45 
	#SIGUSR2
 12

	)

46 
	#SIGPIPE
 13

	)

47 
	#SIGALRM
 14

	)

48 
	#SIGTERM
 15

	)

49 
	#SIGSTKFLT
 16

	)

50 
	#SIGCLD
 
SIGCHLD


	)

51 
	#SIGCHLD
 17

	)

52 
	#SIGCONT
 18

	)

53 
	#SIGSTOP
 19

	)

54 
	#SIGTSTP
 20

	)

55 
	#SIGTTIN
 21

	)

56 
	#SIGTTOU
 22

	)

57 
	#SIGURG
 23

	)

58 
	#SIGXCPU
 24

	)

59 
	#SIGXFSZ
 25

	)

60 
	#SIGVTALRM
 26

	)

61 
	#SIGPROF
 27

	)

62 
	#SIGWINCH
 28

	)

63 
	#SIGPOLL
 
SIGIO


	)

64 
	#SIGIO
 29

	)

65 
	#SIGPWR
 30

	)

66 
	#SIGSYS
 31

	)

67 
	#SIGUNUSED
 31

	)

69 
	#_NSIG
 65

	)

72 
	#SIGRTMIN
 (
	`__libc_cuºít_sigπmö
 ())

	)

73 
	#SIGRTMAX
 (
	`__libc_cuºít_sigπmax
 ())

	)

77 
	#__SIGRTMIN
 32

	)

78 
	#__SIGRTMAX
 (
_NSIG
 - 1)

	)

	@/usr/include/bits/sigset.h

21 #i‚def 
_SIGSET_H_ty≥s


22 
	#_SIGSET_H_ty≥s
 1

	)

24 
	t__sig_©omic_t
;

28 
	#_SIGSET_NWORDS
 (1024 / (8 *  ()))

	)

31 
	m__vÆ
[
_SIGSET_NWORDS
];

32 } 
	t__sig£t_t
;

43 #i‡!
deföed
 
_SIGSET_H_‚s
 && deföed 
_SIGNAL_H


44 
	#_SIGSET_H_‚s
 1

	)

46 #i‚de‡
_EXTERN_INLINE


47 
	#_EXTERN_INLINE
 
__exã∫_ölöe


	)

51 
	#__sigmask
(
sig
) \

52 (((Ë1Ë<< (((
sig
Ë- 1Ë% (8 *  ())))

	)

55 
	#__sigw‹d
(
sig
Ë(((sigË- 1Ë/ (8 *  ()))

	)

57 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

58 
	#__sigem±y£t
(
£t
) \

59 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

60 
sig£t_t
 *
__£t
 = (
£t
); \

61 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = 0; \

62 0; }))

	)

63 
	#__sigfûl£t
(
£t
) \

64 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

65 
sig£t_t
 *
__£t
 = (
£t
); \

66 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = ~0UL; \

67 0; }))

	)

69 #ifde‡
__USE_GNU


73 
	#__sigi£m±y£t
(
£t
) \

74 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

75 c⁄° 
sig£t_t
 *
__£t
 = (
£t
); \

76 
__ªt
 = 
__£t
->
__vÆ
[--
__˙t
]; \

77 !
__ªt
 && --
__˙t
 >= 0) \

78 
__ªt
 = 
__£t
->
__vÆ
[
__˙t
]; \

79 
__ªt
 =0; }))

	)

80 
	#__sig™d£t
(
de°
, 
À·
, 
right
) \

81 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

82 
sig£t_t
 *
__de°
 = (
de°
); \

83 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

84 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

85 --
__˙t
 >= 0) \

86 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

87 & 
__right
->
__vÆ
[
__˙t
]); \

88 0; }))

	)

89 
	#__sig‹£t
(
de°
, 
À·
, 
right
) \

90 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

91 
sig£t_t
 *
__de°
 = (
de°
); \

92 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

93 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

94 --
__˙t
 >= 0) \

95 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

96 | 
__right
->
__vÆ
[
__˙t
]); \

97 0; }))

	)

104 
__sigismembî
 (
__c⁄°
 
__sig£t_t
 *, );

105 
__sigadd£t
 (
__sig£t_t
 *, );

106 
__sigdñ£t
 (
__sig£t_t
 *, );

108 #ifde‡
__USE_EXTERN_INLINES


109 
	#__SIGSETFN
(
NAME
, 
BODY
, 
CONST
) \

110 
_EXTERN_INLINE
 \

111 
	`NAME
 (
CONST
 
__sig£t_t
 *
__£t
, 
__sig
) \

113 
__mask
 = 
	`__sigmask
 (
__sig
); \

114 
__w‹d
 = 
	`__sigw‹d
 (
__sig
); \

115  
BODY
; \

116 }

	)

118 
__SIGSETFN
 (
__sigismembî
, (
__£t
->
__vÆ
[
__w‹d
] & 
__mask
Ë? 1 : 0, 
__c⁄°
)

119 
__SIGSETFN
 (
__sigadd£t
, ((
__£t
->
__vÆ
[
__w‹d
] |
__mask
), 0), )

120 
__SIGSETFN
 (
__sigdñ£t
, ((
__£t
->
__vÆ
[
__w‹d
] &~
__mask
), 0), )

122 #unde‡
__SIGSETFN


	@/usr/include/bits/sigstack.h

20 #i‚de‡
_SIGNAL_H


26 
	ssig°ack


28 *
	mss_•
;

29 
	mss_⁄°ack
;

36 
	mSS_ONSTACK
 = 1,

37 
	#SS_ONSTACK
 
SS_ONSTACK


	)

38 
	mSS_DISABLE


39 
	#SS_DISABLE
 
SS_DISABLE


	)

43 
	#MINSIGSTKSZ
 2048

	)

46 
	#SIGSTKSZ
 8192

	)

50 
	ssigÆt°ack


52 *
	mss_•
;

53 
	mss_Êags
;

54 
size_t
 
	mss_size
;

55 } 
	t°ack_t
;

	@/usr/include/bits/sigthread.h

20 #i‚de‡
_BITS_SIGTHREAD_H


21 
	#_BITS_SIGTHREAD_H
 1

	)

23 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_PTHREAD_H


31 
	$±hªad_sigmask
 (
__how
,

32 
__c⁄°
 
__sig£t_t
 *
__ª°ri˘
 
__√wmask
,

33 
__sig£t_t
 *
__ª°ri˘
 
__ﬁdmask
)
__THROW
;

36 
	$±hªad_kûl
 (
±hªad_t
 
__thªadid
, 
__signo
Ë
__THROW
;

38 #ifde‡
__USE_GNU


40 
	$±hªad_sigqueue
 (
±hªad_t
 
__thªadid
, 
__signo
,

41 c⁄° 
sigvÆ
 
__vÆue
Ë
__THROW
;

	@/usr/include/bits/socket.h

21 #i‚de‡
__BITS_SOCKET_H


22 
	#__BITS_SOCKET_H


	)

24 #i‚de‡
_SYS_SOCKET_H


28 
	#__√ed_size_t


	)

29 
	~<°ddef.h
>

31 
	~<sys/ty≥s.h
>

34 #i‚de‡
__sockÀn_t_deföed


35 
__sockÀn_t
 
	tsockÀn_t
;

36 
	#__sockÀn_t_deföed


	)

40 
	e__sockë_ty≥


42 
	mSOCK_STREAM
 = 1,

44 
	#SOCK_STREAM
 
SOCK_STREAM


	)

45 
	mSOCK_DGRAM
 = 2,

47 
	#SOCK_DGRAM
 
SOCK_DGRAM


	)

48 
	mSOCK_RAW
 = 3,

49 
	#SOCK_RAW
 
SOCK_RAW


	)

50 
	mSOCK_RDM
 = 4,

51 
	#SOCK_RDM
 
SOCK_RDM


	)

52 
	mSOCK_SEQPACKET
 = 5,

54 
	#SOCK_SEQPACKET
 
SOCK_SEQPACKET


	)

55 
	mSOCK_DCCP
 = 6,

56 
	#SOCK_DCCP
 
SOCK_DCCP


	)

57 
	mSOCK_PACKET
 = 10,

60 
	#SOCK_PACKET
 
SOCK_PACKET


	)

65 
	mSOCK_CLOEXEC
 = 02000000,

67 
	#SOCK_CLOEXEC
 
SOCK_CLOEXEC


	)

68 
	mSOCK_NONBLOCK
 = 04000

70 
	#SOCK_NONBLOCK
 
SOCK_NONBLOCK


	)

74 
	#PF_UNSPEC
 0

	)

75 
	#PF_LOCAL
 1

	)

76 
	#PF_UNIX
 
PF_LOCAL


	)

77 
	#PF_FILE
 
PF_LOCAL


	)

78 
	#PF_INET
 2

	)

79 
	#PF_AX25
 3

	)

80 
	#PF_IPX
 4

	)

81 
	#PF_APPLETALK
 5

	)

82 
	#PF_NETROM
 6

	)

83 
	#PF_BRIDGE
 7

	)

84 
	#PF_ATMPVC
 8

	)

85 
	#PF_X25
 9

	)

86 
	#PF_INET6
 10

	)

87 
	#PF_ROSE
 11

	)

88 
	#PF_DEC√t
 12

	)

89 
	#PF_NETBEUI
 13

	)

90 
	#PF_SECURITY
 14

	)

91 
	#PF_KEY
 15

	)

92 
	#PF_NETLINK
 16

	)

93 
	#PF_ROUTE
 
PF_NETLINK


	)

94 
	#PF_PACKET
 17

	)

95 
	#PF_ASH
 18

	)

96 
	#PF_ECONET
 19

	)

97 
	#PF_ATMSVC
 20

	)

98 
	#PF_RDS
 21

	)

99 
	#PF_SNA
 22

	)

100 
	#PF_IRDA
 23

	)

101 
	#PF_PPPOX
 24

	)

102 
	#PF_WANPIPE
 25

	)

103 
	#PF_LLC
 26

	)

104 
	#PF_CAN
 29

	)

105 
	#PF_TIPC
 30

	)

106 
	#PF_BLUETOOTH
 31

	)

107 
	#PF_IUCV
 32

	)

108 
	#PF_RXRPC
 33

	)

109 
	#PF_ISDN
 34

	)

110 
	#PF_PHONET
 35

	)

111 
	#PF_IEEE802154
 36

	)

112 
	#PF_MAX
 37

	)

115 
	#AF_UNSPEC
 
PF_UNSPEC


	)

116 
	#AF_LOCAL
 
PF_LOCAL


	)

117 
	#AF_UNIX
 
PF_UNIX


	)

118 
	#AF_FILE
 
PF_FILE


	)

119 
	#AF_INET
 
PF_INET


	)

120 
	#AF_AX25
 
PF_AX25


	)

121 
	#AF_IPX
 
PF_IPX


	)

122 
	#AF_APPLETALK
 
PF_APPLETALK


	)

123 
	#AF_NETROM
 
PF_NETROM


	)

124 
	#AF_BRIDGE
 
PF_BRIDGE


	)

125 
	#AF_ATMPVC
 
PF_ATMPVC


	)

126 
	#AF_X25
 
PF_X25


	)

127 
	#AF_INET6
 
PF_INET6


	)

128 
	#AF_ROSE
 
PF_ROSE


	)

129 
	#AF_DEC√t
 
PF_DEC√t


	)

130 
	#AF_NETBEUI
 
PF_NETBEUI


	)

131 
	#AF_SECURITY
 
PF_SECURITY


	)

132 
	#AF_KEY
 
PF_KEY


	)

133 
	#AF_NETLINK
 
PF_NETLINK


	)

134 
	#AF_ROUTE
 
PF_ROUTE


	)

135 
	#AF_PACKET
 
PF_PACKET


	)

136 
	#AF_ASH
 
PF_ASH


	)

137 
	#AF_ECONET
 
PF_ECONET


	)

138 
	#AF_ATMSVC
 
PF_ATMSVC


	)

139 
	#AF_RDS
 
PF_RDS


	)

140 
	#AF_SNA
 
PF_SNA


	)

141 
	#AF_IRDA
 
PF_IRDA


	)

142 
	#AF_PPPOX
 
PF_PPPOX


	)

143 
	#AF_WANPIPE
 
PF_WANPIPE


	)

144 
	#AF_LLC
 
PF_LLC


	)

145 
	#AF_CAN
 
PF_CAN


	)

146 
	#AF_TIPC
 
PF_TIPC


	)

147 
	#AF_BLUETOOTH
 
PF_BLUETOOTH


	)

148 
	#AF_IUCV
 
PF_IUCV


	)

149 
	#AF_RXRPC
 
PF_RXRPC


	)

150 
	#AF_ISDN
 
PF_ISDN


	)

151 
	#AF_PHONET
 
PF_PHONET


	)

152 
	#AF_IEEE802154
 
PF_IEEE802154


	)

153 
	#AF_MAX
 
PF_MAX


	)

159 
	#SOL_RAW
 255

	)

160 
	#SOL_DECNET
 261

	)

161 
	#SOL_X25
 262

	)

162 
	#SOL_PACKET
 263

	)

163 
	#SOL_ATM
 264

	)

164 
	#SOL_AAL
 265

	)

165 
	#SOL_IRDA
 266

	)

168 
	#SOMAXCONN
 128

	)

171 
	~<bôs/sockaddr.h
>

174 
	ssockaddr


176 
__SOCKADDR_COMMON
 (
ß_
);

177 
	mß_d©a
[14];

183 
	#__ss_Æig¡y≥
 

	)

184 
	#_SS_SIZE
 128

	)

185 
	#_SS_PADSIZE
 (
_SS_SIZE
 - (2 *  (
__ss_Æig¡y≥
)))

	)

187 
	ssockaddr_°‹age


189 
__SOCKADDR_COMMON
 (
ss_
);

190 
__ss_Æig¡y≥
 
	m__ss_Æign
;

191 
	m__ss_∑ddög
[
_SS_PADSIZE
];

198 
	mMSG_OOB
 = 0x01,

199 
	#MSG_OOB
 
MSG_OOB


	)

200 
	mMSG_PEEK
 = 0x02,

201 
	#MSG_PEEK
 
MSG_PEEK


	)

202 
	mMSG_DONTROUTE
 = 0x04,

203 
	#MSG_DONTROUTE
 
MSG_DONTROUTE


	)

204 #ifde‡
__USE_GNU


206 
	mMSG_TRYHARD
 = 
MSG_DONTROUTE
,

207 
	#MSG_TRYHARD
 
MSG_DONTROUTE


	)

209 
	mMSG_CTRUNC
 = 0x08,

210 
	#MSG_CTRUNC
 
MSG_CTRUNC


	)

211 
	mMSG_PROXY
 = 0x10,

212 
	#MSG_PROXY
 
MSG_PROXY


	)

213 
	mMSG_TRUNC
 = 0x20,

214 
	#MSG_TRUNC
 
MSG_TRUNC


	)

215 
	mMSG_DONTWAIT
 = 0x40,

216 
	#MSG_DONTWAIT
 
MSG_DONTWAIT


	)

217 
	mMSG_EOR
 = 0x80,

218 
	#MSG_EOR
 
MSG_EOR


	)

219 
	mMSG_WAITALL
 = 0x100,

220 
	#MSG_WAITALL
 
MSG_WAITALL


	)

221 
	mMSG_FIN
 = 0x200,

222 
	#MSG_FIN
 
MSG_FIN


	)

223 
	mMSG_SYN
 = 0x400,

224 
	#MSG_SYN
 
MSG_SYN


	)

225 
	mMSG_CONFIRM
 = 0x800,

226 
	#MSG_CONFIRM
 
MSG_CONFIRM


	)

227 
	mMSG_RST
 = 0x1000,

228 
	#MSG_RST
 
MSG_RST


	)

229 
	mMSG_ERRQUEUE
 = 0x2000,

230 
	#MSG_ERRQUEUE
 
MSG_ERRQUEUE


	)

231 
	mMSG_NOSIGNAL
 = 0x4000,

232 
	#MSG_NOSIGNAL
 
MSG_NOSIGNAL


	)

233 
	mMSG_MORE
 = 0x8000,

234 
	#MSG_MORE
 
MSG_MORE


	)

235 
	mMSG_WAITFORONE
 = 0x10000,

236 
	#MSG_WAITFORONE
 
MSG_WAITFORONE


	)

238 
	mMSG_CMSG_CLOEXEC
 = 0x40000000

241 
	#MSG_CMSG_CLOEXEC
 
MSG_CMSG_CLOEXEC


	)

247 
	smsghdr


249 *
	mmsg_«me
;

250 
sockÀn_t
 
	mmsg_«mñí
;

252 
iovec
 *
	mmsg_iov
;

253 
size_t
 
	mmsg_iovÀn
;

255 *
	mmsg_c⁄åﬁ
;

256 
size_t
 
	mmsg_c⁄åﬁÀn
;

261 
	mmsg_Êags
;

264 #ifde‡
__USE_GNU


266 
	smmsghdr


268 
msghdr
 
	mmsg_hdr
;

269 
	mmsg_Àn
;

274 
	scmsghdr


276 
size_t
 
	mcmsg_Àn
;

281 
	mcmsg_Àvñ
;

282 
	mcmsg_ty≥
;

283 #i‡(!
deföed
 
__STRICT_ANSI__
 && 
__GNUC__
 >2Ë|| 
__STDC_VERSION__
 >= 199901L

284 
__exãnsi⁄__
 
__cmsg_d©a
 
	m__Êex¨r
;

289 #i‡(!
deföed
 
__STRICT_ANSI__
 && 
__GNUC__
 >2Ë|| 
__STDC_VERSION__
 >= 199901L

290 
	#CMSG_DATA
(
cmsg
Ë((cmsg)->
__cmsg_d©a
)

	)

292 
	#CMSG_DATA
(
cmsg
Ë((*Ë((
cmsghdr
 *Ë(cmsgË+ 1))

	)

294 
	#CMSG_NXTHDR
(
mhdr
, 
cmsg
Ë
	`__cmsg_nxthdr
 (mhdr, cmsg)

	)

295 
	#CMSG_FIRSTHDR
(
mhdr
) \

296 ((
size_t
Ë(
mhdr
)->
msg_c⁄åﬁÀn
 > (
cmsghdr
) \

297 ? (
cmsghdr
 *Ë(
mhdr
)->
msg_c⁄åﬁ
 : (cmsghd∏*Ë0)

	)

298 
	#CMSG_ALIGN
(
Àn
Ë((÷íË+  (
size_t
) - 1) \

299 & (
size_t
Ë~( (size_tË- 1))

	)

300 
	#CMSG_SPACE
(
Àn
Ë(
	`CMSG_ALIGN
 (len) \

301 + 
	`CMSG_ALIGN
 ( (
cmsghdr
)))

	)

302 
	#CMSG_LEN
(
Àn
Ë(
	`CMSG_ALIGN
 ( (
cmsghdr
)Ë+ (Àn))

	)

304 
cmsghdr
 *
	$__cmsg_nxthdr
 (
msghdr
 *
__mhdr
,

305 
cmsghdr
 *
__cmsg
Ë
__THROW
;

306 #ifde‡
__USE_EXTERN_INLINES


307 #i‚de‡
_EXTERN_INLINE


308 
	#_EXTERN_INLINE
 
__exã∫_ölöe


	)

310 
_EXTERN_INLINE
 
cmsghdr
 *

311 
	`__NTH
 (
	$__cmsg_nxthdr
 (
msghdr
 *
__mhdr
, 
cmsghdr
 *
__cmsg
))

313 i‡((
size_t
Ë
__cmsg
->
cmsg_Àn
 <  (
cmsghdr
))

317 
__cmsg
 = (
cmsghdr
 *) ((*) __cmsg

318 + 
	`CMSG_ALIGN
 (
__cmsg
->
cmsg_Àn
));

319 i‡((*Ë(
__cmsg
 + 1Ë> ((*Ë
__mhdr
->
msg_c⁄åﬁ


320 + 
__mhdr
->
msg_c⁄åﬁÀn
)

321 || ((*Ë
__cmsg
 + 
	`CMSG_ALIGN
 (__cmsg->
cmsg_Àn
)

322 > ((*Ë
__mhdr
->
msg_c⁄åﬁ
 + __mhdr->
msg_c⁄åﬁÀn
)))

325  
__cmsg
;

326 
	}
}

333 
	mSCM_RIGHTS
 = 0x01

334 
	#SCM_RIGHTS
 
SCM_RIGHTS


	)

335 #ifde‡
__USE_GNU


336 , 
	mSCM_CREDENTIALS
 = 0x02

337 
	#SCM_CREDENTIALS
 
SCM_CREDENTIALS


	)

341 #ifde‡
__USE_GNU


343 
	su¸ed


345 
pid_t
 
	mpid
;

346 
uid_t
 
	muid
;

347 
gid_t
 
	mgid
;

352 #i‡!
deföed
 
__USE_MISC
 && !deföed 
__USE_GNU


353 #i‚de‡
FIOGETOWN


354 
	#__SYS_SOCKET_H_undef_FIOGETOWN


	)

356 #i‚de‡
FIOSETOWN


357 
	#__SYS_SOCKET_H_undef_FIOSETOWN


	)

359 #i‚de‡
SIOCATMARK


360 
	#__SYS_SOCKET_H_undef_SIOCATMARK


	)

362 #i‚de‡
SIOCGPGRP


363 
	#__SYS_SOCKET_H_undef_SIOCGPGRP


	)

365 #i‚de‡
SIOCGSTAMP


366 
	#__SYS_SOCKET_H_undef_SIOCGSTAMP


	)

368 #i‚de‡
SIOCGSTAMPNS


369 
	#__SYS_SOCKET_H_undef_SIOCGSTAMPNS


	)

371 #i‚de‡
SIOCSPGRP


372 
	#__SYS_SOCKET_H_undef_SIOCSPGRP


	)

377 
	~<asm/sockë.h
>

379 #i‡!
deföed
 
__USE_MISC
 && !deföed 
__USE_GNU


380 #ifde‡
__SYS_SOCKET_H_undef_FIOGETOWN


381 #unde‡
__SYS_SOCKET_H_undef_FIOGETOWN


382 #unde‡
FIOGETOWN


384 #ifde‡
__SYS_SOCKET_H_undef_FIOSETOWN


385 #unde‡
__SYS_SOCKET_H_undef_FIOSETOWN


386 #unde‡
FIOSETOWN


388 #ifde‡
__SYS_SOCKET_H_undef_SIOCATMARK


389 #unde‡
__SYS_SOCKET_H_undef_SIOCATMARK


390 #unde‡
SIOCATMARK


392 #ifde‡
__SYS_SOCKET_H_undef_SIOCGPGRP


393 #unde‡
__SYS_SOCKET_H_undef_SIOCGPGRP


394 #unde‡
SIOCGPGRP


396 #ifde‡
__SYS_SOCKET_H_undef_SIOCGSTAMP


397 #unde‡
__SYS_SOCKET_H_undef_SIOCGSTAMP


398 #unde‡
SIOCGSTAMP


400 #ifde‡
__SYS_SOCKET_H_undef_SIOCGSTAMPNS


401 #unde‡
__SYS_SOCKET_H_undef_SIOCGSTAMPNS


402 #unde‡
SIOCGSTAMPNS


404 #ifde‡
__SYS_SOCKET_H_undef_SIOCSPGRP


405 #unde‡
__SYS_SOCKET_H_undef_SIOCSPGRP


406 #unde‡
SIOCSPGRP


411 
	slögî


413 
	ml_⁄off
;

414 
	ml_lögî
;

418 
__BEGIN_DECLS


425 
ªcvmmsg
 (
__fd
, 
mmsghdr
 *
__vmesßges
,

426 
__vÀn
, 
__Êags
,

427 
__c⁄°
 
time•ec
 *
__tmo
);

429 
	g__END_DECLS


	@/usr/include/bits/socket2.h

20 #i‚de‡
_SYS_SOCKET_H


24 
ssize_t
 
__ªcv_chk
 (
__fd
, *
__buf
, 
size_t
 
__n
, size_à
__buÊí
,

25 
__Êags
);

26 
ssize_t
 
__REDIRECT
 (
__ªcv_Æüs
, (
__fd
, *
__buf
, 
size_t
 
__n
,

27 
__Êags
), 
ªcv
);

28 
ssize_t
 
__REDIRECT
 (
__ªcv_chk_w¨n
,

29 (
__fd
, *
__buf
, 
size_t
 
__n
, size_à
__buÊí
,

30 
__Êags
), 
__ªcv_chk
)

31 
__w¨«âr
 ("recv called with biggerÜengthÅhan size of destination "

34 
__exã∫_Æways_ölöe
 
ssize_t


35 
	$ªcv
 (
__fd
, *
__buf
, 
size_t
 
__n
, 
__Êags
)

37 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

39 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

40  
	`__ªcv_chk
 (
__fd
, 
__buf
, 
__n
, 
	`__bos0
 (__buf), 
__Êags
);

42 i‡(
__n
 > 
	`__bos0
 (
__buf
))

43  
	`__ªcv_chk_w¨n
 (
__fd
, 
__buf
, 
__n
, 
	`__bos0
 (__buf), 
__Êags
);

45  
	`__ªcv_Æüs
 (
__fd
, 
__buf
, 
__n
, 
__Êags
);

46 
	}
}

48 
ssize_t
 
__ªcv‰om_chk
 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
,

49 
size_t
 
__buÊí
, 
__Êags
,

50 
__SOCKADDR_ARG
 
__addr
,

51 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
);

52 
ssize_t
 
__REDIRECT
 (
__ªcv‰om_Æüs
,

53 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
,

54 
__Êags
, 
__SOCKADDR_ARG
 
__addr
,

55 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
), 
ªcv‰om
);

56 
ssize_t
 
__REDIRECT
 (
__ªcv‰om_chk_w¨n
,

57 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
,

58 
size_t
 
__buÊí
, 
__Êags
,

59 
__SOCKADDR_ARG
 
__addr
,

60 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
), 
__ªcv‰om_chk
)

61 
__w¨«âr
 ("recvfrom called with biggerÜengthÅhan size of "

64 
__exã∫_Æways_ölöe
 
ssize_t


65 
	$ªcv‰om
 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
, 
__Êags
,

66 
__SOCKADDR_ARG
 
__addr
, 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
)

68 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

70 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

71  
	`__ªcv‰om_chk
 (
__fd
, 
__buf
, 
__n
, 
	`__bos0
 (__buf), 
__Êags
,

72 
__addr
, 
__addr_Àn
);

73 i‡(
__n
 > 
	`__bos0
 (
__buf
))

74  
	`__ªcv‰om_chk_w¨n
 (
__fd
, 
__buf
, 
__n
, 
	`__bos0
 (__buf), 
__Êags
,

75 
__addr
, 
__addr_Àn
);

77  
	`__ªcv‰om_Æüs
 (
__fd
, 
__buf
, 
__n
, 
__Êags
, 
__addr
, 
__addr_Àn
);

78 
	}
}

	@/usr/include/bits/stat.h

19 #i‡!
deföed
 
_SYS_STAT_H
 && !deföed 
_FCNTL_H


23 #i‚de‡
_BITS_STAT_H


24 
	#_BITS_STAT_H
 1

	)

27 
	#_STAT_VER_KERNEL
 0

	)

29 #i‡
__WORDSIZE
 == 32

30 
	#_STAT_VER_SVR4
 2

	)

31 
	#_STAT_VER_LINUX
 3

	)

34 
	#_MKNOD_VER_LINUX
 1

	)

35 
	#_MKNOD_VER_SVR4
 2

	)

36 
	#_MKNOD_VER
 
_MKNOD_VER_LINUX


	)

38 
	#_STAT_VER_LINUX
 1

	)

41 
	#_MKNOD_VER_LINUX
 0

	)

44 
	#_STAT_VER
 
_STAT_VER_LINUX


	)

46 
	s°©


48 
__dev_t
 
	m°_dev
;

49 #i‡
__WORDSIZE
 == 32

50 
	m__∑d1
;

52 #i‡
__WORDSIZE
 =64 || !
deföed
 
__USE_FILE_OFFSET64


53 
__öo_t
 
	m°_öo
;

55 
__öo_t
 
	m__°_öo
;

57 #i‡
__WORDSIZE
 == 32

58 
__mode_t
 
	m°_mode
;

59 
__∆ök_t
 
	m°_∆ök
;

61 
__∆ök_t
 
	m°_∆ök
;

62 
__mode_t
 
	m°_mode
;

64 
__uid_t
 
	m°_uid
;

65 
__gid_t
 
	m°_gid
;

66 #i‡
__WORDSIZE
 == 64

67 
	m__∑d0
;

69 
__dev_t
 
	m°_rdev
;

70 #i‡
__WORDSIZE
 == 32

71 
	m__∑d2
;

73 #i‡
__WORDSIZE
 =64 || !
deföed
 
__USE_FILE_OFFSET64


74 
__off_t
 
	m°_size
;

76 
__off64_t
 
	m°_size
;

78 
__blksize_t
 
	m°_blksize
;

79 #i‡
__WORDSIZE
 =64 || !
deföed
 
__USE_FILE_OFFSET64


80 
__blk˙t_t
 
	m°_blocks
;

82 
__blk˙t64_t
 
	m°_blocks
;

84 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN2K8


91 
time•ec
 
	m°_©im
;

92 
time•ec
 
	m°_mtim
;

93 
time•ec
 
	m°_˘im
;

94 
	#°_©ime
 
°_©im
.
tv_£c


	)

95 
	#°_mtime
 
°_mtim
.
tv_£c


	)

96 
	#°_˘ime
 
°_˘im
.
tv_£c


	)

98 
__time_t
 
	m°_©ime
;

99 
	m°_©imí£c
;

100 
__time_t
 
	m°_mtime
;

101 
	m°_mtimí£c
;

102 
__time_t
 
	m°_˘ime
;

103 
	m°_˘imí£c
;

105 #i‡
__WORDSIZE
 == 64

106 
	m__unu£d
[3];

108 #i‚de‡
__USE_FILE_OFFSET64


109 
	m__unu£d4
;

110 
	m__unu£d5
;

112 
__öo64_t
 
	m°_öo
;

117 #ifde‡
__USE_LARGEFILE64


119 
	s°©64


121 
__dev_t
 
	m°_dev
;

122 #i‡
__WORDSIZE
 == 64

123 
__öo64_t
 
	m°_öo
;

124 
__∆ök_t
 
	m°_∆ök
;

125 
__mode_t
 
	m°_mode
;

127 
	m__∑d1
;

128 
__öo_t
 
	m__°_öo
;

129 
__mode_t
 
	m°_mode
;

130 
__∆ök_t
 
	m°_∆ök
;

132 
__uid_t
 
	m°_uid
;

133 
__gid_t
 
	m°_gid
;

134 #i‡
__WORDSIZE
 == 64

135 
	m__∑d0
;

136 
__dev_t
 
	m°_rdev
;

137 
__off_t
 
	m°_size
;

139 
__dev_t
 
	m°_rdev
;

140 
	m__∑d2
;

141 
__off64_t
 
	m°_size
;

143 
__blksize_t
 
	m°_blksize
;

144 
__blk˙t64_t
 
	m°_blocks
;

145 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN2K8


152 
time•ec
 
	m°_©im
;

153 
time•ec
 
	m°_mtim
;

154 
time•ec
 
	m°_˘im
;

155 
	#°_©ime
 
°_©im
.
tv_£c


	)

156 
	#°_mtime
 
°_mtim
.
tv_£c


	)

157 
	#°_˘ime
 
°_˘im
.
tv_£c


	)

159 
__time_t
 
	m°_©ime
;

160 
	m°_©imí£c
;

161 
__time_t
 
	m°_mtime
;

162 
	m°_mtimí£c
;

163 
__time_t
 
	m°_˘ime
;

164 
	m°_˘imí£c
;

166 #i‡
__WORDSIZE
 == 64

167 
	m__unu£d
[3];

169 
__öo64_t
 
	m°_öo
;

175 
	#_STATBUF_ST_BLKSIZE


	)

176 
	#_STATBUF_ST_RDEV


	)

178 
	#_STATBUF_ST_NSEC


	)

182 
	#__S_IFMT
 0170000

	)

185 
	#__S_IFDIR
 0040000

	)

186 
	#__S_IFCHR
 0020000

	)

187 
	#__S_IFBLK
 0060000

	)

188 
	#__S_IFREG
 0100000

	)

189 
	#__S_IFIFO
 0010000

	)

190 
	#__S_IFLNK
 0120000

	)

191 
	#__S_IFSOCK
 0140000

	)

195 
	#__S_TYPEISMQ
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

196 
	#__S_TYPEISSEM
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

197 
	#__S_TYPEISSHM
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

201 
	#__S_ISUID
 04000

	)

202 
	#__S_ISGID
 02000

	)

203 
	#__S_ISVTX
 01000

	)

204 
	#__S_IREAD
 0400

	)

205 
	#__S_IWRITE
 0200

	)

206 
	#__S_IEXEC
 0100

	)

208 #ifde‡
__USE_ATFILE


209 
	#UTIME_NOW
 ((1»<< 30Ë- 1l)

	)

210 
	#UTIME_OMIT
 ((1»<< 30Ë- 2l)

	)

	@/usr/include/bits/stdio-ldbl.h

20 #i‚de‡
_STDIO_H


24 
__BEGIN_NAMESPACE_STD


25 
	$__LDBL_REDIR_DECL
 (
Ârötf
)

26 
	$__LDBL_REDIR_DECL
 (
¥ötf
)

27 
	$__LDBL_REDIR_DECL
 (
•rötf
)

28 
	$__LDBL_REDIR_DECL
 (
vÂrötf
)

29 
	$__LDBL_REDIR_DECL
 (
v¥ötf
)

30 
	$__LDBL_REDIR_DECL
 (
v•rötf
)

31 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

32 && !
deföed
 
__REDIRECT
 \

33 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

34 
	$__LDBL_REDIR1_DECL
 (
fsˇnf
, 
__∆dbl___isoc99_fsˇnf
)

35 
	$__LDBL_REDIR1_DECL
 (
sˇnf
, 
__∆dbl___isoc99_sˇnf
)

36 
	$__LDBL_REDIR1_DECL
 (
ssˇnf
, 
__∆dbl___isoc99_ssˇnf
)

38 
	$__LDBL_REDIR_DECL
 (
fsˇnf
)

39 
	$__LDBL_REDIR_DECL
 (
sˇnf
)

40 
	$__LDBL_REDIR_DECL
 (
ssˇnf
)

42 
__END_NAMESPACE_STD


44 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


45 
__BEGIN_NAMESPACE_C99


46 
	$__LDBL_REDIR_DECL
 (
¢¥ötf
)

47 
	$__LDBL_REDIR_DECL
 (
v¢¥ötf
)

48 
__END_NAMESPACE_C99


51 #ifdef 
__USE_ISOC99


52 
__BEGIN_NAMESPACE_C99


53 #i‡!
deföed
 
__USE_GNU
 && !deföed 
__REDIRECT
 \

54 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

55 
	$__LDBL_REDIR1_DECL
 (
vfsˇnf
, 
__∆dbl___isoc99_vfsˇnf
)

56 
	$__LDBL_REDIR1_DECL
 (
vsˇnf
, 
__∆dbl___isoc99_vsˇnf
)

57 
	$__LDBL_REDIR1_DECL
 (
vssˇnf
, 
__∆dbl___isoc99_vssˇnf
)

59 
	$__LDBL_REDIR_DECL
 (
vfsˇnf
)

60 
	$__LDBL_REDIR_DECL
 (
vssˇnf
)

61 
	$__LDBL_REDIR_DECL
 (
vsˇnf
)

63 
__END_NAMESPACE_C99


66 #ifde‡
__USE_GNU


67 
	$__LDBL_REDIR_DECL
 (
vd¥ötf
)

68 
	$__LDBL_REDIR_DECL
 (
d¥ötf
)

69 
	$__LDBL_REDIR_DECL
 (
va•rötf
)

70 
	$__LDBL_REDIR_DECL
 (
__a•rötf
)

71 
	$__LDBL_REDIR_DECL
 (
a•rötf
)

72 
	$__LDBL_REDIR_DECL
 (
ob°ack_¥ötf
)

73 
	$__LDBL_REDIR_DECL
 (
ob°ack_v¥ötf
)

76 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


77 
	$__LDBL_REDIR_DECL
 (
__•rötf_chk
)

78 
	$__LDBL_REDIR_DECL
 (
__v•rötf_chk
)

79 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


80 
	$__LDBL_REDIR_DECL
 (
__¢¥ötf_chk
)

81 
	$__LDBL_REDIR_DECL
 (
__v¢¥ötf_chk
)

83 #i‡
__USE_FORTIFY_LEVEL
 > 1

84 
	$__LDBL_REDIR_DECL
 (
__Ârötf_chk
)

85 
	$__LDBL_REDIR_DECL
 (
__¥ötf_chk
)

86 
	$__LDBL_REDIR_DECL
 (
__vÂrötf_chk
)

87 
	$__LDBL_REDIR_DECL
 (
__v¥ötf_chk
)

88 #ifde‡
__USE_GNU


89 
	$__LDBL_REDIR_DECL
 (
__a•rötf_chk
)

90 
	$__LDBL_REDIR_DECL
 (
__va•rötf_chk
)

91 
	$__LDBL_REDIR_DECL
 (
__d¥ötf_chk
)

92 
	$__LDBL_REDIR_DECL
 (
__vd¥ötf_chk
)

93 
	$__LDBL_REDIR_DECL
 (
__ob°ack_¥ötf_chk
)

94 
	$__LDBL_REDIR_DECL
 (
__ob°ack_v¥ötf_chk
)

	@/usr/include/bits/stdio.h

20 #i‚de‡
_STDIO_H


24 #i‚de‡
__exã∫_ölöe


25 
	#__STDIO_INLINE
 
ölöe


	)

27 
	#__STDIO_INLINE
 
__exã∫_ölöe


	)

31 #ifde‡
__USE_EXTERN_INLINES


34 #i‡!(
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe
)

36 
__STDIO_INLINE
 

37 
	$v¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

39  
	`vÂrötf
 (
°dout
, 
__fmt
, 
__¨g
);

40 
	}
}

44 
__STDIO_INLINE
 

45 
	$gëch¨
 ()

47  
	`_IO_gëc
 (
°dö
);

48 
	}
}

51 #ifde‡
__USE_MISC


53 
__STDIO_INLINE
 

54 
	$fgëc_u∆ocked
 (
FILE
 *
__Â
)

56  
	`_IO_gëc_u∆ocked
 (
__Â
);

57 
	}
}

61 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


63 
__STDIO_INLINE
 

64 
	$gëc_u∆ocked
 (
FILE
 *
__Â
)

66  
	`_IO_gëc_u∆ocked
 (
__Â
);

67 
	}
}

70 
__STDIO_INLINE
 

71 
	$gëch¨_u∆ocked
 ()

73  
	`_IO_gëc_u∆ocked
 (
°dö
);

74 
	}
}

79 
__STDIO_INLINE
 

80 
	$putch¨
 (
__c
)

82  
	`_IO_putc
 (
__c
, 
°dout
);

83 
	}
}

86 #ifde‡
__USE_MISC


88 
__STDIO_INLINE
 

89 
	$Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

91  
	`_IO_putc_u∆ocked
 (
__c
, 
__°ªam
);

92 
	}
}

96 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


98 
__STDIO_INLINE
 

99 
	$putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

101  
	`_IO_putc_u∆ocked
 (
__c
, 
__°ªam
);

102 
	}
}

105 
__STDIO_INLINE
 

106 
	$putch¨_u∆ocked
 (
__c
)

108  
	`_IO_putc_u∆ocked
 (
__c
, 
°dout
);

109 
	}
}

113 #ifdef 
__USE_GNU


115 
__STDIO_INLINE
 
_IO_ssize_t


116 
	$gëlöe
 (**
__löïå
, 
size_t
 *
__n
, 
FILE
 *
__°ªam
)

118  
	`__gëdñim
 (
__löïå
, 
__n
, '\n', 
__°ªam
);

119 
	}
}

123 #ifde‡
__USE_MISC


125 
__STDIO_INLINE
 

126 
__NTH
 (
	$„of_u∆ocked
 (
FILE
 *
__°ªam
))

128  
	`_IO_„of_u∆ocked
 (
__°ªam
);

129 
	}
}

132 
__STDIO_INLINE
 

133 
__NTH
 (
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
))

135  
	`_IO_„º‹_u∆ocked
 (
__°ªam
);

136 
	}
}

142 #i‡
deföed
 
__USE_MISC
 && deföed 
__GNUC__
 && deföed 
__OPTIMIZE__
 \

143 && !
deföed
 
	g__˝lu•lus


145 
	#‰ód_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

146 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

147 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

148 && (
size_t
Ë(
size
) != 0) \

149 ? ({ *
__±r
 = (*Ë(
±r
); \

150 
FILE
 *
__°ªam
 = (
°ªam
); \

151 
size_t
 
__˙t
; \

152 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

153 
__˙t
 > 0; --__cnt) \

155 
__c
 = 
	`_IO_gëc_u∆ocked
 (
__°ªam
); \

156 i‡(
__c
 =
EOF
) \

158 *
__±r
++ = 
__c
; \

160 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

161 / (
size_t
Ë(
size
); }) \

162 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

163 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

165 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

166 (Ë(
n
), (
size_t
) 0) \

167 : 
	`‰ód_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

169 
	#fwrôe_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

170 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

171 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

172 && (
size_t
Ë(
size
) != 0) \

173 ? ({ c⁄° *
__±r
 = (c⁄° *Ë(
±r
); \

174 
FILE
 *
__°ªam
 = (
°ªam
); \

175 
size_t
 
__˙t
; \

176 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

177 
__˙t
 > 0; --__cnt) \

178 i‡(
	`_IO_putc_u∆ocked
 (*
__±r
++, 
__°ªam
Ë=
EOF
) \

180 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

181 / (
size_t
Ë(
size
); }) \

182 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

183 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

185 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

186 (Ë(
n
), (
size_t
) 0) \

187 : 
	`fwrôe_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

191 #unde‡
__STDIO_INLINE


	@/usr/include/bits/stdio2.h

20 #i‚de‡
_STDIO_H


24 
	$__•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

25 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

26 
	$__v•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

27 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

28 
_G_va_li°
 
__≠
Ë
__THROW
;

30 #ifde‡
__va_¨g_∑ck


31 
__exã∫_Æways_ölöe
 

32 
	`__NTH
 (
	$•rötf
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__fmt
, ...))

34  
	`__buûtö___•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

35 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_¨g_∑ck
 ());

36 
	}
}

37 #ñi‡!
deföed
 
__˝lu•lus


38 
	#•rötf
(
°r
, ...) \

39 
	`__buûtö___•rötf_chk
 (
°r
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

40 
__VA_ARGS__
)

	)

43 
__exã∫_Æways_ölöe
 

44 
__NTH
 (
	$v•rötf
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__fmt
,

45 
_G_va_li°
 
__≠
))

47  
	`__buûtö___v•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

48 
	`__bos
 (
__s
), 
__fmt
, 
__≠
);

49 
	}
}

51 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


53 
	$__¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

54 
size_t
 
__¶í
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

55 ...Ë
__THROW
;

56 
	$__v¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

57 
size_t
 
__¶í
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

58 
_G_va_li°
 
__≠
Ë
__THROW
;

60 #ifde‡
__va_¨g_∑ck


61 
__exã∫_Æways_ölöe
 

62 
	`__NTH
 (
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

63 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...))

65  
	`__buûtö___¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

66 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_¨g_∑ck
 ());

67 
	}
}

68 #ñi‡!
deföed
 
__˝lu•lus


69 
	#¢¥ötf
(
°r
, 
Àn
, ...) \

70 
	`__buûtö___¢¥ötf_chk
 (
°r
, 
Àn
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

71 
__VA_ARGS__
)

	)

74 
__exã∫_Æways_ölöe
 

75 
__NTH
 (
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

76 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
))

78  
	`__buûtö___v¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

79 
	`__bos
 (
__s
), 
__fmt
, 
__≠
);

80 
	}
}

84 #i‡
__USE_FORTIFY_LEVEL
 > 1

86 
__Ârötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

87 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

88 
__¥ötf_chk
 (
__Êag
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

89 
__vÂrötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

90 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__≠
);

91 
__v¥ötf_chk
 (
__Êag
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

92 
_G_va_li°
 
__≠
);

94 #ifde‡
__va_¨g_∑ck


95 
__exã∫_Æways_ölöe
 

96 
	$Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__c⁄°
 *__ª°ri˘ 
__fmt
, ...)

98  
	`__Ârötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

99 
	`__va_¨g_∑ck
 ());

100 
	}
}

102 
__exã∫_Æways_ölöe
 

103 
	$¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

105  
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

106 
	}
}

107 #ñi‡!
deföed
 
__˝lu•lus


108 
	#¥ötf
(...) \

109 
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

110 
	#Ârötf
(
°ªam
, ...) \

111 
	`__Ârötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

114 
__exã∫_Æways_ölöe
 

115 
	$v¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

117 #ifde‡
__USE_EXTERN_INLINES


118  
	`__vÂrötf_chk
 (
°dout
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

120  
	`__v¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

122 
	}
}

124 
__exã∫_Æways_ölöe
 

125 
	$vÂrötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

126 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

128  
	`__vÂrötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

129 
	}
}

131 #ifde‡
__USE_GNU


133 
	$__a•rötf_chk
 (**
__ª°ri˘
 
__±r
, 
__Êag
,

134 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

135 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 3, 4))Ë
__wur
;

136 
	$__va•rötf_chk
 (**
__ª°ri˘
 
__±r
, 
__Êag
,

137 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

138 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 3, 0))Ë
__wur
;

139 
	$__d¥ötf_chk
 (
__fd
, 
__Êag
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
,

140 ...Ë
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

141 
	$__vd¥ötf_chk
 (
__fd
, 
__Êag
,

142 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

143 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

144 
	$__ob°ack_¥ötf_chk
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

145 
__Êag
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

147 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

148 
	$__ob°ack_v¥ötf_chk
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

149 
__Êag
,

150 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

151 
_G_va_li°
 
__¨gs
)

152 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

154 #ifde‡
__va_¨g_∑ck


155 
__exã∫_Æways_ölöe
 

156 
	`__NTH
 (
	$a•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__fmt
, ...))

158  
	`__a•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

159 
	`__va_¨g_∑ck
 ());

160 
	}
}

162 
__exã∫_Æways_ölöe
 

163 
__NTH
 (
	$__a•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__fmt
,

166  
	`__a•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

167 
	`__va_¨g_∑ck
 ());

168 
	}
}

170 
__exã∫_Æways_ölöe
 

171 
	$d¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

173  
	`__d¥ötf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

174 
	`__va_¨g_∑ck
 ());

175 
	}
}

177 
__exã∫_Æways_ölöe
 

178 
__NTH
 (
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

179 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...))

181  
	`__ob°ack_¥ötf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

182 
	`__va_¨g_∑ck
 ());

183 
	}
}

184 #ñi‡!
deföed
 
__˝lu•lus


185 
	#a•rötf
(
±r
, ...) \

186 
	`__a•rötf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

187 
	#__a•rötf
(
±r
, ...) \

188 
	`__a•rötf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

189 
	#d¥ötf
(
fd
, ...) \

190 
	`__d¥ötf_chk
 (
fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

191 
	#ob°ack_¥ötf
(
ob°ack
, ...) \

192 
	`__ob°ack_¥ötf_chk
 (
ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

195 
__exã∫_Æways_ölöe
 

196 
__NTH
 (
	$va•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__fmt
,

197 
_G_va_li°
 
__≠
))

199  
	`__va•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

200 
	}
}

202 
__exã∫_Æways_ölöe
 

203 
	$vd¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

205  
	`__vd¥ötf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

206 
	}
}

208 
__exã∫_Æways_ölöe
 

209 
__NTH
 (
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

210 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
))

212  
	`__ob°ack_v¥ötf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

213 
__≠
);

214 
	}
}

220 *
	$__gës_chk
 (*
__°r
, 
size_t
Ë
__wur
;

221 *
	`__REDIRECT
 (
__gës_w¨n
, (*
__°r
), 
gës
)

222 
__wur
 
	`__w¨«âr
 ("please use fgets or getline instead, gets can't "

225 
__exã∫_Æways_ölöe
 
__wur
 *

226 
	$gës
 (*
__°r
)

228 i‡(
	`__bos
 (
__°r
Ë!(
size_t
) -1)

229  
	`__gës_chk
 (
__°r
, 
	`__bos
 (__str));

230  
	`__gës_w¨n
 (
__°r
);

231 
	}
}

233 *
	$__fgës_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

234 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

235 *
	`__REDIRECT
 (
__fgës_Æüs
,

236 (*
__ª°ri˘
 
__s
, 
__n
,

237 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës
Ë
__wur
;

238 *
	`__REDIRECT
 (
__fgës_chk_w¨n
,

239 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

240 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_chk
)

241 
__wur
 
	`__w¨«âr
 ("fgets called with bigger sizeÅhanÜength "

244 
__exã∫_Æways_ölöe
 
__wur
 *

245 
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

247 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

249 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

250  
	`__fgës_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

252 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
))

253  
	`__fgës_chk_w¨n
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

255  
	`__fgës_Æüs
 (
__s
, 
__n
, 
__°ªam
);

256 
	}
}

258 
size_t
 
	$__‰ód_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

259 
size_t
 
__size
, size_à
__n
,

260 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

261 
size_t
 
	`__REDIRECT
 (
__‰ód_Æüs
,

262 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

263 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

264 
‰ód
Ë
__wur
;

265 
size_t
 
	`__REDIRECT
 (
__‰ód_chk_w¨n
,

266 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

267 
size_t
 
__size
, size_à
__n
,

268 
FILE
 *
__ª°ri˘
 
__°ªam
),

269 
__‰ód_chk
)

270 
__wur
 
	`__w¨«âr
 ("fread called with bigger size *ÇmembÅhanÜength "

273 
__exã∫_Æways_ölöe
 
__wur
 
size_t


274 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

275 
FILE
 *
__ª°ri˘
 
__°ªam
)

277 i‡(
	`__bos0
 (
__±r
Ë!(
size_t
) -1)

279 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
)

280 || !
	`__buûtö_c⁄°™t_p
 (
__n
)

281 || (
__size
 | 
__n
Ë>(((
size_t
) 1) << (8 *  (size_t) / 2)))

282  
	`__‰ód_chk
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
, 
__°ªam
);

284 i‡(
__size
 * 
__n
 > 
	`__bos0
 (
__±r
))

285  
	`__‰ód_chk_w¨n
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
, 
__°ªam
);

287  
	`__‰ód_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

288 
	}
}

290 #ifde‡
__USE_GNU


291 *
	$__fgës_u∆ocked_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
,

292 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

293 *
	`__REDIRECT
 (
__fgës_u∆ocked_Æüs
,

294 (*
__ª°ri˘
 
__s
, 
__n
,

295 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës_u∆ocked
Ë
__wur
;

296 *
	`__REDIRECT
 (
__fgës_u∆ocked_chk_w¨n
,

297 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

298 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_u∆ocked_chk
)

299 
__wur
 
	`__w¨«âr
 ("fgets_unlocked called with bigger sizeÅhanÜength "

302 
__exã∫_Æways_ölöe
 
__wur
 *

303 
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

305 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

307 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

308  
	`__fgës_u∆ocked_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

310 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
))

311  
	`__fgës_u∆ocked_chk_w¨n
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

313  
	`__fgës_u∆ocked_Æüs
 (
__s
, 
__n
, 
__°ªam
);

314 
	}
}

317 #ifde‡
__USE_MISC


318 #unde‡
‰ód_u∆ocked


319 
size_t
 
	$__‰ód_u∆ocked_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

320 
size_t
 
__size
, size_à
__n
,

321 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

322 
size_t
 
	`__REDIRECT
 (
__‰ód_u∆ocked_Æüs
,

323 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

324 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

325 
‰ód_u∆ocked
Ë
__wur
;

326 
size_t
 
	`__REDIRECT
 (
__‰ód_u∆ocked_chk_w¨n
,

327 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

328 
size_t
 
__size
, size_à
__n
,

329 
FILE
 *
__ª°ri˘
 
__°ªam
),

330 
__‰ód_u∆ocked_chk
)

331 
__wur
 
	`__w¨«âr
 ("fread_unlocked called with bigger size *ÇmembÅhan "

334 
__exã∫_Æways_ölöe
 
__wur
 
size_t


335 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

336 
FILE
 *
__ª°ri˘
 
__°ªam
)

338 i‡(
	`__bos0
 (
__±r
Ë!(
size_t
) -1)

340 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
)

341 || !
	`__buûtö_c⁄°™t_p
 (
__n
)

342 || (
__size
 | 
__n
Ë>(((
size_t
) 1) << (8 *  (size_t) / 2)))

343  
	`__‰ód_u∆ocked_chk
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
,

344 
__°ªam
);

346 i‡(
__size
 * 
__n
 > 
	`__bos0
 (
__±r
))

347  
	`__‰ód_u∆ocked_chk_w¨n
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
,

348 
__°ªam
);

351 #ifde‡
__USE_EXTERN_INLINES


352 i‡(
	`__buûtö_c⁄°™t_p
 (
__size
)

353 && 
	`__buûtö_c⁄°™t_p
 (
__n
)

354 && (
__size
 | 
__n
Ë< (((
size_t
) 1) << (8 *  (size_t) / 2))

355 && 
__size
 * 
__n
 <= 8)

357 
size_t
 
__˙t
 = 
__size
 * 
__n
;

358 *
__˝å
 = (*Ë
__±r
;

359 i‡(
__˙t
 == 0)

362 ; 
__˙t
 > 0; --__cnt)

364 
__c
 = 
	`_IO_gëc_u∆ocked
 (
__°ªam
);

365 i‡(
__c
 =
EOF
)

367 *
__˝å
++ = 
__c
;

369  (
__˝å
 - (*Ë
__±r
Ë/ 
__size
;

372  
	`__‰ód_u∆ocked_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

373 
	}
}

	@/usr/include/bits/stdio_lim.h

19 #i‡!
deföed
 
_STDIO_H
 && !deföed 
__√ed_FOPEN_MAX
 && !deföed 
__√ed_IOV_MAX


23 #ifde‡
_STDIO_H


24 
	#L_tm≤am
 20

	)

25 
	#TMP_MAX
 238328

	)

26 
	#FILENAME_MAX
 4096

	)

28 #ifde‡
__USE_POSIX


29 
	#L_˘îmid
 9

	)

30 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


31 
	#L_cu£rid
 9

	)

36 #i‡
deföed
 
__√ed_FOPEN_MAX
 || deföed 
_STDIO_H


37 #unde‡
FOPEN_MAX


38 
	#FOPEN_MAX
 16

	)

41 #i‡
deföed
 
__√ed_IOV_MAX
 && !deföed 
IOV_MAX


42 
	#IOV_MAX
 1024

	)

	@/usr/include/bits/stdlib-ldbl.h

20 #i‚de‡
_STDLIB_H


24 #ifdef 
__USE_ISOC99


25 
__BEGIN_NAMESPACE_C99


26 
	$__LDBL_REDIR1_DECL
 (
°πﬁd
, 
°πod
)

27 
__END_NAMESPACE_C99


30 #ifde‡
__USE_GNU


31 
	$__LDBL_REDIR1_DECL
 (
°πﬁd_l
, 
°πod_l
)

34 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


35 #ifde‡
__USE_MISC


36 
	$__LDBL_REDIR1_DECL
 (
qecvt
, 
ecvt
)

37 
	$__LDBL_REDIR1_DECL
 (
qfcvt
, 
fcvt
)

38 
	$__LDBL_REDIR1_DECL
 (
qgcvt
, 
gcvt
)

39 
	$__LDBL_REDIR1_DECL
 (
qecvt_r
, 
ecvt_r
)

40 
	$__LDBL_REDIR1_DECL
 (
qfcvt_r
, 
fcvt_r
)

	@/usr/include/bits/stdlib.h

20 #i‚de‡
_STDLIB_H


24 *
	$__ªÆ∑th_chk
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

25 *
__ª°ri˘
 
__ªsﬁved
,

26 
size_t
 
__ªsﬁvedÀn
Ë
__THROW
 
__wur
;

27 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_Æüs
,

28 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

29 *
__ª°ri˘
 
__ªsﬁved
), 
ªÆ∑th
Ë
__wur
;

30 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_chk_w¨n
,

31 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

32 *
__ª°ri˘
 
__ªsﬁved
,

33 
size_t
 
__ªsﬁvedÀn
), 
__ªÆ∑th_chk
Ë
__wur


34 
	`__w¨«âr
 ("secondárgument ofÑealpath must beÉither NULL orát "

37 
__exã∫_Æways_ölöe
 
__wur
 *

38 
	`__NTH
 (
	$ªÆ∑th
 (
__c⁄°
 *
__ª°ri˘
 
__«me
, *__ª°ri˘ 
__ªsﬁved
))

40 i‡(
	`__bos
 (
__ªsﬁved
Ë!(
size_t
) -1)

42 #i‡
deföed
 
_LIBC_LIMITS_H_
 && deföed 
PATH_MAX


43 i‡(
	`__bos
 (
__ªsﬁved
Ë< 
PATH_MAX
)

44  
	`__ªÆ∑th_chk_w¨n
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

46  
	`__ªÆ∑th_chk
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

49  
	`__ªÆ∑th_Æüs
 (
__«me
, 
__ªsﬁved
);

50 
	}
}

53 
	$__±¢ame_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

54 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

55 
	`__REDIRECT_NTH
 (
__±¢ame_r_Æüs
, (
__fd
, *
__buf
,

56 
size_t
 
__buÊí
), 
±¢ame_r
)

57 
	`__n⁄nuŒ
 ((2));

58 
	`__REDIRECT_NTH
 (
__±¢ame_r_chk_w¨n
,

59 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

60 
size_t
 
__ƒól
), 
__±¢ame_r_chk
)

61 
	`__n⁄nuŒ
 ((2)Ë
	`__w¨«âr
 ("ptsname_r called with buflen biggerÅhan "

64 
__exã∫_Æways_ölöe
 

65 
	`__NTH
 (
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

67 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

69 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

70  
	`__±¢ame_r_chk
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

71 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

72  
	`__±¢ame_r_chk_w¨n
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

74  
	`__±¢ame_r_Æüs
 (
__fd
, 
__buf
, 
__buÊí
);

75 
	}
}

78 
	$__w˘omb_chk
 (*
__s
, 
wch¨_t
 
__wch¨
, 
size_t
 
__buÊí
)

79 
__THROW
 
__wur
;

80 
	`__REDIRECT_NTH
 (
__w˘omb_Æüs
, (*
__s
, 
wch¨_t
 
__wch¨
),

81 
w˘omb
Ë
__wur
;

83 
__exã∫_Æways_ölöe
 
__wur
 

84 
	`__NTH
 (
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
))

89 
	#__STDLIB_MB_LEN_MAX
 16

	)

90 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__STDLIB_MB_LEN_MAX


93 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 && 
__STDLIB_MB_LEN_MAX
 > __bos (__s))

94  
	`__w˘omb_chk
 (
__s
, 
__wch¨
, 
	`__bos
 (__s));

95  
	`__w˘omb_Æüs
 (
__s
, 
__wch¨
);

96 
	}
}

99 
size_t
 
	$__mb°owcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

100 
__c⁄°
 *
__ª°ri˘
 
__§c
,

101 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

102 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_Æüs
,

103 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

104 
__c⁄°
 *
__ª°ri˘
 
__§c
,

105 
size_t
 
__Àn
), 
mb°owcs
);

106 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_chk_w¨n
,

107 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

108 
__c⁄°
 *
__ª°ri˘
 
__§c
,

109 
size_t
 
__Àn
, size_à
__d°Àn
), 
__mb°owcs_chk
)

110 
	`__w¨«âr
 ("mbstowcs called with dst buffer smallerÅhanÜen "

113 
__exã∫_Æways_ölöe
 
size_t


114 
	`__NTH
 (
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

115 
size_t
 
__Àn
))

117 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

119 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

120  
	`__mb°owcs_chk
 (
__d°
, 
__§c
, 
__Àn
,

121 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

123 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

124  
	`__mb°owcs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
,

125 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

127  
	`__mb°owcs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

128 
	}
}

131 
size_t
 
	$__wc°ombs_chk
 (*
__ª°ri˘
 
__d°
,

132 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

133 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

134 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_Æüs
,

135 (*
__ª°ri˘
 
__d°
,

136 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

137 
size_t
 
__Àn
), 
wc°ombs
);

138 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_chk_w¨n
,

139 (*
__ª°ri˘
 
__d°
,

140 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

141 
size_t
 
__Àn
, size_à
__d°Àn
), 
__wc°ombs_chk
)

142 
	`__w¨«âr
 ("wcstombs called with dst buffer smallerÅhanÜen");

144 
__exã∫_Æways_ölöe
 
size_t


145 
	`__NTH
 (
	$wc°ombs
 (*
__ª°ri˘
 
__d°
, 
__c⁄°
 
wch¨_t
 *__ª°ri˘ 
__§c
,

146 
size_t
 
__Àn
))

148 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

150 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

151  
	`__wc°ombs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

152 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

153  
	`__wc°ombs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

155  
	`__wc°ombs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

156 
	}
}

	@/usr/include/bits/string.h

20 #i‚de‡
_STRING_H


26 
	#_STRING_ARCH_u«lig√d
 1

	)

	@/usr/include/bits/string2.h

21 #i‚de‡
_STRING_H


25 #i‡!
deföed
 
__NO_STRING_INLINES
 && !deföed 
__BOUNDED_POINTERS__


42 #i‚de‡
__STRING_INLINE


43 #ifde‡
__˝lu•lus


44 
	#__STRING_INLINE
 
ölöe


	)

46 
	#__STRING_INLINE
 
__exã∫_ölöe


	)

50 #i‡
_STRING_ARCH_u«lig√d


52 
	~<ídün.h
>

53 
	~<bôs/ty≥s.h
>

55 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


56 
	#__STRING2_SMALL_GET16
(
§c
, 
idx
) \

57 (((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1] << 8 \

58 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
])

	)

59 
	#__STRING2_SMALL_GET32
(
§c
, 
idx
) \

60 (((((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 3] << 8 \

61 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

62 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

63 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
])

	)

65 
	#__STRING2_SMALL_GET16
(
§c
, 
idx
) \

66 (((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
] << 8 \

67 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1])

	)

68 
	#__STRING2_SMALL_GET32
(
§c
, 
idx
) \

69 (((((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
] << 8 \

70 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

71 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

72 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 3])

	)

77 
	#__STRING2_COPY_TYPE
(
N
) \

78 °ru˘ { 
__¨r
[
N
]; } \

79 
	t__©åibuã__
 ((
	t__∑cked__
)Ë
	t__STRING2_COPY_ARR
##
	tN


	)

80 
	t__STRING2_COPY_TYPE
 (2);

81 
__STRING2_COPY_TYPE
 (3);

82 
__STRING2_COPY_TYPE
 (4);

83 
__STRING2_COPY_TYPE
 (5);

84 
__STRING2_COPY_TYPE
 (6);

85 
__STRING2_COPY_TYPE
 (7);

86 
__STRING2_COPY_TYPE
 (8);

87 #unde‡
__STRING2_COPY_TYPE


93 
	#__°rög2_1b±r_p
(
__x
) \

94 ((
size_t
)(c⁄° *)((
__x
Ë+ 1Ë- (size_t)(c⁄° *)(__xË=1)

	)

97 #i‡!
deföed
 
_HAVE_STRING_ARCH_mem£t


98 #i‡!
__GNUC_PREREQ
 (3, 0)

99 #i‡
_STRING_ARCH_u«lig√d


100 
	#mem£t
(
s
, 
c
, 
n
) \

101 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) && (n) <= 16 \

102 ? ((
n
) == 1 \

103 ? 
	`__mem£t_1
 (
s
, 
c
) \

104 : 
	`__mem£t_gc
 (
s
, 
c
, 
n
)) \

105 : (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

106 ? ({ *
__s
 = (
s
); 
	`__bzîo
 (__s, 
n
); __s; }) \

107 : 
	`mem£t
 (
s
, 
c
, 
n
))))

	)

109 
	#__mem£t_1
(
s
, 
c
Ë({ *
__s
 = (s); \

110 *((
__uöt8_t
 *Ë
__s
Ë(__uöt8_tË
c
; __s; })

	)

112 
	#__mem£t_gc
(
s
, 
c
, 
n
) \

113 ({ *
__s
 = (
s
); \

115 
__ui
; \

116 
__usi
; \

117 
__uc
; \

118 } *
__u
 = 
__s
; \

119 
__uöt8_t
 
__c
 = (__uöt8_tË(
c
); \

122 (Ë(
n
)) \

125 
__u
->
__ui
 = 
__c
 * 0x01010101; \

126 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

128 
__u
->
__ui
 = 
__c
 * 0x01010101; \

129 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

131 
__u
->
__ui
 = 
__c
 * 0x01010101; \

132 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

134 
__u
->
__usi
 = (Ë
__c
 * 0x0101; \

135 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

136 
__u
->
__uc
 = (Ë
__c
; \

140 
__u
->
__ui
 = 
__c
 * 0x01010101; \

141 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

143 
__u
->
__ui
 = 
__c
 * 0x01010101; \

144 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

146 
__u
->
__ui
 = 
__c
 * 0x01010101; \

147 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

149 
__u
->
__usi
 = (Ë
__c
 * 0x0101; \

153 
__u
->
__ui
 = 
__c
 * 0x01010101; \

154 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

156 
__u
->
__ui
 = 
__c
 * 0x01010101; \

157 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

159 
__u
->
__ui
 = 
__c
 * 0x01010101; \

160 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

162 
__u
->
__uc
 = (Ë
__c
; \

166 
__u
->
__ui
 = 
__c
 * 0x01010101; \

167 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

169 
__u
->
__ui
 = 
__c
 * 0x01010101; \

170 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

172 
__u
->
__ui
 = 
__c
 * 0x01010101; \

173 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

175 
__u
->
__ui
 = 
__c
 * 0x01010101; \

180 
__s
; })

	)

182 
	#mem£t
(
s
, 
c
, 
n
) \

183 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

184 ? ({ *
__s
 = (
s
); 
	`__bzîo
 (__s, 
n
); __s; }) \

185 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

194 #i‡
__GNUC_PREREQ
 (2, 91)

195 
	#__bzîo
(
s
, 
n
Ë
	`__buûtö_mem£t
 (s, '\0',Ç)

	)

203 #ifde‡
__USE_GNU


204 #i‡!
deföed
 
_HAVE_STRING_ARCH_memp˝y
 || deföed 
_FORCE_INLINES


205 #i‚de‡
_HAVE_STRING_ARCH_memp˝y


206 #i‡
__GNUC_PREREQ
 (3, 4)

207 
	#__memp˝y
(
de°
, 
§c
, 
n
Ë
	`__buûtö_memp˝y
 (de°, src,Ç)

	)

208 #ñi‡
__GNUC_PREREQ
 (3, 0)

209 
	#__memp˝y
(
de°
, 
§c
, 
n
) \

210 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

211 && 
	`__°rög2_1b±r_p
 (
§c
Ë&& 
n
 <= 8 \

212 ? 
	`__buûtö_mem˝y
 (
de°
, 
§c
, 
n
) + (n) \

213 : 
	`__memp˝y
 (
de°
, 
§c
, 
n
)))

	)

215 
	#__memp˝y
(
de°
, 
§c
, 
n
) \

216 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

217 && 
	`__°rög2_1b±r_p
 (
§c
Ë&& 
n
 <= 8 \

218 ? 
	`__memp˝y_smÆl
 (
de°
, 
	`__memp˝y_¨gs
 (
§c
), 
n
) \

219 : 
	`__memp˝y
 (
de°
, 
§c
, 
n
)))

	)

223 
	#memp˝y
(
de°
, 
§c
, 
n
Ë
	`__memp˝y
 (de°, src,Ç)

	)

226 #i‡!
__GNUC_PREREQ
 (3, 0Ë|| 
deföed
 
_FORCE_INLINES


227 #i‡
_STRING_ARCH_u«lig√d


228 #i‚de‡
_FORCE_INLINES


229 
	#__memp˝y_¨gs
(
§c
) \

230 ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[2], \

231 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[6], \

232 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

233 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

234 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

235 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

237 
__STRING_INLINE
 *
__memp˝y_smÆl
 (*, , , , ,

238 
__uöt16_t
, __uöt16_t, 
__uöt32_t
,

239 
__uöt32_t
, 
size_t
);

240 
__STRING_INLINE
 *

241 
	$__memp˝y_smÆl
 (*
__de°1
,

242 
__§c0_1
, 
__§c2_1
, 
__§c4_1
, 
__§c6_1
,

243 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

244 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

245 
size_t
 
__§˛í
)

248 
__uöt32_t
 
__ui
;

249 
__uöt16_t
 
__usi
;

250 
__uc
;

251 
__c
;

252 } *
__u
 = 
__de°1
;

253 (Ë
__§˛í
)

256 
__u
->
__c
 = 
__§c0_1
;

257 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

260 
__u
->
__usi
 = 
__§c0_2
;

261 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

264 
__u
->
__usi
 = 
__§c0_2
;

265 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

266 
__u
->
__c
 = 
__§c2_1
;

267 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

270 
__u
->
__ui
 = 
__§c0_4
;

271 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

274 
__u
->
__ui
 = 
__§c0_4
;

275 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

276 
__u
->
__c
 = 
__§c4_1
;

277 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

280 
__u
->
__ui
 = 
__§c0_4
;

281 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

282 
__u
->
__usi
 = 
__§c4_2
;

283 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

286 
__u
->
__ui
 = 
__§c0_4
;

287 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

288 
__u
->
__usi
 = 
__§c4_2
;

289 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

290 
__u
->
__c
 = 
__§c6_1
;

291 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

294 
__u
->
__ui
 = 
__§c0_4
;

295 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

296 
__u
->
__ui
 = 
__§c4_4
;

297 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

300  (*Ë
__u
;

301 
	}
}

303 #i‚de‡
_FORCE_INLINES


304 
	#__memp˝y_¨gs
(
§c
) \

305 ((
__c⁄°
 *Ë(
§c
))[0], \

306 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

307 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1] } }), \

308 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

309 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

310 ((
__c⁄°
 *Ë(
§c
))[2] } }), \

311 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

312 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

313 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3] } }), \

314 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

315 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

316 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

317 ((
__c⁄°
 *Ë(
§c
))[4] } }), \

318 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

319 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

320 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

321 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5] } }), \

322 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

323 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

324 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

325 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

326 ((
__c⁄°
 *Ë(
§c
))[6] } }), \

327 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

328 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

329 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

330 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

331 ((
__c⁄°
 *Ë(
§c
))[6], ((__c⁄° *Ë(§c))[7] } })

	)

333 
__STRING_INLINE
 *
__memp˝y_smÆl
 (*, , 
__STRING2_COPY_ARR2
,

334 
__STRING2_COPY_ARR3
,

335 
__STRING2_COPY_ARR4
,

336 
__STRING2_COPY_ARR5
,

337 
__STRING2_COPY_ARR6
,

338 
__STRING2_COPY_ARR7
,

339 
__STRING2_COPY_ARR8
, 
size_t
);

340 
__STRING_INLINE
 *

341 
	$__memp˝y_smÆl
 (*
__de°
, 
__§c1
,

342 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

343 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

344 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

345 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

348 
__c
;

349 
__STRING2_COPY_ARR2
 
__sˇ2
;

350 
__STRING2_COPY_ARR3
 
__sˇ3
;

351 
__STRING2_COPY_ARR4
 
__sˇ4
;

352 
__STRING2_COPY_ARR5
 
__sˇ5
;

353 
__STRING2_COPY_ARR6
 
__sˇ6
;

354 
__STRING2_COPY_ARR7
 
__sˇ7
;

355 
__STRING2_COPY_ARR8
 
__sˇ8
;

356 } *
__u
 = 
__de°
;

357 (Ë
__§˛í
)

360 
__u
->
__c
 = 
__§c1
;

363 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

366 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

369 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

372 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

375 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

378 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

381 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

384  
	`__exãnsi⁄__
 ((*Ë
__u
 + 
__§˛í
);

385 
	}
}

393 #i‚de‡
_HAVE_STRING_ARCH_°rchr


394 *
__øwmemchr
 (c⁄° *
__s
, 
__c
);

395 #i‡
__GNUC_PREREQ
 (3, 2)

396 
	#°rchr
(
s
, 
c
) \

397 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
Ë&& !__buûtö_c⁄°™t_∞(
s
) \

398 && (
c
) == '\0' \

399 ? (*Ë
	`__øwmemchr
 (
s
, 
c
) \

400 : 
	`__buûtö_°rchr
 (
s
, 
c
)))

	)

402 
	#°rchr
(
s
, 
c
) \

403 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

404 ? (*Ë
	`__øwmemchr
 (
s
, 
c
) \

405 : 
	`°rchr
 (
s
, 
c
)))

	)

411 #i‡(!
deföed
 
_HAVE_STRING_ARCH_°r˝y
 && !
__GNUC_PREREQ
 (3, 0)) \

412 || 
deföed
 
	g_FORCE_INLINES


413 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r˝y
 && !
__GNUC_PREREQ
 (3, 0)

414 
	#°r˝y
(
de°
, 
§c
) \

415 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

416 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

417 ? 
	`__°r˝y_smÆl
 (
de°
, 
	`__°r˝y_¨gs
 (
§c
), \

418 
	`°æí
 (
§c
) + 1) \

419 : (*Ë
	`mem˝y
 (
de°
, 
§c
, 
	`°æí
 (src) + 1)) \

420 : 
	`°r˝y
 (
de°
, 
§c
)))

	)

423 #i‡
_STRING_ARCH_u«lig√d


424 #i‚de‡
_FORCE_INLINES


425 
	#__°r˝y_¨gs
(
§c
) \

426 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

427 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

428 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

429 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

431 
__STRING_INLINE
 *
__°r˝y_smÆl
 (*, 
__uöt16_t
, __uint16_t,

432 
__uöt32_t
, __uöt32_t, 
size_t
);

433 
__STRING_INLINE
 *

434 
	$__°r˝y_smÆl
 (*
__de°
,

435 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

436 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

437 
size_t
 
__§˛í
)

440 
__uöt32_t
 
__ui
;

441 
__uöt16_t
 
__usi
;

442 
__uc
;

443 } *
__u
 = (*Ë
__de°
;

444 (Ë
__§˛í
)

447 
__u
->
__uc
 = '\0';

450 
__u
->
__usi
 = 
__§c0_2
;

453 
__u
->
__usi
 = 
__§c0_2
;

454 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

455 
__u
->
__uc
 = '\0';

458 
__u
->
__ui
 = 
__§c0_4
;

461 
__u
->
__ui
 = 
__§c0_4
;

462 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

463 
__u
->
__uc
 = '\0';

466 
__u
->
__ui
 = 
__§c0_4
;

467 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

468 
__u
->
__usi
 = 
__§c4_2
;

471 
__u
->
__ui
 = 
__§c0_4
;

472 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

473 
__u
->
__usi
 = 
__§c4_2
;

474 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

475 
__u
->
__uc
 = '\0';

478 
__u
->
__ui
 = 
__§c0_4
;

479 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

480 
__u
->
__ui
 = 
__§c4_4
;

483  
__de°
;

484 
	}
}

486 #i‚de‡
_FORCE_INLINES


487 
	#__°r˝y_¨gs
(
§c
) \

488 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

489 { { ((
__c⁄°
 *Ë(
§c
))[0], '\0' } }), \

490 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

491 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

493 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

494 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

495 ((
__c⁄°
 *Ë(
§c
))[2], '\0' } }), \

496 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

497 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

498 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

500 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

501 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

502 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

503 ((
__c⁄°
 *Ë(
§c
))[4], '\0' } }), \

504 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

505 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

506 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

507 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

509 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

510 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

511 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

512 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

513 ((
__c⁄°
 *Ë(
§c
))[6], '\0' } })

	)

515 
__STRING_INLINE
 *
__°r˝y_smÆl
 (*, 
__STRING2_COPY_ARR2
,

516 
__STRING2_COPY_ARR3
,

517 
__STRING2_COPY_ARR4
,

518 
__STRING2_COPY_ARR5
,

519 
__STRING2_COPY_ARR6
,

520 
__STRING2_COPY_ARR7
,

521 
__STRING2_COPY_ARR8
, 
size_t
);

522 
__STRING_INLINE
 *

523 
	$__°r˝y_smÆl
 (*
__de°
,

524 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

525 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

526 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

527 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

530 
__c
;

531 
__STRING2_COPY_ARR2
 
__sˇ2
;

532 
__STRING2_COPY_ARR3
 
__sˇ3
;

533 
__STRING2_COPY_ARR4
 
__sˇ4
;

534 
__STRING2_COPY_ARR5
 
__sˇ5
;

535 
__STRING2_COPY_ARR6
 
__sˇ6
;

536 
__STRING2_COPY_ARR7
 
__sˇ7
;

537 
__STRING2_COPY_ARR8
 
__sˇ8
;

538 } *
__u
 = (*Ë
__de°
;

539 (Ë
__§˛í
)

542 
__u
->
__c
 = '\0';

545 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

548 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

551 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

554 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

557 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

560 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

563 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

566  
__de°
;

567 
	}
}

573 #ifde‡
__USE_GNU


574 #i‡!
deföed
 
_HAVE_STRING_ARCH_°p˝y
 || deföed 
_FORCE_INLINES


575 #i‚de‡
_HAVE_STRING_ARCH_°p˝y


576 #i‡
__GNUC_PREREQ
 (3, 4)

577 
	#__°p˝y
(
de°
, 
§c
Ë
	`__buûtö_°p˝y
 (de°, src)

	)

578 #ñi‡
__GNUC_PREREQ
 (3, 0)

579 
	#__°p˝y
(
de°
, 
§c
) \

580 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

581 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

582 ? 
	`__buûtö_°r˝y
 (
de°
, 
§c
Ë+ 
	`°æí
 (src) \

583 : ((*Ë(
__memp˝y
Ë(
de°
, 
§c
, 
	`°æí
 (src) + 1) \

585 : 
	`__°p˝y
 (
de°
, 
§c
)))

	)

587 
	#__°p˝y
(
de°
, 
§c
) \

588 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

589 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

590 ? 
	`__°p˝y_smÆl
 (
de°
, 
	`__°p˝y_¨gs
 (
§c
), \

591 
	`°æí
 (
§c
) + 1) \

592 : ((*Ë(
__memp˝y
Ë(
de°
, 
§c
, 
	`°æí
 (src) + 1) \

594 : 
	`__°p˝y
 (
de°
, 
§c
)))

	)

598 
	#°p˝y
(
de°
, 
§c
Ë
	`__°p˝y
 (de°, src)

	)

601 #i‡!
__GNUC_PREREQ
 (3, 0Ë|| 
deföed
 
_FORCE_INLINES


602 #i‡
_STRING_ARCH_u«lig√d


603 #i‚de‡
_FORCE_INLINES


604 
	#__°p˝y_¨gs
(
§c
) \

605 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

606 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

607 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

608 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

610 
__STRING_INLINE
 *
__°p˝y_smÆl
 (*, 
__uöt16_t
, __uint16_t,

611 
__uöt32_t
, __uöt32_t, 
size_t
);

612 
__STRING_INLINE
 *

613 
	$__°p˝y_smÆl
 (*
__de°
,

614 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

615 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

616 
size_t
 
__§˛í
)

619 
__ui
;

620 
__usi
;

621 
__uc
;

622 
__c
;

623 } *
__u
 = (*Ë
__de°
;

624 (Ë
__§˛í
)

627 
__u
->
__uc
 = '\0';

630 
__u
->
__usi
 = 
__§c0_2
;

631 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

634 
__u
->
__usi
 = 
__§c0_2
;

635 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

636 
__u
->
__uc
 = '\0';

639 
__u
->
__ui
 = 
__§c0_4
;

640 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3);

643 
__u
->
__ui
 = 
__§c0_4
;

644 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

645 
__u
->
__uc
 = '\0';

648 
__u
->
__ui
 = 
__§c0_4
;

649 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

650 
__u
->
__usi
 = 
__§c4_2
;

651 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

654 
__u
->
__ui
 = 
__§c0_4
;

655 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

656 
__u
->
__usi
 = 
__§c4_2
;

657 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

658 
__u
->
__uc
 = '\0';

661 
__u
->
__ui
 = 
__§c0_4
;

662 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

663 
__u
->
__ui
 = 
__§c4_4
;

664 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3);

667  &
__u
->
__c
;

668 
	}
}

670 #i‚de‡
_FORCE_INLINES


671 
	#__°p˝y_¨gs
(
§c
) \

672 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

673 { { ((
__c⁄°
 *Ë(
§c
))[0], '\0' } }), \

674 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

675 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

677 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

678 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

679 ((
__c⁄°
 *Ë(
§c
))[2], '\0' } }), \

680 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

681 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

682 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

684 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

685 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

686 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

687 ((
__c⁄°
 *Ë(
§c
))[4], '\0' } }), \

688 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

689 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

690 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

691 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

693 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

694 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

695 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

696 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

697 ((
__c⁄°
 *Ë(
§c
))[6], '\0' } })

	)

699 
__STRING_INLINE
 *
__°p˝y_smÆl
 (*, 
__STRING2_COPY_ARR2
,

700 
__STRING2_COPY_ARR3
,

701 
__STRING2_COPY_ARR4
,

702 
__STRING2_COPY_ARR5
,

703 
__STRING2_COPY_ARR6
,

704 
__STRING2_COPY_ARR7
,

705 
__STRING2_COPY_ARR8
, 
size_t
);

706 
__STRING_INLINE
 *

707 
	$__°p˝y_smÆl
 (*
__de°
,

708 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

709 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

710 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

711 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

714 
__c
;

715 
__STRING2_COPY_ARR2
 
__sˇ2
;

716 
__STRING2_COPY_ARR3
 
__sˇ3
;

717 
__STRING2_COPY_ARR4
 
__sˇ4
;

718 
__STRING2_COPY_ARR5
 
__sˇ5
;

719 
__STRING2_COPY_ARR6
 
__sˇ6
;

720 
__STRING2_COPY_ARR7
 
__sˇ7
;

721 
__STRING2_COPY_ARR8
 
__sˇ8
;

722 } *
__u
 = (*Ë
__de°
;

723 (Ë
__§˛í
)

726 
__u
->
__c
 = '\0';

729 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

732 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

735 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

738 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

741 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

744 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

747 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

750  
__de°
 + 
__§˛í
 - 1;

751 
	}
}

759 #i‚de‡
_HAVE_STRING_ARCH_°∫˝y


760 #i‡
__GNUC_PREREQ
 (3, 2)

761 
	#°∫˝y
(
de°
, 
§c
, 
n
Ë
	`__buûtö_°∫˝y
 (de°, src,Ç)

	)

763 
	#°∫˝y
(
de°
, 
§c
, 
n
) \

764 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

765 ? (
	`°æí
 (
§c
Ë+ 1 >((
size_t
Ë(
n
)) \

766 ? (*Ë
	`mem˝y
 (
de°
, 
§c
, 
n
) \

767 : 
	`°∫˝y
 (
de°
, 
§c
, 
n
)) \

768 : 
	`°∫˝y
 (
de°
, 
§c
, 
n
)))

	)

774 #i‚de‡
_HAVE_STRING_ARCH_°∫ˇt


775 #ifde‡
_USE_STRING_ARCH_°rchr


776 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

777 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

778 
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

779 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

780 ? 
	`°rˇt
 (
__de°
, 
§c
) \

781 : (*((*Ë
	`__memp˝y
 (
	`°rchr
 (
__de°
, '\0'), \

782 
§c
, 
n
)Ë'\0', 
__de°
)) \

783 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
); }))

	)

784 #ñi‡
__GNUC_PREREQ
 (3, 2)

785 
	#°∫ˇt
(
de°
, 
§c
, 
n
Ë
	`__buûtö_°∫ˇt
 (de°, src,Ç)

	)

787 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

788 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

789 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

790 ? 
	`°rˇt
 (
de°
, 
§c
) \

791 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
)) \

792 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
)))

	)

798 #i‚de‡
_HAVE_STRING_ARCH_°rcmp


799 #i‡
__GNUC_PREREQ
 (3, 2)

800 
	#°rcmp
(
s1
, 
s2
) \

801 
__exãnsi⁄__
 \

802 ({ 
size_t
 
__s1_Àn
, 
__s2_Àn
; \

803 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

804 && (
__s1_Àn
 = 
	`°æí
 (
s1
), 
__s2_Àn
 = såÀ¿(
s2
), \

805 (!
	`__°rög2_1b±r_p
 (
s1
Ë|| 
__s1_Àn
 >= 4) \

806 && (!
	`__°rög2_1b±r_p
 (
s2
Ë|| 
__s2_Àn
 >= 4)) \

807 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

808 : (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

809 && (
__s1_Àn
 = 
	`°æí
 (
s1
), __s1_len < 4) \

810 ? (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

811 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

812 : 
	`__°rcmp_cg
 (
s1
, 
s2
, 
__s1_Àn
)) \

813 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

814 && (
__s2_Àn
 = 
	`°æí
 (
s2
), __s2_len < 4) \

815 ? (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

816 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

817 : 
	`__°rcmp_gc
 (
s1
, 
s2
, 
__s2_Àn
)) \

818 : 
	`__buûtö_°rcmp
 (
s1
, 
s2
)))); })

	)

820 
	#°rcmp
(
s1
, 
s2
) \

821 
__exãnsi⁄__
 \

822 ({ 
size_t
 
__s1_Àn
, 
__s2_Àn
; \

823 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

824 && (
__s1_Àn
 = 
	`°æí
 (
s1
), 
__s2_Àn
 = såÀ¿(
s2
), \

825 (!
	`__°rög2_1b±r_p
 (
s1
Ë|| 
__s1_Àn
 >= 4) \

826 && (!
	`__°rög2_1b±r_p
 (
s2
Ë|| 
__s2_Àn
 >= 4)) \

827 ? 
	`memcmp
 ((
__c⁄°
 *Ë(
s1
), (__c⁄° *Ë(
s2
), \

828 (
__s1_Àn
 < 
__s2_Àn
 ? __s1_len : __s2_len) + 1) \

829 : (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

830 && (
__s1_Àn
 = 
	`°æí
 (
s1
), __s1_len < 4) \

831 ? (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

832 ? 
	`__°rcmp_cc
 (
s1
, 
s2
, 
__s1_Àn
) \

833 : 
	`__°rcmp_cg
 (
s1
, 
s2
, 
__s1_Àn
)) \

834 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

835 && (
__s2_Àn
 = 
	`°æí
 (
s2
), __s2_len < 4) \

836 ? (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

837 ? 
	`__°rcmp_cc
 (
s1
, 
s2
, 
__s2_Àn
) \

838 : 
	`__°rcmp_gc
 (
s1
, 
s2
, 
__s2_Àn
)) \

839 : 
	`°rcmp
 (
s1
, 
s2
)))); })

	)

842 
	#__°rcmp_cc
(
s1
, 
s2
, 
l
) \

843 (
	`__exãnsi⁄__
 ({ 
__ªsu…
 = \

844 (((
__c⁄°
 *Ë(__c⁄° *Ë(
s1
))[0] \

845 - ((
__c⁄°
 *Ë(__c⁄° *)(
s2
))[0]);\

846 i‡(
l
 > 0 && 
__ªsu…
 == 0) \

848 
__ªsu…
 = (((
__c⁄°
 *) \

849 (
__c⁄°
 *Ë(
s1
))[1] \

850 - ((
__c⁄°
 *) \

851 (
__c⁄°
 *Ë(
s2
))[1]); \

852 i‡(
l
 > 1 && 
__ªsu…
 == 0) \

854 
__ªsu…
 = \

855 (((
__c⁄°
 *) \

856 (
__c⁄°
 *Ë(
s1
))[2] \

857 - ((
__c⁄°
 *) \

858 (
__c⁄°
 *Ë(
s2
))[2]); \

859 i‡(
l
 > 2 && 
__ªsu…
 == 0) \

860 
__ªsu…
 = \

861 (((
__c⁄°
 *) \

862 (
__c⁄°
 *Ë(
s1
))[3] \

863 - ((
__c⁄°
 *) \

864 (
__c⁄°
 *Ë(
s2
))[3]); \

867 
__ªsu…
; }))

	)

869 
	#__°rcmp_cg
(
s1
, 
s2
, 
l1
) \

870 (
	`__exãnsi⁄__
 ({ 
__c⁄°
 *
__s2
 = \

871 (
__c⁄°
 *Ë(__c⁄° *Ë(
s2
); \

872 
__ªsu…
 = \

873 (((
__c⁄°
 *Ë(__c⁄° *Ë(
s1
))[0] \

874 - 
__s2
[0]); \

875 i‡(
l1
 > 0 && 
__ªsu…
 == 0) \

877 
__ªsu…
 = (((
__c⁄°
 *) \

878 (
__c⁄°
 *Ë(
s1
))[1] - 
__s2
[1]); \

879 i‡(
l1
 > 1 && 
__ªsu…
 == 0) \

881 
__ªsu…
 = (((
__c⁄°
 *) \

882 (
__c⁄°
 *Ë(
s1
))[2] - 
__s2
[2]);\

883 i‡(
l1
 > 2 && 
__ªsu…
 == 0) \

884 
__ªsu…
 = (((
__c⁄°
 *) \

885 (
__c⁄°
 *Ë(
s1
))[3] \

886 - 
__s2
[3]); \

889 
__ªsu…
; }))

	)

891 
	#__°rcmp_gc
(
s1
, 
s2
, 
l2
) \

892 (
	`__exãnsi⁄__
 ({ 
__c⁄°
 *
__s1
 = \

893 (
__c⁄°
 *Ë(__c⁄° *Ë(
s1
); \

894 
__ªsu…
 = \

895 
__s1
[0] - ((
__c⁄°
 *) \

896 (
__c⁄°
 *Ë(
s2
))[0]; \

897 i‡(
l2
 > 0 && 
__ªsu…
 == 0) \

899 
__ªsu…
 = (
__s1
[1] \

900 - ((
__c⁄°
 *) \

901 (
__c⁄°
 *Ë(
s2
))[1]); \

902 i‡(
l2
 > 1 && 
__ªsu…
 == 0) \

904 
__ªsu…
 = \

905 (
__s1
[2] - ((
__c⁄°
 *) \

906 (
__c⁄°
 *Ë(
s2
))[2]); \

907 i‡(
l2
 > 2 && 
__ªsu…
 == 0) \

908 
__ªsu…
 = \

909 (
__s1
[3] \

910 - ((
__c⁄°
 *) \

911 (
__c⁄°
 *Ë(
s2
))[3]); \

914 
__ªsu…
; }))

	)

919 #i‚de‡
_HAVE_STRING_ARCH_°∫cmp


920 
	#°∫cmp
(
s1
, 
s2
, 
n
) \

921 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) \

922 && ((
	`__buûtö_c⁄°™t_p
 (
s1
) \

923 && 
	`°æí
 (
s1
Ë< ((
size_t
Ë(
n
))) \

924 || (
	`__buûtö_c⁄°™t_p
 (
s2
) \

925 && 
	`°æí
 (
s2
Ë< ((
size_t
Ë(
n
)))) \

926 ? 
	`°rcmp
 (
s1
, 
s2
Ë: 
	`°∫cmp
 (s1, s2, 
n
)))

	)

932 #i‡!
deföed
 
_HAVE_STRING_ARCH_°rc•n
 || deföed 
_FORCE_INLINES


933 #i‚de‡
_HAVE_STRING_ARCH_°rc•n


934 #i‡
__GNUC_PREREQ
 (3, 2)

935 
	#°rc•n
(
s
, 
ªje˘
) \

936 
__exãnsi⁄__
 \

937 ({ 
__r0
, 
__r1
, 
__r2
; \

938 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

939 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

940 ? 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
) \

941 : ((
__r0
 = ((
__c⁄°
 *Ë(
ªje˘
))[0], __r0 == '\0') \

942 ? 
	`°æí
 (
s
) \

943 : ((
__r1
 = ((
__c⁄°
 *Ë(
ªje˘
))[1], __r1 == '\0') \

944 ? 
	`__°rc•n_c1
 (
s
, 
__r0
) \

945 : ((
__r2
 = ((
__c⁄°
 *Ë(
ªje˘
))[2], __r2 == '\0') \

946 ? 
	`__°rc•n_c2
 (
s
, 
__r0
, 
__r1
) \

947 : (((
__c⁄°
 *Ë(
ªje˘
))[3] == '\0' \

948 ? 
	`__°rc•n_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

949 : 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
)))))) \

950 : 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
)); })

	)

952 
	#°rc•n
(
s
, 
ªje˘
) \

953 
__exãnsi⁄__
 \

954 ({ 
__r0
, 
__r1
, 
__r2
; \

955 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

956 ? ((
__r0
 = ((
__c⁄°
 *Ë(
ªje˘
))[0], __r0 == '\0') \

957 ? 
	`°æí
 (
s
) \

958 : ((
__r1
 = ((
__c⁄°
 *Ë(
ªje˘
))[1], __r1 == '\0') \

959 ? 
	`__°rc•n_c1
 (
s
, 
__r0
) \

960 : ((
__r2
 = ((
__c⁄°
 *Ë(
ªje˘
))[2], __r2 == '\0') \

961 ? 
	`__°rc•n_c2
 (
s
, 
__r0
, 
__r1
) \

962 : (((
__c⁄°
 *Ë(
ªje˘
))[3] == '\0' \

963 ? 
	`__°rc•n_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

964 : 
	`°rc•n
 (
s
, 
ªje˘
))))) \

965 : 
	`°rc•n
 (
s
, 
ªje˘
)); })

	)

969 
__STRING_INLINE
 
size_t
 
__°rc•n_c1
 (
__c⁄°
 *
__s
, 
__ªje˘
);

970 
__STRING_INLINE
 
size_t


971 
	$__°rc•n_c1
 (
__c⁄°
 *
__s
, 
__ªje˘
)

973 
size_t
 
__ªsu…
 = 0;

974 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘
)

975 ++
__ªsu…
;

976  
__ªsu…
;

977 
	}
}

979 
__STRING_INLINE
 
size_t
 
__°rc•n_c2
 (
__c⁄°
 *
__s
, 
__ªje˘1
,

980 
__ªje˘2
);

981 
__STRING_INLINE
 
size_t


982 
	$__°rc•n_c2
 (
__c⁄°
 *
__s
, 
__ªje˘1
, 
__ªje˘2
)

984 
size_t
 
__ªsu…
 = 0;

985 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘1


986 && 
__s
[
__ªsu…
] !
__ªje˘2
)

987 ++
__ªsu…
;

988  
__ªsu…
;

989 
	}
}

991 
__STRING_INLINE
 
size_t
 
__°rc•n_c3
 (
__c⁄°
 *
__s
, 
__ªje˘1
,

992 
__ªje˘2
, 
__ªje˘3
);

993 
__STRING_INLINE
 
size_t


994 
	$__°rc•n_c3
 (
__c⁄°
 *
__s
, 
__ªje˘1
, 
__ªje˘2
,

995 
__ªje˘3
)

997 
size_t
 
__ªsu…
 = 0;

998 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘1


999 && 
__s
[
__ªsu…
] !
__ªje˘2
 && __s[__ªsu…] !
__ªje˘3
)

1000 ++
__ªsu…
;

1001  
__ªsu…
;

1002 
	}
}

1008 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r•n
 || deföed 
_FORCE_INLINES


1009 #i‚de‡
_HAVE_STRING_ARCH_°r•n


1010 #i‡
__GNUC_PREREQ
 (3, 2)

1011 
	#°r•n
(
s
, 
ac˚±
) \

1012 
__exãnsi⁄__
 \

1013 ({ 
__a0
, 
__a1
, 
__a2
; \

1014 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1015 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

1016 ? 
	`__buûtö_°r•n
 (
s
, 
ac˚±
) \

1017 : ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1018 ? ((Ë(
s
), 0) \

1019 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1020 ? 
	`__°r•n_c1
 (
s
, 
__a0
) \

1021 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1022 ? 
	`__°r•n_c2
 (
s
, 
__a0
, 
__a1
) \

1023 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1024 ? 
	`__°r•n_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1025 : 
	`__buûtö_°r•n
 (
s
, 
ac˚±
)))))) \

1026 : 
	`__buûtö_°r•n
 (
s
, 
ac˚±
)); })

	)

1028 
	#°r•n
(
s
, 
ac˚±
) \

1029 
__exãnsi⁄__
 \

1030 ({ 
__a0
, 
__a1
, 
__a2
; \

1031 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1032 ? ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1033 ? ((Ë(
s
), 0) \

1034 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1035 ? 
	`__°r•n_c1
 (
s
, 
__a0
) \

1036 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1037 ? 
	`__°r•n_c2
 (
s
, 
__a0
, 
__a1
) \

1038 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1039 ? 
	`__°r•n_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1040 : 
	`°r•n
 (
s
, 
ac˚±
))))) \

1041 : 
	`°r•n
 (
s
, 
ac˚±
)); })

	)

1045 
__STRING_INLINE
 
size_t
 
__°r•n_c1
 (
__c⁄°
 *
__s
, 
__ac˚±
);

1046 
__STRING_INLINE
 
size_t


1047 
	$__°r•n_c1
 (
__c⁄°
 *
__s
, 
__ac˚±
)

1049 
size_t
 
__ªsu…
 = 0;

1051 
__s
[
__ªsu…
] =
__ac˚±
)

1052 ++
__ªsu…
;

1053  
__ªsu…
;

1054 
	}
}

1056 
__STRING_INLINE
 
size_t
 
__°r•n_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1057 
__ac˚±2
);

1058 
__STRING_INLINE
 
size_t


1059 
	$__°r•n_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
)

1061 
size_t
 
__ªsu…
 = 0;

1063 
__s
[
__ªsu…
] =
__ac˚±1
 || __s[__ªsu…] =
__ac˚±2
)

1064 ++
__ªsu…
;

1065  
__ªsu…
;

1066 
	}
}

1068 
__STRING_INLINE
 
size_t
 
__°r•n_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1069 
__ac˚±2
, 
__ac˚±3
);

1070 
__STRING_INLINE
 
size_t


1071 
	$__°r•n_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
, 
__ac˚±3
)

1073 
size_t
 
__ªsu…
 = 0;

1075 
__s
[
__ªsu…
] =
__ac˚±1
 || __s[__ªsu…] =
__ac˚±2


1076 || 
__s
[
__ªsu…
] =
__ac˚±3
)

1077 ++
__ªsu…
;

1078  
__ªsu…
;

1079 
	}
}

1084 #i‡!
deföed
 
_HAVE_STRING_ARCH_°Ωbrk
 || deföed 
_FORCE_INLINES


1085 #i‚de‡
_HAVE_STRING_ARCH_°Ωbrk


1086 #i‡
__GNUC_PREREQ
 (3, 2)

1087 
	#°Ωbrk
(
s
, 
ac˚±
) \

1088 
__exãnsi⁄__
 \

1089 ({ 
__a0
, 
__a1
, 
__a2
; \

1090 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1091 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

1092 ? 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
) \

1093 : ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1094 ? ((Ë(
s
), (*Ë
NULL
) \

1095 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1096 ? 
	`__buûtö_°rchr
 (
s
, 
__a0
) \

1097 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1098 ? 
	`__°Ωbrk_c2
 (
s
, 
__a0
, 
__a1
) \

1099 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1100 ? 
	`__°Ωbrk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1101 : 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
)))))) \

1102 : 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
)); })

	)

1104 
	#°Ωbrk
(
s
, 
ac˚±
) \

1105 
__exãnsi⁄__
 \

1106 ({ 
__a0
, 
__a1
, 
__a2
; \

1107 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1108 ? ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1109 ? ((Ë(
s
), (*Ë
NULL
) \

1110 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1111 ? 
	`°rchr
 (
s
, 
__a0
) \

1112 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1113 ? 
	`__°Ωbrk_c2
 (
s
, 
__a0
, 
__a1
) \

1114 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1115 ? 
	`__°Ωbrk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1116 : 
	`°Ωbrk
 (
s
, 
ac˚±
))))) \

1117 : 
	`°Ωbrk
 (
s
, 
ac˚±
)); })

	)

1121 
__STRING_INLINE
 *
__°Ωbrk_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1122 
__ac˚±2
);

1123 
__STRING_INLINE
 *

1124 
	$__°Ωbrk_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
)

1127 *
__s
 !'\0' && *__†!
__ac˚±1
 && *__†!
__ac˚±2
)

1128 ++
__s
;

1129  *
__s
 ='\0' ? 
NULL
 : (*Ë(
size_t
) __s;

1130 
	}
}

1132 
__STRING_INLINE
 *
__°Ωbrk_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1133 
__ac˚±2
, 
__ac˚±3
);

1134 
__STRING_INLINE
 *

1135 
	$__°Ωbrk_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
,

1136 
__ac˚±3
)

1139 *
__s
 !'\0' && *__†!
__ac˚±1
 && *__†!
__ac˚±2


1140 && *
__s
 !
__ac˚±3
)

1141 ++
__s
;

1142  *
__s
 ='\0' ? 
NULL
 : (*Ë(
size_t
) __s;

1143 
	}
}

1149 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r°r
 && !
__GNUC_PREREQ
 (2, 97)

1150 
	#°r°r
(
hay°ack
, 
√edÀ
) \

1151 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
√edÀ
Ë&& 
	`__°rög2_1b±r_p
 (needle) \

1152 ? (((
__c⁄°
 *Ë(
√edÀ
))[0] == '\0' \

1153 ? (*Ë(
size_t
Ë(
hay°ack
) \

1154 : (((
__c⁄°
 *Ë(
√edÀ
))[1] == '\0' \

1155 ? 
	`°rchr
 (
hay°ack
, \

1156 ((
__c⁄°
 *Ë(
√edÀ
))[0]) \

1157 : 
	`°r°r
 (
hay°ack
, 
√edÀ
))) \

1158 : 
	`°r°r
 (
hay°ack
, 
√edÀ
)))

	)

1162 #i‡!
deföed
 
_HAVE_STRING_ARCH_°πok_r
 || deföed 
_FORCE_INLINES


1163 #i‚de‡
_HAVE_STRING_ARCH_°πok_r


1164 
	#__°πok_r
(
s
, 
£p
, 
√xç
) \

1165 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
£p
Ë&& 
	`__°rög2_1b±r_p
 (sep) \

1166 && ((
__c⁄°
 *Ë(
£p
))[0] != '\0' \

1167 && ((
__c⁄°
 *Ë(
£p
))[1] == '\0' \

1168 ? 
	`__°πok_r_1c
 (
s
, ((
__c⁄°
 *Ë(
£p
))[0], 
√xç
) \

1169 : 
	`__°πok_r
 (
s
, 
£p
, 
√xç
)))

	)

1172 
__STRING_INLINE
 *
__°πok_r_1c
 (*
__s
, 
__£p
, **
__√xç
);

1173 
__STRING_INLINE
 *

1174 
	$__°πok_r_1c
 (*
__s
, 
__£p
, **
__√xç
)

1176 *
__ªsu…
;

1177 i‡(
__s
 =
NULL
)

1178 
__s
 = *
__√xç
;

1179 *
__s
 =
__£p
)

1180 ++
__s
;

1181 
__ªsu…
 = 
NULL
;

1182 i‡(*
__s
 != '\0')

1184 
__ªsu…
 = 
__s
++;

1185 *
__s
 != '\0')

1186 i‡(*
__s
++ =
__£p
)

1188 
__s
[-1] = '\0';

1192 *
__√xç
 = 
__s
;

1193  
__ªsu…
;

1194 
	}
}

1195 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


1196 
	#°πok_r
(
s
, 
£p
, 
√xç
Ë
	`__°πok_r
 (s, sï,Çexç)

	)

1201 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r£p
 || deföed 
_FORCE_INLINES


1202 #i‚de‡
_HAVE_STRING_ARCH_°r£p


1204 *
__°r£p_g
 (**
__°rögp
, 
__c⁄°
 *
__dñim
);

1205 
	#__°r£p
(
s
, 
ªje˘
) \

1206 
__exãnsi⁄__
 \

1207 ({ 
__r0
, 
__r1
, 
__r2
; \

1208 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

1209 && (
__r0
 = ((
__c⁄°
 *Ë(
ªje˘
))[0], \

1210 ((
__c⁄°
 *Ë(
ªje˘
))[0] != '\0') \

1211 ? ((
__r1
 = ((
__c⁄°
 *Ë(
ªje˘
))[1], \

1212 ((
__c⁄°
 *Ë(
ªje˘
))[1] == '\0') \

1213 ? 
	`__°r£p_1c
 (
s
, 
__r0
) \

1214 : ((
__r2
 = ((
__c⁄°
 *Ë(
ªje˘
))[2], __r2 == '\0') \

1215 ? 
	`__°r£p_2c
 (
s
, 
__r0
, 
__r1
) \

1216 : (((
__c⁄°
 *Ë(
ªje˘
))[3] == '\0' \

1217 ? 
	`__°r£p_3c
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

1218 : 
	`__°r£p_g
 (
s
, 
ªje˘
)))) \

1219 : 
	`__°r£p_g
 (
s
, 
ªje˘
)); })

	)

1222 
__STRING_INLINE
 *
__°r£p_1c
 (**
__s
, 
__ªje˘
);

1223 
__STRING_INLINE
 *

1224 
	$__°r£p_1c
 (**
__s
, 
__ªje˘
)

1226 *
__ªtvÆ
 = *
__s
;

1227 i‡(
__ªtvÆ
 !
NULL
 && (*
__s
 = 
	`°rchr
 (__ªtvÆ, 
__ªje˘
)) != NULL)

1228 *(*
__s
)++ = '\0';

1229  
__ªtvÆ
;

1230 
	}
}

1232 
__STRING_INLINE
 *
__°r£p_2c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
);

1233 
__STRING_INLINE
 *

1234 
	$__°r£p_2c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
)

1236 *
__ªtvÆ
 = *
__s
;

1237 i‡(
__ªtvÆ
 !
NULL
)

1239 *
__˝
 = 
__ªtvÆ
;

1242 i‡(*
__˝
 == '\0')

1244 
__˝
 = 
NULL
;

1247 i‡(*
__˝
 =
__ªje˘1
 || *__˝ =
__ªje˘2
)

1249 *
__˝
++ = '\0';

1252 ++
__˝
;

1254 *
__s
 = 
__˝
;

1256  
__ªtvÆ
;

1257 
	}
}

1259 
__STRING_INLINE
 *
__°r£p_3c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
,

1260 
__ªje˘3
);

1261 
__STRING_INLINE
 *

1262 
	$__°r£p_3c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
, 
__ªje˘3
)

1264 *
__ªtvÆ
 = *
__s
;

1265 i‡(
__ªtvÆ
 !
NULL
)

1267 *
__˝
 = 
__ªtvÆ
;

1270 i‡(*
__˝
 == '\0')

1272 
__˝
 = 
NULL
;

1275 i‡(*
__˝
 =
__ªje˘1
 || *__˝ =
__ªje˘2
 || *__˝ =
__ªje˘3
)

1277 *
__˝
++ = '\0';

1280 ++
__˝
;

1282 *
__s
 = 
__˝
;

1284  
__ªtvÆ
;

1285 
	}
}

1286 #ifde‡
__USE_BSD


1287 
	#°r£p
(
s
, 
ªje˘
Ë
	`__°r£p
 (s,Ñeje˘)

	)

1294 #ifde‡
__USE_MISC


1296 #i‡!
deföed
 
_HAVE_STRING_ARCH_°rdup
 || !deföed 
_HAVE_STRING_ARCH_°∫dup


1297 
	#__√ed_mÆloc_™d_ˇŒoc


	)

1298 
	~<°dlib.h
>

1301 #i‚de‡
_HAVE_STRING_ARCH_°rdup


1303 *
	$__°rdup
 (
__c⁄°
 *
__°rög
Ë
__THROW
 
__©åibuã_mÆloc__
;

1304 
	#__°rdup
(
s
) \

1305 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s) \

1306 ? (((
__c⁄°
 *Ë(
s
))[0] == '\0' \

1307 ? (*Ë
	`ˇŒoc
 ((
size_t
) 1, (size_t) 1) \

1308 : ({ 
size_t
 
__Àn
 = 
	`°æí
 (
s
) + 1; \

1309 *
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

1310 i‡(
__ªtvÆ
 !
NULL
) \

1311 
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ, 
s
, 
__Àn
); \

1312 
__ªtvÆ
; 
	}
})) \

1313 : 
	`__°rdup
 (
s
)))

	)

1315 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


1316 
	#°rdup
(
s
Ë
	`__°rdup
 (s)

	)

1320 #i‚de‡
_HAVE_STRING_ARCH_°∫dup


1322 *
	$__°∫dup
 (
__c⁄°
 *
__°rög
, 
size_t
 
__n
)

1323 
__THROW
 
__©åibuã_mÆloc__
;

1324 
	#__°∫dup
(
s
, 
n
) \

1325 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s) \

1326 ? (((
__c⁄°
 *Ë(
s
))[0] == '\0' \

1327 ? (*Ë
	`ˇŒoc
 ((
size_t
) 1, (size_t) 1) \

1328 : ({ 
size_t
 
__Àn
 = 
	`°æí
 (
s
) + 1; \

1329 
size_t
 
__n
 = (
n
); \

1330 *
__ªtvÆ
; \

1331 i‡(
__n
 < 
__Àn
) \

1332 
__Àn
 = 
__n
 + 1; \

1333 
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

1334 i‡(
__ªtvÆ
 !
NULL
) \

1336 
__ªtvÆ
[
__Àn
 - 1] = '\0'; \

1337 
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ, 
s
, \

1338 
__Àn
 - 1); \

1340 
__ªtvÆ
; 
	}
})) \

1341 : 
	`__°∫dup
 (
s
, 
n
)))

	)

1343 #ifde‡
__USE_GNU


1344 
	#°∫dup
(
s
, 
n
Ë
	`__°∫dup
 (s,Ç)

	)

1350 #i‚de‡
_FORCE_INLINES


1351 #unde‡
__STRING_INLINE


	@/usr/include/bits/string3.h

19 #i‚de‡
_STRING_H


23 
__w¨nde˛
 (
__w¨n_mem£t_zîo_Àn
,

26 #i‚de‡
__˝lu•lus


30 #unde‡
mem˝y


31 #unde‡
memmove


32 #unde‡
mem£t


33 #unde‡
°rˇt


34 #unde‡
°r˝y


35 #unde‡
°∫ˇt


36 #unde‡
°∫˝y


37 #ifde‡
__USE_GNU


38 #unde‡
memp˝y


39 #unde‡
°p˝y


41 #ifde‡
__USE_BSD


42 #unde‡
bc›y


43 #unde‡
bzîo


48 
__exã∫_Æways_ölöe
 *

49 
__NTH
 (
	$mem˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

50 
size_t
 
__Àn
))

52  
	`__buûtö___mem˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

53 
	}
}

55 
__exã∫_Æways_ölöe
 *

56 
__NTH
 (
	$memmove
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__Àn
))

58  
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

59 
	}
}

61 #ifde‡
__USE_GNU


62 
__exã∫_Æways_ölöe
 *

63 
__NTH
 (
	$memp˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

64 
size_t
 
__Àn
))

66  
	`__buûtö___memp˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

67 
	}
}

76 
__exã∫_Æways_ölöe
 *

77 
__NTH
 (
	$mem£t
 (*
__de°
, 
__ch
, 
size_t
 
__Àn
))

79 i‡(
	`__buûtö_c⁄°™t_p
 (
__Àn
) && __len == 0

80 && (!
	`__buûtö_c⁄°™t_p
 (
__ch
) || __ch != 0))

82 
	`__w¨n_mem£t_zîo_Àn
 ();

83  
__de°
;

85  
	`__buûtö___mem£t_chk
 (
__de°
, 
__ch
, 
__Àn
, 
	`__bos0
 (__dest));

86 
	}
}

88 #ifde‡
__USE_BSD


89 
__exã∫_Æways_ölöe
 

90 
__NTH
 (
	$bc›y
 (
__c⁄°
 *
__§c
, *
__de°
, 
size_t
 
__Àn
))

92 (Ë
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

93 
	}
}

95 
__exã∫_Æways_ölöe
 

96 
__NTH
 (
	$bzîo
 (*
__de°
, 
size_t
 
__Àn
))

98 (Ë
	`__buûtö___mem£t_chk
 (
__de°
, '\0', 
__Àn
, 
	`__bos0
 (__dest));

99 
	}
}

102 
__exã∫_Æways_ölöe
 *

103 
__NTH
 (
	$°r˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
))

105  
	`__buûtö___°r˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

106 
	}
}

108 #ifde‡
__USE_GNU


109 
__exã∫_Æways_ölöe
 *

110 
__NTH
 (
	$°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
))

112  
	`__buûtö___°p˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

113 
	}
}

117 
__exã∫_Æways_ölöe
 *

118 
__NTH
 (
	$°∫˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

119 
size_t
 
__Àn
))

121  
	`__buûtö___°∫˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

122 
	}
}

125 *
	$__°≤˝y_chk
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
,

126 
size_t
 
__de°Àn
Ë
__THROW
;

127 *
	`__REDIRECT_NTH
 (
__°≤˝y_Æüs
, (*
__de°
,

128 
__c⁄°
 *
__§c
,

129 
size_t
 
__n
), 
°≤˝y
);

131 
__exã∫_Æways_ölöe
 *

132 
	`__NTH
 (
	$°≤˝y
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
))

134 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1

135 && (!
	`__buûtö_c⁄°™t_p
 (
__n
Ë|| __¿<
	`__bos
 (
__de°
)))

136  
	`__°≤˝y_chk
 (
__de°
, 
__§c
, 
__n
, 
	`__bos
 (__dest));

137  
	`__°≤˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

138 
	}
}

141 
__exã∫_Æways_ölöe
 *

142 
__NTH
 (
	$°rˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
))

144  
	`__buûtö___°rˇt_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

145 
	}
}

148 
__exã∫_Æways_ölöe
 *

149 
__NTH
 (
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

150 
size_t
 
__Àn
))

152  
	`__buûtö___°∫ˇt_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

153 
	}
}

	@/usr/include/bits/sys_errlist.h

20 #i‚de‡
_STDIO_H


26 #ifde‡ 
__USE_BSD


27 
sys_√º
;

28 
__c⁄°
 *__c⁄° 
sys_îæi°
[];

30 #ifde‡ 
__USE_GNU


31 
_sys_√º
;

32 
__c⁄°
 *__c⁄° 
_sys_îæi°
[];

	@/usr/include/bits/syscall.h

3 #i‚de‡
_SYSCALL_H


7 
	~<bôs/w‹dsize.h
>

9 
	#SYS__sys˘l
 
__NR__sys˘l


	)

10 
	#SYS_ac˚ss
 
__NR_ac˚ss


	)

11 
	#SYS_ac˘
 
__NR_ac˘


	)

12 
	#SYS_add_key
 
__NR_add_key


	)

13 
	#SYS_adjtimex
 
__NR_adjtimex


	)

14 
	#SYS_afs_sysˇŒ
 
__NR_afs_sysˇŒ


	)

15 
	#SYS_Æ¨m
 
__NR_Æ¨m


	)

16 
	#SYS_brk
 
__NR_brk


	)

17 
	#SYS_ˇpgë
 
__NR_ˇpgë


	)

18 
	#SYS_ˇp£t
 
__NR_ˇp£t


	)

19 
	#SYS_chdú
 
__NR_chdú


	)

20 
	#SYS_chmod
 
__NR_chmod


	)

21 
	#SYS_chown
 
__NR_chown


	)

22 
	#SYS_chroŸ
 
__NR_chroŸ


	)

23 
	#SYS_˛ock_adjtime
 
__NR_˛ock_adjtime


	)

24 
	#SYS_˛ock_gëªs
 
__NR_˛ock_gëªs


	)

25 
	#SYS_˛ock_gëtime
 
__NR_˛ock_gëtime


	)

26 
	#SYS_˛ock_«no¶ìp
 
__NR_˛ock_«no¶ìp


	)

27 
	#SYS_˛ock_£âime
 
__NR_˛ock_£âime


	)

28 
	#SYS_˛⁄e
 
__NR_˛⁄e


	)

29 
	#SYS_˛o£
 
__NR_˛o£


	)

30 
	#SYS_¸ót
 
__NR_¸ót


	)

31 
	#SYS_¸óã_moduÀ
 
__NR_¸óã_moduÀ


	)

32 
	#SYS_dñëe_moduÀ
 
__NR_dñëe_moduÀ


	)

33 
	#SYS_dup
 
__NR_dup


	)

34 
	#SYS_dup2
 
__NR_dup2


	)

35 
	#SYS_dup3
 
__NR_dup3


	)

36 
	#SYS_ïﬁl_¸óã
 
__NR_ïﬁl_¸óã


	)

37 
	#SYS_ïﬁl_¸óã1
 
__NR_ïﬁl_¸óã1


	)

38 
	#SYS_ïﬁl_˘l
 
__NR_ïﬁl_˘l


	)

39 
	#SYS_ïﬁl_pwaô
 
__NR_ïﬁl_pwaô


	)

40 
	#SYS_ïﬁl_waô
 
__NR_ïﬁl_waô


	)

41 
	#SYS_evítfd
 
__NR_evítfd


	)

42 
	#SYS_evítfd2
 
__NR_evítfd2


	)

43 
	#SYS_execve
 
__NR_execve


	)

44 
	#SYS_exô
 
__NR_exô


	)

45 
	#SYS_exô_group
 
__NR_exô_group


	)

46 
	#SYS_Ác˚sßt
 
__NR_Ác˚sßt


	)

47 
	#SYS_Ádvi£64
 
__NR_Ádvi£64


	)

48 
	#SYS_ÁŒoˇã
 
__NR_ÁŒoˇã


	)

49 
	#SYS_fchdú
 
__NR_fchdú


	)

50 
	#SYS_fchmod
 
__NR_fchmod


	)

51 
	#SYS_fchmod©
 
__NR_fchmod©


	)

52 
	#SYS_fchown
 
__NR_fchown


	)

53 
	#SYS_fchow«t
 
__NR_fchow«t


	)

54 
	#SYS_f˙é
 
__NR_f˙é


	)

55 
	#SYS_fd©async
 
__NR_fd©async


	)

56 
	#SYS_fgëx©å
 
__NR_fgëx©å


	)

57 
	#SYS_Êi°x©å
 
__NR_Êi°x©å


	)

58 
	#SYS_Êock
 
__NR_Êock


	)

59 
	#SYS_f‹k
 
__NR_f‹k


	)

60 
	#SYS_‰emovex©å
 
__NR_‰emovex©å


	)

61 
	#SYS_f£tx©å
 
__NR_f£tx©å


	)

62 
	#SYS_f°©
 
__NR_f°©


	)

63 
	#SYS_f°©fs
 
__NR_f°©fs


	)

64 
	#SYS_fsync
 
__NR_fsync


	)

65 
	#SYS_·runˇã
 
__NR_·runˇã


	)

66 
	#SYS_fuãx
 
__NR_fuãx


	)

67 
	#SYS_futimeßt
 
__NR_futimeßt


	)

68 
	#SYS_gë_kî√l_syms
 
__NR_gë_kî√l_syms


	)

69 
	#SYS_gë_mempﬁicy
 
__NR_gë_mempﬁicy


	)

70 
	#SYS_gë_robu°_li°
 
__NR_gë_robu°_li°


	)

71 
	#SYS_gë_thªad_¨ó
 
__NR_gë_thªad_¨ó


	)

72 
	#SYS_gëcwd
 
__NR_gëcwd


	)

73 
	#SYS_gëdíts
 
__NR_gëdíts


	)

74 
	#SYS_gëdíts64
 
__NR_gëdíts64


	)

75 
	#SYS_gëegid
 
__NR_gëegid


	)

76 
	#SYS_gëeuid
 
__NR_gëeuid


	)

77 
	#SYS_gëgid
 
__NR_gëgid


	)

78 
	#SYS_gëgroups
 
__NR_gëgroups


	)

79 
	#SYS_gëôimî
 
__NR_gëôimî


	)

80 
	#SYS_gëpgid
 
__NR_gëpgid


	)

81 
	#SYS_gëpgΩ
 
__NR_gëpgΩ


	)

82 
	#SYS_gëpid
 
__NR_gëpid


	)

83 
	#SYS_gëpmsg
 
__NR_gëpmsg


	)

84 
	#SYS_gëµid
 
__NR_gëµid


	)

85 
	#SYS_gë¥i‹ôy
 
__NR_gë¥i‹ôy


	)

86 
	#SYS_gëªsgid
 
__NR_gëªsgid


	)

87 
	#SYS_gëªsuid
 
__NR_gëªsuid


	)

88 
	#SYS_gëæimô
 
__NR_gëæimô


	)

89 
	#SYS_gërußge
 
__NR_gërußge


	)

90 
	#SYS_gësid
 
__NR_gësid


	)

91 
	#SYS_gëtid
 
__NR_gëtid


	)

92 
	#SYS_gëtimeofday
 
__NR_gëtimeofday


	)

93 
	#SYS_gëuid
 
__NR_gëuid


	)

94 
	#SYS_gëx©å
 
__NR_gëx©å


	)

95 
	#SYS_öô_moduÀ
 
__NR_öô_moduÀ


	)

96 
	#SYS_öŸify_add_w©ch
 
__NR_öŸify_add_w©ch


	)

97 
	#SYS_öŸify_öô
 
__NR_öŸify_öô


	)

98 
	#SYS_öŸify_öô1
 
__NR_öŸify_öô1


	)

99 
	#SYS_öŸify_rm_w©ch
 
__NR_öŸify_rm_w©ch


	)

100 
	#SYS_io_ˇn˚l
 
__NR_io_ˇn˚l


	)

101 
	#SYS_io_de°roy
 
__NR_io_de°roy


	)

102 
	#SYS_io_gëevíts
 
__NR_io_gëevíts


	)

103 
	#SYS_io_£tup
 
__NR_io_£tup


	)

104 
	#SYS_io_submô
 
__NR_io_submô


	)

105 
	#SYS_io˘l
 
__NR_io˘l


	)

106 
	#SYS_i›îm
 
__NR_i›îm


	)

107 
	#SYS_i›l
 
__NR_i›l


	)

108 
	#SYS_i›rio_gë
 
__NR_i›rio_gë


	)

109 
	#SYS_i›rio_£t
 
__NR_i›rio_£t


	)

110 
	#SYS_kexec_lﬂd
 
__NR_kexec_lﬂd


	)

111 
	#SYS_key˘l
 
__NR_key˘l


	)

112 
	#SYS_kûl
 
__NR_kûl


	)

113 
	#SYS_lchown
 
__NR_lchown


	)

114 
	#SYS_lgëx©å
 
__NR_lgëx©å


	)

115 
	#SYS_lök
 
__NR_lök


	)

116 
	#SYS_lök©
 
__NR_lök©


	)

117 
	#SYS_li°x©å
 
__NR_li°x©å


	)

118 
	#SYS_Œi°x©å
 
__NR_Œi°x©å


	)

119 
	#SYS_lookup_dcookõ
 
__NR_lookup_dcookõ


	)

120 
	#SYS_Ãemovex©å
 
__NR_Ãemovex©å


	)

121 
	#SYS_l£ek
 
__NR_l£ek


	)

122 
	#SYS_l£tx©å
 
__NR_l£tx©å


	)

123 
	#SYS_l°©
 
__NR_l°©


	)

124 
	#SYS_madvi£
 
__NR_madvi£


	)

125 
	#SYS_mböd
 
__NR_mböd


	)

126 
	#SYS_migøã_∑ges
 
__NR_migøã_∑ges


	)

127 
	#SYS_möc‹e
 
__NR_möc‹e


	)

128 
	#SYS_mkdú
 
__NR_mkdú


	)

129 
	#SYS_mkdú©
 
__NR_mkdú©


	)

130 
	#SYS_mknod
 
__NR_mknod


	)

131 
	#SYS_mknod©
 
__NR_mknod©


	)

132 
	#SYS_mlock
 
__NR_mlock


	)

133 
	#SYS_mlockÆl
 
__NR_mlockÆl


	)

134 
	#SYS_mm≠
 
__NR_mm≠


	)

135 
	#SYS_modify_ldt
 
__NR_modify_ldt


	)

136 
	#SYS_mou¡
 
__NR_mou¡


	)

137 
	#SYS_move_∑ges
 
__NR_move_∑ges


	)

138 
	#SYS_m¥Ÿe˘
 
__NR_m¥Ÿe˘


	)

139 
	#SYS_mq_gë£èâr
 
__NR_mq_gë£èâr


	)

140 
	#SYS_mq_nŸify
 
__NR_mq_nŸify


	)

141 
	#SYS_mq_›í
 
__NR_mq_›í


	)

142 
	#SYS_mq_timedª˚ive
 
__NR_mq_timedª˚ive


	)

143 
	#SYS_mq_timed£nd
 
__NR_mq_timed£nd


	)

144 
	#SYS_mq_u∆ök
 
__NR_mq_u∆ök


	)

145 
	#SYS_mªm≠
 
__NR_mªm≠


	)

146 
	#SYS_msync
 
__NR_msync


	)

147 
	#SYS_mu∆ock
 
__NR_mu∆ock


	)

148 
	#SYS_mu∆ockÆl
 
__NR_mu∆ockÆl


	)

149 
	#SYS_munm≠
 
__NR_munm≠


	)

150 
	#SYS_«no¶ìp
 
__NR_«no¶ìp


	)

151 
	#SYS_nfs£rv˘l
 
__NR_nfs£rv˘l


	)

152 
	#SYS_›í
 
__NR_›í


	)

153 
	#SYS_›í©
 
__NR_›í©


	)

154 
	#SYS_∑u£
 
__NR_∑u£


	)

155 
	#SYS_≥rf_evít_›í
 
__NR_≥rf_evít_›í


	)

156 
	#SYS_≥rs⁄Æôy
 
__NR_≥rs⁄Æôy


	)

157 
	#SYS_pùe
 
__NR_pùe


	)

158 
	#SYS_pùe2
 
__NR_pùe2


	)

159 
	#SYS_pivŸ_roŸ
 
__NR_pivŸ_roŸ


	)

160 
	#SYS_pﬁl
 
__NR_pﬁl


	)

161 
	#SYS_µﬁl
 
__NR_µﬁl


	)

162 
	#SYS_¥˘l
 
__NR_¥˘l


	)

163 
	#SYS_¥ód64
 
__NR_¥ód64


	)

164 
	#SYS_¥ódv
 
__NR_¥ódv


	)

165 
	#SYS_¥o˚ss_vm_ªadv
 
__NR_¥o˚ss_vm_ªadv


	)

166 
	#SYS_¥o˚ss_vm_wrôev
 
__NR_¥o˚ss_vm_wrôev


	)

167 
	#SYS_p£À˘6
 
__NR_p£À˘6


	)

168 
	#SYS_±ø˚
 
__NR_±ø˚


	)

169 
	#SYS_puçmsg
 
__NR_puçmsg


	)

170 
	#SYS_pwrôe64
 
__NR_pwrôe64


	)

171 
	#SYS_pwrôev
 
__NR_pwrôev


	)

172 
	#SYS_quîy_moduÀ
 
__NR_quîy_moduÀ


	)

173 
	#SYS_quŸa˘l
 
__NR_quŸa˘l


	)

174 
	#SYS_ªad
 
__NR_ªad


	)

175 
	#SYS_ªadahód
 
__NR_ªadahód


	)

176 
	#SYS_ªadlök
 
__NR_ªadlök


	)

177 
	#SYS_ªadlök©
 
__NR_ªadlök©


	)

178 
	#SYS_ªadv
 
__NR_ªadv


	)

179 
	#SYS_ªboŸ
 
__NR_ªboŸ


	)

180 
	#SYS_ªcvmmsg
 
__NR_ªcvmmsg


	)

181 
	#SYS_ªm≠_fûe_∑ges
 
__NR_ªm≠_fûe_∑ges


	)

182 
	#SYS_ªmovex©å
 
__NR_ªmovex©å


	)

183 
	#SYS_ª«me
 
__NR_ª«me


	)

184 
	#SYS_ª«mót
 
__NR_ª«mót


	)

185 
	#SYS_ªque°_key
 
__NR_ªque°_key


	)

186 
	#SYS_ª°¨t_sysˇŒ
 
__NR_ª°¨t_sysˇŒ


	)

187 
	#SYS_rmdú
 
__NR_rmdú


	)

188 
	#SYS_π_siga˘i⁄
 
__NR_π_siga˘i⁄


	)

189 
	#SYS_π_sig≥ndög
 
__NR_π_sig≥ndög


	)

190 
	#SYS_π_sig¥ocmask
 
__NR_π_sig¥ocmask


	)

191 
	#SYS_π_sigqueueöfo
 
__NR_π_sigqueueöfo


	)

192 
	#SYS_π_sigªtu∫
 
__NR_π_sigªtu∫


	)

193 
	#SYS_π_sigsu•íd
 
__NR_π_sigsu•íd


	)

194 
	#SYS_π_sigtimedwaô
 
__NR_π_sigtimedwaô


	)

195 
	#SYS_π_tgsigqueueöfo
 
__NR_π_tgsigqueueöfo


	)

196 
	#SYS_sched_gë_¥i‹ôy_max
 
__NR_sched_gë_¥i‹ôy_max


	)

197 
	#SYS_sched_gë_¥i‹ôy_mö
 
__NR_sched_gë_¥i‹ôy_mö


	)

198 
	#SYS_sched_gëafföôy
 
__NR_sched_gëafföôy


	)

199 
	#SYS_sched_gë∑øm
 
__NR_sched_gë∑øm


	)

200 
	#SYS_sched_gëscheduÀr
 
__NR_sched_gëscheduÀr


	)

201 
	#SYS_sched_º_gë_öãrvÆ
 
__NR_sched_º_gë_öãrvÆ


	)

202 
	#SYS_sched_£èfföôy
 
__NR_sched_£èfföôy


	)

203 
	#SYS_sched_£ç¨am
 
__NR_sched_£ç¨am


	)

204 
	#SYS_sched_£tscheduÀr
 
__NR_sched_£tscheduÀr


	)

205 
	#SYS_sched_yõld
 
__NR_sched_yõld


	)

206 
	#SYS_£À˘
 
__NR_£À˘


	)

207 
	#SYS_£ndfûe
 
__NR_£ndfûe


	)

208 
	#SYS_£ndmmsg
 
__NR_£ndmmsg


	)

209 
	#SYS_£t_mempﬁicy
 
__NR_£t_mempﬁicy


	)

210 
	#SYS_£t_robu°_li°
 
__NR_£t_robu°_li°


	)

211 
	#SYS_£t_thªad_¨ó
 
__NR_£t_thªad_¨ó


	)

212 
	#SYS_£t_tid_addªss
 
__NR_£t_tid_addªss


	)

213 
	#SYS_£tdomaö«me
 
__NR_£tdomaö«me


	)

214 
	#SYS_£tfsgid
 
__NR_£tfsgid


	)

215 
	#SYS_£tfsuid
 
__NR_£tfsuid


	)

216 
	#SYS_£tgid
 
__NR_£tgid


	)

217 
	#SYS_£tgroups
 
__NR_£tgroups


	)

218 
	#SYS_£tho°«me
 
__NR_£tho°«me


	)

219 
	#SYS_£tôimî
 
__NR_£tôimî


	)

220 
	#SYS_£äs
 
__NR_£äs


	)

221 
	#SYS_£çgid
 
__NR_£çgid


	)

222 
	#SYS_£çri‹ôy
 
__NR_£çri‹ôy


	)

223 
	#SYS_£åegid
 
__NR_£åegid


	)

224 
	#SYS_£åesgid
 
__NR_£åesgid


	)

225 
	#SYS_£åesuid
 
__NR_£åesuid


	)

226 
	#SYS_£åeuid
 
__NR_£åeuid


	)

227 
	#SYS_£ålimô
 
__NR_£ålimô


	)

228 
	#SYS_£tsid
 
__NR_£tsid


	)

229 
	#SYS_£âimeofday
 
__NR_£âimeofday


	)

230 
	#SYS_£tuid
 
__NR_£tuid


	)

231 
	#SYS_£tx©å
 
__NR_£tx©å


	)

232 
	#SYS_sigÆt°ack
 
__NR_sigÆt°ack


	)

233 
	#SYS_sig«lfd
 
__NR_sig«lfd


	)

234 
	#SYS_sig«lfd4
 
__NR_sig«lfd4


	)

235 
	#SYS_•li˚
 
__NR_•li˚


	)

236 
	#SYS_°©
 
__NR_°©


	)

237 
	#SYS_°©fs
 
__NR_°©fs


	)

238 
	#SYS_sw≠off
 
__NR_sw≠off


	)

239 
	#SYS_sw≠⁄
 
__NR_sw≠⁄


	)

240 
	#SYS_symlök
 
__NR_symlök


	)

241 
	#SYS_symlök©
 
__NR_symlök©


	)

242 
	#SYS_sync
 
__NR_sync


	)

243 
	#SYS_sync_fûe_ønge
 
__NR_sync_fûe_ønge


	)

244 
	#SYS_syncfs
 
__NR_syncfs


	)

245 
	#SYS_sysfs
 
__NR_sysfs


	)

246 
	#SYS_sysöfo
 
__NR_sysöfo


	)

247 
	#SYS_sy¶og
 
__NR_sy¶og


	)

248 
	#SYS_ãe
 
__NR_ãe


	)

249 
	#SYS_tgkûl
 
__NR_tgkûl


	)

250 
	#SYS_time
 
__NR_time


	)

251 
	#SYS_timî_¸óã
 
__NR_timî_¸óã


	)

252 
	#SYS_timî_dñëe
 
__NR_timî_dñëe


	)

253 
	#SYS_timî_gëovîrun
 
__NR_timî_gëovîrun


	)

254 
	#SYS_timî_gëtime
 
__NR_timî_gëtime


	)

255 
	#SYS_timî_£âime
 
__NR_timî_£âime


	)

256 
	#SYS_timîfd_¸óã
 
__NR_timîfd_¸óã


	)

257 
	#SYS_timîfd_gëtime
 
__NR_timîfd_gëtime


	)

258 
	#SYS_timîfd_£âime
 
__NR_timîfd_£âime


	)

259 
	#SYS_times
 
__NR_times


	)

260 
	#SYS_tkûl
 
__NR_tkûl


	)

261 
	#SYS_åunˇã
 
__NR_åunˇã


	)

262 
	#SYS_umask
 
__NR_umask


	)

263 
	#SYS_umou¡2
 
__NR_umou¡2


	)

264 
	#SYS_u«me
 
__NR_u«me


	)

265 
	#SYS_u∆ök
 
__NR_u∆ök


	)

266 
	#SYS_u∆ök©
 
__NR_u∆ök©


	)

267 
	#SYS_unsh¨e
 
__NR_unsh¨e


	)

268 
	#SYS_u£lib
 
__NR_u£lib


	)

269 
	#SYS_u°©
 
__NR_u°©


	)

270 
	#SYS_utime
 
__NR_utime


	)

271 
	#SYS_utimíßt
 
__NR_utimíßt


	)

272 
	#SYS_utimes
 
__NR_utimes


	)

273 
	#SYS_vf‹k
 
__NR_vf‹k


	)

274 
	#SYS_vh™gup
 
__NR_vh™gup


	)

275 
	#SYS_vm•li˚
 
__NR_vm•li˚


	)

276 
	#SYS_v£rvî
 
__NR_v£rvî


	)

277 
	#SYS_waô4
 
__NR_waô4


	)

278 
	#SYS_waôid
 
__NR_waôid


	)

279 
	#SYS_wrôe
 
__NR_wrôe


	)

280 
	#SYS_wrôev
 
__NR_wrôev


	)

281 #i‡
__WORDSIZE
 == 64

282 
	#SYS_ac˚±
 
__NR_ac˚±


	)

283 
	#SYS_ac˚±4
 
__NR_ac˚±4


	)

284 
	#SYS_¨ch_¥˘l
 
__NR_¨ch_¥˘l


	)

285 
	#SYS_böd
 
__NR_böd


	)

286 
	#SYS_c⁄√˘
 
__NR_c⁄√˘


	)

287 
	#SYS_ïﬁl_˘l_ﬁd
 
__NR_ïﬁl_˘l_ﬁd


	)

288 
	#SYS_ïﬁl_waô_ﬁd
 
__NR_ïﬁl_waô_ﬁd


	)

289 
	#SYS_ÁnŸify_öô
 
__NR_ÁnŸify_öô


	)

290 
	#SYS_ÁnŸify_m¨k
 
__NR_ÁnŸify_m¨k


	)

291 
	#SYS_gë_˝u
 
__NR_gë_˝u


	)

292 
	#SYS_gë≥î«me
 
__NR_gë≥î«me


	)

293 
	#SYS_gësock«me
 
__NR_gësock«me


	)

294 
	#SYS_gësock›t
 
__NR_gësock›t


	)

295 
	#SYS_li°í
 
__NR_li°í


	)

296 
	#SYS_msg˘l
 
__NR_msg˘l


	)

297 
	#SYS_msggë
 
__NR_msggë


	)

298 
	#SYS_msgrcv
 
__NR_msgrcv


	)

299 
	#SYS_msg¢d
 
__NR_msg¢d


	)

300 
	#SYS_«me_to_h™dÀ_©
 
__NR_«me_to_h™dÀ_©


	)

301 
	#SYS_√wf°©©
 
__NR_√wf°©©


	)

302 
	#SYS_›í_by_h™dÀ_©
 
__NR_›í_by_h™dÀ_©


	)

303 
	#SYS_¥limô64
 
__NR_¥limô64


	)

304 
	#SYS_ªcv‰om
 
__NR_ªcv‰om


	)

305 
	#SYS_ªcvmsg
 
__NR_ªcvmsg


	)

306 
	#SYS_£curôy
 
__NR_£curôy


	)

307 
	#SYS_£m˘l
 
__NR_£m˘l


	)

308 
	#SYS_£mgë
 
__NR_£mgë


	)

309 
	#SYS_£m›
 
__NR_£m›


	)

310 
	#SYS_£mtimed›
 
__NR_£mtimed›


	)

311 
	#SYS_£ndmsg
 
__NR_£ndmsg


	)

312 
	#SYS_£ndto
 
__NR_£ndto


	)

313 
	#SYS_£tsock›t
 
__NR_£tsock›t


	)

314 
	#SYS_shm©
 
__NR_shm©


	)

315 
	#SYS_shm˘l
 
__NR_shm˘l


	)

316 
	#SYS_shmdt
 
__NR_shmdt


	)

317 
	#SYS_shmgë
 
__NR_shmgë


	)

318 
	#SYS_shutdown
 
__NR_shutdown


	)

319 
	#SYS_sockë
 
__NR_sockë


	)

320 
	#SYS_sockë∑ú
 
__NR_sockë∑ú


	)

321 
	#SYS_tuxˇŒ
 
__NR_tuxˇŒ


	)

323 
	#SYS__Œ£ek
 
__NR__Œ£ek


	)

324 
	#SYS__√w£À˘
 
__NR__√w£À˘


	)

325 
	#SYS_bdÊush
 
__NR_bdÊush


	)

326 
	#SYS_bªak
 
__NR_bªak


	)

327 
	#SYS_chown32
 
__NR_chown32


	)

328 
	#SYS_Ádvi£64_64
 
__NR_Ádvi£64_64


	)

329 
	#SYS_fchown32
 
__NR_fchown32


	)

330 
	#SYS_f˙é64
 
__NR_f˙é64


	)

331 
	#SYS_f°©64
 
__NR_f°©64


	)

332 
	#SYS_f°©©64
 
__NR_f°©©64


	)

333 
	#SYS_f°©fs64
 
__NR_f°©fs64


	)

334 
	#SYS_·ime
 
__NR_·ime


	)

335 
	#SYS_·runˇã64
 
__NR_·runˇã64


	)

336 
	#SYS_gë˝u
 
__NR_gë˝u


	)

337 
	#SYS_gëegid32
 
__NR_gëegid32


	)

338 
	#SYS_gëeuid32
 
__NR_gëeuid32


	)

339 
	#SYS_gëgid32
 
__NR_gëgid32


	)

340 
	#SYS_gëgroups32
 
__NR_gëgroups32


	)

341 
	#SYS_gëªsgid32
 
__NR_gëªsgid32


	)

342 
	#SYS_gëªsuid32
 
__NR_gëªsuid32


	)

343 
	#SYS_gëuid32
 
__NR_gëuid32


	)

344 
	#SYS_gây
 
__NR_gây


	)

345 
	#SYS_idÀ
 
__NR_idÀ


	)

346 
	#SYS_ùc
 
__NR_ùc


	)

347 
	#SYS_lchown32
 
__NR_lchown32


	)

348 
	#SYS_lock
 
__NR_lock


	)

349 
	#SYS_l°©64
 
__NR_l°©64


	)

350 
	#SYS_madvi£1
 
__NR_madvi£1


	)

351 
	#SYS_mm≠2
 
__NR_mm≠2


	)

352 
	#SYS_mpx
 
__NR_mpx


	)

353 
	#SYS_ni˚
 
__NR_ni˚


	)

354 
	#SYS_ﬁdf°©
 
__NR_ﬁdf°©


	)

355 
	#SYS_ﬁdl°©
 
__NR_ﬁdl°©


	)

356 
	#SYS_ﬁdﬁdu«me
 
__NR_ﬁdﬁdu«me


	)

357 
	#SYS_ﬁd°©
 
__NR_ﬁd°©


	)

358 
	#SYS_ﬁdu«me
 
__NR_ﬁdu«me


	)

359 
	#SYS_¥of
 
__NR_¥of


	)

360 
	#SYS_¥ofû
 
__NR_¥ofû


	)

361 
	#SYS_ªaddú
 
__NR_ªaddú


	)

362 
	#SYS_£ndfûe64
 
__NR_£ndfûe64


	)

363 
	#SYS_£tfsgid32
 
__NR_£tfsgid32


	)

364 
	#SYS_£tfsuid32
 
__NR_£tfsuid32


	)

365 
	#SYS_£tgid32
 
__NR_£tgid32


	)

366 
	#SYS_£tgroups32
 
__NR_£tgroups32


	)

367 
	#SYS_£åegid32
 
__NR_£åegid32


	)

368 
	#SYS_£åesgid32
 
__NR_£åesgid32


	)

369 
	#SYS_£åesuid32
 
__NR_£åesuid32


	)

370 
	#SYS_£åeuid32
 
__NR_£åeuid32


	)

371 
	#SYS_£tuid32
 
__NR_£tuid32


	)

372 
	#SYS_sgëmask
 
__NR_sgëmask


	)

373 
	#SYS_siga˘i⁄
 
__NR_siga˘i⁄


	)

374 
	#SYS_sig«l
 
__NR_sig«l


	)

375 
	#SYS_sig≥ndög
 
__NR_sig≥ndög


	)

376 
	#SYS_sig¥ocmask
 
__NR_sig¥ocmask


	)

377 
	#SYS_sigªtu∫
 
__NR_sigªtu∫


	)

378 
	#SYS_sigsu•íd
 
__NR_sigsu•íd


	)

379 
	#SYS_sockëˇŒ
 
__NR_sockëˇŒ


	)

380 
	#SYS_s£tmask
 
__NR_s£tmask


	)

381 
	#SYS_°©64
 
__NR_°©64


	)

382 
	#SYS_°©fs64
 
__NR_°©fs64


	)

383 
	#SYS_°ime
 
__NR_°ime


	)

384 
	#SYS_°ty
 
__NR_°ty


	)

385 
	#SYS_åunˇã64
 
__NR_åunˇã64


	)

386 
	#SYS_ugëæimô
 
__NR_ugëæimô


	)

387 
	#SYS_ulimô
 
__NR_ulimô


	)

388 
	#SYS_umou¡
 
__NR_umou¡


	)

389 
	#SYS_vm86
 
__NR_vm86


	)

390 
	#SYS_vm86ﬁd
 
__NR_vm86ﬁd


	)

391 
	#SYS_waôpid
 
__NR_waôpid


	)

	@/usr/include/bits/time.h

24 #i‚de‡
__√ed_timevÆ


25 #i‚de‡
_BITS_TIME_H


26 
	#_BITS_TIME_H
 1

	)

34 
	#CLOCKS_PER_SEC
 1000000l

	)

36 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


39 
	~<bôs/ty≥s.h
>

40 
__sysc⁄f
 ();

41 
	#CLK_TCK
 ((
__˛ock_t
Ë
	`__sysc⁄f
 (2)Ë

	)

44 #ifde‡
__USE_POSIX199309


46 
	#CLOCK_REALTIME
 0

	)

48 
	#CLOCK_MONOTONIC
 1

	)

50 
	#CLOCK_PROCESS_CPUTIME_ID
 2

	)

52 
	#CLOCK_THREAD_CPUTIME_ID
 3

	)

54 
	#CLOCK_MONOTONIC_RAW
 4

	)

56 
	#CLOCK_REALTIME_COARSE
 5

	)

58 
	#CLOCK_MONOTONIC_COARSE
 6

	)

61 
	#TIMER_ABSTIME
 1

	)

67 #ifde‡
__√ed_timevÆ


68 #unde‡
__√ed_timevÆ


69 #i‚de‡
_STRUCT_TIMEVAL


70 
	#_STRUCT_TIMEVAL
 1

	)

71 
	~<bôs/ty≥s.h
>

75 
	stimevÆ


77 
__time_t
 
	mtv_£c
;

78 
__su£c⁄ds_t
 
	mtv_u£c
;

	@/usr/include/bits/types.h

24 #i‚def 
_BITS_TYPES_H


25 
	#_BITS_TYPES_H
 1

	)

27 
	~<„©uªs.h
>

28 
	~<bôs/w‹dsize.h
>

31 
	t__u_ch¨
;

32 
	t__u_sh‹t
;

33 
	t__u_öt
;

34 
	t__u_l⁄g
;

37 sig√d 
	t__öt8_t
;

38 
	t__uöt8_t
;

39 sig√d 
	t__öt16_t
;

40 
	t__uöt16_t
;

41 sig√d 
	t__öt32_t
;

42 
	t__uöt32_t
;

43 #i‡
__WORDSIZE
 == 64

44 sig√d 
	t__öt64_t
;

45 
	t__uöt64_t
;

46 #ñi‡
deföed
 
__GLIBC_HAVE_LONG_LONG


47 
__exãnsi⁄__
 sig√d 
	t__öt64_t
;

48 
__exãnsi⁄__
 
	t__uöt64_t
;

52 #i‡
__WORDSIZE
 == 64

53 
	t__quad_t
;

54 
	t__u_quad_t
;

55 #ñi‡
deföed
 
__GLIBC_HAVE_LONG_LONG


56 
__exãnsi⁄__
 
	t__quad_t
;

57 
__exãnsi⁄__
 
	t__u_quad_t
;

61 
	m__vÆ
[2];

62 } 
	t__quad_t
;

65 
__u_l⁄g
 
	m__vÆ
[2];

66 } 
	t__u_quad_t
;

99 
	#__S16_TYPE
 

	)

100 
	#__U16_TYPE
 

	)

101 
	#__S32_TYPE
 

	)

102 
	#__U32_TYPE
 

	)

103 
	#__SLONGWORD_TYPE
 

	)

104 
	#__ULONGWORD_TYPE
 

	)

105 #i‡
__WORDSIZE
 == 32

106 
	#__SQUAD_TYPE
 
__quad_t


	)

107 
	#__UQUAD_TYPE
 
__u_quad_t


	)

108 
	#__SWORD_TYPE
 

	)

109 
	#__UWORD_TYPE
 

	)

110 
	#__SLONG32_TYPE
 

	)

111 
	#__ULONG32_TYPE
 

	)

112 
	#__S64_TYPE
 
__quad_t


	)

113 
	#__U64_TYPE
 
__u_quad_t


	)

116 
	#__STD_TYPE
 
__exãnsi⁄__
 

	)

117 #ñi‡
__WORDSIZE
 == 64

118 
	t__SQUAD_TYPE
 

	)

119 
	t__UQUAD_TYPE
 

	)

120 
	t__SWORD_TYPE
 

	)

121 
	t__UWORD_TYPE
 

	)

122 
	t__SLONG32_TYPE
 

	)

123 
	t__ULONG32_TYPE
 

	)

124 
	t__S64_TYPE
 

	)

125 
	t__U64_TYPE
 

	)

127 
	t__STD_TYPE
 

	)

131 
	~<bôs/ty≥sizes.h
>

134 
__STD_TYPE
 
	t__DEV_T_TYPE
 
	t__dev_t
;

135 
__STD_TYPE
 
__UID_T_TYPE
 
	g__uid_t
;

136 
__STD_TYPE
 
__GID_T_TYPE
 
	g__gid_t
;

137 
__STD_TYPE
 
__INO_T_TYPE
 
	g__öo_t
;

138 
__STD_TYPE
 
__INO64_T_TYPE
 
	g__öo64_t
;

139 
__STD_TYPE
 
__MODE_T_TYPE
 
	g__mode_t
;

140 
__STD_TYPE
 
__NLINK_T_TYPE
 
	g__∆ök_t
;

141 
__STD_TYPE
 
__OFF_T_TYPE
 
	g__off_t
;

142 
__STD_TYPE
 
__OFF64_T_TYPE
 
	g__off64_t
;

143 
__STD_TYPE
 
__PID_T_TYPE
 
	g__pid_t
;

144 
__STD_TYPE
 
__FSID_T_TYPE
 
	g__fsid_t
;

145 
__STD_TYPE
 
__CLOCK_T_TYPE
 
	g__˛ock_t
;

146 
__STD_TYPE
 
__RLIM_T_TYPE
 
	g__æim_t
;

147 
__STD_TYPE
 
__RLIM64_T_TYPE
 
	g__æim64_t
;

148 
__STD_TYPE
 
__ID_T_TYPE
 
	g__id_t
;

149 
__STD_TYPE
 
__TIME_T_TYPE
 
	g__time_t
;

150 
__STD_TYPE
 
__USECONDS_T_TYPE
 
	g__u£c⁄ds_t
;

151 
__STD_TYPE
 
__SUSECONDS_T_TYPE
 
	g__su£c⁄ds_t
;

153 
__STD_TYPE
 
__DADDR_T_TYPE
 
	g__daddr_t
;

154 
__STD_TYPE
 
__SWBLK_T_TYPE
 
	g__swblk_t
;

155 
__STD_TYPE
 
__KEY_T_TYPE
 
	g__key_t
;

158 
__STD_TYPE
 
__CLOCKID_T_TYPE
 
	g__˛ockid_t
;

161 
__STD_TYPE
 
__TIMER_T_TYPE
 
	g__timî_t
;

164 
__STD_TYPE
 
__BLKSIZE_T_TYPE
 
	g__blksize_t
;

169 
__STD_TYPE
 
__BLKCNT_T_TYPE
 
	g__blk˙t_t
;

170 
__STD_TYPE
 
__BLKCNT64_T_TYPE
 
	g__blk˙t64_t
;

173 
__STD_TYPE
 
__FSBLKCNT_T_TYPE
 
	g__fsblk˙t_t
;

174 
__STD_TYPE
 
__FSBLKCNT64_T_TYPE
 
	g__fsblk˙t64_t
;

177 
__STD_TYPE
 
__FSFILCNT_T_TYPE
 
	g__fsfû˙t_t
;

178 
__STD_TYPE
 
__FSFILCNT64_T_TYPE
 
	g__fsfû˙t64_t
;

180 
__STD_TYPE
 
__SSIZE_T_TYPE
 
	g__ssize_t
;

184 
__off64_t
 
	t__loff_t
;

185 
__quad_t
 *
	t__qaddr_t
;

186 *
	t__ˇddr_t
;

189 
__STD_TYPE
 
__SWORD_TYPE
 
	g__öçå_t
;

192 
__STD_TYPE
 
__U32_TYPE
 
	g__sockÀn_t
;

195 #unde‡
__STD_TYPE


	@/usr/include/bits/unistd.h

20 #i‚de‡
_UNISTD_H


24 
ssize_t
 
	$__ªad_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

25 
size_t
 
__buÊí
Ë
__wur
;

26 
ssize_t
 
	`__REDIRECT
 (
__ªad_Æüs
, (
__fd
, *
__buf
,

27 
size_t
 
__nbyãs
), 
ªad
Ë
__wur
;

28 
ssize_t
 
	`__REDIRECT
 (
__ªad_chk_w¨n
,

29 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

30 
size_t
 
__buÊí
), 
__ªad_chk
)

31 
__wur
 
	`__w¨«âr
 ("read called with biggerÜengthÅhan size of "

34 
__exã∫_Æways_ölöe
 
__wur
 
ssize_t


35 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
)

37 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

39 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

40  
	`__ªad_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
	`__bos0
 (__buf));

42 i‡(
__nbyãs
 > 
	`__bos0
 (
__buf
))

43  
	`__ªad_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
	`__bos0
 (__buf));

45  
	`__ªad_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
);

46 
	}
}

48 #ifde‡
__USE_UNIX98


49 
ssize_t
 
	$__¥ód_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

50 
__off_t
 
__off£t
, 
size_t
 
__bufsize
Ë
__wur
;

51 
ssize_t
 
	$__¥ód64_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

52 
__off64_t
 
__off£t
, 
size_t
 
__bufsize
Ë
__wur
;

53 
ssize_t
 
	`__REDIRECT
 (
__¥ód_Æüs
,

54 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

55 
__off_t
 
__off£t
), 
¥ód
Ë
__wur
;

56 
ssize_t
 
	`__REDIRECT
 (
__¥ód64_Æüs
,

57 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

58 
__off64_t
 
__off£t
), 
¥ód64
Ë
__wur
;

59 
ssize_t
 
	`__REDIRECT
 (
__¥ód_chk_w¨n
,

60 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

61 
__off_t
 
__off£t
, 
size_t
 
__bufsize
), 
__¥ód_chk
)

62 
__wur
 
	`__w¨«âr
 ("pread called with biggerÜengthÅhan size of "

64 
ssize_t
 
	`__REDIRECT
 (
__¥ód64_chk_w¨n
,

65 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

66 
__off64_t
 
__off£t
, 
size_t
 
__bufsize
),

67 
__¥ód64_chk
)

68 
__wur
 
	`__w¨«âr
 ("pread64 called with biggerÜengthÅhan size of "

71 #i‚de‡
__USE_FILE_OFFSET64


72 
__exã∫_Æways_ölöe
 
__wur
 
ssize_t


73 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off_t
 
__off£t
)

75 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

77 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

78  
	`__¥ód_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

80 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

81  
	`__¥ód_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

82 
	`__bos0
 (
__buf
));

84  
	`__¥ód_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

85 
	}
}

87 
__exã∫_Æways_ölöe
 
__wur
 
ssize_t


88 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
)

90 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

92 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

93  
	`__¥ód64_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

95 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

96  
	`__¥ód64_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

97 
	`__bos0
 (
__buf
));

100  
	`__¥ód64_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

101 
	}
}

104 #ifde‡
__USE_LARGEFILE64


105 
__exã∫_Æways_ölöe
 
__wur
 
ssize_t


106 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
)

108 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

110 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

111  
	`__¥ód64_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

113 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

114  
	`__¥ód64_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

115 
	`__bos0
 (
__buf
));

118  
	`__¥ód64_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

119 
	}
}

123 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


124 
ssize_t
 
	$__ªadlök_chk
 (
__c⁄°
 *
__ª°ri˘
 
__∑th
,

125 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

126 
size_t
 
__buÊí
)

127 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

128 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök_Æüs
,

129 (
__c⁄°
 *
__ª°ri˘
 
__∑th
,

130 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
), 
ªadlök
)

131 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

132 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök_chk_w¨n
,

133 (
__c⁄°
 *
__ª°ri˘
 
__∑th
,

134 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

135 
size_t
 
__buÊí
), 
__ªadlök_chk
)

136 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
 
	`__w¨«âr
 ("readlink called with biggerÜength "

139 
__exã∫_Æways_ölöe
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
 
ssize_t


140 
	`__NTH
 (
	$ªadlök
 (
__c⁄°
 *
__ª°ri˘
 
__∑th
, *__ª°ri˘ 
__buf
,

141 
size_t
 
__Àn
))

143 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

145 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

146  
	`__ªadlök_chk
 (
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

148 i‡–
__Àn
 > 
	`__bos
 (
__buf
))

149  
	`__ªadlök_chk_w¨n
 (
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

151  
	`__ªadlök_Æüs
 (
__∑th
, 
__buf
, 
__Àn
);

152 
	}
}

155 #ifde‡
__USE_ATFILE


156 
ssize_t
 
	$__ªadlök©_chk
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

157 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

158 
size_t
 
__buÊí
)

159 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

160 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök©_Æüs
,

161 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

162 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
),

163 
ªadlök©
)

164 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

165 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök©_chk_w¨n
,

166 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

167 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

168 
size_t
 
__buÊí
), 
__ªadlök©_chk
)

169 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
 
	`__w¨«âr
 ("readlinkat called with bigger "

173 
__exã∫_Æways_ölöe
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
 
ssize_t


174 
	`__NTH
 (
	$ªadlök©
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

175 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
))

177 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

179 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

180  
	`__ªadlök©_chk
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

182 i‡(
__Àn
 > 
	`__bos
 (
__buf
))

183  
	`__ªadlök©_chk_w¨n
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
,

184 
	`__bos
 (
__buf
));

186  
	`__ªadlök©_Æüs
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
);

187 
	}
}

190 *
	$__gëcwd_chk
 (*
__buf
, 
size_t
 
__size
, size_à
__buÊí
)

191 
__THROW
 
__wur
;

192 *
	`__REDIRECT_NTH
 (
__gëcwd_Æüs
,

193 (*
__buf
, 
size_t
 
__size
), 
gëcwd
Ë
__wur
;

194 *
	`__REDIRECT_NTH
 (
__gëcwd_chk_w¨n
,

195 (*
__buf
, 
size_t
 
__size
, size_à
__buÊí
),

196 
__gëcwd_chk
)

197 
__wur
 
	`__w¨«âr
 ("getcwd caller with biggerÜengthÅhan size of "

200 
__exã∫_Æways_ölöe
 
__wur
 *

201 
	`__NTH
 (
	$gëcwd
 (*
__buf
, 
size_t
 
__size
))

203 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

205 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
))

206  
	`__gëcwd_chk
 (
__buf
, 
__size
, 
	`__bos
 (__buf));

208 i‡(
__size
 > 
	`__bos
 (
__buf
))

209  
	`__gëcwd_chk_w¨n
 (
__buf
, 
__size
, 
	`__bos
 (__buf));

211  
	`__gëcwd_Æüs
 (
__buf
, 
__size
);

212 
	}
}

214 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


215 *
	$__gëwd_chk
 (*
__buf
, 
size_t
 
buÊí
)

216 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

217 *
	`__REDIRECT_NTH
 (
__gëwd_w¨n
, (*
__buf
), 
gëwd
)

218 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__w¨«âr
 ("please use getcwd instead,ás getwd "

221 
__exã∫_Æways_ölöe
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
 *

222 
	`__NTH
 (
	$gëwd
 (*
__buf
))

224 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

225  
	`__gëwd_chk
 (
__buf
, 
	`__bos
 (__buf));

226  
	`__gëwd_w¨n
 (
__buf
);

227 
	}
}

230 
size_t
 
	$__c⁄f°r_chk
 (
__«me
, *
__buf
, 
size_t
 
__Àn
,

231 
size_t
 
__buÊí
Ë
__THROW
;

232 
size_t
 
	`__REDIRECT_NTH
 (
__c⁄f°r_Æüs
, (
__«me
, *
__buf
,

233 
size_t
 
__Àn
), 
c⁄f°r
);

234 
size_t
 
	`__REDIRECT_NTH
 (
__c⁄f°r_chk_w¨n
,

235 (
__«me
, *
__buf
, 
size_t
 
__Àn
,

236 
size_t
 
__buÊí
), 
__c⁄f°r_chk
)

237 
	`__w¨«âr
 ("confstr called with biggerÜengthÅhan size of destination "

240 
__exã∫_Æways_ölöe
 
size_t


241 
	`__NTH
 (
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
))

243 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

245 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

246  
	`__c⁄f°r_chk
 (
__«me
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

248 i‡(
	`__bos
 (
__buf
Ë< 
__Àn
)

249  
	`__c⁄f°r_chk_w¨n
 (
__«me
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

251  
	`__c⁄f°r_Æüs
 (
__«me
, 
__buf
, 
__Àn
);

252 
	}
}

255 
	$__gëgroups_chk
 (
__size
, 
__gid_t
 
__li°
[], 
size_t
 
__li°Àn
)

256 
__THROW
 
__wur
;

257 
	`__REDIRECT_NTH
 (
__gëgroups_Æüs
, (
__size
, 
__gid_t
 
__li°
[]),

258 
gëgroups
Ë
__wur
;

259 
	`__REDIRECT_NTH
 (
__gëgroups_chk_w¨n
,

260 (
__size
, 
__gid_t
 
__li°
[], 
size_t
 
__li°Àn
),

261 
__gëgroups_chk
)

262 
__wur
 
	`__w¨«âr
 ("getgroups called with bigger group countÅhan what "

265 
__exã∫_Æways_ölöe
 

266 
	`__NTH
 (
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]))

268 i‡(
	`__bos
 (
__li°
Ë!(
size_t
) -1)

270 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
) || __size < 0)

271  
	`__gëgroups_chk
 (
__size
, 
__li°
, 
	`__bos
 (__list));

273 i‡(
__size
 *  (
__gid_t
Ë> 
	`__bos
 (
__li°
))

274  
	`__gëgroups_chk_w¨n
 (
__size
, 
__li°
, 
	`__bos
 (__list));

276  
	`__gëgroups_Æüs
 (
__size
, 
__li°
);

277 
	}
}

280 
	$__ây«me_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

281 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

282 
	`__REDIRECT_NTH
 (
__ây«me_r_Æüs
, (
__fd
, *
__buf
,

283 
size_t
 
__buÊí
), 
ây«me_r
)

284 
	`__n⁄nuŒ
 ((2));

285 
	`__REDIRECT_NTH
 (
__ây«me_r_chk_w¨n
,

286 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

287 
size_t
 
__ƒól
), 
__ây«me_r_chk
)

288 
	`__n⁄nuŒ
 ((2)Ë
	`__w¨«âr
 ("ttyname_r called with bigger buflenÅhan "

291 
__exã∫_Æways_ölöe
 

292 
	`__NTH
 (
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

294 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

296 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

297  
	`__ây«me_r_chk
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

299 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

300  
	`__ây«me_r_chk_w¨n
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

302  
	`__ây«me_r_Æüs
 (
__fd
, 
__buf
, 
__buÊí
);

303 
	}
}

306 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


307 
	$__gëlogö_r_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

308 
	`__n⁄nuŒ
 ((1));

309 
	`__REDIRECT
 (
__gëlogö_r_Æüs
, (*
__buf
, 
size_t
 
__buÊí
),

310 
gëlogö_r
Ë
	`__n⁄nuŒ
 ((1));

311 
	`__REDIRECT
 (
__gëlogö_r_chk_w¨n
,

312 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

313 
__gëlogö_r_chk
)

314 
	`__n⁄nuŒ
 ((1)Ë
	`__w¨«âr
 ("getlogin_r called with bigger buflenÅhan "

317 
__exã∫_Æways_ölöe
 

318 
	$gëlogö_r
 (*
__buf
, 
size_t
 
__buÊí
)

320 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

322 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

323  
	`__gëlogö_r_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

325 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

326  
	`__gëlogö_r_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

328  
	`__gëlogö_r_Æüs
 (
__buf
, 
__buÊí
);

329 
	}
}

333 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98


334 
	$__gëho°«me_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

335 
__THROW
 
	`__n⁄nuŒ
 ((1));

336 
	`__REDIRECT_NTH
 (
__gëho°«me_Æüs
, (*
__buf
, 
size_t
 
__buÊí
),

337 
gëho°«me
Ë
	`__n⁄nuŒ
 ((1));

338 
	`__REDIRECT_NTH
 (
__gëho°«me_chk_w¨n
,

339 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

340 
__gëho°«me_chk
)

341 
	`__n⁄nuŒ
 ((1)Ë
	`__w¨«âr
 ("gethostname called with bigger buflenÅhan "

344 
__exã∫_Æways_ölöe
 

345 
	`__NTH
 (
	$gëho°«me
 (*
__buf
, 
size_t
 
__buÊí
))

347 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

349 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

350  
	`__gëho°«me_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

352 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

353  
	`__gëho°«me_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

355  
	`__gëho°«me_Æüs
 (
__buf
, 
__buÊí
);

356 
	}
}

360 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_UNIX98
)

361 
	$__gëdomaö«me_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

362 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

363 
	`__REDIRECT_NTH
 (
__gëdomaö«me_Æüs
, (*
__buf
,

364 
size_t
 
__buÊí
),

365 
gëdomaö«me
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

366 
	`__REDIRECT_NTH
 (
__gëdomaö«me_chk_w¨n
,

367 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

368 
__gëdomaö«me_chk
)

369 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__w¨«âr
 ("getdomainname called with bigger "

373 
__exã∫_Æways_ölöe
 

374 
	`__NTH
 (
	$gëdomaö«me
 (*
__buf
, 
size_t
 
__buÊí
))

376 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

378 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

379  
	`__gëdomaö«me_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

381 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

382  
	`__gëdomaö«me_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

384  
	`__gëdomaö«me_Æüs
 (
__buf
, 
__buÊí
);

385 
	}
}

	@/usr/include/bits/waitflags.h

20 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


26 
	#WNOHANG
 1

	)

27 
	#WUNTRACED
 2

	)

30 
	#WSTOPPED
 2

	)

31 
	#WEXITED
 4

	)

32 
	#WCONTINUED
 8

	)

33 
	#WNOWAIT
 0x01000000

	)

35 
	#__WNOTHREAD
 0x20000000

	)

37 
	#__WALL
 0x40000000

	)

38 
	#__WCLONE
 0x80000000

	)

	@/usr/include/bits/waitstatus.h

20 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


29 
	#__WEXITSTATUS
(
°©us
Ë(((°©usË& 0xff00Ë>> 8)

	)

32 
	#__WTERMSIG
(
°©us
Ë((°©usË& 0x7f)

	)

35 
	#__WSTOPSIG
(
°©us
Ë
	`__WEXITSTATUS
(°©us)

	)

38 
	#__WIFEXITED
(
°©us
Ë(
	`__WTERMSIG
(°©usË=0)

	)

41 
	#__WIFSIGNALED
(
°©us
) \

42 (((sig√d Ë(((
°©us
Ë& 0x7fË+ 1Ë>> 1Ë> 0)

	)

45 
	#__WIFSTOPPED
(
°©us
Ë(((°©usË& 0xffË=0x7f)

	)

49 #ifde‡
WCONTINUED


50 
	#__WIFCONTINUED
(
°©us
Ë((°©usË=
__W_CONTINUED
)

	)

54 
	#__WCOREDUMP
(
°©us
Ë((°©usË& 
__WCOREFLAG
)

	)

57 
	#__W_EXITCODE
(
ªt
, 
sig
Ë(‘ëË<< 8 | (sig))

	)

58 
	#__W_STOPCODE
(
sig
Ë((sigË<< 8 | 0x7f)

	)

59 
	#__W_CONTINUED
 0xffff

	)

60 
	#__WCOREFLAG
 0x80

	)

63 #ifdef 
__USE_BSD


65 
	~<ídün.h
>

67 
	uwaô


69 
	mw_°©us
;

72 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


73 
	m__w_ãrmsig
:7;

74 
	m__w_c‹edump
:1;

75 
	m__w_ªtcode
:8;

78 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


80 
	m__w_ªtcode
:8;

81 
	m__w_c‹edump
:1;

82 
	m__w_ãrmsig
:7;

84 } 
	m__waô_ãrmö©ed
;

87 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


88 
	m__w_°›vÆ
:8;

89 
	m__w_°›sig
:8;

92 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


94 
	m__w_°›sig
:8;

95 
	m__w_°›vÆ
:8;

97 } 
	m__waô_°›≥d
;

100 
	#w_ãrmsig
 
__waô_ãrmö©ed
.
__w_ãrmsig


	)

101 
	#w_c‹edump
 
__waô_ãrmö©ed
.
__w_c‹edump


	)

102 
	#w_ªtcode
 
__waô_ãrmö©ed
.
__w_ªtcode


	)

103 
	#w_°›sig
 
__waô_°›≥d
.
__w_°›sig


	)

104 
	#w_°›vÆ
 
__waô_°›≥d
.
__w_°›vÆ


	)

	@/usr/include/bits/wchar.h

20 #i‚de‡
_BITS_WCHAR_H


21 
	#_BITS_WCHAR_H
 1

	)

23 
	#__WCHAR_MIN
 (-2147483647 - 1)

	)

24 
	#__WCHAR_MAX
 (2147483647)

	)

	@/usr/include/bits/wordsize.h

3 #i‡
deföed
 
__x86_64__


4 
	#__WORDSIZE
 64

	)

5 
	#__WORDSIZE_COMPAT32
 1

	)

7 
	#__WORDSIZE
 32

	)

	@/usr/include/bits/xopen_lim.h

30 #i‚de‡
_XOPEN_LIM_H


31 
	#_XOPEN_LIM_H
 1

	)

33 
	#__√ed_IOV_MAX


	)

34 
	~<bôs/°dio_lim.h
>

66 
	#_XOPEN_IOV_MAX
 
_POSIX_UIO_MAXIOV


	)

71 
	#NL_ARGMAX
 
_POSIX_ARG_MAX


	)

74 
	#NL_LANGMAX
 
_POSIX2_LINE_MAX


	)

77 
	#NL_MSGMAX
 
INT_MAX


	)

81 
	#NL_NMAX
 
INT_MAX


	)

84 
	#NL_SETMAX
 
INT_MAX


	)

87 
	#NL_TEXTMAX
 
INT_MAX


	)

90 
	#NZERO
 20

	)

94 #ifde‡
INT_MAX


95 #i‡
INT_MAX
 == 32767

96 
	#WORD_BIT
 16

	)

98 #i‡
INT_MAX
 == 2147483647

99 
	#WORD_BIT
 32

	)

102 
	#WORD_BIT
 64

	)

105 #ñi‡
deföed
 
__INT_MAX__


106 #i‡
__INT_MAX__
 == 32767

107 
	#WORD_BIT
 16

	)

109 #i‡
__INT_MAX__
 == 2147483647

110 
	#WORD_BIT
 32

	)

113 
	#WORD_BIT
 64

	)

117 
	#WORD_BIT
 32

	)

121 #ifde‡
LONG_MAX


122 #i‡
LONG_MAX
 == 2147483647

123 
	#LONG_BIT
 32

	)

126 
	#LONG_BIT
 64

	)

128 #ñi‡
deföed
 
__LONG_MAX__


129 #i‡
__LONG_MAX__
 == 2147483647

130 
	#LONG_BIT
 32

	)

133 
	#LONG_BIT
 64

	)

136 
	~<bôs/w‹dsize.h
>

137 #i‡
__WORDSIZE
 == 64

138 
	#LONG_BIT
 64

	)

140 
	#LONG_BIT
 32

	)

	@/usr/include/endian.h

19 #i‚def 
_ENDIAN_H


20 
	#_ENDIAN_H
 1

	)

22 
	~<„©uªs.h
>

32 
	#__LITTLE_ENDIAN
 1234

	)

33 
	#__BIG_ENDIAN
 4321

	)

34 
	#__PDP_ENDIAN
 3412

	)

37 
	~<bôs/ídün.h
>

41 #i‚de‡
__FLOAT_WORD_ORDER


42 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

45 #ifdef 
__USE_BSD


46 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

47 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

48 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

49 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

52 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


53 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

54 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


55 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

59 #ifde‡
__USE_BSD


61 
	~<bôs/byãsw≠.h
>

63 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


64 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

65 
	#htﬁe16
(
x
Ë(x)

	)

66 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

67 
	#À16toh
(
x
Ë(x)

	)

69 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

70 
	#htﬁe32
(
x
Ë(x)

	)

71 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

72 
	#À32toh
(
x
Ë(x)

	)

74 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

75 
	#htﬁe64
(
x
Ë(x)

	)

76 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

77 
	#À64toh
(
x
Ë(x)

	)

79 
	#htobe16
(
x
Ë(x)

	)

80 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

81 
	#be16toh
(
x
Ë(x)

	)

82 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

84 
	#htobe32
(
x
Ë(x)

	)

85 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

86 
	#be32toh
(
x
Ë(x)

	)

87 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

89 
	#htobe64
(
x
Ë(x)

	)

90 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

91 
	#be64toh
(
x
Ë(x)

	)

92 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/features.h

19 #i‚def 
_FEATURES_H


20 
	#_FEATURES_H
 1

	)

96 #unde‡
__USE_ISOC99


97 #unde‡
__USE_ISOC95


98 #unde‡
__USE_POSIX


99 #unde‡
__USE_POSIX2


100 #unde‡
__USE_POSIX199309


101 #unde‡
__USE_POSIX199506


102 #unde‡
__USE_XOPEN


103 #unde‡
__USE_XOPEN_EXTENDED


104 #unde‡
__USE_UNIX98


105 #unde‡
__USE_XOPEN2K


106 #unde‡
__USE_XOPEN2KXSI


107 #unde‡
__USE_XOPEN2K8


108 #unde‡
__USE_XOPEN2K8XSI


109 #unde‡
__USE_LARGEFILE


110 #unde‡
__USE_LARGEFILE64


111 #unde‡
__USE_FILE_OFFSET64


112 #unde‡
__USE_BSD


113 #unde‡
__USE_SVID


114 #unde‡
__USE_MISC


115 #unde‡
__USE_ATFILE


116 #unde‡
__USE_GNU


117 #unde‡
__USE_REENTRANT


118 #unde‡
__USE_FORTIFY_LEVEL


119 #unde‡
__FAVOR_BSD


120 #unde‡
__KERNEL_STRICT_NAMES


124 #i‚de‡
_LOOSE_KERNEL_NAMES


125 
	#__KERNEL_STRICT_NAMES


	)

129 
	#__USE_ANSI
 1

	)

138 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


139 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

140 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

142 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

147 #i‡
deföed
 
_BSD_SOURCE
 && \

148 !(
deföed
 
	g_POSIX_SOURCE
 || deföed 
	g_POSIX_C_SOURCE
 || \

149 
deföed
 
	g_XOPEN_SOURCE
 || deföed 
	g_GNU_SOURCE
 || deföed 
	g_SVID_SOURCE
)

150 
	#__FAVOR_BSD
 1

	)

154 #ifde‡
_GNU_SOURCE


155 #unde‡
_ISOC95_SOURCE


156 
	#_ISOC95_SOURCE
 1

	)

157 #unde‡
_ISOC99_SOURCE


158 
	#_ISOC99_SOURCE
 1

	)

159 #unde‡
_POSIX_SOURCE


160 
	#_POSIX_SOURCE
 1

	)

161 #unde‡
_POSIX_C_SOURCE


162 
	#_POSIX_C_SOURCE
 200809L

	)

163 #unde‡
_XOPEN_SOURCE


164 
	#_XOPEN_SOURCE
 700

	)

165 #unde‡
_XOPEN_SOURCE_EXTENDED


166 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

167 #unde‡
_LARGEFILE64_SOURCE


168 
	#_LARGEFILE64_SOURCE
 1

	)

169 #unde‡
_BSD_SOURCE


170 
	#_BSD_SOURCE
 1

	)

171 #unde‡
_SVID_SOURCE


172 
	#_SVID_SOURCE
 1

	)

173 #unde‡
_ATFILE_SOURCE


174 
	#_ATFILE_SOURCE
 1

	)

179 #i‡(!
deföed
 
__STRICT_ANSI__
 && !deföed 
_ISOC99_SOURCE
 && \

180 !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 && \

181 !
deföed
 
	g_XOPEN_SOURCE
 && !deföed 
	g_BSD_SOURCE
 && !deföed 
	g_SVID_SOURCE
)

182 
	#_BSD_SOURCE
 1

	)

183 
	#_SVID_SOURCE
 1

	)

190 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC9X_SOURCE
 \

191 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

192 
	#__USE_ISOC99
 1

	)

196 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC9X_SOURCE
 \

197 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

198 
	#__USE_ISOC95
 1

	)

203 #i‡((!
deföed
 
__STRICT_ANSI__
 || (
_XOPEN_SOURCE
 - 0) >= 500) && \

204 !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

205 
	#_POSIX_SOURCE
 1

	)

206 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

207 
	#_POSIX_C_SOURCE
 2

	)

208 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

209 
	#_POSIX_C_SOURCE
 199506L

	)

210 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

211 
	#_POSIX_C_SOURCE
 200112L

	)

213 
	#_POSIX_C_SOURCE
 200809L

	)

215 
	#__USE_POSIX_IMPLICITLY
 1

	)

218 #i‡
deföed
 
_POSIX_SOURCE
 || 
_POSIX_C_SOURCE
 >1 || deföed 
_XOPEN_SOURCE


219 
	#__USE_POSIX
 1

	)

222 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


223 
	#__USE_POSIX2
 1

	)

226 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199309L

227 
	#__USE_POSIX199309
 1

	)

230 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199506L

231 
	#__USE_POSIX199506
 1

	)

234 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200112L

235 
	#__USE_XOPEN2K
 1

	)

236 #unde‡
__USE_ISOC95


237 
	#__USE_ISOC95
 1

	)

238 #unde‡
__USE_ISOC99


239 
	#__USE_ISOC99
 1

	)

242 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200809L

243 
	#__USE_XOPEN2K8
 1

	)

244 #unde‡
_ATFILE_SOURCE


245 
	#_ATFILE_SOURCE
 1

	)

248 #ifdef 
_XOPEN_SOURCE


249 
	#__USE_XOPEN
 1

	)

250 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

251 
	#__USE_XOPEN_EXTENDED
 1

	)

252 
	#__USE_UNIX98
 1

	)

253 #unde‡
_LARGEFILE_SOURCE


254 
	#_LARGEFILE_SOURCE
 1

	)

255 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

256 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

257 
	#__USE_XOPEN2K8
 1

	)

258 
	#__USE_XOPEN2K8XSI
 1

	)

260 
	#__USE_XOPEN2K
 1

	)

261 
	#__USE_XOPEN2KXSI
 1

	)

262 #unde‡
__USE_ISOC95


263 
	#__USE_ISOC95
 1

	)

264 #unde‡
__USE_ISOC99


265 
	#__USE_ISOC99
 1

	)

268 #ifde‡
_XOPEN_SOURCE_EXTENDED


269 
	#__USE_XOPEN_EXTENDED
 1

	)

274 #ifde‡
_LARGEFILE_SOURCE


275 
	#__USE_LARGEFILE
 1

	)

278 #ifde‡
_LARGEFILE64_SOURCE


279 
	#__USE_LARGEFILE64
 1

	)

282 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

283 
	#__USE_FILE_OFFSET64
 1

	)

286 #i‡
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE


287 
	#__USE_MISC
 1

	)

290 #ifdef 
_BSD_SOURCE


291 
	#__USE_BSD
 1

	)

294 #ifdef 
_SVID_SOURCE


295 
	#__USE_SVID
 1

	)

298 #ifdef 
_ATFILE_SOURCE


299 
	#__USE_ATFILE
 1

	)

302 #ifdef 
_GNU_SOURCE


303 
	#__USE_GNU
 1

	)

306 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


307 
	#__USE_REENTRANT
 1

	)

310 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

311 && 
deföed
 
__OPTIMIZE__
 && __OPTIMIZE__ > 0

312 #i‡!
__GNUC_PREREQ
 (4, 1)

313 #ifde‡
__GNUC_RH_RELEASE__


314 #w¨nög 
_FORTIFY_SOURCE
 
suµ‹ãd
 
⁄ly
 
wôh
 
GCC
 4.1 
™d
 
œãr


316 
	#__USE_FORTIFY_LEVEL
 0

	)

317 #ñi‡
_FORTIFY_SOURCE
 > 1

318 
	#__USE_FORTIFY_LEVEL
 2

	)

320 
	#__USE_FORTIFY_LEVEL
 1

	)

323 
	#__USE_FORTIFY_LEVEL
 0

	)

327 
	#__STDC_IEC_559__
 1

	)

328 
	#__STDC_IEC_559_COMPLEX__
 1

	)

331 
	#__STDC_ISO_10646__
 200009L

	)

339 #unde‡
__GNU_LIBRARY__


340 
	#__GNU_LIBRARY__
 6

	)

344 
	#__GLIBC__
 2

	)

345 
	#__GLIBC_MINOR__
 12

	)

347 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

348 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

351 #i‡
deföed
 
__GNUC__
 \

352 || (
deföed
 
	g__PGI
 && deföed 
	g__i386__
 ) \

353 || (
deföed
 
	g__INTEL_COMPILER
 && (deföed 
	g__i386__
 || deföed 
	g__ü64__
)) \

354 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L)

355 
	#__GLIBC_HAVE_LONG_LONG
 1

	)

359 #i‚de‡
__ASSEMBLER__


360 #i‚de‡
_SYS_CDEFS_H


361 
	~<sys/cdefs.h
>

366 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


367 
	#__USE_LARGEFILE
 1

	)

368 
	#__USE_LARGEFILE64
 1

	)

374 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

375 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

376 && 
deföed
 
	g__exã∫_ölöe


377 
	#__USE_EXTERN_INLINES
 1

	)

385 
	~<gnu/°ubs.h
>

	@/usr/include/getopt.h

21 #i‚de‡
_GETOPT_H


23 #i‚de‡
__√ed_gë›t


24 
	#_GETOPT_H
 1

	)

34 #i‡!
deföed
 
__GNU_LIBRARY__


35 
	~<˘y≥.h
>

38 #i‚de‡
__THROW


39 #i‚de‡
__GNUC_PREREQ


40 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë(0)

	)

42 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

43 
	#__THROW
 
	`throw
 ()

	)

45 
	#__THROW


	)

49 #ifdef 
__˝lu•lus


59 *
›èrg
;

73 
›töd
;

78 
›ãº
;

82 
›t›t
;

84 #i‚de‡
__√ed_gë›t


106 
	s›ti⁄


108 c⁄° *
	g«me
;

111 
	ghas_¨g
;

112 *
	gÊag
;

113 
	gvÆ
;

118 
	#no_¨gumít
 0

	)

119 
	#ªquúed_¨gumít
 1

	)

120 
	#›ti⁄Æ_¨gumít
 2

	)

148 #ifde‡
__GNU_LIBRARY__


152 
gë›t
 (
___¨gc
, *c⁄° *
___¨gv
, c⁄° *
__sh‹t›ts
)

153 
__THROW
;

155 #i‡
deföed
 
__√ed_gë›t
 && deföed 
__USE_POSIX2
 \

156 && !
deföed
 
	g__USE_POSIX_IMPLICITLY
 && !deföed 
	g__USE_GNU


160 #ifde‡
__REDIRECT


161 
__REDIRECT
 (
gë›t
, (
___¨gc
, *c⁄° *
___¨gv
,

162 c⁄° *
__sh‹t›ts
),

163 
__posix_gë›t
Ë
__THROW
;

165 
__posix_gë›t
 (
___¨gc
, *c⁄° *
___¨gv
,

166 c⁄° *
__sh‹t›ts
Ë
__THROW
;

167 
	#gë›t
 
__posix_gë›t


	)

171 
gë›t
 ();

174 #i‚de‡
__√ed_gë›t


175 
gë›t_l⁄g
 (
___¨gc
, *c⁄° *
___¨gv
,

176 c⁄° *
__sh‹t›ts
,

177 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

178 
__THROW
;

179 
gë›t_l⁄g_⁄ly
 (
___¨gc
, *c⁄° *
___¨gv
,

180 c⁄° *
__sh‹t›ts
,

181 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

182 
__THROW
;

186 #ifdef 
__˝lu•lus


191 #unde‡
__√ed_gë›t


	@/usr/include/libio.h

29 #i‚de‡
_IO_STDIO_H


30 
	#_IO_STDIO_H


	)

32 
	~<_G_c⁄fig.h
>

34 
	#_IO_pos_t
 
_G_Âos_t


	)

35 
	#_IO_Âos_t
 
_G_Âos_t


	)

36 
	#_IO_Âos64_t
 
_G_Âos64_t


	)

37 
	#_IO_size_t
 
_G_size_t


	)

38 
	#_IO_ssize_t
 
_G_ssize_t


	)

39 
	#_IO_off_t
 
_G_off_t


	)

40 
	#_IO_off64_t
 
_G_off64_t


	)

41 
	#_IO_pid_t
 
_G_pid_t


	)

42 
	#_IO_uid_t
 
_G_uid_t


	)

43 
	#_IO_ic⁄v_t
 
_G_ic⁄v_t


	)

44 
	#_IO_HAVE_SYS_WAIT
 
_G_HAVE_SYS_WAIT


	)

45 
	#_IO_HAVE_ST_BLKSIZE
 
_G_HAVE_ST_BLKSIZE


	)

46 
	#_IO_BUFSIZ
 
_G_BUFSIZ


	)

47 
	#_IO_va_li°
 
_G_va_li°


	)

48 
	#_IO_wöt_t
 
_G_wöt_t


	)

50 #ifde‡
_G_NEED_STDARG_H


52 
	#__√ed___va_li°


	)

53 
	~<°d¨g.h
>

54 #ifde‡
__GNUC_VA_LIST


55 #unde‡
_IO_va_li°


56 
	#_IO_va_li°
 
__gnuc_va_li°


	)

60 #i‚de‡
__P


61 #i‡
_G_HAVE_SYS_CDEFS


62 
	~<sys/cdefs.h
>

64 #ifde‡
__STDC__


65 
	#__P
(
p
Ë
	)
p

66 
	#__PMT
(
p
Ë
	)
p

68 
	#__P
(
p
Ë()

	)

69 
	#__PMT
(
p
Ë()

	)

75 #i‚de‡
_PARAMS


76 
	#_PARAMS
(
¥Ÿos
Ë
	`__P
’rŸos)

	)

79 #i‚de‡
__STDC__


81 c⁄°

	)

84 
	#_IO_UNIFIED_JUMPTABLES
 1

	)

85 #i‚de‡
_G_HAVE_PRINTF_FP


86 
	#_IO_USE_DTOA
 1

	)

89 #i‚de‡
EOF


90 
	#EOF
 (-1)

	)

92 #i‚de‡
NULL


93 #i‡
deföed
 
__GNUG__
 && \

94 (
	g__GNUC__
 > 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 >= 8))

95 
	#NULL
 (
__nuŒ
)

	)

97 #i‡!
deföed
(
__˝lu•lus
)

98 
	#NULL
 ((*)0)

	)

100 
	#NULL
 (0)

	)

105 
	#_IOS_INPUT
 1

	)

106 
	#_IOS_OUTPUT
 2

	)

107 
	#_IOS_ATEND
 4

	)

108 
	#_IOS_APPEND
 8

	)

109 
	#_IOS_TRUNC
 16

	)

110 
	#_IOS_NOCREATE
 32

	)

111 
	#_IOS_NOREPLACE
 64

	)

112 
	#_IOS_BIN
 128

	)

120 
	#_IO_MAGIC
 0xFBAD0000

	)

121 
	#_OLD_STDIO_MAGIC
 0xFABC0000

	)

122 
	#_IO_MAGIC_MASK
 0xFFFF0000

	)

123 
	#_IO_USER_BUF
 1

	)

124 
	#_IO_UNBUFFERED
 2

	)

125 
	#_IO_NO_READS
 4

	)

126 
	#_IO_NO_WRITES
 8

	)

127 
	#_IO_EOF_SEEN
 0x10

	)

128 
	#_IO_ERR_SEEN
 0x20

	)

129 
	#_IO_DELETE_DONT_CLOSE
 0x40

	)

130 
	#_IO_LINKED
 0x80

	)

131 
	#_IO_IN_BACKUP
 0x100

	)

132 
	#_IO_LINE_BUF
 0x200

	)

133 
	#_IO_TIED_PUT_GET
 0x400

	)

134 
	#_IO_CURRENTLY_PUTTING
 0x800

	)

135 
	#_IO_IS_APPENDING
 0x1000

	)

136 
	#_IO_IS_FILEBUF
 0x2000

	)

137 
	#_IO_BAD_SEEN
 0x4000

	)

138 
	#_IO_USER_LOCK
 0x8000

	)

140 
	#_IO_FLAGS2_MMAP
 1

	)

141 
	#_IO_FLAGS2_NOTCANCEL
 2

	)

142 #ifde‡
_LIBC


143 
	#_IO_FLAGS2_FORTIFY
 4

	)

145 
	#_IO_FLAGS2_USER_WBUF
 8

	)

146 #ifde‡
_LIBC


147 
	#_IO_FLAGS2_SCANF_STD
 16

	)

151 
	#_IO_SKIPWS
 01

	)

152 
	#_IO_LEFT
 02

	)

153 
	#_IO_RIGHT
 04

	)

154 
	#_IO_INTERNAL
 010

	)

155 
	#_IO_DEC
 020

	)

156 
	#_IO_OCT
 040

	)

157 
	#_IO_HEX
 0100

	)

158 
	#_IO_SHOWBASE
 0200

	)

159 
	#_IO_SHOWPOINT
 0400

	)

160 
	#_IO_UPPERCASE
 01000

	)

161 
	#_IO_SHOWPOS
 02000

	)

162 
	#_IO_SCIENTIFIC
 04000

	)

163 
	#_IO_FIXED
 010000

	)

164 
	#_IO_UNITBUF
 020000

	)

165 
	#_IO_STDIO
 040000

	)

166 
	#_IO_DONT_CLOSE
 0100000

	)

167 
	#_IO_BOOLALPHA
 0200000

	)

170 
_IO_jump_t
; 
	g_IO_FILE
;

173 #ifde‡
_IO_MTSAFE_IO


174 #i‡
deföed
 
__GLIBC__
 && __GLIBC__ >= 2

175 
	~<bôs/°dio-lock.h
>

180 
	t_IO_lock_t
;

186 
	s_IO_m¨kî
 {

187 
_IO_m¨kî
 *
	m_√xt
;

188 
_IO_FILE
 *
	m_sbuf
;

192 
	m_pos
;

194 
£t_°ªampos
(
°ªampos
 
•
Ë{ 
	m_•os
 = sp; }

195 
£t_off£t
(
off£t
Ë{ 
	m_pos
 = off£t; 
	m_•os
 = (
°ªampos
)(-2); }

196 
	mpublic
:

197 
°ªamm¨kî
(
°ªambuf
 *
sb
);

198 ~
°ªamm¨kî
();

199 
ßvög
(Ë{  
	m_•os
 == -2; }

200 
dñè
(
°ªamm¨kî
&);

201 
dñè
();

206 
	e__codecvt_ªsu…


208 
	m__codecvt_ok
,

209 
	m__codecvt_∑πül
,

210 
	m__codecvt_îr‹
,

211 
	m__codecvt_noc⁄v


214 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


217 
	s_IO_codecvt


219 (*
	m__codecvt_de°r
Ë(
	m_IO_codecvt
 *);

220 
__codecvt_ªsu…
 (*
__codecvt_do_out
Ë(
	m_IO_codecvt
 *,

221 
	m__mb°©e_t
 *,

222 c⁄° 
	mwch¨_t
 *,

223 c⁄° 
	mwch¨_t
 *,

224 c⁄° 
	mwch¨_t
 **, *,

226 
__codecvt_ªsu…
 (*
__codecvt_do_unshi·
Ë(
	m_IO_codecvt
 *,

227 
	m__mb°©e_t
 *, *,

229 
__codecvt_ªsu…
 (*
__codecvt_do_ö
Ë(
	m_IO_codecvt
 *,

230 
	m__mb°©e_t
 *,

232 c⁄° **, 
	mwch¨_t
 *,

233 
	mwch¨_t
 *, wchar_t **);

234 (*
	m__codecvt_do_ícodög
Ë(
	m_IO_codecvt
 *);

235 (*
	m__codecvt_do_Æways_noc⁄v
Ë(
	m_IO_codecvt
 *);

236 (*
	m__codecvt_do_Àngth
Ë(
	m_IO_codecvt
 *, 
	m__mb°©e_t
 *,

237 c⁄° *, c⁄° *, 
	m_IO_size_t
);

238 (*
	m__codecvt_do_max_Àngth
Ë(
	m_IO_codecvt
 *);

240 
_IO_ic⁄v_t
 
	m__cd_ö
;

241 
_IO_ic⁄v_t
 
	m__cd_out
;

245 
	s_IO_wide_d©a


247 
wch¨_t
 *
	m_IO_ªad_±r
;

248 
wch¨_t
 *
	m_IO_ªad_íd
;

249 
wch¨_t
 *
	m_IO_ªad_ba£
;

250 
wch¨_t
 *
	m_IO_wrôe_ba£
;

251 
wch¨_t
 *
	m_IO_wrôe_±r
;

252 
wch¨_t
 *
	m_IO_wrôe_íd
;

253 
wch¨_t
 *
	m_IO_buf_ba£
;

254 
wch¨_t
 *
	m_IO_buf_íd
;

256 
wch¨_t
 *
	m_IO_ßve_ba£
;

257 
wch¨_t
 *
	m_IO_backup_ba£
;

259 
wch¨_t
 *
	m_IO_ßve_íd
;

261 
__mb°©e_t
 
	m_IO_°©e
;

262 
__mb°©e_t
 
	m_IO_œ°_°©e
;

263 
_IO_codecvt
 
	m_codecvt
;

265 
wch¨_t
 
	m_sh‹tbuf
[1];

267 c⁄° 
_IO_jump_t
 *
	m_wide_vèbÀ
;

271 
	s_IO_FILE
 {

272 
	m_Êags
;

273 
	#_IO_fûe_Êags
 
_Êags


	)

277 * 
	m_IO_ªad_±r
;

278 * 
	m_IO_ªad_íd
;

279 * 
	m_IO_ªad_ba£
;

280 * 
	m_IO_wrôe_ba£
;

281 * 
	m_IO_wrôe_±r
;

282 * 
	m_IO_wrôe_íd
;

283 * 
	m_IO_buf_ba£
;

284 * 
	m_IO_buf_íd
;

286 *
	m_IO_ßve_ba£
;

287 *
	m_IO_backup_ba£
;

288 *
	m_IO_ßve_íd
;

290 
_IO_m¨kî
 *
	m_m¨kîs
;

292 
_IO_FILE
 *
	m_chaö
;

294 
	m_fûío
;

296 
	m_blksize
;

298 
	m_Êags2
;

300 
_IO_off_t
 
	m_ﬁd_off£t
;

302 
	#__HAVE_COLUMN


	)

304 
	m_cur_cﬁumn
;

305 sig√d 
	m_vèbÀ_off£t
;

306 
	m_sh‹tbuf
[1];

310 
_IO_lock_t
 *
	m_lock
;

311 #ifde‡
_IO_USE_OLD_IO_FILE


314 
	s_IO_FILE_com∂ëe


316 
_IO_FILE
 
	m_fûe
;

318 #i‡
deföed
 
_G_IO_IO_FILE_VERSION
 && _G_IO_IO_FILE_VERSION == 0x20001

319 
_IO_off64_t
 
	m_off£t
;

320 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


322 
_IO_codecvt
 *
	m_codecvt
;

323 
_IO_wide_d©a
 *
	m_wide_d©a
;

324 
_IO_FILE
 *
	m_‰ìªs_li°
;

325 *
	m_‰ìªs_buf
;

326 
size_t
 
	m_‰ìªs_size
;

328 *
	m__∑d1
;

329 *
	m__∑d2
;

330 *
	m__∑d3
;

331 *
	m__∑d4
;

332 
size_t
 
	m__∑d5
;

334 
	m_mode
;

336 
	m_unu£d2
[15 *  (Ë- 4 *  (*Ë-  (
size_t
)];

340 #i‚de‡
__˝lu•lus


341 
_IO_FILE
 
	t_IO_FILE
;

344 
	g_IO_FILE_∂us
;

346 
_IO_FILE_∂us
 
_IO_2_1_°dö_
;

347 
_IO_FILE_∂us
 
_IO_2_1_°dout_
;

348 
_IO_FILE_∂us
 
_IO_2_1_°dîr_
;

349 #i‚de‡
_LIBC


350 
	#_IO_°dö
 ((
_IO_FILE
*)(&
_IO_2_1_°dö_
))

	)

351 
	#_IO_°dout
 ((
_IO_FILE
*)(&
_IO_2_1_°dout_
))

	)

352 
	#_IO_°dîr
 ((
_IO_FILE
*)(&
_IO_2_1_°dîr_
))

	)

354 
_IO_FILE
 *
_IO_°dö
 
©åibuã_hiddí
;

355 
_IO_FILE
 *
_IO_°dout
 
©åibuã_hiddí
;

356 
_IO_FILE
 *
_IO_°dîr
 
©åibuã_hiddí
;

364 
__ssize_t
 
	t__io_ªad_‚
 (*
	t__cookõ
, *
	t__buf
, 
	tsize_t
 
	t__nbyãs
);

372 
__ssize_t
 
	t__io_wrôe_‚
 (*
	t__cookõ
, 
	t__c⁄°
 *
	t__buf
,

373 
	tsize_t
 
	t__n
);

381 
	t__io_£ek_‚
 (*
	t__cookõ
, 
	t_IO_off64_t
 *
	t__pos
, 
	t__w
);

384 
	t__io_˛o£_‚
 (*
	t__cookõ
);

387 #ifde‡
_GNU_SOURCE


389 
__io_ªad_‚
 
	tcookõ_ªad_fun˘i⁄_t
;

390 
__io_wrôe_‚
 
	tcookõ_wrôe_fun˘i⁄_t
;

391 
__io_£ek_‚
 
	tcookõ_£ek_fun˘i⁄_t
;

392 
__io_˛o£_‚
 
	tcookõ_˛o£_fun˘i⁄_t
;

397 
__io_ªad_‚
 *
	mªad
;

398 
__io_wrôe_‚
 *
	mwrôe
;

399 
__io_£ek_‚
 *
	m£ek
;

400 
__io_˛o£_‚
 *
	m˛o£
;

401 } 
	t_IO_cookõ_io_fun˘i⁄s_t
;

402 
_IO_cookõ_io_fun˘i⁄s_t
 
	tcookõ_io_fun˘i⁄s_t
;

404 
	g_IO_cookõ_fûe
;

407 
_IO_cookõ_öô
 (
_IO_cookõ_fûe
 *
__cfûe
, 
__ªad_wrôe
,

408 *
__cookõ
, 
_IO_cookõ_io_fun˘i⁄s_t
 
__‚s
);

412 #ifde‡
__˝lu•lus


416 
__undîÊow
 (
_IO_FILE
 *);

417 
__uÊow
 (
_IO_FILE
 *);

418 
__ovîÊow
 (
_IO_FILE
 *, );

419 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


420 
_IO_wöt_t
 
__wundîÊow
 (
_IO_FILE
 *);

421 
_IO_wöt_t
 
__wuÊow
 (
_IO_FILE
 *);

422 
_IO_wöt_t
 
__wovîÊow
 (
_IO_FILE
 *, _IO_wint_t);

425 #i‡ 
__GNUC__
 >= 3

426 
	#_IO_BE
(
ex¥
, 
ªs
Ë
	`__buûtö_ex≥˘
 (”x¥),Ñes)

	)

428 
	#_IO_BE
(
ex¥
, 
ªs
Ë”x¥)

	)

431 
	#_IO_gëc_u∆ocked
(
_Â
) \

432 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

433 ? 
	`__uÊow
 (
_Â
Ë: *(*Ë(_Â)->
_IO_ªad_±r
++)

	)

434 
	#_IO_≥ekc_u∆ocked
(
_Â
) \

435 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

436 && 
	`__undîÊow
 (
_Â
Ë=
EOF
 ? EOF \

437 : *(*Ë(
_Â
)->
_IO_ªad_±r
)

	)

438 
	#_IO_putc_u∆ocked
(
_ch
, 
_Â
) \

439 (
	`_IO_BE
 ((
_Â
)->
_IO_wrôe_±r
 >(_Â)->
_IO_wrôe_íd
, 0) \

440 ? 
	`__ovîÊow
 (
_Â
, (Ë(
_ch
)) \

441 : (Ë(*(
_Â
)->
_IO_wrôe_±r
++ = (
_ch
)))

	)

443 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


444 
	#_IO_gëwc_u∆ocked
(
_Â
) \

445 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

446 || ((
_Â
)->
_wide_d©a
->
_IO_ªad_±r
 \

447 >(
_Â
)->
_wide_d©a
->
_IO_ªad_íd
), 0) \

448 ? 
	`__wuÊow
 (
_Â
Ë: (
_IO_wöt_t
Ë*(_Â)->
_wide_d©a
->
_IO_ªad_±r
++)

	)

449 
	#_IO_putwc_u∆ocked
(
_wch
, 
_Â
) \

450 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

451 || ((
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
 \

452 >(
_Â
)->
_wide_d©a
->
_IO_wrôe_íd
), 0) \

453 ? 
	`__wovîÊow
 (
_Â
, 
_wch
) \

454 : (
_IO_wöt_t
Ë(*(
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
++ = (
_wch
)))

	)

457 
	#_IO_„of_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_EOF_SEEN
Ë!0)

	)

458 
	#_IO_„º‹_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_ERR_SEEN
Ë!0)

	)

460 
_IO_gëc
 (
_IO_FILE
 *
__Â
);

461 
_IO_putc
 (
__c
, 
_IO_FILE
 *
__Â
);

462 
_IO_„of
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

463 
_IO_„º‹
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

465 
_IO_≥ekc_locked
 (
_IO_FILE
 *
__Â
);

468 
	#_IO_PENDING_OUTPUT_COUNT
(
_Â
) \

469 ((
_Â
)->
_IO_wrôe_±r
 - (_Â)->
_IO_wrôe_ba£
)

	)

471 
_IO_Êockfûe
 (
_IO_FILE
 *Ë
__THROW
;

472 
_IO_fu∆ockfûe
 (
_IO_FILE
 *Ë
__THROW
;

473 
_IO_·rylockfûe
 (
_IO_FILE
 *Ë
__THROW
;

475 #ifde‡
_IO_MTSAFE_IO


476 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_locked
 (_Â)

	)

477 
	#_IO_Êockfûe
(
_Â
) \

478 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_Êockfûe
 (_Â)

	)

479 
	#_IO_fu∆ockfûe
(
_Â
) \

480 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_fu∆ockfûe
 (_Â)

	)

482 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_u∆ocked
 (_Â)

	)

483 
	#_IO_Êockfûe
(
_Â
Ë

	)

484 
	#_IO_fu∆ockfûe
(
_Â
Ë

	)

485 
	#_IO_·rylockfûe
(
_Â
Ë

	)

486 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
Ë

	)

487 
	#_IO_˛ónup_ªgi⁄_íd
(
_Doô
Ë

	)

490 
_IO_vfsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, const * __restrict,

491 
_IO_va_li°
, *
__ª°ri˘
);

492 
_IO_vÂrötf
 (
_IO_FILE
 *
__ª°ri˘
, const *__restrict,

493 
_IO_va_li°
);

494 
_IO_ssize_t
 
_IO_∑dn
 (
_IO_FILE
 *, , _IO_ssize_t);

495 
_IO_size_t
 
_IO_sgën
 (
_IO_FILE
 *, *, _IO_size_t);

497 
_IO_off64_t
 
_IO_£ekoff
 (
_IO_FILE
 *, _IO_off64_t, , );

498 
_IO_off64_t
 
_IO_£ekpos
 (
_IO_FILE
 *, _IO_off64_t, );

500 
_IO_‰ì_backup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

502 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


503 
_IO_wöt_t
 
_IO_gëwc
 (
_IO_FILE
 *
__Â
);

504 
_IO_wöt_t
 
_IO_putwc
 (
wch¨_t
 
__wc
, 
_IO_FILE
 *
__Â
);

505 
_IO_fwide
 (
_IO_FILE
 *
__Â
, 
__mode
Ë
__THROW
;

506 #i‡
__GNUC__
 >= 2

509 #i‡
deföed
 
_LIBC
 && deföed 
SHARED


510 
	~<shlib-com∑t.h
>

511 #i‡
SHLIB_COMPAT
 (
libc
, 
GLIBC_2_0
, 
GLIBC_2_1
)

512 
	#_IO_fwide_maybe_öcom∑tibÀ
 \

513 (
	`__buûtö_ex≥˘
 (&
_IO_°dö_u£d
 =
NULL
, 0))

	)

514 c⁄° 
_IO_°dö_u£d
;

515 
wók_exã∫
 (
_IO_°dö_u£d
);

518 #i‚de‡
_IO_fwide_maybe_öcom∑tibÀ


519 
	#_IO_fwide_maybe_öcom∑tibÀ
 (0)

	)

523 
	#_IO_fwide
(
__Â
, 
__mode
) \

524 ({ 
__ªsu…
 = (
__mode
); \

525 i‡(
__ªsu…
 < 0 && ! 
_IO_fwide_maybe_öcom∑tibÀ
) \

527 i‡((
__Â
)->
_mode
 == 0) \

529 (
__Â
)->
_mode
 = -1; \

530 
__ªsu…
 = (
__Â
)->
_mode
; \

532 i‡(
	`__buûtö_c⁄°™t_p
 (
__mode
) && (__mode) == 0) \

533 
__ªsu…
 = 
_IO_fwide_maybe_öcom∑tibÀ
 ? -1 : (
__Â
)->
_mode
; \

535 
__ªsu…
 = 
	`_IO_fwide
 (
__Â
, __result); \

536 
__ªsu…
; })

	)

539 
_IO_vfwsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, c⁄° 
wch¨_t
 * __restrict,

540 
_IO_va_li°
, *
__ª°ri˘
);

541 
_IO_vfw¥ötf
 (
_IO_FILE
 *
__ª°ri˘
, c⁄° 
wch¨_t
 *__restrict,

542 
_IO_va_li°
);

543 
_IO_ssize_t
 
_IO_w∑dn
 (
_IO_FILE
 *, 
wöt_t
, _IO_ssize_t);

544 
_IO_‰ì_wbackup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

547 #ifde‡
__LDBL_COMPAT


548 
	~<bôs/libio-ldbl.h
>

551 #ifde‡
__˝lu•lus


	@/usr/include/linux/limits.h

1 #i‚de‡
_LINUX_LIMITS_H


2 
	#_LINUX_LIMITS_H


	)

4 
	#NR_OPEN
 1024

	)

6 
	#NGROUPS_MAX
 65536

	)

7 
	#ARG_MAX
 131072

	)

8 
	#LINK_MAX
 127

	)

9 
	#MAX_CANON
 255

	)

10 
	#MAX_INPUT
 255

	)

11 
	#NAME_MAX
 255

	)

12 
	#PATH_MAX
 4096

	)

13 
	#PIPE_BUF
 4096

	)

14 
	#XATTR_NAME_MAX
 255

	)

15 
	#XATTR_SIZE_MAX
 65536

	)

16 
	#XATTR_LIST_MAX
 65536

	)

18 
	#RTSIG_MAX
 32

	)

	@/usr/include/linux/param.h

1 #i‚de‡
_LINUX_PARAM_H


2 
	#_LINUX_PARAM_H


	)

4 
	~<asm/∑øm.h
>

	@/usr/include/openssl/e_os2.h

56 
	~<›ís¶/›ís¶c⁄f.h
>

58 #i‚de‡
HEADER_E_OS2_H


59 
	#HEADER_E_OS2_H


	)

61 #ifde‡ 
__˝lu•lus


71 
	#OPENSSL_SYS_UNIX


	)

74 #i‡
deföed
(
__MWERKS__
Ë&& deföed(
macötosh
Ë|| deföed(
OPENSSL_SYSNAME_MAC
)

75 #unde‡
OPENSSL_SYS_UNIX


76 
	#OPENSSL_SYS_MACINTOSH_CLASSIC


	)

80 #i‡
deföed
(
NETWARE
Ë|| deföed(
OPENSSL_SYSNAME_NETWARE
)

81 #unde‡
OPENSSL_SYS_UNIX


82 
	#OPENSSL_SYS_NETWARE


	)

89 #i‡
deföed
(
OPENSSL_SYSNAME_MSDOS
)

90 #unde‡
OPENSSL_SYS_UNIX


91 
	#OPENSSL_SYS_MSDOS


	)

96 #i‡
deföed
(
OPENSSL_SYSNAME_UWIN
)

97 #unde‡
OPENSSL_SYS_UNIX


98 
	#OPENSSL_SYS_WIN32_UWIN


	)

100 #i‡
deföed
(
__CYGWIN32__
Ë|| deföed(
OPENSSL_SYSNAME_CYGWIN32
)

101 #unde‡
OPENSSL_SYS_UNIX


102 
	#OPENSSL_SYS_WIN32_CYGWIN


	)

104 #i‡
deföed
(
_WIN32
Ë|| deföed(
OPENSSL_SYSNAME_WIN32
)

105 #unde‡
OPENSSL_SYS_UNIX


106 
	#OPENSSL_SYS_WIN32


	)

108 #i‡
deföed
(
OPENSSL_SYSNAME_WINNT
)

109 #unde‡
OPENSSL_SYS_UNIX


110 
	#OPENSSL_SYS_WINNT


	)

112 #i‡
deföed
(
OPENSSL_SYSNAME_WINCE
)

113 #unde‡
OPENSSL_SYS_UNIX


114 
	#OPENSSL_SYS_WINCE


	)

120 #i‡
deföed
(
OPENSSL_SYS_WIN32
Ë|| deföed(
OPENSSL_SYS_WINNT
Ë|| deföed(
OPENSSL_SYS_WINCE
)

121 #unde‡
OPENSSL_SYS_UNIX


122 
	#OPENSSL_SYS_WINDOWS


	)

123 #i‚de‡
OPENSSL_SYS_MSDOS


124 
	#OPENSSL_SYS_MSDOS


	)

131 #ifde‡
OPENSSL_SYS_WINDOWS


132 #i‚de‡
OPENSSL_OPT_WINDLL


133 #i‡
deföed
(
_WINDLL
)

135 
	#OPENSSL_OPT_WINDLL


	)

141 #i‡
deföed
(
__VMS
Ë|| deföed(
VMS
Ë|| deföed(
OPENSSL_SYSNAME_VMS
)

142 #unde‡
OPENSSL_SYS_UNIX


143 
	#OPENSSL_SYS_VMS


	)

144 #i‡
deföed
(
__DECC
)

145 
	#OPENSSL_SYS_VMS_DECC


	)

146 #ñi‡
deföed
(
__DECCXX
)

147 
	#OPENSSL_SYS_VMS_DECC


	)

148 
	#OPENSSL_SYS_VMS_DECCXX


	)

150 
	#OPENSSL_SYS_VMS_NODECC


	)

155 #i‡
deföed
(
__EMX__
Ë|| deföed(
__OS2__
)

156 #unde‡
OPENSSL_SYS_UNIX


157 
	#OPENSSL_SYS_OS2


	)

161 #ifde‡
OPENSSL_SYS_UNIX


162 #i‡
deföed
(
löux
Ë|| deföed(
__löux__
Ë|| deföed(
OPENSSL_SYSNAME_LINUX
)

163 
	#OPENSSL_SYS_LINUX


	)

165 #ifde‡
OPENSSL_SYSNAME_MPE


166 
	#OPENSSL_SYS_MPE


	)

168 #ifde‡
OPENSSL_SYSNAME_SNI


169 
	#OPENSSL_SYS_SNI


	)

171 #ifde‡
OPENSSL_SYSNAME_ULTRASPARC


172 
	#OPENSSL_SYS_ULTRASPARC


	)

174 #ifde‡
OPENSSL_SYSNAME_NEWS4


175 
	#OPENSSL_SYS_NEWS4


	)

177 #ifde‡
OPENSSL_SYSNAME_MACOSX


178 
	#OPENSSL_SYS_MACOSX


	)

180 #ifde‡
OPENSSL_SYSNAME_MACOSX_RHAPSODY


181 
	#OPENSSL_SYS_MACOSX_RHAPSODY


	)

182 
	#OPENSSL_SYS_MACOSX


	)

184 #ifde‡
OPENSSL_SYSNAME_SUNOS


185 
	#OPENSSL_SYS_SUNOS


	)

187 #i‡
deföed
(
_CRAY
Ë|| deföed(
OPENSSL_SYSNAME_CRAY
)

188 
	#OPENSSL_SYS_CRAY


	)

190 #i‡
deföed
(
_AIX
Ë|| deföed(
OPENSSL_SYSNAME_AIX
)

191 
	#OPENSSL_SYS_AIX


	)

196 #i‡
deföed
(
__VOS__
Ë|| deföed(
OPENSSL_SYSNAME_VOS
)

197 
	#OPENSSL_SYS_VOS


	)

198 #ifde‡
__HPPA__


199 
	#OPENSSL_SYS_VOS_HPPA


	)

201 #ifde‡
__IA32__


202 
	#OPENSSL_SYS_VOS_IA32


	)

207 #ifde‡
OPENSSL_SYSNAME_VXWORKS


208 
	#OPENSSL_SYS_VXWORKS


	)

212 #i‡
deföed
(
__BEOS__
)

213 
	#OPENSSL_SYS_BEOS


	)

214 
	~<sys/sockë.h
>

215 #i‡
deföed
(
BONE_VERSION
)

216 
	#OPENSSL_SYS_BEOS_BONE


	)

218 
	#OPENSSL_SYS_BEOS_R5


	)

228 #ifde‡
OPENSSL_SYS_MSDOS


229 
	#OPENSSL_UNISTD_IO
 <
io
.
h
>

	)

230 
	#OPENSSL_DECLARE_EXIT
 
	`exô
();

	)

232 
	#OPENSSL_UNISTD_IO
 
OPENSSL_UNISTD


	)

233 
	#OPENSSL_DECLARE_EXIT


	)

255 #i‡
deföed
(
OPENSSL_SYS_VMS_NODECC
)

256 
	#OPENSSL_EXPORT
 
globÆªf


	)

257 
	#OPENSSL_IMPORT
 
globÆªf


	)

258 
	#OPENSSL_GLOBAL
 
globÆdef


	)

259 #ñi‡
deföed
(
OPENSSL_SYS_WINDOWS
Ë&& deföed(
OPENSSL_OPT_WINDLL
)

260 
	#OPENSSL_EXPORT
 
	`__de˛•ec
(
dŒexp‹t
)

	)

261 
	#OPENSSL_IMPORT
 
	`__de˛•ec
(
dŒimp‹t
)

	)

262 
	#OPENSSL_GLOBAL


	)

264 
	#OPENSSL_EXPORT
 

	)

265 
	#OPENSSL_IMPORT
 

	)

266 
	#OPENSSL_GLOBAL


	)

268 
	#OPENSSL_EXTERN
 
OPENSSL_IMPORT


	)

280 #ifde‡
OPENSSL_EXPORT_VAR_AS_FUNCTION


281 
	#OPENSSL_IMPLEMENT_GLOBAL
(
ty≥
,
«me
,
vÆue
) \

282 
ty≥
 *
_shadow_
##
	`«me
() \

283 { 
ty≥
 
_hide_
##
«me
=
vÆue
;  &_hide_##«me; }

	)

284 
	#OPENSSL_DECLARE_GLOBAL
(
ty≥
,
«me
Ëty≥ *
_shadow_
##
	`«me
()

	)

285 
	#OPENSSL_GLOBAL_REF
(
«me
Ë(*(
_shadow_
##
	`«me
()))

	)

287 
	#OPENSSL_IMPLEMENT_GLOBAL
(
ty≥
,
«me
,
vÆue
Ë
OPENSSL_GLOBAL
Åy≥ 
_shadow_
##«me=vÆue;

	)

288 
	#OPENSSL_DECLARE_GLOBAL
(
ty≥
,
«me
Ë
OPENSSL_EXPORT
Åy≥ 
_shadow_
##
	)
«me

289 
	#OPENSSL_GLOBAL_REF
(
«me
Ë
_shadow_
##
	)
«me

292 #i‡
deföed
(
OPENSSL_SYS_MACINTOSH_CLASSIC
Ë&& 
macötosh
==1 && !deföed(
MAC_OS_GUSI_SOURCE
)

293 
	#os¶_ssize_t
 

	)

296 #ifde‡
OPENSSL_SYS_MSDOS


297 
	#os¶_ssize_t
 

	)

300 #i‡
deföed
(
NeXT
Ë|| deföed(
OPENSSL_SYS_NEWS4
Ë|| deföed(
OPENSSL_SYS_SUNOS
)

301 
	#ssize_t
 

	)

304 #i‡
deföed
(
__u…rix
Ë&& !deföed(
ssize_t
)

305 
	#os¶_ssize_t
 

	)

308 #i‚de‡
os¶_ssize_t


309 
	#os¶_ssize_t
 
ssize_t


	)

312 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/ossl_typ.h

55 #i‚de‡
HEADER_OPENSSL_TYPES_H


56 
	#HEADER_OPENSSL_TYPES_H


	)

58 
	~<›ís¶/e_os2.h
>

60 #ifde‡
NO_ASN1_TYPEDEFS


61 
	#ASN1_INTEGER
 
ASN1_STRING


	)

62 
	#ASN1_ENUMERATED
 
ASN1_STRING


	)

63 
	#ASN1_BIT_STRING
 
ASN1_STRING


	)

64 
	#ASN1_OCTET_STRING
 
ASN1_STRING


	)

65 
	#ASN1_PRINTABLESTRING
 
ASN1_STRING


	)

66 
	#ASN1_T61STRING
 
ASN1_STRING


	)

67 
	#ASN1_IA5STRING
 
ASN1_STRING


	)

68 
	#ASN1_UTCTIME
 
ASN1_STRING


	)

69 
	#ASN1_GENERALIZEDTIME
 
ASN1_STRING


	)

70 
	#ASN1_TIME
 
ASN1_STRING


	)

71 
	#ASN1_GENERALSTRING
 
ASN1_STRING


	)

72 
	#ASN1_UNIVERSALSTRING
 
ASN1_STRING


	)

73 
	#ASN1_BMPSTRING
 
ASN1_STRING


	)

74 
	#ASN1_VISIBLESTRING
 
ASN1_STRING


	)

75 
	#ASN1_UTF8STRING
 
ASN1_STRING


	)

76 
	#ASN1_BOOLEAN
 

	)

77 
	#ASN1_NULL
 

	)

79 
a¢1_°rög_°
 
	tASN1_INTEGER
;

80 
a¢1_°rög_°
 
	tASN1_ENUMERATED
;

81 
a¢1_°rög_°
 
	tASN1_BIT_STRING
;

82 
a¢1_°rög_°
 
	tASN1_OCTET_STRING
;

83 
a¢1_°rög_°
 
	tASN1_PRINTABLESTRING
;

84 
a¢1_°rög_°
 
	tASN1_T61STRING
;

85 
a¢1_°rög_°
 
	tASN1_IA5STRING
;

86 
a¢1_°rög_°
 
	tASN1_GENERALSTRING
;

87 
a¢1_°rög_°
 
	tASN1_UNIVERSALSTRING
;

88 
a¢1_°rög_°
 
	tASN1_BMPSTRING
;

89 
a¢1_°rög_°
 
	tASN1_UTCTIME
;

90 
a¢1_°rög_°
 
	tASN1_TIME
;

91 
a¢1_°rög_°
 
	tASN1_GENERALIZEDTIME
;

92 
a¢1_°rög_°
 
	tASN1_VISIBLESTRING
;

93 
a¢1_°rög_°
 
	tASN1_UTF8STRING
;

94 
a¢1_°rög_°
 
	tASN1_STRING
;

95 
	tASN1_BOOLEAN
;

96 
	tASN1_NULL
;

99 
ASN1_ITEM_°
 
	tASN1_ITEM
;

100 
a¢1_p˘x_°
 
	tASN1_PCTX
;

102 #ifde‡
OPENSSL_SYS_WIN32


103 #unde‡
X509_NAME


104 #unde‡
X509_EXTENSIONS


105 #unde‡
X509_CERT_PAIR


106 #unde‡
PKCS7_ISSUER_AND_SERIAL


107 #unde‡
OCSP_REQUEST


108 #unde‡
OCSP_RESPONSE


111 #ifde‡
BIGNUM


112 #unde‡
BIGNUM


114 
bignum_°
 
	tBIGNUM
;

115 
bignum_˘x
 
	tBN_CTX
;

116 
bn_blödög_°
 
	tBN_BLINDING
;

117 
bn_m⁄t_˘x_°
 
	tBN_MONT_CTX
;

118 
bn_ª˝_˘x_°
 
	tBN_RECP_CTX
;

119 
bn_gícb_°
 
	tBN_GENCB
;

121 
buf_mem_°
 
	tBUF_MEM
;

123 
evp_cùhî_°
 
	tEVP_CIPHER
;

124 
evp_cùhî_˘x_°
 
	tEVP_CIPHER_CTX
;

125 
ív_md_°
 
	tEVP_MD
;

126 
ív_md_˘x_°
 
	tEVP_MD_CTX
;

127 
evp_pkey_°
 
	tEVP_PKEY
;

129 
evp_pkey_a¢1_mëhod_°
 
	tEVP_PKEY_ASN1_METHOD
;

131 
evp_pkey_mëhod_°
 
	tEVP_PKEY_METHOD
;

132 
evp_pkey_˘x_°
 
	tEVP_PKEY_CTX
;

134 
dh_°
 
	tDH
;

135 
dh_mëhod
 
	tDH_METHOD
;

137 
dß_°
 
	tDSA
;

138 
dß_mëhod
 
	tDSA_METHOD
;

140 
rß_°
 
	tRSA
;

141 
rß_mëh_°
 
	tRSA_METHOD
;

143 
ønd_mëh_°
 
	tRAND_METHOD
;

145 
ecdh_mëhod
 
	tECDH_METHOD
;

146 
ecdß_mëhod
 
	tECDSA_METHOD
;

148 
x509_°
 
	tX509
;

149 
X509_Æg‹_°
 
	tX509_ALGOR
;

150 
X509_¸l_°
 
	tX509_CRL
;

151 
x509_¸l_mëhod_°
 
	tX509_CRL_METHOD
;

152 
x509_ªvoked_°
 
	tX509_REVOKED
;

153 
X509_«me_°
 
	tX509_NAME
;

154 
X509_pubkey_°
 
	tX509_PUBKEY
;

155 
x509_°‹e_°
 
	tX509_STORE
;

156 
x509_°‹e_˘x_°
 
	tX509_STORE_CTX
;

158 
pkcs8_¥iv_key_öfo_°
 
	tPKCS8_PRIV_KEY_INFO
;

160 
v3_ext_˘x
 
	tX509V3_CTX
;

161 
c⁄f_°
 
	tCONF
;

163 
°‹e_°
 
	tSTORE
;

164 
°‹e_mëhod_°
 
	tSTORE_METHOD
;

166 
ui_°
 
	tUI
;

167 
ui_mëhod_°
 
	tUI_METHOD
;

169 
°_ERR_FNS
 
	tERR_FNS
;

171 
ígöe_°
 
	tENGINE
;

172 
s¶_°
 
	tSSL
;

173 
s¶_˘x_°
 
	tSSL_CTX
;

175 
X509_POLICY_NODE_°
 
	tX509_POLICY_NODE
;

176 
X509_POLICY_LEVEL_°
 
	tX509_POLICY_LEVEL
;

177 
X509_POLICY_TREE_°
 
	tX509_POLICY_TREE
;

178 
X509_POLICY_CACHE_°
 
	tX509_POLICY_CACHE
;

180 
AUTHORITY_KEYID_°
 
	tAUTHORITY_KEYID
;

181 
DIST_POINT_°
 
	tDIST_POINT
;

182 
ISSUING_DIST_POINT_°
 
	tISSUING_DIST_POINT
;

183 
NAME_CONSTRAINTS_°
 
	tNAME_CONSTRAINTS
;

186 
	#DECLARE_PKCS12_STACK_OF
(
ty≥
Ë

	)

187 
	#IMPLEMENT_PKCS12_STACK_OF
(
ty≥
Ë

	)

189 
¸y±o_ex_d©a_°
 
	tCRYPTO_EX_DATA
;

191 
	tCRYPTO_EX_√w
(*
	t∑ª¡
, *
	t±r
, 
	tCRYPTO_EX_DATA
 *
	tad
,

192 
	tidx
, 
	t¨gl
, *
	t¨gp
);

193 
	tCRYPTO_EX_‰ì
(*
	t∑ª¡
, *
	t±r
, 
	tCRYPTO_EX_DATA
 *
	tad
,

194 
	tidx
, 
	t¨gl
, *
	t¨gp
);

195 
	tCRYPTO_EX_dup
(
	tCRYPTO_EX_DATA
 *
	tto
, CRYPTO_EX_DATA *
	t‰om
, *
	t‰om_d
,

196 
	tidx
, 
	t¨gl
, *
	t¨gp
);

198 
oc•_ªq_˘x_°
 
	tOCSP_REQ_CTX
;

199 
oc•_ª•⁄£_°
 
	tOCSP_RESPONSE
;

200 
oc•_ª•⁄dî_id_°
 
	tOCSP_RESPID
;

	@/usr/include/rpc/netdb.h

36 #i‚de‡
_RPC_NETDB_H


37 
	#_RPC_NETDB_H
 1

	)

39 
	~<„©uªs.h
>

41 
	#__√ed_size_t


	)

42 
	~<°ddef.h
>

44 
__BEGIN_DECLS


46 
	sΩ˚¡


48 *
	mr_«me
;

49 **
	mr_Æü£s
;

50 
	mr_numbî
;

53 
	$£åp˚¡
 (
__°ay›í
Ë
__THROW
;

54 
	$ídΩ˚¡
 (Ë
__THROW
;

55 
Ω˚¡
 *
	$gëΩcby«me
 (
__c⁄°
 *
__«me
Ë
__THROW
;

56 
Ω˚¡
 *
	$gëΩcbynumbî
 (
__numbî
Ë
__THROW
;

57 
Ω˚¡
 *
	$gëΩ˚¡
 (Ë
__THROW
;

59 #ifde‡
__USE_MISC


60 
	$gëΩcby«me_r
 (
__c⁄°
 *
__«me
, 
Ω˚¡
 *
__ªsu…_buf
,

61 *
__buf„r
, 
size_t
 
__buÊí
,

62 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

64 
	$gëΩcbynumbî_r
 (
__numbî
, 
Ω˚¡
 *
__ªsu…_buf
,

65 *
__buf„r
, 
size_t
 
__buÊí
,

66 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

68 
	$gëΩ˚¡_r
 (
Ω˚¡
 *
__ªsu…_buf
, *
__buf„r
,

69 
size_t
 
__buÊí
, 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

72 
__END_DECLS


	@/usr/include/sys/poll.h

20 #i‚def 
_SYS_POLL_H


21 
	#_SYS_POLL_H
 1

	)

23 
	~<„©uªs.h
>

26 
	~<bôs/pﬁl.h
>

27 #ifde‡
__USE_GNU


29 
	~<bôs/sig£t.h
>

31 
	#__√ed_time•ec


	)

32 
	~<time.h
>

37 
	tnfds_t
;

40 
	spﬁlfd


42 
	mfd
;

43 
	mevíts
;

44 
	mªvíts
;

48 
__BEGIN_DECLS


58 
pﬁl
 (
pﬁlfd
 *
__fds
, 
nfds_t
 
__nfds
, 
__timeout
);

60 #ifde‡
__USE_GNU


67 
µﬁl
 (
pﬁlfd
 *
__fds
, 
nfds_t
 
__nfds
,

68 
__c⁄°
 
time•ec
 *
__timeout
,

69 
__c⁄°
 
__sig£t_t
 *
__ss
);

72 
	g__END_DECLS


	@/usr/include/sys/syslog.h

32 #i‚de‡
_SYS_SYSLOG_H


33 
	#_SYS_SYSLOG_H
 1

	)

35 
	~<„©uªs.h
>

36 
	#__√ed___va_li°


	)

37 
	~<°d¨g.h
>

40 
	~<bôs/sy¶og-∑th.h
>

51 
	#LOG_EMERG
 0

	)

52 
	#LOG_ALERT
 1

	)

53 
	#LOG_CRIT
 2

	)

54 
	#LOG_ERR
 3

	)

55 
	#LOG_WARNING
 4

	)

56 
	#LOG_NOTICE
 5

	)

57 
	#LOG_INFO
 6

	)

58 
	#LOG_DEBUG
 7

	)

60 
	#LOG_PRIMASK
 0x07

	)

62 
	#LOG_PRI
(
p
Ë(’Ë& 
LOG_PRIMASK
)

	)

63 
	#LOG_MAKEPRI
(
Ác
, 
¥i
Ë(((ÁcË<< 3Ë| (¥i))

	)

65 #ifde‡
SYSLOG_NAMES


66 
	#INTERNAL_NOPRI
 0x10

	)

68 
	#INTERNAL_MARK
 
	`LOG_MAKEPRI
(
LOG_NFACILITIES
, 0)

	)

69 
	s_code
 {

70 *
	mc_«me
;

71 
	mc_vÆ
;

72 } 
	tCODE
;

74 
CODE
 
	g¥i‹ôy«mes
[] =

76 { "Æît", 
LOG_ALERT
 },

77 { "¸ô", 
LOG_CRIT
 },

78 { "debug", 
LOG_DEBUG
 },

79 { "emîg", 
LOG_EMERG
 },

80 { "îr", 
LOG_ERR
 },

81 { "îr‹", 
LOG_ERR
 },

82 { "öfo", 
LOG_INFO
 },

83 { "n⁄e", 
INTERNAL_NOPRI
 },

84 { "nŸi˚", 
LOG_NOTICE
 },

85 { "∑nic", 
LOG_EMERG
 },

86 { "w¨n", 
LOG_WARNING
 },

87 { "w¨nög", 
LOG_WARNING
 },

88 { 
NULL
, -1 }

93 
	#LOG_KERN
 (0<<3Ë

	)

94 
	#LOG_USER
 (1<<3Ë

	)

95 
	#LOG_MAIL
 (2<<3Ë

	)

96 
	#LOG_DAEMON
 (3<<3Ë

	)

97 
	#LOG_AUTH
 (4<<3Ë

	)

98 
	#LOG_SYSLOG
 (5<<3Ë

	)

99 
	#LOG_LPR
 (6<<3Ë

	)

100 
	#LOG_NEWS
 (7<<3Ë

	)

101 
	#LOG_UUCP
 (8<<3Ë

	)

102 
	#LOG_CRON
 (9<<3Ë

	)

103 
	#LOG_AUTHPRIV
 (10<<3Ë

	)

104 
	#LOG_FTP
 (11<<3Ë

	)

107 
	#LOG_LOCAL0
 (16<<3Ë

	)

108 
	#LOG_LOCAL1
 (17<<3Ë

	)

109 
	#LOG_LOCAL2
 (18<<3Ë

	)

110 
	#LOG_LOCAL3
 (19<<3Ë

	)

111 
	#LOG_LOCAL4
 (20<<3Ë

	)

112 
	#LOG_LOCAL5
 (21<<3Ë

	)

113 
	#LOG_LOCAL6
 (22<<3Ë

	)

114 
	#LOG_LOCAL7
 (23<<3Ë

	)

116 
	#LOG_NFACILITIES
 24

	)

117 
	#LOG_FACMASK
 0x03f8

	)

119 
	#LOG_FAC
(
p
Ë((’Ë& 
LOG_FACMASK
Ë>> 3)

	)

121 #ifde‡
SYSLOG_NAMES


122 
CODE
 
	gÁcûôy«mes
[] =

124 { "auth", 
LOG_AUTH
 },

125 { "auth¥iv", 
LOG_AUTHPRIV
 },

126 { "¸⁄", 
LOG_CRON
 },

127 { "d´m⁄", 
LOG_DAEMON
 },

128 { "·p", 
LOG_FTP
 },

129 { "kîn", 
LOG_KERN
 },

130 { "Õr", 
LOG_LPR
 },

131 { "maû", 
LOG_MAIL
 },

132 { "m¨k", 
INTERNAL_MARK
 },

133 { "√ws", 
LOG_NEWS
 },

134 { "£curôy", 
LOG_AUTH
 },

135 { "sy¶og", 
LOG_SYSLOG
 },

136 { "u£r", 
LOG_USER
 },

137 { "uu˝", 
LOG_UUCP
 },

138 { "loˇl0", 
LOG_LOCAL0
 },

139 { "loˇl1", 
LOG_LOCAL1
 },

140 { "loˇl2", 
LOG_LOCAL2
 },

141 { "loˇl3", 
LOG_LOCAL3
 },

142 { "loˇl4", 
LOG_LOCAL4
 },

143 { "loˇl5", 
LOG_LOCAL5
 },

144 { "loˇl6", 
LOG_LOCAL6
 },

145 { "loˇl7", 
LOG_LOCAL7
 },

146 { 
NULL
, -1 }

153 
	#LOG_MASK
(
¥i
Ë(1 << (¥i)Ë

	)

154 
	#LOG_UPTO
(
¥i
Ë((1 << (’ri)+1)Ë- 1Ë

	)

162 
	#LOG_PID
 0x01

	)

163 
	#LOG_CONS
 0x02

	)

164 
	#LOG_ODELAY
 0x04

	)

165 
	#LOG_NDELAY
 0x08

	)

166 
	#LOG_NOWAIT
 0x10

	)

167 
	#LOG_PERROR
 0x20

	)

169 
__BEGIN_DECLS


175 
˛o£log
 ();

181 
›ílog
 (
__c⁄°
 *
__idít
, 
__›ti⁄
, 
__Ácûôy
);

184 
	$£éogmask
 (
__mask
Ë
__THROW
;

190 
	$sy¶og
 (
__¥i
, 
__c⁄°
 *
__fmt
, ...)

191 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

193 #ifde‡
__USE_BSD


200 
	$vsy¶og
 (
__¥i
, 
__c⁄°
 *
__fmt
, 
__gnuc_va_li°
 
__≠
)

201 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

206 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


207 
	~<bôs/sy¶og.h
>

209 #ifde‡
__LDBL_COMPAT


210 
	~<bôs/sy¶og-ldbl.h
>

213 
__END_DECLS


	@/usr/include/sys/sysmacros.h

21 #i‚de‡
_SYS_SYSMACROS_H


22 
	#_SYS_SYSMACROS_H
 1

	)

24 
	~<„©uªs.h
>

29 #ifde‡
__GLIBC_HAVE_LONG_LONG


30 
__exãnsi⁄__


31 
	$gnu_dev_maj‹
 (
__dev
)

32 
__THROW
;

33 
__exãnsi⁄__


34 
	$gnu_dev_mö‹
 (
__dev
)

35 
__THROW
;

36 
__exãnsi⁄__


37 
	$gnu_dev_makedev
 (
__maj‹
,

38 
__mö‹
)

39 
__THROW
;

41 #i‡
deföed
 
__GNUC__
 && __GNUC__ >2 && deföed 
__USE_EXTERN_INLINES


42 
__exãnsi⁄__
 
__exã∫_ölöe
 

43 
	`__NTH
 (
	$gnu_dev_maj‹
 (
__dev
))

45  ((
__dev
 >> 8) & 0xfff) | (() (__dev >> 32) & ~0xfff);

46 
	}
}

48 
__exãnsi⁄__
 
__exã∫_ölöe
 

49 
__NTH
 (
	$gnu_dev_mö‹
 (
__dev
))

51  (
__dev
 & 0xff) | (() (__dev >> 12) & ~0xff);

52 
	}
}

54 
__exãnsi⁄__
 
__exã∫_ölöe
 

55 
__NTH
 (
	$gnu_dev_makedev
 (
__maj‹
, 
__mö‹
))

57  ((
__mö‹
 & 0xffË| ((
__maj‹
 & 0xfff) << 8)

58 | (((Ë(
__mö‹
 & ~0xff)) << 12)

59 | (((Ë(
__maj‹
 & ~0xfff)) << 32));

60 
	}
}

65 
	#maj‹
(
dev
Ë
	`gnu_dev_maj‹
 (dev)

	)

66 
	#mö‹
(
dev
Ë
	`gnu_dev_mö‹
 (dev)

	)

67 
	#makedev
(
maj
, 
mö
Ë
	`gnu_dev_makedev
 (maj, mö)

	)

	@/usr/include/sys/ttydefaults.h

40 #i‚de‡
_SYS_TTYDEFAULTS_H_


41 
	#_SYS_TTYDEFAULTS_H_


	)

46 
	#TTYDEF_IFLAG
 (
BRKINT
 | 
ISTRIP
 | 
ICRNL
 | 
IMAXBEL
 | 
IXON
 | 
IXANY
)

	)

47 
	#TTYDEF_OFLAG
 (
OPOST
 | 
ONLCR
 | 
XTABS
)

	)

48 
	#TTYDEF_LFLAG
 (
ECHO
 | 
ICANON
 | 
ISIG
 | 
IEXTEN
 | 
ECHOE
|
ECHOKE
|
ECHOCTL
)

	)

49 
	#TTYDEF_CFLAG
 (
CREAD
 | 
CS7
 | 
PARENB
 | 
HUPCL
)

	)

50 
	#TTYDEF_SPEED
 (
B9600
)

	)

55 
	#CTRL
(
x
Ë(x&037)

	)

56 
	#CEOF
 
	`CTRL
('d')

	)

57 #ifde‡
_POSIX_VDISABLE


58 
	#CEOL
 
_POSIX_VDISABLE


	)

60 
	#CEOL
 '\0'

	)

62 
	#CERASE
 0177

	)

63 
	#CINTR
 
	`CTRL
('c')

	)

64 #ifde‡
_POSIX_VDISABLE


65 
	#CSTATUS
 
_POSIX_VDISABLE


	)

67 
	#CSTATUS
 '\0'

	)

69 
	#CKILL
 
	`CTRL
('u')

	)

70 
	#CMIN
 1

	)

71 
	#CQUIT
 034

	)

72 
	#CSUSP
 
	`CTRL
('z')

	)

73 
	#CTIME
 0

	)

74 
	#CDSUSP
 
	`CTRL
('y')

	)

75 
	#CSTART
 
	`CTRL
('q')

	)

76 
	#CSTOP
 
	`CTRL
('s')

	)

77 
	#CLNEXT
 
	`CTRL
('v')

	)

78 
	#CDISCARD
 
	`CTRL
('o')

	)

79 
	#CWERASE
 
	`CTRL
('w')

	)

80 
	#CREPRINT
 
	`CTRL
('r')

	)

81 
	#CEOT
 
CEOF


	)

83 
	#CBRK
 
CEOL


	)

84 
	#CRPRNT
 
CREPRINT


	)

85 
	#CFLUSH
 
CDISCARD


	)

93 #ifde‡
TTYDEFCHARS


94 
cc_t
 
	gâydefch¨s
[
NCCS
] = {

95 
CEOF
, 
CEOL
, CEOL, 
CERASE
, 
CWERASE
, 
CKILL
, 
CREPRINT
,

96 
_POSIX_VDISABLE
, 
CINTR
, 
CQUIT
, 
CSUSP
, 
CDSUSP
, 
CSTART
, 
CSTOP
, 
CLNEXT
,

97 
CDISCARD
, 
CMIN
, 
CTIME
, 
CSTATUS
, 
_POSIX_VDISABLE


99 #unde‡
TTYDEFCHARS


	@/usr/include/sys/ucontext.h

19 #i‚de‡
_SYS_UCONTEXT_H


20 
	#_SYS_UCONTEXT_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<sig«l.h
>

24 
	~<bôs/w‹dsize.h
>

28 
	~<bôs/sigc⁄ãxt.h
>

30 #i‡
__WORDSIZE
 == 64

33 
	tgªg_t
;

36 
	#NGREG
 23

	)

39 
gªg_t
 
	tgªg£t_t
[
NGREG
];

41 #ifde‡
__USE_GNU


45 
	mREG_R8
 = 0,

46 
	#REG_R8
 
REG_R8


	)

47 
	mREG_R9
,

48 
	#REG_R9
 
REG_R9


	)

49 
	mREG_R10
,

50 
	#REG_R10
 
REG_R10


	)

51 
	mREG_R11
,

52 
	#REG_R11
 
REG_R11


	)

53 
	mREG_R12
,

54 
	#REG_R12
 
REG_R12


	)

55 
	mREG_R13
,

56 
	#REG_R13
 
REG_R13


	)

57 
	mREG_R14
,

58 
	#REG_R14
 
REG_R14


	)

59 
	mREG_R15
,

60 
	#REG_R15
 
REG_R15


	)

61 
	mREG_RDI
,

62 
	#REG_RDI
 
REG_RDI


	)

63 
	mREG_RSI
,

64 
	#REG_RSI
 
REG_RSI


	)

65 
	mREG_RBP
,

66 
	#REG_RBP
 
REG_RBP


	)

67 
	mREG_RBX
,

68 
	#REG_RBX
 
REG_RBX


	)

69 
	mREG_RDX
,

70 
	#REG_RDX
 
REG_RDX


	)

71 
	mREG_RAX
,

72 
	#REG_RAX
 
REG_RAX


	)

73 
	mREG_RCX
,

74 
	#REG_RCX
 
REG_RCX


	)

75 
	mREG_RSP
,

76 
	#REG_RSP
 
REG_RSP


	)

77 
	mREG_RIP
,

78 
	#REG_RIP
 
REG_RIP


	)

79 
	mREG_EFL
,

80 
	#REG_EFL
 
REG_EFL


	)

81 
	mREG_CSGSFS
,

82 
	#REG_CSGSFS
 
REG_CSGSFS


	)

83 
	mREG_ERR
,

84 
	#REG_ERR
 
REG_ERR


	)

85 
	mREG_TRAPNO
,

86 
	#REG_TRAPNO
 
REG_TRAPNO


	)

87 
	mREG_OLDMASK
,

88 
	#REG_OLDMASK
 
REG_OLDMASK


	)

89 
	mREG_CR2


90 
	#REG_CR2
 
REG_CR2


	)

94 
	s_libc_Âxªg


96 
	msignifiˇnd
[4];

97 
	mexp⁄ít
;

98 
	m∑ddög
[3];

101 
	s_libc_xmmªg


103 
__uöt32_t
 
	mñemít
[4];

106 
	s_libc_Â°©e


109 
__uöt16_t
 
	mcwd
;

110 
__uöt16_t
 
	mswd
;

111 
__uöt16_t
 
	m·w
;

112 
__uöt16_t
 
	mf›
;

113 
__uöt64_t
 
	mrù
;

114 
__uöt64_t
 
	mrdp
;

115 
__uöt32_t
 
	mmxc§
;

116 
__uöt32_t
 
	mmx¸_mask
;

117 
_libc_Âxªg
 
	m_°
[8];

118 
_libc_xmmªg
 
	m_xmm
[16];

119 
__uöt32_t
 
	m∑ddög
[24];

123 
_libc_Â°©e
 *
	tÂªg£t_t
;

128 
gªg£t_t
 
	mgªgs
;

130 
Âªg£t_t
 
	mÂªgs
;

131 
	m__ª£rved1
 [8];

132 } 
	tmc⁄ãxt_t
;

135 
	suc⁄ãxt


137 
	muc_Êags
;

138 
uc⁄ãxt
 *
	muc_lök
;

139 
°ack_t
 
	muc_°ack
;

140 
mc⁄ãxt_t
 
	muc_mc⁄ãxt
;

141 
__sig£t_t
 
	muc_sigmask
;

142 
_libc_Â°©e
 
	m__Âªgs_mem
;

143 } 
	tuc⁄ãxt_t
;

148 
	tgªg_t
;

151 
	#NGREG
 19

	)

154 
gªg_t
 
	tgªg£t_t
[
NGREG
];

156 #ifde‡
__USE_GNU


160 
	mREG_GS
 = 0,

161 
	#REG_GS
 
REG_GS


	)

162 
	mREG_FS
,

163 
	#REG_FS
 
REG_FS


	)

164 
	mREG_ES
,

165 
	#REG_ES
 
REG_ES


	)

166 
	mREG_DS
,

167 
	#REG_DS
 
REG_DS


	)

168 
	mREG_EDI
,

169 
	#REG_EDI
 
REG_EDI


	)

170 
	mREG_ESI
,

171 
	#REG_ESI
 
REG_ESI


	)

172 
	mREG_EBP
,

173 
	#REG_EBP
 
REG_EBP


	)

174 
	mREG_ESP
,

175 
	#REG_ESP
 
REG_ESP


	)

176 
	mREG_EBX
,

177 
	#REG_EBX
 
REG_EBX


	)

178 
	mREG_EDX
,

179 
	#REG_EDX
 
REG_EDX


	)

180 
	mREG_ECX
,

181 
	#REG_ECX
 
REG_ECX


	)

182 
	mREG_EAX
,

183 
	#REG_EAX
 
REG_EAX


	)

184 
	mREG_TRAPNO
,

185 
	#REG_TRAPNO
 
REG_TRAPNO


	)

186 
	mREG_ERR
,

187 
	#REG_ERR
 
REG_ERR


	)

188 
	mREG_EIP
,

189 
	#REG_EIP
 
REG_EIP


	)

190 
	mREG_CS
,

191 
	#REG_CS
 
REG_CS


	)

192 
	mREG_EFL
,

193 
	#REG_EFL
 
REG_EFL


	)

194 
	mREG_UESP
,

195 
	#REG_UESP
 
REG_UESP


	)

196 
	mREG_SS


197 
	#REG_SS
 
REG_SS


	)

202 
	s_libc_Âªg


204 
	msignifiˇnd
[4];

205 
	mexp⁄ít
;

208 
	s_libc_Â°©e


210 
	mcw
;

211 
	msw
;

212 
	mèg
;

213 
	mùoff
;

214 
	mcs£l
;

215 
	md©aoff
;

216 
	md©a£l
;

217 
_libc_Âªg
 
	m_°
[8];

218 
	m°©us
;

222 
_libc_Â°©e
 *
	tÂªg£t_t
;

227 
gªg£t_t
 
	mgªgs
;

230 
Âªg£t_t
 
	mÂªgs
;

231 
	mﬁdmask
;

232 
	m¸2
;

233 } 
	tmc⁄ãxt_t
;

236 
	suc⁄ãxt


238 
	muc_Êags
;

239 
uc⁄ãxt
 *
	muc_lök
;

240 
°ack_t
 
	muc_°ack
;

241 
mc⁄ãxt_t
 
	muc_mc⁄ãxt
;

242 
__sig£t_t
 
	muc_sigmask
;

243 
_libc_Â°©e
 
	m__Âªgs_mem
;

244 } 
	tuc⁄ãxt_t
;

	@/usr/include/sys/uio.h

19 #i‚de‡
_SYS_UIO_H


20 
	#_SYS_UIO_H
 1

	)

22 
	~<„©uªs.h
>

24 
	~<sys/ty≥s.h
>

26 
	g__BEGIN_DECLS


29 
	~<bôs/uio.h
>

40 
ssize_t
 
	$ªadv
 (
__fd
, 
__c⁄°
 
iovec
 *
__iovec
, 
__cou¡
)

41 
__wur
;

51 
ssize_t
 
	$wrôev
 (
__fd
, 
__c⁄°
 
iovec
 *
__iovec
, 
__cou¡
)

52 
__wur
;

55 #ifde‡
__USE_BSD


56 #i‚de‡
__USE_FILE_OFFSET64


66 
ssize_t
 
	$¥ódv
 (
__fd
, 
__c⁄°
 
iovec
 *
__iovec
, 
__cou¡
,

67 
__off_t
 
__off£t
Ë
__wur
;

78 
ssize_t
 
	$pwrôev
 (
__fd
, 
__c⁄°
 
iovec
 *
__iovec
, 
__cou¡
,

79 
__off_t
 
__off£t
Ë
__wur
;

81 #ifde‡
__REDIRECT


82 
ssize_t
 
	`__REDIRECT
 (
¥ódv
, (
__fd
, 
__c⁄°
 
iovec
 *
__iovec
,

83 
__cou¡
, 
__off64_t
 
__off£t
),

84 
¥ódv64
Ë
__wur
;

85 
ssize_t
 
	`__REDIRECT
 (
pwrôev
, (
__fd
, 
__c⁄°
 
iovec
 *
__iovec
,

86 
__cou¡
, 
__off64_t
 
__off£t
),

87 
pwrôev64
Ë
__wur
;

89 
	#¥ódv
 
¥ódv64


	)

90 
	#pwrôev
 
pwrôev64


	)

94 #ifde‡
__USE_LARGEFILE64


104 
ssize_t
 
	$¥ódv64
 (
__fd
, 
__c⁄°
 
iovec
 *
__iovec
, 
__cou¡
,

105 
__off64_t
 
__off£t
Ë
__wur
;

116 
ssize_t
 
	$pwrôev64
 (
__fd
, 
__c⁄°
 
iovec
 *
__iovec
, 
__cou¡
,

117 
__off64_t
 
__off£t
Ë
__wur
;

121 
__END_DECLS


	@/usr/include/xlocale.h

21 #i‚de‡
_XLOCALE_H


22 
	#_XLOCALE_H
 1

	)

28 
	s__loˇÀ_°ru˘


31 
__loˇÀ_d©a
 *
	m__loˇÀs
[13];

34 c⁄° *
	m__˘y≥_b
;

35 c⁄° *
	m__˘y≥_tﬁowî
;

36 c⁄° *
	m__˘y≥_touµî
;

39 c⁄° *
	m__«mes
[13];

40 } *
	t__loˇÀ_t
;

43 
__loˇÀ_t
 
	tloˇÀ_t
;

	@/usr/include/_G_config.h

4 #i‚de‡
_G_c⁄fig_h


5 
	#_G_c⁄fig_h
 1

	)

9 
	~<bôs/ty≥s.h
>

10 
	#__√ed_size_t


	)

11 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


12 
	#__√ed_wch¨_t


	)

14 
	#__√ed_NULL


	)

15 
	~<°ddef.h
>

16 
	#__√ed_mb°©e_t


	)

17 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


18 
	#__√ed_wöt_t


	)

20 
	~<wch¨.h
>

21 
	#_G_size_t
 
size_t


	)

24 
__off_t
 
	m__pos
;

25 
__mb°©e_t
 
	m__°©e
;

26 } 
	t_G_Âos_t
;

29 
__off64_t
 
	m__pos
;

30 
__mb°©e_t
 
	m__°©e
;

31 } 
	t_G_Âos64_t
;

32 
	#_G_ssize_t
 
__ssize_t


	)

33 
	#_G_off_t
 
__off_t


	)

34 
	#_G_off64_t
 
__off64_t


	)

35 
	#_G_pid_t
 
__pid_t


	)

36 
	#_G_uid_t
 
__uid_t


	)

37 
	#_G_wch¨_t
 
wch¨_t


	)

38 
	#_G_wöt_t
 
wöt_t


	)

39 
	#_G_°©64
 
°©64


	)

40 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


41 
	~<gc⁄v.h
>

44 
__gc⁄v_öfo
 
	m__cd
;

47 
__gc⁄v_öfo
 
	m__cd
;

48 
__gc⁄v_°ï_d©a
 
	m__d©a
;

49 } 
	m__comböed
;

50 } 
	t_G_ic⁄v_t
;

53 
	t_G_öt16_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HI__
)));

54 
	t_G_öt32_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__SI__
)));

55 
	t_G_uöt16_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HI__
)));

56 
	t_G_uöt32_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__SI__
)));

58 
	#_G_HAVE_BOOL
 1

	)

62 
	#_G_HAVE_ATEXIT
 1

	)

63 
	#_G_HAVE_SYS_CDEFS
 1

	)

64 
	#_G_HAVE_SYS_WAIT
 1

	)

65 
	#_G_NEED_STDARG_H
 1

	)

66 
	#_G_va_li°
 
__gnuc_va_li°


	)

68 
	#_G_HAVE_PRINTF_FP
 1

	)

69 
	#_G_HAVE_MMAP
 1

	)

70 
	#_G_HAVE_MREMAP
 1

	)

71 
	#_G_HAVE_LONG_DOUBLE_IO
 1

	)

72 
	#_G_HAVE_IO_FILE_OPEN
 1

	)

73 
	#_G_HAVE_IO_GETLINE_INFO
 1

	)

75 
	#_G_IO_IO_FILE_VERSION
 0x20001

	)

77 
	#_G_OPEN64
 
__›í64


	)

78 
	#_G_LSEEK64
 
__l£ek64


	)

79 
	#_G_MMAP64
 
__mm≠64


	)

80 
	#_G_FSTAT64
(
fd
,
buf
Ë
	`__fx°©64
 (
_STAT_VER
, fd, buf)

	)

83 
	#_G_HAVE_ST_BLKSIZE
 
	`deföed
 (
_STATBUF_ST_BLKSIZE
)

	)

85 
	#_G_BUFSIZ
 8192

	)

88 
	#_G_NAMES_HAVE_UNDERSCORE
 0

	)

89 
	#_G_VTABLE_LABEL_HAS_LENGTH
 1

	)

90 
	#_G_USING_THUNKS
 1

	)

91 
	#_G_VTABLE_LABEL_PREFIX
 "__vt_"

	)

92 
	#_G_VTABLE_LABEL_PREFIX_ID
 
__vt_


	)

95 #i‡
deföed
 
__˝lu•lus
 || deföed 
__STDC__


96 
	#_G_ARGS
(
ARGLIST
Ë
	)
ARGLIST

98 
	#_G_ARGS
(
ARGLIST
Ë()

	)

	@/usr/include/asm/ioctls.h

1 
	~<asm-gíîic/io˘ls.h
>

	@/usr/include/asm/param.h

1 
	~<asm-gíîic/∑øm.h
>

	@/usr/include/asm/socket.h

1 
	~<asm-gíîic/sockë.h
>

	@/usr/include/bits/endian.h

3 #i‚de‡
_ENDIAN_H


7 
	#__BYTE_ORDER
 
__LITTLE_ENDIAN


	)

	@/usr/include/bits/libio-ldbl.h

20 #i‚de‡
_IO_STDIO_H


24 
	$__LDBL_REDIR_DECL
 (
_IO_vfsˇnf
)

25 
	`__LDBL_REDIR_DECL
 (
_IO_vÂrötf
)

	@/usr/include/bits/local_lim.h

25 #i‚de‡
NR_OPEN


26 
	#__undef_NR_OPEN


	)

28 #i‚de‡
LINK_MAX


29 
	#__undef_LINK_MAX


	)

31 #i‚de‡
OPEN_MAX


32 
	#__undef_OPEN_MAX


	)

34 #i‚de‡
ARG_MAX


35 
	#__undef_ARG_MAX


	)

39 
	~<löux/limôs.h
>

42 #ifde‡
__undef_NR_OPEN


43 #unde‡
NR_OPEN


44 #unde‡
__undef_NR_OPEN


47 #ifde‡
__undef_LINK_MAX


48 #unde‡
LINK_MAX


49 #unde‡
__undef_LINK_MAX


52 #ifde‡
__undef_OPEN_MAX


53 #unde‡
OPEN_MAX


54 #unde‡
__undef_OPEN_MAX


57 #ifde‡
__undef_ARG_MAX


58 #unde‡
ARG_MAX


59 #unde‡
__undef_ARG_MAX


63 
	#_POSIX_THREAD_KEYS_MAX
 128

	)

65 
	#PTHREAD_KEYS_MAX
 1024

	)

68 
	#_POSIX_THREAD_DESTRUCTOR_ITERATIONS
 4

	)

70 
	#PTHREAD_DESTRUCTOR_ITERATIONS
 
_POSIX_THREAD_DESTRUCTOR_ITERATIONS


	)

73 
	#_POSIX_THREAD_THREADS_MAX
 64

	)

75 #unde‡
PTHREAD_THREADS_MAX


79 
	#AIO_PRIO_DELTA_MAX
 20

	)

82 
	#PTHREAD_STACK_MIN
 16384

	)

85 
	#DELAYTIMER_MAX
 2147483647

	)

88 
	#TTY_NAME_MAX
 32

	)

91 
	#LOGIN_NAME_MAX
 256

	)

94 
	#HOST_NAME_MAX
 64

	)

97 
	#MQ_PRIO_MAX
 32768

	)

100 
	#SEM_VALUE_MAX
 (2147483647)

	)

	@/usr/include/bits/poll.h

19 #i‚de‡
_SYS_POLL_H


26 
	#POLLIN
 0x001

	)

27 
	#POLLPRI
 0x002

	)

28 
	#POLLOUT
 0x004

	)

30 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


32 
	#POLLRDNORM
 0x040

	)

33 
	#POLLRDBAND
 0x080

	)

34 
	#POLLWRNORM
 0x100

	)

35 
	#POLLWRBAND
 0x200

	)

38 #ifde‡
__USE_GNU


40 
	#POLLMSG
 0x400

	)

41 
	#POLLREMOVE
 0x1000

	)

42 
	#POLLRDHUP
 0x2000

	)

48 
	#POLLERR
 0x008

	)

49 
	#POLLHUP
 0x010

	)

50 
	#POLLNVAL
 0x020

	)

	@/usr/include/bits/sockaddr.h

24 #i‚de‡
_BITS_SOCKADDR_H


25 
	#_BITS_SOCKADDR_H
 1

	)

29 
	tß_Ámûy_t
;

35 
	#__SOCKADDR_COMMON
(
ß_¥efix
) \

36 
ß_Ámûy_t
 
ß_¥efix
##
Ámûy


	)

38 
	#__SOCKADDR_COMMON_SIZE
 ( ())

	)

	@/usr/include/bits/stdio-lock.h

20 #i‚de‡
_BITS_STDIO_LOCK_H


21 
	#_BITS_STDIO_LOCK_H
 1

	)

23 
	~<bôs/libc-lock.h
>

25 
	$__libc_lock_deföe_ªcursive
 (, 
_IO_lock_t
)

28 #ifde‡
	t_LIBC_LOCK_RECURSIVE_INITIALIZER


29 
	t_IO_lock_öôülizî
 
	t_LIBC_LOCK_RECURSIVE_INITIALIZER


	)

30 #ñi‡
	t_IO_MTSAFE_IO


31 #îr‹ 
	tlibio
 
	t√eds
 
	tªcursive
 
	tmuãxes
 
	t_IO_MTSAFE_IO


34 
	t_IO_lock_öô
(
	t_«me
Ë
	t__libc_lock_öô_ªcursive
 (_«me)

	)

35 
	t_IO_lock_föi
(
	t_«me
Ë
	t__libc_lock_föi_ªcursive
 (_«me)

	)

36 
	t_IO_lock_lock
(
	t_«me
Ë
	t__libc_lock_lock_ªcursive
 (_«me)

	)

37 
	t_IO_lock_åylock
(
	t_«me
Ë
	t__libc_lock_åylock_ªcursive
 (_«me)

	)

38 
	t_IO_lock_u∆ock
(
	t_«me
Ë
	t__libc_lock_u∆ock_ªcursive
 (_«me)

	)

41 
	t_IO_˛ónup_ªgi⁄_°¨t
(
	t_f˘
, 
	t_Â
) \

42 
	t__libc_˛ónup_ªgi⁄_°¨t
 (((
	t_Â
)->
	t_Êags
 & 
	t_IO_USER_LOCK
Ë=0, 
	t_f˘
, _Â)

	)

43 
	t_IO_˛ónup_ªgi⁄_°¨t_nﬂrg
(
	t_f˘
) \

44 
	t__libc_˛ónup_ªgi⁄_°¨t
 (1, 
	t_f˘
, 
	tNULL
)

	)

45 
	t_IO_˛ónup_ªgi⁄_íd
(
	t_doô
) \

46 
	t__libc_˛ónup_ªgi⁄_íd
 (
	t_doô
)

	)

48 #i‡
	tdeföed
 
	t_LIBC
 && !deföed 
	tNOT_IN_libc


49 
	t_IO_acquúe_lock
(
	t_Â
) \

50 
	t_IO_˛ónup_ªgi⁄_°¨t
 (((*Ë(*)Ë
	t_IO_fu∆ockfûe
, (
	t_Â
)); \

51 
	`_IO_Êockfûe
 (
_Â
)

	)

53 
	#_IO_ªÀa£_lock
(
_Â
) \

54 
	`_IO_fu∆ockfûe
 (
_Â
); \

55 
	`_IO_˛ónup_ªgi⁄_íd
 (0)

	)

	@/usr/include/bits/syslog-ldbl.h

20 #i‚de‡
_SYS_SYSLOG_H


24 
	$__LDBL_REDIR_DECL
 (
sy¶og
)

26 #ifde‡
__USE_BSD


27 
	$__LDBL_REDIR_DECL
 (
vsy¶og
)

30 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


31 
	$__LDBL_REDIR_DECL
 (
__sy¶og_chk
)

33 #ifde‡
__USE_BSD


34 
	$__LDBL_REDIR_DECL
 (
__vsy¶og_chk
)

	@/usr/include/bits/syslog-path.h

20 #i‚de‡
_SYS_SYSLOG_H


24 #i‚de‡
_BITS_SYSLOG_PATH_H


25 
	#_BITS_SYSLOG_PATH_H
 1

	)

27 
	#_PATH_LOG
 "/dev/log"

	)

	@/usr/include/bits/syslog.h

20 #i‚de‡
_SYS_SYSLOG_H


25 
	$__sy¶og_chk
 (
__¥i
, 
__Êag
, 
__c⁄°
 *
__fmt
, ...)

26 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

28 #ifde‡
__va_¨g_∑ck


29 
__exã∫_Æways_ölöe
 

30 
	$sy¶og
 (
__¥i
, 
__c⁄°
 *
__fmt
, ...)

32 
	`__sy¶og_chk
 (
__¥i
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

33 
	}
}

34 #ñi‡!
deföed
 
__˝lu•lus


35 
	#sy¶og
(
¥i
, ...) \

36 
	`__sy¶og_chk
 (
¥i
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

40 #ifde‡
__USE_BSD


41 
	$__vsy¶og_chk
 (
__¥i
, 
__Êag
, 
__c⁄°
 *
__fmt
,

42 
__gnuc_va_li°
 
__≠
)

43 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

45 
__exã∫_Æways_ölöe
 

46 
	$vsy¶og
 (
__¥i
, 
__c⁄°
 *
__fmt
, 
__gnuc_va_li°
 
__≠
)

48 
	`__vsy¶og_chk
 (
__¥i
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

49 
	}
}

	@/usr/include/bits/typesizes.h

20 #i‚de‡
_BITS_TYPES_H


24 #i‚def 
_BITS_TYPESIZES_H


25 
	#_BITS_TYPESIZES_H
 1

	)

30 
	#__DEV_T_TYPE
 
__UQUAD_TYPE


	)

31 
	#__UID_T_TYPE
 
__U32_TYPE


	)

32 
	#__GID_T_TYPE
 
__U32_TYPE


	)

33 
	#__INO_T_TYPE
 
__ULONGWORD_TYPE


	)

34 
	#__INO64_T_TYPE
 
__UQUAD_TYPE


	)

35 
	#__MODE_T_TYPE
 
__U32_TYPE


	)

36 
	#__NLINK_T_TYPE
 
__UWORD_TYPE


	)

37 
	#__OFF_T_TYPE
 
__SLONGWORD_TYPE


	)

38 
	#__OFF64_T_TYPE
 
__SQUAD_TYPE


	)

39 
	#__PID_T_TYPE
 
__S32_TYPE


	)

40 
	#__RLIM_T_TYPE
 
__ULONGWORD_TYPE


	)

41 
	#__RLIM64_T_TYPE
 
__UQUAD_TYPE


	)

42 
	#__BLKCNT_T_TYPE
 
__SLONGWORD_TYPE


	)

43 
	#__BLKCNT64_T_TYPE
 
__SQUAD_TYPE


	)

44 
	#__FSBLKCNT_T_TYPE
 
__ULONGWORD_TYPE


	)

45 
	#__FSBLKCNT64_T_TYPE
 
__UQUAD_TYPE


	)

46 
	#__FSFILCNT_T_TYPE
 
__ULONGWORD_TYPE


	)

47 
	#__FSFILCNT64_T_TYPE
 
__UQUAD_TYPE


	)

48 
	#__ID_T_TYPE
 
__U32_TYPE


	)

49 
	#__CLOCK_T_TYPE
 
__SLONGWORD_TYPE


	)

50 
	#__TIME_T_TYPE
 
__SLONGWORD_TYPE


	)

51 
	#__USECONDS_T_TYPE
 
__U32_TYPE


	)

52 
	#__SUSECONDS_T_TYPE
 
__SLONGWORD_TYPE


	)

53 
	#__DADDR_T_TYPE
 
__S32_TYPE


	)

54 
	#__SWBLK_T_TYPE
 
__SLONGWORD_TYPE


	)

55 
	#__KEY_T_TYPE
 
__S32_TYPE


	)

56 
	#__CLOCKID_T_TYPE
 
__S32_TYPE


	)

57 
	#__TIMER_T_TYPE
 *

	)

58 
	#__BLKSIZE_T_TYPE
 
__SLONGWORD_TYPE


	)

59 
	#__FSID_T_TYPE
 såu˘ { 
__vÆ
[2]; }

	)

60 
	#__SSIZE_T_TYPE
 
__SWORD_TYPE


	)

63 
	#__FD_SETSIZE
 1024

	)

	@/usr/include/bits/uio.h

19 #i‡!
deföed
 
_SYS_UIO_H
 && !deföed 
_FCNTL_H


23 #i‚de‡
_BITS_UIO_H


24 
	#_BITS_UIO_H
 1

	)

26 
	~<sys/ty≥s.h
>

40 
	#UIO_MAXIOV
 1024

	)

44 
	siovec


46 *
	miov_ba£
;

47 
size_t
 
	miov_Àn
;

	@/usr/include/gnu/stubs.h

4 
	~<bôs/w‹dsize.h
>

6 #i‡
__WORDSIZE
 == 32

7 
	~<gnu/°ubs-32.h
>

8 #ñi‡
__WORDSIZE
 == 64

9 
	~<gnu/°ubs-64.h
>

	@/usr/include/linux/errno.h

1 #i‚de‡
_LINUX_ERRNO_H


2 
	#_LINUX_ERRNO_H


	)

4 
	~<asm/î∫o.h
>

	@/usr/include/openssl/opensslconf.h

7 #ifde‡
›ís¶_›ís¶c⁄f_mu…ûib_ªdúe˘i⁄_h


10 
	#›ís¶_›ís¶c⁄f_mu…ûib_ªdúe˘i⁄_h


	)

12 #i‡
deföed
(
__i386__
)

13 
	~"›ís¶c⁄f-i386.h
"

14 #ñi‡
deföed
(
__ü64__
)

15 
	~"›ís¶c⁄f-ü64.h
"

16 #ñi‡
deföed
(
__powîpc64__
)

17 
	~"›ís¶c⁄f-µc64.h
"

18 #ñi‡
deföed
(
__powîpc__
)

19 
	~"›ís¶c⁄f-µc.h
"

20 #ñi‡
deföed
(
__s390x__
)

21 
	~"›ís¶c⁄f-s390x.h
"

22 #ñi‡
deföed
(
__s390__
)

23 
	~"›ís¶c⁄f-s390.h
"

24 #ñi‡
deföed
(
__•¨c__
Ë&& deföed(
__¨ch64__
)

25 
	~"›ís¶c⁄f-•¨c64.h
"

26 #ñi‡
deföed
(
__•¨c__
)

27 
	~"›ís¶c⁄f-•¨c.h
"

28 #ñi‡
deföed
(
__x86_64__
)

29 
	~"›ís¶c⁄f-x86_64.h
"

34 #unde‡
›ís¶_›ís¶c⁄f_mu…ûib_ªdúe˘i⁄_h


	@/usr/include/sys/cdefs.h

20 #i‚def 
_SYS_CDEFS_H


21 
	#_SYS_CDEFS_H
 1

	)

24 #i‚de‡
_FEATURES_H


25 
	~<„©uªs.h
>

31 #i‡
deföed
 
__GNUC__
 && !deföed 
__STDC__


36 #unde‡
__P


37 #unde‡
__PMT


39 #ifde‡
__GNUC__


46 #i‡!
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (3, 3)

47 
	#__THROW
 
	`__©åibuã__
 ((
__nŸhrow__
))

	)

48 
	#__NTH
(
f˘
Ë
	`__©åibuã__
 ((
__nŸhrow__
)Ë
	)
f˘

50 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

51 
	#__THROW
 
	`throw
 ()

	)

52 
	#__NTH
(
f˘
Ëf˘ 
	`throw
 ()

	)

54 
	#__THROW


	)

55 
	#__NTH
(
f˘
Ë
	)
f˘

61 
	#__ölöe


	)

63 
	#__THROW


	)

64 
	#__NTH
(
f˘
Ë
	)
f˘

66 
	#__c⁄°
 c⁄°

	)

67 
	#__sig√d
 sig√d

	)

68 
	#__vﬁ©ûe
 vﬁ©ûe

	)

74 
	#__P
(
¨gs
Ë
	)
¨gs

75 
	#__PMT
(
¨gs
Ë
	)
¨gs

80 
	#__CONCAT
(
x
,
y
Ëx ## 
	)
y

81 
	#__STRING
(
x
Ë#x

	)

84 
	#__±r_t
 *

	)

85 
	#__l⁄g_doubÀ_t
 

	)

89 #ifdef 
__˝lu•lus


90 
	#__BEGIN_DECLS
 "C" {

	)

91 
	#__END_DECLS
 }

	)

93 
	#__BEGIN_DECLS


	)

94 
	#__END_DECLS


	)

103 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES


104 
	#__BEGIN_NAMESPACE_STD
 
«me•a˚
 
°d
 {

	)

105 
	#__END_NAMESPACE_STD
 }

	)

106 
	#__USING_NAMESPACE_STD
(
«me
Ë
usög
 
°d
::«me;

	)

107 
	#__BEGIN_NAMESPACE_C99
 
«me•a˚
 
__c99
 {

	)

108 
	#__END_NAMESPACE_C99
 }

	)

109 
	#__USING_NAMESPACE_C99
(
«me
Ë
usög
 
__c99
::«me;

	)

114 
	#__BEGIN_NAMESPACE_STD


	)

115 
	#__END_NAMESPACE_STD


	)

116 
	#__USING_NAMESPACE_STD
(
«me
)

	)

117 
	#__BEGIN_NAMESPACE_C99


	)

118 
	#__END_NAMESPACE_C99


	)

119 
	#__USING_NAMESPACE_C99
(
«me
)

	)

124 #i‚de‡
__BOUNDED_POINTERS__


125 
	#__bounded


	)

126 
	#__unbounded


	)

127 
	#__±rvÆue


	)

132 
	#__bos
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 
__USE_FORTIFY_LEVEL
 > 1)

	)

133 
	#__bos0
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 0)

	)

135 #i‡
__GNUC_PREREQ
 (4,3) \

136 || (
deföed
 
	g__GNUC_RH_RELEASE__
 && 
	g__GNUC__
 == 4 \

137 && 
__GNUC_MINOR__
 =1 && 
__GNUC_PATCHLEVEL__
 == 2 \

138 && 
__GNUC_RH_RELEASE__
 >= 31)

139 
	#__w¨nde˛
(
«me
, 
msg
) \

140 
	`«me
 (Ë
	`__©åibuã__
((
	`__w¨nög__
 (
msg
)))

	)

141 
	#__w¨«âr
(
msg
Ë
	`__©åibuã__
((
	`__w¨nög__
 (msg)))

	)

142 
	#__îr‹de˛
(
«me
, 
msg
) \

143 
	`«me
 (Ë
	`__©åibuã__
((
	`__îr‹__
 (
msg
)))

	)

145 
	#__w¨nde˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

146 
	#__w¨«âr
(
msg
)

	)

147 
	#__îr‹de˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

151 #i‡
__GNUC_PREREQ
 (2,97)

153 
	#__Êex¨r
 []

	)

155 #ifde‡
__GNUC__


156 
	#__Êex¨r
 [0]

	)

158 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

159 
	#__Êex¨r
 []

	)

162 
	#__Êex¨r
 [1]

	)

178 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

180 
	#__REDIRECT
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

181 #ifde‡
__˝lu•lus


182 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

183 
«me
 
¥Ÿo
 
__THROW
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

185 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

186 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROW


	)

188 
	#__ASMNAME
(
˙ame
Ë
	`__ASMNAME2
 (
__USER_LABEL_PREFIX__
, c«me)

	)

189 
	#__ASMNAME2
(
¥efix
, 
˙ame
Ë
	`__STRING
 (¥efixË
	)
˙ame

202 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

203 
	#__©åibuã__
(
xyz
Ë

	)

209 #i‡
__GNUC_PREREQ
 (2,96)

210 
	#__©åibuã_mÆloc__
 
	`__©åibuã__
 ((
__mÆloc__
))

	)

212 
	#__©åibuã_mÆloc__


	)

218 #i‡
__GNUC_PREREQ
 (2,96)

219 
	#__©åibuã_puª__
 
	`__©åibuã__
 ((
__puª__
))

	)

221 
	#__©åibuã_puª__


	)

227 #i‡
__GNUC_PREREQ
 (3,1)

228 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__u£d__
))

	)

229 
	#__©åibuã_noölöe__
 
	`__©åibuã__
 ((
__noölöe__
))

	)

231 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__unu£d__
))

	)

232 
	#__©åibuã_noölöe__


	)

236 #i‡
__GNUC_PREREQ
 (3,2)

237 
	#__©åibuã_dïªˇãd__
 
	`__©åibuã__
 ((
__dïªˇãd__
))

	)

239 
	#__©åibuã_dïªˇãd__


	)

248 #i‡
__GNUC_PREREQ
 (2,8)

249 
	#__©åibuã_f‹m©_¨g__
(
x
Ë
	`__©åibuã__
 ((
	`__f‹m©_¨g__
 (x)))

	)

251 
	#__©åibuã_f‹m©_¨g__
(
x
Ë

	)

258 #i‡
__GNUC_PREREQ
 (2,97)

259 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
) \

260 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__°rfm⁄__
, 
a
, 
b
)))

	)

262 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
Ë

	)

267 #i‡
__GNUC_PREREQ
 (3,3)

268 
	#__n⁄nuŒ
(
∑øms
Ë
	`__©åibuã__
 ((
__n⁄nuŒ__
Ö¨ams))

	)

270 
	#__n⁄nuŒ
(
∑øms
)

	)

275 #i‡
__GNUC_PREREQ
 (3,4)

276 
	#__©åibuã_w¨n_unu£d_ªsu…__
 \

277 
	`__©åibuã__
 ((
__w¨n_unu£d_ªsu…__
))

	)

278 #i‡
__USE_FORTIFY_LEVEL
 > 0

279 
	#__wur
 
__©åibuã_w¨n_unu£d_ªsu…__


	)

282 
	#__©åibuã_w¨n_unu£d_ªsu…__


	)

284 #i‚de‡
__wur


285 
	#__wur


	)

289 #i‡
__GNUC_PREREQ
 (3,2)

290 
	#__Æways_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__Æways_ölöe__
))

	)

292 
	#__Æways_ölöe
 
__ölöe


	)

297 #i‡!
deföed
 
__˝lu•lus
 || 
__GNUC_PREREQ
 (4,3) \

298 || (
deföed
 
__GNUC_RH_RELEASE__
 && 
__GNUC__
 == 4 \

299 && 
__GNUC_MINOR__
 =1 && 
__GNUC_PATCHLEVEL__
 == 2 \

300 && 
__GNUC_RH_RELEASE__
 >= 31)

301 #i‡
deföed
 
__GNUC_STDC_INLINE__
 || deföed 
__˝lu•lus


302 
	#__exã∫_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

303 #i‡
__GNUC_PREREQ
 (4,3) \

304 || (
deföed
 
__GNUC_RH_RELEASE__
 && 
__GNUC__
 == 4 \

305 && 
__GNUC_MINOR__
 =1 && 
__GNUC_PATCHLEVEL__
 == 2 \

306 && 
__GNUC_RH_RELEASE__
 >= 31)

307 
	#__exã∫_Æways_ölöe
 \

308 
__Æways_ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
, 
__¨tificül__
))

	)

310 
	#__exã∫_Æways_ölöe
 \

311 
__Æways_ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

314 
	#__exã∫_ölöe
 
__ölöe


	)

315 #i‡
__GNUC_PREREQ
 (4,3)

316 
	#__exã∫_Æways_ölöe
 \

317 
__Æways_ölöe
 
	`__©åibuã__
 ((
__¨tificül__
))

	)

319 
	#__exã∫_Æways_ölöe
 
__Æways_ölöe


	)

326 #i‡
__GNUC_PREREQ
 (4,3) \

327 || (
deföed
 
__GNUC_RH_RELEASE__
 && 
__GNUC__
 == 4 \

328 && 
__GNUC_MINOR__
 =1 && 
__GNUC_PATCHLEVEL__
 == 2 \

329 && 
__GNUC_RH_RELEASE__
 >= 31)

330 
	#__va_¨g_∑ck
(Ë
	`__buûtö_va_¨g_∑ck
 ()

	)

331 
	#__va_¨g_∑ck_Àn
(Ë
	`__buûtö_va_¨g_∑ck_Àn
 ()

	)

338 #i‡!
__GNUC_PREREQ
 (2,8)

339 
	#__exãnsi⁄__


	)

343 #i‡!
__GNUC_PREREQ
 (2,92)

344 
	#__ª°ri˘


	)

350 #i‡
__GNUC_PREREQ
 (3,1Ë&& !
deföed
 
__GNUG__


351 
	#__ª°ri˘_¨r
 
__ª°ri˘


	)

353 #ifde‡
__GNUC__


354 
	#__ª°ri˘_¨r


	)

356 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

357 
	#__ª°ri˘_¨r
 
ª°ri˘


	)

360 
	#__ª°ri˘_¨r


	)

365 
	~<bôs/w‹dsize.h
>

367 #i‡
deföed
 
__LONG_DOUBLE_MATH_OPTIONAL
 && deföed 
__NO_LONG_DOUBLE_MATH


368 
	#__LDBL_COMPAT
 1

	)

369 #ifde‡
__REDIRECT


370 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

371 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
) \

372 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

373 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT_NTH
 («me,ÖrŸo,álüs)

	)

374 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
) \

375 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

376 
	#__LDBL_REDIR1_DECL
(
«me
, 
Æüs
) \

377 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 (#Æüs));

	)

378 
	#__LDBL_REDIR_DECL
(
«me
) \

379 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 ("__∆dbl_" #«me));

	)

380 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

381 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

382 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

383 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

386 #i‡!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT


387 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê
	)
¥Ÿo

388 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
Ë«mê
	)
¥Ÿo

389 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
__THROW


	)

390 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
Ë«mê¥Ÿÿ
__THROW


	)

391 
	#__LDBL_REDIR_DECL
(
«me
)

	)

392 #ifde‡
__REDIRECT


393 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

394 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

395 
	`__REDIRECT_NTH
 (
«me
, 
¥Ÿo
, 
Æüs
)

	)

	@/usr/include/asm-generic/ioctls.h

1 #i‚de‡
__ASM_GENERIC_IOCTLS_H


2 
	#__ASM_GENERIC_IOCTLS_H


	)

4 
	~<löux/io˘l.h
>

19 
	#TCGETS
 0x5401

	)

20 
	#TCSETS
 0x5402

	)

21 
	#TCSETSW
 0x5403

	)

22 
	#TCSETSF
 0x5404

	)

23 
	#TCGETA
 0x5405

	)

24 
	#TCSETA
 0x5406

	)

25 
	#TCSETAW
 0x5407

	)

26 
	#TCSETAF
 0x5408

	)

27 
	#TCSBRK
 0x5409

	)

28 
	#TCXONC
 0x540A

	)

29 
	#TCFLSH
 0x540B

	)

30 
	#TIOCEXCL
 0x540C

	)

31 
	#TIOCNXCL
 0x540D

	)

32 
	#TIOCSCTTY
 0x540E

	)

33 
	#TIOCGPGRP
 0x540F

	)

34 
	#TIOCSPGRP
 0x5410

	)

35 
	#TIOCOUTQ
 0x5411

	)

36 
	#TIOCSTI
 0x5412

	)

37 
	#TIOCGWINSZ
 0x5413

	)

38 
	#TIOCSWINSZ
 0x5414

	)

39 
	#TIOCMGET
 0x5415

	)

40 
	#TIOCMBIS
 0x5416

	)

41 
	#TIOCMBIC
 0x5417

	)

42 
	#TIOCMSET
 0x5418

	)

43 
	#TIOCGSOFTCAR
 0x5419

	)

44 
	#TIOCSSOFTCAR
 0x541A

	)

45 
	#FIONREAD
 0x541B

	)

46 
	#TIOCINQ
 
FIONREAD


	)

47 
	#TIOCLINUX
 0x541C

	)

48 
	#TIOCCONS
 0x541D

	)

49 
	#TIOCGSERIAL
 0x541E

	)

50 
	#TIOCSSERIAL
 0x541F

	)

51 
	#TIOCPKT
 0x5420

	)

52 
	#FIONBIO
 0x5421

	)

53 
	#TIOCNOTTY
 0x5422

	)

54 
	#TIOCSETD
 0x5423

	)

55 
	#TIOCGETD
 0x5424

	)

56 
	#TCSBRKP
 0x5425

	)

57 
	#TIOCSBRK
 0x5427

	)

58 
	#TIOCCBRK
 0x5428

	)

59 
	#TIOCGSID
 0x5429

	)

60 
	#TCGETS2
 
	`_IOR
('T', 0x2A, 
ãrmios2
)

	)

61 
	#TCSETS2
 
	`_IOW
('T', 0x2B, 
ãrmios2
)

	)

62 
	#TCSETSW2
 
	`_IOW
('T', 0x2C, 
ãrmios2
)

	)

63 
	#TCSETSF2
 
	`_IOW
('T', 0x2D, 
ãrmios2
)

	)

64 
	#TIOCGRS485
 0x542E

	)

65 
	#TIOCSRS485
 0x542F

	)

66 
	#TIOCGPTN
 
	`_IOR
('T', 0x30, Ë

	)

67 
	#TIOCSPTLCK
 
	`_IOW
('T', 0x31, Ë

	)

68 
	#TCGETX
 0x5432

	)

69 
	#TCSETX
 0x5433

	)

70 
	#TCSETXF
 0x5434

	)

71 
	#TCSETXW
 0x5435

	)

73 
	#FIONCLEX
 0x5450

	)

74 
	#FIOCLEX
 0x5451

	)

75 
	#FIOASYNC
 0x5452

	)

76 
	#TIOCSERCONFIG
 0x5453

	)

77 
	#TIOCSERGWILD
 0x5454

	)

78 
	#TIOCSERSWILD
 0x5455

	)

79 
	#TIOCGLCKTRMIOS
 0x5456

	)

80 
	#TIOCSLCKTRMIOS
 0x5457

	)

81 
	#TIOCSERGSTRUCT
 0x5458

	)

82 
	#TIOCSERGETLSR
 0x5459

	)

83 
	#TIOCSERGETMULTI
 0x545A

	)

84 
	#TIOCSERSETMULTI
 0x545B

	)

86 
	#TIOCMIWAIT
 0x545C

	)

87 
	#TIOCGICOUNT
 0x545D

	)

93 #i‚de‡
FIOQSIZE


94 
	#TIOCGHAYESESP
 0x545E

	)

95 
	#TIOCSHAYESESP
 0x545F

	)

96 
	#FIOQSIZE
 0x5460

	)

100 
	#TIOCPKT_DATA
 0

	)

101 
	#TIOCPKT_FLUSHREAD
 1

	)

102 
	#TIOCPKT_FLUSHWRITE
 2

	)

103 
	#TIOCPKT_STOP
 4

	)

104 
	#TIOCPKT_START
 8

	)

105 
	#TIOCPKT_NOSTOP
 16

	)

106 
	#TIOCPKT_DOSTOP
 32

	)

108 
	#TIOCSER_TEMT
 0x01

	)

	@/usr/include/asm-generic/param.h

1 #i‚de‡
__ASM_GENERIC_PARAM_H


2 
	#__ASM_GENERIC_PARAM_H


	)

5 #i‚de‡
HZ


6 
	#HZ
 100

	)

9 #i‚de‡
EXEC_PAGESIZE


10 
	#EXEC_PAGESIZE
 4096

	)

13 #i‚de‡
NOGROUP


14 
	#NOGROUP
 (-1)

	)

17 
	#MAXHOSTNAMELEN
 64

	)

	@/usr/include/asm-generic/socket.h

1 #i‚de‡
__ASM_GENERIC_SOCKET_H


2 
	#__ASM_GENERIC_SOCKET_H


	)

4 
	~<asm/sockios.h
>

7 
	#SOL_SOCKET
 1

	)

9 
	#SO_DEBUG
 1

	)

10 
	#SO_REUSEADDR
 2

	)

11 
	#SO_TYPE
 3

	)

12 
	#SO_ERROR
 4

	)

13 
	#SO_DONTROUTE
 5

	)

14 
	#SO_BROADCAST
 6

	)

15 
	#SO_SNDBUF
 7

	)

16 
	#SO_RCVBUF
 8

	)

17 
	#SO_SNDBUFFORCE
 32

	)

18 
	#SO_RCVBUFFORCE
 33

	)

19 
	#SO_KEEPALIVE
 9

	)

20 
	#SO_OOBINLINE
 10

	)

21 
	#SO_NO_CHECK
 11

	)

22 
	#SO_PRIORITY
 12

	)

23 
	#SO_LINGER
 13

	)

24 
	#SO_BSDCOMPAT
 14

	)

25 
	#SO_REUSEPORT
 15

	)

27 #i‚de‡
SO_PASSCRED


28 
	#SO_PASSCRED
 16

	)

29 
	#SO_PEERCRED
 17

	)

30 
	#SO_RCVLOWAT
 18

	)

31 
	#SO_SNDLOWAT
 19

	)

32 
	#SO_RCVTIMEO
 20

	)

33 
	#SO_SNDTIMEO
 21

	)

37 
	#SO_SECURITY_AUTHENTICATION
 22

	)

38 
	#SO_SECURITY_ENCRYPTION_TRANSPORT
 23

	)

39 
	#SO_SECURITY_ENCRYPTION_NETWORK
 24

	)

41 
	#SO_BINDTODEVICE
 25

	)

44 
	#SO_ATTACH_FILTER
 26

	)

45 
	#SO_DETACH_FILTER
 27

	)

47 
	#SO_PEERNAME
 28

	)

48 
	#SO_TIMESTAMP
 29

	)

49 
	#SCM_TIMESTAMP
 
SO_TIMESTAMP


	)

51 
	#SO_ACCEPTCONN
 30

	)

53 
	#SO_PEERSEC
 31

	)

54 
	#SO_PASSSEC
 34

	)

55 
	#SO_TIMESTAMPNS
 35

	)

56 
	#SCM_TIMESTAMPNS
 
SO_TIMESTAMPNS


	)

58 
	#SO_MARK
 36

	)

60 
	#SO_TIMESTAMPING
 37

	)

61 
	#SCM_TIMESTAMPING
 
SO_TIMESTAMPING


	)

63 
	#SO_PROTOCOL
 38

	)

64 
	#SO_DOMAIN
 39

	)

66 
	#SO_RXQ_OVFL
 40

	)

	@/usr/include/asm/errno.h

1 
	~<asm-gíîic/î∫o.h
>

	@/usr/include/bits/libc-lock.h

21 #i‚de‡
_BITS_LIBC_LOCK_H


22 
	#_BITS_LIBC_LOCK_H
 1

	)

24 
	~<±hªad.h
>

27 #ifde‡
_IO_MTSAFE_IO


28 
±hªad_muãx_t
 
	t__libc_lock_t
;

29 °ru˘ { 
±hªad_muãx_t
 
	mmuãx
; } 
	t__libc_lock_ªcursive_t
;

30 #ifde‡
__USE_UNIX98


31 
±hªad_rwlock_t
 
	t__libc_rwlock_t
;

33 
__libc_rwlock_›aque__
 
	t__libc_rwlock_t
;

35 
__libc_lock_ªcursive_t
 
	t__πld_lock_ªcursive_t
;

37 
__libc_lock_›aque__
 
	t__libc_lock_t
;

38 
__libc_lock_ªcursive_›aque__
 
	t__libc_lock_ªcursive_t
;

39 
__libc_rwlock_›aque__
 
	t__libc_rwlock_t
;

43 
±hªad_key_t
 
	t__libc_key_t
;

52 
	#__libc_lock_deföe
(
CLASS
,
NAME
) \

53 
CLASS
 
__libc_lock_t
 
NAME
;

	)

54 
	#__libc_rwlock_deföe
(
CLASS
,
NAME
) \

55 
CLASS
 
__libc_rwlock_t
 
NAME
;

	)

56 
	#__libc_lock_deföe_ªcursive
(
CLASS
,
NAME
) \

57 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
;

	)

58 
	#__πld_lock_deföe_ªcursive
(
CLASS
,
NAME
) \

59 
CLASS
 
__πld_lock_ªcursive_t
 
NAME
;

	)

70 #i‡
__LT_SPINLOCK_INIT
 == 0

71 
	#__libc_lock_deföe_öôülized
(
CLASS
,
NAME
) \

72 
CLASS
 
__libc_lock_t
 
NAME
;

	)

74 
	#__libc_lock_deföe_öôülized
(
CLASS
,
NAME
) \

75 
CLASS
 
__libc_lock_t
 
NAME
 = 
PTHREAD_MUTEX_INITIALIZER
;

	)

78 
	#__libc_rwlock_deföe_öôülized
(
CLASS
,
NAME
) \

79 
CLASS
 
__libc_rwlock_t
 
NAME
 = 
PTHREAD_RWLOCK_INITIALIZER
;

	)

83 
	#__libc_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

84 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
 = 
_LIBC_LOCK_RECURSIVE_INITIALIZER
;

	)

85 
	#_LIBC_LOCK_RECURSIVE_INITIALIZER
 \

86 {
PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
}

	)

88 
	#__πld_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

89 
CLASS
 
__πld_lock_ªcursive_t
 
NAME
 = 
_RTLD_LOCK_RECURSIVE_INITIALIZER
;

	)

90 
	#_RTLD_LOCK_RECURSIVE_INITIALIZER
 \

91 {
PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
}

	)

93 #i‡
deföed
 
__PIC__


94 
	#__libc_maybe_ˇŒ
(
FUNC
, 
ARGS
, 
ELSE
) \

95 (
	`__exãnsi⁄__
 ({ 
	`__ty≥of
 (
FUNC
Ë*
_‚
 = (FUNC); \

96 
_‚
 !
NULL
 ? (*_‚Ë
ARGS
 : 
ELSE
; }))

	)

98 
	#__libc_maybe_ˇŒ
(
FUNC
, 
ARGS
, 
ELSE
) \

99 (
FUNC
 !
NULL
 ? FUNC 
ARGS
 : 
ELSE
)

	)

101 
	#__libc_maybe_ˇŒ2
(
FUNC
, 
ARGS
, 
ELSE
Ë
	`__libc_maybe_ˇŒ
 (
__
##FUNC, ARGS, ELSE)

	)

105 
	#__libc_lock_öô
(
NAME
) \

106 (
	`__libc_maybe_ˇŒ2
 (
±hªad_muãx_öô
, (&(
NAME
), 
NULL
), 0))

	)

107 
	#__libc_rwlock_öô
(
NAME
) \

108 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_öô
, (&(
NAME
), 
NULL
), 0));

	)

111 
	#__libc_lock_öô_ªcursive
(
NAME
) \

113 i‡(
__±hªad_muãx_öô
 !
NULL
) \

115 
±hªad_muãx©å_t
 
__©å
; \

116 
	`__±hªad_muãx©å_öô
 (&
__©å
); \

117 
	`__±hªad_muãx©å_£ây≥
 (&
__©å
, 
PTHREAD_MUTEX_RECURSIVE_NP
); \

118 
	`__±hªad_muãx_öô
 (&(
NAME
).
muãx
, &
__©å
); \

119 
	`__±hªad_muãx©å_de°roy
 (&
__©å
); \

121 } 0);

	)

122 
	#__πld_lock_öô_ªcursive
(
NAME
) \

123 
	`__libc_lock_öô_ªcursive
 (
NAME
)

	)

128 
	#__libc_lock_föi
(
NAME
) \

129 (
	`__libc_maybe_ˇŒ2
 (
±hªad_muãx_de°roy
, (&(
NAME
)), 0));

	)

130 
	#__libc_rwlock_föi
(
NAME
) \

131 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_de°roy
, (&(
NAME
)), 0));

	)

134 
	#__libc_lock_föi_ªcursive
(
NAME
Ë
	`__libc_lock_föi
 ((NAME).
muãx
)

	)

135 
	#__πld_lock_föi_ªcursive
(
NAME
Ë
	`__libc_lock_föi_ªcursive
 (NAME)

	)

138 
	#__libc_lock_lock
(
NAME
) \

139 (
	`__libc_maybe_ˇŒ2
 (
±hªad_muãx_lock
, (&(
NAME
)), 0));

	)

140 
	#__libc_rwlock_rdlock
(
NAME
) \

141 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_rdlock
, (&(
NAME
)), 0));

	)

142 
	#__libc_rwlock_wæock
(
NAME
) \

143 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_wæock
, (&(
NAME
)), 0));

	)

146 
	#__libc_lock_lock_ªcursive
(
NAME
Ë
	`__libc_lock_lock
 ((NAME).
muãx
)

	)

149 
	#__libc_lock_åylock
(
NAME
) \

150 (
	`__libc_maybe_ˇŒ2
 (
±hªad_muãx_åylock
, (&(
NAME
)), 0))

	)

151 
	#__libc_rwlock_åyrdlock
(
NAME
) \

152 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_åyrdlock
, (&(
NAME
)), 0))

	)

153 
	#__libc_rwlock_åywæock
(
NAME
) \

154 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_åywæock
, (&(
NAME
)), 0))

	)

157 
	#__libc_lock_åylock_ªcursive
(
NAME
Ë
	`__libc_lock_åylock
 ((NAME).
muãx
)

	)

158 
	#__πld_lock_åylock_ªcursive
(
NAME
) \

159 
	`__libc_lock_åylock_ªcursive
 (
NAME
)

	)

162 
	#__libc_lock_u∆ock
(
NAME
) \

163 (
	`__libc_maybe_ˇŒ2
 (
±hªad_muãx_u∆ock
, (&(
NAME
)), 0));

	)

164 
	#__libc_rwlock_u∆ock
(
NAME
) \

165 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_u∆ock
, (&(
NAME
)), 0));

	)

168 
	#__libc_lock_u∆ock_ªcursive
(
NAME
Ë
	`__libc_lock_u∆ock
 ((NAME).
muãx
)

	)

170 
	#__πld_lock_lock_ªcursive
(
NAME
Ë
	`__libc_lock_lock_ªcursive
 (NAME)

	)

171 
	#__πld_lock_u∆ock_ªcursive
(
NAME
Ë
	`__libc_lock_u∆ock_ªcursive
 (NAME)

	)

174 #i‡
PTHREAD_ONCE_INIT
 == 0

177 
	#__libc_⁄˚_deföe
(
CLASS
, 
NAME
) \

178 
CLASS
 
±hªad_⁄˚_t
 
NAME


	)

180 
	#__libc_⁄˚_deföe
(
CLASS
, 
NAME
) \

181 
CLASS
 
±hªad_⁄˚_t
 
NAME
 = 
PTHREAD_ONCE_INIT


	)

185 
	#__libc_⁄˚
(
ONCE_CONTROL
, 
INIT_FUNCTION
) \

187 i‡(
__±hªad_⁄˚
 !
NULL
) \

188 
	`__±hªad_⁄˚
 (&(
ONCE_CONTROL
), (
INIT_FUNCTION
)); \

189 i‡((
ONCE_CONTROL
Ë=
PTHREAD_ONCE_INIT
) { \

190 
	`INIT_FUNCTION
 (); \

191 (
ONCE_CONTROL
) = 2; \

193 } 0)

	)

197 
	#__libc_˛ónup_ªgi⁄_°¨t
(
DOIT
, 
FCT
, 
ARG
) \

198 { 
_±hªad_˛ónup_buf„r
 
_buf„r
; \

199 
_avaû
 = (
DOIT
Ë&& 
_±hªad_˛ónup_push_de„r
 !
NULL
; \

200 i‡(
_avaû
) { \

201 
	`_±hªad_˛ónup_push_de„r
 (&
_buf„r
, (
FCT
), (
ARG
)); \

202 }

	)

205 
	#__libc_˛ónup_ªgi⁄_íd
(
DOIT
) \

206 i‡(
_avaû
) { \

207 
	`_±hªad_˛ónup_p›_ª°‹e
 (&
_buf„r
, (
DOIT
)); \

209 }

	)

212 
	#__libc_˛ónup_íd
(
DOIT
) \

213 i‡(
_avaû
) { \

214 
	`_±hªad_˛ónup_p›_ª°‹e
 (&
_buf„r
, (
DOIT
)); \

215 }

	)

217 
	#__libc_˛ónup_push
(
f˘
, 
¨g
) \

218 { 
_±hªad_˛ónup_buf„r
 
_buf„r
; \

219 
	`__libc_maybe_ˇŒ
 (
_±hªad_˛ónup_push
, (&
_buf„r
, (
f˘
), (
¨g
)), 0)

	)

221 
	#__libc_˛ónup_p›
(
execuã
) \

222 
	`__libc_maybe_ˇŒ
 (
_±hªad_˛ónup_p›
, (&
_buf„r
, 
execuã
), 0); \

223 }

	)

226 
	#__libc_key_¸óã
(
KEY
, 
DESTRUCTOR
) \

227 (
	`__libc_maybe_ˇŒ
 (
__±hªad_key_¸óã
, (
KEY
, 
DESTRUCTOR
), 1))

	)

230 
	#__libc_gë•ecific
(
KEY
) \

231 (
	`__libc_maybe_ˇŒ
 (
__±hªad_gë•ecific
, (
KEY
), 
NULL
))

	)

234 
	#__libc_£t•ecific
(
KEY
, 
VALUE
) \

235 (
	`__libc_maybe_ˇŒ
 (
__±hªad_£t•ecific
, (
KEY
, 
VALUE
), 0))

	)

239 
	#__libc_©f‹k
(
PREPARE
, 
PARENT
, 
CHILD
) \

240 (
	`__libc_maybe_ˇŒ
 (
__±hªad_©f‹k
, (
PREPARE
, 
PARENT
, 
CHILD
), 0))

	)

242 
__BEGIN_DECLS


244 
_±hªad_˛ónup_push_de„r
 (
_±hªad_˛ónup_buf„r
 *
__buf„r
,

245 (*
__routöe
) (*),

246 *
__¨g
Ë
__THROW
;

248 
	$_±hªad_˛ónup_p›_ª°‹e
 (
_±hªad_˛ónup_buf„r
 *
__buf„r
,

249 
__execuã
Ë
__THROW
;

255 
	`__±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

256 
__c⁄°
 
±hªad_muãx©å_t
 *
__muãx_©å
);

258 
	`__±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
);

260 
	`__±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
);

262 
	`__±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
);

264 
	`__±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
);

266 
	`__±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
);

268 
	`__±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
);

270 
	`__±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
,

271 
__köd
);

273 #ifde‡
__USE_UNIX98


274 
	`__±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__rwlock
,

275 
__c⁄°
 
±hªad_rwlock©å_t
 *
__©å
);

277 
	`__±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
);

279 
	`__±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
);

281 
	`__±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
);

283 
	`__±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
);

285 
	`__±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
);

287 
	`__±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
);

290 
	`__±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

291 (*
__de°r_fun˘i⁄
) (*));

293 
	`__±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

294 
__c⁄°
 *
__poöãr
);

296 *
	`__±hªad_gë•ecific
 (
±hªad_key_t
 
__key
);

298 
	`__±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

299 (*
__öô_routöe
) ());

301 
	`__±hªad_©f‹k
 ((*
__¥ï¨e
) (),

302 (*
__∑ª¡
) (),

303 (*
__chûd
) ());

305 
__END_DECLS


309 #i‚de‡
__NO_WEAK_PTHREAD_ALIASES


310 #¥agm®
wók
 
__±hªad_muãx_öô


311 #¥agm®
wók
 
__±hªad_muãx_de°roy


312 #¥agm®
wók
 
__±hªad_muãx_lock


313 #¥agm®
wók
 
__±hªad_muãx_åylock


314 #¥agm®
wók
 
__±hªad_muãx_u∆ock


315 #¥agm®
wók
 
__±hªad_muãx©å_öô


316 #¥agm®
wók
 
__±hªad_muãx©å_de°roy


317 #¥agm®
wók
 
__±hªad_muãx©å_£ây≥


318 #¥agm®
wók
 
__±hªad_rwlock_de°roy


319 #¥agm®
wók
 
__±hªad_rwlock_rdlock


320 #¥agm®
wók
 
__±hªad_rwlock_åyrdlock


321 #¥agm®
wók
 
__±hªad_rwlock_wæock


322 #¥agm®
wók
 
__±hªad_rwlock_åywæock


323 #¥agm®
wók
 
__±hªad_rwlock_u∆ock


324 #¥agm®
wók
 
__±hªad_key_¸óã


325 #¥agm®
wók
 
__±hªad_£t•ecific


326 #¥agm®
wók
 
__±hªad_gë•ecific


327 #¥agm®
wók
 
__±hªad_⁄˚


328 #¥agm®
wók
 
__±hªad_öôülize


329 #¥agm®
wók
 
__±hªad_©f‹k


330 #¥agm®
wók
 
_±hªad_˛ónup_push_de„r


331 #¥agm®
wók
 
_±hªad_˛ónup_p›_ª°‹e


332 #¥agm®
wók
 
_±hªad_˛ónup_push


333 #¥agm®
wók
 
_±hªad_˛ónup_p›


338 
	#__libc_muãx_u∆ock
 
__±hªad_muãx_u∆ock


	)

	@/usr/include/gconv.h

23 #i‚de‡
_GCONV_H


24 
	#_GCONV_H
 1

	)

26 
	~<„©uªs.h
>

27 
	#__√ed_mb°©e_t


	)

28 
	#__√ed_wöt_t


	)

29 
	~<wch¨.h
>

30 
	#__√ed_size_t


	)

31 
	#__√ed_wch¨_t


	)

32 
	~<°ddef.h
>

35 
	#__UNKNOWN_10646_CHAR
 ((
wch¨_t
Ë0xfffd)

	)

40 
	m__GCONV_OK
 = 0,

41 
	m__GCONV_NOCONV
,

42 
	m__GCONV_NODB
,

43 
	m__GCONV_NOMEM
,

45 
	m__GCONV_EMPTY_INPUT
,

46 
	m__GCONV_FULL_OUTPUT
,

47 
	m__GCONV_ILLEGAL_INPUT
,

48 
	m__GCONV_INCOMPLETE_INPUT
,

50 
	m__GCONV_ILLEGAL_DESCRIPTOR
,

51 
	m__GCONV_INTERNAL_ERROR


58 
	m__GCONV_IS_LAST
 = 0x0001,

59 
	m__GCONV_IGNORE_ERRORS
 = 0x0002

64 
	g__gc⁄v_°ï
;

65 
	g__gc⁄v_°ï_d©a
;

66 
	g__gc⁄v_lﬂded_obje˘
;

67 
	g__gc⁄v_å™s_d©a
;

71 (*
	t__gc⁄v_f˘
Ë(
	t__gc⁄v_°ï
 *, 
	t__gc⁄v_°ï_d©a
 *,

72 
	t__c⁄°
 **, __const *,

73 **, 
	tsize_t
 *, , );

76 
	$wöt_t
 (*
	t__gc⁄v_btowc_f˘
Ë(
	t__gc⁄v_°ï
 *, );

79 (*
	t__gc⁄v_öô_f˘
Ë(
	t__gc⁄v_°ï
 *);

80 (*
	t__gc⁄v_íd_f˘
Ë(
	t__gc⁄v_°ï
 *);

84 (*
	t__gc⁄v_å™s_f˘
Ë(
	t__gc⁄v_°ï
 *,

85 
	t__gc⁄v_°ï_d©a
 *, *,

86 
	t__c⁄°
 *,

87 
	t__c⁄°
 **,

88 
	t__c⁄°
 *, **,

89 
	tsize_t
 *);

92 (*
	t__gc⁄v_å™s_c⁄ãxt_f˘
Ë(*, 
	t__c⁄°
 *,

93 
	t__c⁄°
 *,

97 (*
	t__gc⁄v_å™s_quîy_f˘
Ë(
	t__c⁄°
 *, __const ***,

98 
	tsize_t
 *);

101 (*
	t__gc⁄v_å™s_öô_f˘
) (**, const *);

102 (*
	t__gc⁄v_å™s_íd_f˘
) (*);

104 
	s__gc⁄v_å™s_d©a


107 
__gc⁄v_å™s_f˘
 
__å™s_f˘
;

108 
__gc⁄v_å™s_c⁄ãxt_f˘
 
__å™s_c⁄ãxt_f˘
;

109 
__gc⁄v_å™s_íd_f˘
 
__å™s_íd_f˘
;

110 *
__d©a
;

111 
__gc⁄v_å™s_d©a
 *
__√xt
;

116 
	s__gc⁄v_°ï


118 
__gc⁄v_lﬂded_obje˘
 *
__shlib_h™dÀ
;

119 
__c⁄°
 *
__mod«me
;

121 
__cou¡î
;

123 *
__‰om_«me
;

124 *
__to_«me
;

126 
__gc⁄v_f˘
 
__f˘
;

127 
__gc⁄v_btowc_f˘
 
__btowc_f˘
;

128 
__gc⁄v_öô_f˘
 
__öô_f˘
;

129 
__gc⁄v_íd_f˘
 
__íd_f˘
;

133 
__mö_√eded_‰om
;

134 
__max_√eded_‰om
;

135 
__mö_√eded_to
;

136 
__max_√eded_to
;

139 
__°©eful
;

141 *
__d©a
;

146 
	s__gc⁄v_°ï_d©a


148 *
__outbuf
;

149 *
__outbu„nd
;

153 
__Êags
;

157 
__övoˇti⁄_cou¡î
;

161 
__öã∫Æ_u£
;

163 
__mb°©e_t
 *
__°©ï
;

164 
__mb°©e_t
 
__°©e
;

168 
__gc⁄v_å™s_d©a
 *
__å™s
;

173 
	s__gc⁄v_öfo


175 
size_t
 
__n°ïs
;

176 
__gc⁄v_°ï
 *
__°ïs
;

177 
__exãnsi⁄__
 
__gc⁄v_°ï_d©a
 
__d©a
 
__Êex¨r
;

178 } *
	t__gc⁄v_t
;

	@/usr/include/gnu/stubs-64.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub_bdÊush


	)

11 
	#__°ub_chÊags


	)

12 
	#__°ub_Áâach


	)

13 
	#__°ub_fchÊags


	)

14 
	#__°ub_fdëach


	)

15 
	#__°ub_gëmsg


	)

16 
	#__°ub_gây


	)

17 
	#__°ub_lchmod


	)

18 
	#__°ub_putmsg


	)

19 
	#__°ub_ªvoke


	)

20 
	#__°ub_£éogö


	)

21 
	#__°ub_sigªtu∫


	)

22 
	#__°ub_s°k


	)

23 
	#__°ub_°ty


	)

	@/usr/include/wchar.h

24 #i‚de‡
_WCHAR_H


26 #i‡!
deföed
 
__√ed_mb°©e_t
 && !deföed 
__√ed_wöt_t


27 
	#_WCHAR_H
 1

	)

28 
	~<„©uªs.h
>

31 #ifde‡
_WCHAR_H


33 
	#__√ed___FILE


	)

34 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


35 
	#__√ed_FILE


	)

37 
	~<°dio.h
>

39 
	#__√ed___va_li°


	)

40 
	~<°d¨g.h
>

42 
	~<bôs/wch¨.h
>

45 
	#__√ed_size_t


	)

46 
	#__√ed_wch¨_t


	)

47 
	#__√ed_NULL


	)

49 #i‡
deföed
 
_WCHAR_H
 || deföed 
__√ed_wöt_t
 || !deföed 
__WINT_TYPE__


50 #unde‡
__√ed_wöt_t


51 
	#__√ed_wöt_t


	)

52 
	~<°ddef.h
>

56 #i‚de‡
_WINT_T


61 
	#_WINT_T


	)

62 
	twöt_t
;

66 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES
 \

67 && 
deföed
 
__WINT_TYPE__


68 
__BEGIN_NAMESPACE_STD


69 
__WINT_TYPE__
 
	twöt_t
;

70 
	g__END_NAMESPACE_STD


75 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

76 
	#__CORRECT_ISO_CPP_WCHAR_H_PROTO


	)

80 #i‡(
deföed
 
_WCHAR_H
 || deföed 
__√ed_mb°©e_t
Ë&& !deföed 
__mb°©e_t_deföed


81 
	#__mb°©e_t_deföed
 1

	)

85 
	m__cou¡
;

88 #ifde‡
__WINT_TYPE__


89 
__WINT_TYPE__
 
	m__wch
;

91 
wöt_t
 
	m__wch
;

93 
	m__wchb
[4];

94 } 
	m__vÆue
;

95 } 
	t__mb°©e_t
;

97 #unde‡
__√ed_mb°©e_t


102 #ifde‡
_WCHAR_H


104 
__BEGIN_NAMESPACE_C99


106 
__mb°©e_t
 
	tmb°©e_t
;

107 
	g__END_NAMESPACE_C99


108 #ifde‡
__USE_GNU


109 
	$__USING_NAMESPACE_C99
(
mb°©e_t
)

112 #i‚de‡
WCHAR_MIN


114 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

115 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

118 #i‚de‡
WEOF


119 
	#WEOF
 (0xffffffffu)

	)

124 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_UNIX98


125 
	~<w˘y≥.h
>

129 
__BEGIN_DECLS


131 
__BEGIN_NAMESPACE_STD


134 
tm
;

135 
__END_NAMESPACE_STD


139 
	$__USING_NAMESPACE_STD
(
tm
)

142 
__BEGIN_NAMESPACE_STD


144 
wch¨_t
 *
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

145 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

147 
wch¨_t
 *
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

148 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

149 
__THROW
;

152 
wch¨_t
 *
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

153 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

155 
wch¨_t
 *
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

156 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

157 
__THROW
;

160 
	$wcscmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
)

161 
__THROW
 
__©åibuã_puª__
;

163 
	$wc¢cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

164 
__THROW
 
__©åibuã_puª__
;

165 
__END_NAMESPACE_STD


167 #ifde‡
__USE_XOPEN2K8


169 
	$wcsˇ£cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
Ë
__THROW
;

172 
	$wc¢ˇ£cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

173 
size_t
 
__n
Ë
__THROW
;

177 
	~<xloˇÀ.h
>

179 
	$wcsˇ£cmp_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

180 
__loˇÀ_t
 
__loc
Ë
__THROW
;

182 
	$wc¢ˇ£cmp_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

183 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

186 
__BEGIN_NAMESPACE_STD


189 
	$wcscﬁl
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
Ë
__THROW
;

193 
size_t
 
	$wcsx‰m
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

194 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

195 
__END_NAMESPACE_STD


197 #ifde‡
__USE_XOPEN2K8


203 
	$wcscﬁl_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

204 
__loˇÀ_t
 
__loc
Ë
__THROW
;

209 
size_t
 
	$wcsx‰m_l
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
,

210 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

213 
wch¨_t
 *
	$wcsdup
 (
__c⁄°
 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_mÆloc__
;

216 
__BEGIN_NAMESPACE_STD


218 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


219 "C++" 
wch¨_t
 *
	$wcschr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

220 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

221 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcschr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

222 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

224 
wch¨_t
 *
	$wcschr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

225 
__THROW
 
__©åibuã_puª__
;

228 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


229 "C++" 
wch¨_t
 *
	$wc§chr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

230 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

231 "C++" 
__c⁄°
 
wch¨_t
 *
	$wc§chr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

232 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

234 
wch¨_t
 *
	$wc§chr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

235 
__THROW
 
__©åibuã_puª__
;

237 
__END_NAMESPACE_STD


239 #ifde‡
__USE_GNU


242 
wch¨_t
 *
	$wcsch∫ul
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__wc
)

243 
__THROW
 
__©åibuã_puª__
;

246 
__BEGIN_NAMESPACE_STD


249 
size_t
 
	$wcsc•n
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ªje˘
)

250 
__THROW
 
__©åibuã_puª__
;

253 
size_t
 
	$wcs•n
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ac˚±
)

254 
__THROW
 
__©åibuã_puª__
;

256 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


257 "C++" 
wch¨_t
 *
	$wc•brk
 (
wch¨_t
 *
__wcs
, 
__c⁄°
 wch¨_à*
__ac˚±
)

258 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

259 "C++" 
__c⁄°
 
wch¨_t
 *
	$wc•brk
 (
__c⁄°
 
wch¨_t
 *
__wcs
,

260 
__c⁄°
 
wch¨_t
 *
__ac˚±
)

261 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

263 
wch¨_t
 *
	$wc•brk
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ac˚±
)

264 
__THROW
 
__©åibuã_puª__
;

267 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


268 "C++" 
wch¨_t
 *
	$wcs°r
 (
wch¨_t
 *
__hay°ack
, 
__c⁄°
 wch¨_à*
__√edÀ
)

269 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

270 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcs°r
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
,

271 
__c⁄°
 
wch¨_t
 *
__√edÀ
)

272 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

274 
wch¨_t
 *
	$wcs°r
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
, __c⁄° wch¨_à*
__√edÀ
)

275 
__THROW
 
__©åibuã_puª__
;

279 
wch¨_t
 *
	$wc°ok
 (
wch¨_t
 *
__ª°ri˘
 
__s
,

280 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__dñim
,

281 
wch¨_t
 **
__ª°ri˘
 
__±r
Ë
__THROW
;

284 
size_t
 
	$wc¶í
 (
__c⁄°
 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_puª__
;

285 
__END_NAMESPACE_STD


287 #ifde‡
__USE_XOPEN


289 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


290 "C++" 
wch¨_t
 *
	$wcswcs
 (
wch¨_t
 *
__hay°ack
, 
__c⁄°
 wch¨_à*
__√edÀ
)

291 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

292 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcswcs
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
,

293 
__c⁄°
 
wch¨_t
 *
__√edÀ
)

294 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

296 
wch¨_t
 *
	$wcswcs
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
, __c⁄° wch¨_à*
__√edÀ
)

297 
__THROW
 
__©åibuã_puª__
;

301 #ifde‡
__USE_XOPEN2K8


303 
size_t
 
	$wc¢Àn
 (
__c⁄°
 
wch¨_t
 *
__s
, 
size_t
 
__maxÀn
)

304 
__THROW
 
__©åibuã_puª__
;

308 
__BEGIN_NAMESPACE_STD


310 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


311 "C++" 
wch¨_t
 *
	$wmemchr
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

312 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

313 "C++" 
__c⁄°
 
wch¨_t
 *
	$wmemchr
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__c
,

314 
size_t
 
__n
)

315 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

317 
wch¨_t
 *
	$wmemchr
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

318 
__THROW
 
__©åibuã_puª__
;

322 
	$wmemcmp
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s1
,

323 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

324 
__THROW
 
__©åibuã_puª__
;

327 
wch¨_t
 *
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

328 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

332 
wch¨_t
 *
	$wmemmove
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
, 
size_t
 
__n
)

333 
__THROW
;

336 
wch¨_t
 *
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
Ë
__THROW
;

337 
__END_NAMESPACE_STD


339 #ifde‡
__USE_GNU


342 
wch¨_t
 *
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

343 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

344 
__THROW
;

348 
__BEGIN_NAMESPACE_STD


351 
wöt_t
 
	$btowc
 (
__c
Ë
__THROW
;

355 
	$w˘ob
 (
wöt_t
 
__c
Ë
__THROW
;

359 
	$mbsöô
 (
__c⁄°
 
mb°©e_t
 *
__ps
Ë
__THROW
 
__©åibuã_puª__
;

363 
size_t
 
	$mbπowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

364 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

365 
mb°©e_t
 *
__p
Ë
__THROW
;

368 
size_t
 
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wc
,

369 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

372 
size_t
 
	$__mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

373 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

374 
size_t
 
	$mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

375 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

376 
__END_NAMESPACE_STD


378 #ifde‡
__USE_EXTERN_INLINES


384 
wöt_t
 
	$__btowc_Æüs
 (
__c
Ë
	`__asm
 ("btowc");

385 
__exã∫_ölöe
 
wöt_t


386 
	`__NTH
 (
	$btowc
 (
__c
))

387 {  (
	`__buûtö_c⁄°™t_p
 (
__c
) && __c >= '\0' && __c <= '\x7f'

388 ? (
wöt_t
Ë
__c
 : 
	`__btowc_Æüs
 (__c)); 
	}
}

390 
	$__w˘ob_Æüs
 (
wöt_t
 
__c
Ë
	`__asm
 ("wctob");

391 
__exã∫_ölöe
 

392 
	`__NTH
 (
	$w˘ob
 (
wöt_t
 
__wc
))

393 {  (
	`__buûtö_c⁄°™t_p
 (
__wc
Ë&& __w¯>
L
'\0' && __wc <= L'\x7f'

394 ? (Ë
__wc
 : 
	`__w˘ob_Æüs
 (__wc)); 
	}
}

396 
__exã∫_ölöe
 
size_t


397 
__NTH
 (
	$mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

398 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

399 {  (
__ps
 !
NULL


400 ? 
	`mbπowc
 (
NULL
, 
__s
, 
__n
, 
__ps
Ë: 
	`__mbæí
 (__s, __n, NULL)); 
	}
}

403 
__BEGIN_NAMESPACE_STD


406 
size_t
 
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

407 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

408 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

412 
size_t
 
	$wc§tombs
 (*
__ª°ri˘
 
__d°
,

413 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

414 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

415 
__END_NAMESPACE_STD


418 #ifdef 
__USE_XOPEN2K8


421 
size_t
 
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

422 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

423 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

427 
size_t
 
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
,

428 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

429 
size_t
 
__nwc
, size_à
__Àn
,

430 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

435 #ifde‡
__USE_XOPEN


437 
	$wcwidth
 (
wch¨_t
 
__c
Ë
__THROW
;

441 
	$wcswidth
 (
__c⁄°
 
wch¨_t
 *
__s
, 
size_t
 
__n
Ë
__THROW
;

445 
__BEGIN_NAMESPACE_STD


448 
	$wc°od
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

449 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

450 
__END_NAMESPACE_STD


452 #ifde‡
__USE_ISOC99


453 
__BEGIN_NAMESPACE_C99


455 
	$wc°of
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

456 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

457 
	$wc°ﬁd
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

458 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

459 
__END_NAMESPACE_C99


463 
__BEGIN_NAMESPACE_STD


466 
	$wc°ﬁ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

467 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

471 
	$wc°oul
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

472 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

473 
__THROW
;

474 
__END_NAMESPACE_STD


476 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GNUC__
 && deföed 
__USE_GNU
)

477 
__BEGIN_NAMESPACE_C99


480 
__exãnsi⁄__


481 
	$wc°ﬁl
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

482 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

483 
__THROW
;

487 
__exãnsi⁄__


488 
	$wc°ouŒ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

489 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

490 
__ba£
Ë
__THROW
;

491 
__END_NAMESPACE_C99


494 #i‡
deföed
 
__GNUC__
 && deföed 
__USE_GNU


497 
__exãnsi⁄__


498 
	$wc°oq
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

499 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

500 
__THROW
;

504 
__exãnsi⁄__


505 
	$wc°ouq
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

506 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

507 
__ba£
Ë
__THROW
;

510 #ifde‡
__USE_GNU


524 
	~<xloˇÀ.h
>

528 
	$wc°ﬁ_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

529 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

530 
__loˇÀ_t
 
__loc
Ë
__THROW
;

532 
	$wc°oul_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

533 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

534 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

536 
__exãnsi⁄__


537 
	$wc°ﬁl_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

538 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

539 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

541 
__exãnsi⁄__


542 
	$wc°ouŒ_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

543 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

544 
__ba£
, 
__loˇÀ_t
 
__loc
)

545 
__THROW
;

547 
	$wc°od_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

548 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

549 
__THROW
;

551 
	$wc°of_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

552 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

553 
__THROW
;

555 
	$wc°ﬁd_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

556 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

557 
__loˇÀ_t
 
__loc
Ë
__THROW
;

562 
wch¨_t
 *
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

563 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

567 
wch¨_t
 *
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

568 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

569 
__THROW
;

575 #ifdef 
__USE_XOPEN2K8


578 
__FILE
 *
	$›í_wmem°ªam
 (
wch¨_t
 **
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
;

581 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


582 
__BEGIN_NAMESPACE_STD


585 
	$fwide
 (
__FILE
 *
__Â
, 
__mode
Ë
__THROW
;

592 
	`fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

593 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

599 
	`w¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

602 
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

603 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

604 
__THROW
 ;

610 
	`vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__s
,

611 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

612 
__gnuc_va_li°
 
__¨g
)

618 
	`vw¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

619 
__gnuc_va_li°
 
__¨g
)

623 
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

624 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

625 
__gnuc_va_li°
 
__¨g
)

626 
__THROW
 ;

633 
	`fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

634 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

640 
	`wsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

643 
	$swsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

644 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

645 
__THROW
 ;

647 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

648 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

649 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

650 #ifde‡
__REDIRECT


654 
	`__REDIRECT
 (
fwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__°ªam
,

655 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

656 
__isoc99_fwsˇnf
)

658 
	`__REDIRECT
 (
wsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

659 
__isoc99_wsˇnf
)

661 
	`__REDIRECT
 (
swsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

662 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

663 
__isoc99_swsˇnf
)

664 
__THROW
 ;

666 
	`__isoc99_fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

667 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

668 
	`__isoc99_wsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

669 
	$__isoc99_swsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

670 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

671 
__THROW
;

672 
	#fwsˇnf
 
__isoc99_fwsˇnf


	)

673 
	#wsˇnf
 
__isoc99_wsˇnf


	)

674 
	#swsˇnf
 
__isoc99_swsˇnf


	)

678 
__END_NAMESPACE_STD


681 #ifde‡
__USE_ISOC99


682 
__BEGIN_NAMESPACE_C99


687 
	`vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

688 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

689 
__gnuc_va_li°
 
__¨g
)

695 
	`vwsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

696 
__gnuc_va_li°
 
__¨g
)

699 
	$vswsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

700 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

701 
__gnuc_va_li°
 
__¨g
)

702 
__THROW
 ;

704 #i‡!
deföed
 
__USE_GNU
 \

705 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

706 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

707 #ifde‡
__REDIRECT


708 
	`__REDIRECT
 (
vfwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__s
,

709 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

710 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vfwsˇnf
)

712 
	`__REDIRECT
 (
vwsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

713 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vwsˇnf
)

715 
	`__REDIRECT
 (
vswsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

716 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

717 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vswsˇnf
)

718 
__THROW
 ;

720 
	`__isoc99_vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

721 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

722 
__gnuc_va_li°
 
__¨g
);

723 
	`__isoc99_vwsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

724 
__gnuc_va_li°
 
__¨g
);

725 
	$__isoc99_vswsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

726 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

727 
__gnuc_va_li°
 
__¨g
Ë
__THROW
;

728 
	#vfwsˇnf
 
__isoc99_vfwsˇnf


	)

729 
	#vwsˇnf
 
__isoc99_vwsˇnf


	)

730 
	#vswsˇnf
 
__isoc99_vswsˇnf


	)

734 
__END_NAMESPACE_C99


738 
__BEGIN_NAMESPACE_STD


743 
wöt_t
 
	`fgëwc
 (
__FILE
 *
__°ªam
);

744 
wöt_t
 
	`gëwc
 (
__FILE
 *
__°ªam
);

750 
wöt_t
 
	`gëwch¨
 ();

757 
wöt_t
 
	`Âutwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

758 
wöt_t
 
	`putwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

764 
wöt_t
 
	`putwch¨
 (
wch¨_t
 
__wc
);

772 
wch¨_t
 *
	`fgëws
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

773 
__FILE
 *
__ª°ri˘
 
__°ªam
);

779 
	`Âutws
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__ws
,

780 
__FILE
 *
__ª°ri˘
 
__°ªam
);

787 
wöt_t
 
	`ungëwc
 (wöt_à
__wc
, 
__FILE
 *
__°ªam
);

788 
__END_NAMESPACE_STD


791 #ifde‡
__USE_GNU


799 
wöt_t
 
	`gëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

800 
wöt_t
 
	`gëwch¨_u∆ocked
 ();

808 
wöt_t
 
	`fgëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

816 
wöt_t
 
	`Âutwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

825 
wöt_t
 
	`putwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

826 
wöt_t
 
	`putwch¨_u∆ocked
 (
wch¨_t
 
__wc
);

835 
wch¨_t
 *
	`fgëws_u∆ocked
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

836 
__FILE
 *
__ª°ri˘
 
__°ªam
);

844 
	`Âutws_u∆ocked
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__ws
,

845 
__FILE
 *
__ª°ri˘
 
__°ªam
);

849 
__BEGIN_NAMESPACE_C99


853 
size_t
 
	$wcs·ime
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

854 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

855 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

856 
__END_NAMESPACE_C99


858 #ifde‡
__USE_GNU


859 
	~<xloˇÀ.h
>

863 
size_t
 
	$wcs·ime_l
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

864 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

865 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

866 
__loˇÀ_t
 
__loc
Ë
__THROW
;

875 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_GNU


876 
	#__√ed_iswxxx


	)

877 
	~<w˘y≥.h
>

881 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


882 
	~<bôs/wch¨2.h
>

885 #ifde‡
__LDBL_COMPAT


886 
	~<bôs/wch¨-ldbl.h
>

889 
__END_DECLS


897 #unde‡
__√ed_mb°©e_t


898 #unde‡
__√ed_wöt_t


	@/usr/include/asm-generic/errno.h

1 #i‚de‡
_ASM_GENERIC_ERRNO_H


2 
	#_ASM_GENERIC_ERRNO_H


	)

4 
	~<asm-gíîic/î∫o-ba£.h
>

6 
	#EDEADLK
 35

	)

7 
	#ENAMETOOLONG
 36

	)

8 
	#ENOLCK
 37

	)

9 
	#ENOSYS
 38

	)

10 
	#ENOTEMPTY
 39

	)

11 
	#ELOOP
 40

	)

12 
	#EWOULDBLOCK
 
EAGAIN


	)

13 
	#ENOMSG
 42

	)

14 
	#EIDRM
 43

	)

15 
	#ECHRNG
 44

	)

16 
	#EL2NSYNC
 45

	)

17 
	#EL3HLT
 46

	)

18 
	#EL3RST
 47

	)

19 
	#ELNRNG
 48

	)

20 
	#EUNATCH
 49

	)

21 
	#ENOCSI
 50

	)

22 
	#EL2HLT
 51

	)

23 
	#EBADE
 52

	)

24 
	#EBADR
 53

	)

25 
	#EXFULL
 54

	)

26 
	#ENOANO
 55

	)

27 
	#EBADRQC
 56

	)

28 
	#EBADSLT
 57

	)

30 
	#EDEADLOCK
 
EDEADLK


	)

32 
	#EBFONT
 59

	)

33 
	#ENOSTR
 60

	)

34 
	#ENODATA
 61

	)

35 
	#ETIME
 62

	)

36 
	#ENOSR
 63

	)

37 
	#ENONET
 64

	)

38 
	#ENOPKG
 65

	)

39 
	#EREMOTE
 66

	)

40 
	#ENOLINK
 67

	)

41 
	#EADV
 68

	)

42 
	#ESRMNT
 69

	)

43 
	#ECOMM
 70

	)

44 
	#EPROTO
 71

	)

45 
	#EMULTIHOP
 72

	)

46 
	#EDOTDOT
 73

	)

47 
	#EBADMSG
 74

	)

48 
	#EOVERFLOW
 75

	)

49 
	#ENOTUNIQ
 76

	)

50 
	#EBADFD
 77

	)

51 
	#EREMCHG
 78

	)

52 
	#ELIBACC
 79

	)

53 
	#ELIBBAD
 80

	)

54 
	#ELIBSCN
 81

	)

55 
	#ELIBMAX
 82

	)

56 
	#ELIBEXEC
 83

	)

57 
	#EILSEQ
 84

	)

58 
	#ERESTART
 85

	)

59 
	#ESTRPIPE
 86

	)

60 
	#EUSERS
 87

	)

61 
	#ENOTSOCK
 88

	)

62 
	#EDESTADDRREQ
 89

	)

63 
	#EMSGSIZE
 90

	)

64 
	#EPROTOTYPE
 91

	)

65 
	#ENOPROTOOPT
 92

	)

66 
	#EPROTONOSUPPORT
 93

	)

67 
	#ESOCKTNOSUPPORT
 94

	)

68 
	#EOPNOTSUPP
 95

	)

69 
	#EPFNOSUPPORT
 96

	)

70 
	#EAFNOSUPPORT
 97

	)

71 
	#EADDRINUSE
 98

	)

72 
	#EADDRNOTAVAIL
 99

	)

73 
	#ENETDOWN
 100

	)

74 
	#ENETUNREACH
 101

	)

75 
	#ENETRESET
 102

	)

76 
	#ECONNABORTED
 103

	)

77 
	#ECONNRESET
 104

	)

78 
	#ENOBUFS
 105

	)

79 
	#EISCONN
 106

	)

80 
	#ENOTCONN
 107

	)

81 
	#ESHUTDOWN
 108

	)

82 
	#ETOOMANYREFS
 109

	)

83 
	#ETIMEDOUT
 110

	)

84 
	#ECONNREFUSED
 111

	)

85 
	#EHOSTDOWN
 112

	)

86 
	#EHOSTUNREACH
 113

	)

87 
	#EALREADY
 114

	)

88 
	#EINPROGRESS
 115

	)

89 
	#ESTALE
 116

	)

90 
	#EUCLEAN
 117

	)

91 
	#ENOTNAM
 118

	)

92 
	#ENAVAIL
 119

	)

93 
	#EISNAM
 120

	)

94 
	#EREMOTEIO
 121

	)

95 
	#EDQUOT
 122

	)

97 
	#ENOMEDIUM
 123

	)

98 
	#EMEDIUMTYPE
 124

	)

99 
	#ECANCELED
 125

	)

100 
	#ENOKEY
 126

	)

101 
	#EKEYEXPIRED
 127

	)

102 
	#EKEYREVOKED
 128

	)

103 
	#EKEYREJECTED
 129

	)

106 
	#EOWNERDEAD
 130

	)

107 
	#ENOTRECOVERABLE
 131

	)

109 
	#ERFKILL
 132

	)

111 
	#EHWPOISON
 133

	)

	@/usr/include/asm/sockios.h

1 
	~<asm-gíîic/sockios.h
>

	@/usr/include/bits/wchar-ldbl.h

20 #i‚de‡
_WCHAR_H


24 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


25 
__BEGIN_NAMESPACE_C99


26 
__LDBL_REDIR_DECL
 (
fw¥ötf
);

27 
__LDBL_REDIR_DECL
 (
w¥ötf
);

28 
__LDBL_REDIR_DECL
 (
sw¥ötf
);

29 
__LDBL_REDIR_DECL
 (
vfw¥ötf
);

30 
__LDBL_REDIR_DECL
 (
vw¥ötf
);

31 
__LDBL_REDIR_DECL
 (
vsw¥ötf
);

32 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

33 && !
deföed
 
	g__REDIRECT
 \

34 && (
deföed
 
	g__STRICT_ANSI__
 || deföed 
	g__USE_XOPEN2K
)

35 
	$__LDBL_REDIR1_DECL
 (
fwsˇnf
, 
__∆dbl___isoc99_fwsˇnf
)

36 
	$__LDBL_REDIR1_DECL
 (
wsˇnf
, 
__∆dbl___isoc99_wsˇnf
)

37 
	$__LDBL_REDIR1_DECL
 (
swsˇnf
, 
__∆dbl___isoc99_swsˇnf
)

39 
	`__LDBL_REDIR_DECL
 (
fwsˇnf
);

40 
	`__LDBL_REDIR_DECL
 (
wsˇnf
);

41 
	`__LDBL_REDIR_DECL
 (
swsˇnf
);

43 
__END_NAMESPACE_C99


46 #ifde‡
__USE_ISOC99


47 
__BEGIN_NAMESPACE_C99


48 
	`__LDBL_REDIR1_DECL
 (
wc°ﬁd
, 
wc°od
);

49 #i‡!
deföed
 
__USE_GNU
 && !deföed 
__REDIRECT
 \

50 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

51 
	$__LDBL_REDIR1_DECL
 (
vfwsˇnf
, 
__∆dbl___isoc99_vfwsˇnf
)

52 
	$__LDBL_REDIR1_DECL
 (
vwsˇnf
, 
__∆dbl___isoc99_vwsˇnf
)

53 
	$__LDBL_REDIR1_DECL
 (
vswsˇnf
, 
__∆dbl___isoc99_vswsˇnf
)

55 
	`__LDBL_REDIR_DECL
 (
vfwsˇnf
);

56 
	`__LDBL_REDIR_DECL
 (
vwsˇnf
);

57 
	`__LDBL_REDIR_DECL
 (
vswsˇnf
);

59 
__END_NAMESPACE_C99


62 #ifde‡
__USE_GNU


63 
	`__LDBL_REDIR1_DECL
 (
wc°ﬁd_l
, 
wc°od_l
);

66 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


67 
	$__LDBL_REDIR_DECL
 (
__sw¥ötf_chk
)

68 
	$__LDBL_REDIR_DECL
 (
__vsw¥ötf_chk
)

69 #i‡
__USE_FORTIFY_LEVEL
 > 1

70 
	$__LDBL_REDIR_DECL
 (
__fw¥ötf_chk
)

71 
	$__LDBL_REDIR_DECL
 (
__w¥ötf_chk
)

72 
	$__LDBL_REDIR_DECL
 (
__vfw¥ötf_chk
)

73 
	$__LDBL_REDIR_DECL
 (
__vw¥ötf_chk
)

	@/usr/include/bits/wchar2.h

20 #i‚de‡
_WCHAR_H


25 
wch¨_t
 *
	$__wmem˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

26 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

27 
size_t
 
__ns1
Ë
__THROW
;

28 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem˝y_Æüs
,

29 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

30 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
),

31 
wmem˝y
);

32 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem˝y_chk_w¨n
,

33 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

34 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

35 
size_t
 
__ns1
), 
__wmem˝y_chk
)

36 
	`__w¨«âr
 ("wmemcpy called withÜength biggerÅhan size of destination "

39 
__exã∫_Æways_ölöe
 
wch¨_t
 *

40 
	`__NTH
 (
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__s2
,

41 
size_t
 
__n
))

43 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

45 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

46  
	`__wmem˝y_chk
 (
__s1
, 
__s2
, 
__n
,

47 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

49 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

50  
	`__wmem˝y_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

51 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

53  
	`__wmem˝y_Æüs
 (
__s1
, 
__s2
, 
__n
);

54 
	}
}

57 
wch¨_t
 *
	$__wmemmove_chk
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
,

58 
size_t
 
__n
, size_à
__ns1
Ë
__THROW
;

59 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemmove_Æüs
, (wch¨_à*
__s1
,

60 
__c⁄°
 
wch¨_t
 *
__s2
,

61 
size_t
 
__n
), 
wmemmove
);

62 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemmove_chk_w¨n
,

63 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
,

64 
size_t
 
__n
, size_à
__ns1
), 
__wmemmove_chk
)

65 
	`__w¨«âr
 ("wmemmove called withÜength biggerÅhan size of destination "

68 
__exã∫_Æways_ölöe
 
wch¨_t
 *

69 
	`__NTH
 (
	$wmemmove
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
, 
size_t
 
__n
))

71 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

73 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

74  
	`__wmemmove_chk
 (
__s1
, 
__s2
, 
__n
,

75 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

77 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

78  
	`__wmemmove_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

79 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

81  
	`__wmemmove_Æüs
 (
__s1
, 
__s2
, 
__n
);

82 
	}
}

85 #ifde‡
__USE_GNU


86 
wch¨_t
 *
	$__wmemp˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

87 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

88 
size_t
 
__ns1
Ë
__THROW
;

89 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemp˝y_Æüs
,

90 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

91 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
,

92 
size_t
 
__n
), 
wmemp˝y
);

93 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemp˝y_chk_w¨n
,

94 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

95 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

96 
size_t
 
__ns1
), 
__wmemp˝y_chk
)

97 
	`__w¨«âr
 ("wmempcpy called withÜength biggerÅhan size of destination "

100 
__exã∫_Æways_ölöe
 
wch¨_t
 *

101 
	`__NTH
 (
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__s2
,

102 
size_t
 
__n
))

104 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

106 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

107  
	`__wmemp˝y_chk
 (
__s1
, 
__s2
, 
__n
,

108 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

110 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

111  
	`__wmemp˝y_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

112 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

114  
	`__wmemp˝y_Æüs
 (
__s1
, 
__s2
, 
__n
);

115 
	}
}

119 
wch¨_t
 *
	$__wmem£t_chk
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
,

120 
size_t
 
__ns
Ë
__THROW
;

121 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem£t_Æüs
, (wch¨_à*
__s
, wch¨_à
__c
,

122 
size_t
 
__n
), 
wmem£t
);

123 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem£t_chk_w¨n
,

124 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
,

125 
size_t
 
__ns
), 
__wmem£t_chk
)

126 
	`__w¨«âr
 ("wmemset called withÜength biggerÅhan size of destination "

129 
__exã∫_Æways_ölöe
 
wch¨_t
 *

130 
	`__NTH
 (
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
))

132 i‡(
	`__bos0
 (
__s
Ë!(
size_t
) -1)

134 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

135  
	`__wmem£t_chk
 (
__s
, 
__c
, 
__n
, 
	`__bos0
 (__sË/  (
wch¨_t
));

137 i‡(
__n
 > 
	`__bos0
 (
__s
Ë/  (
wch¨_t
))

138  
	`__wmem£t_chk_w¨n
 (
__s
, 
__c
, 
__n
,

139 
	`__bos0
 (
__s
Ë/  (
wch¨_t
));

141  
	`__wmem£t_Æüs
 (
__s
, 
__c
, 
__n
);

142 
	}
}

145 
wch¨_t
 *
	$__wcs˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

146 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

147 
size_t
 
__n
Ë
__THROW
;

148 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wcs˝y_Æüs
,

149 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

150 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
wcs˝y
);

152 
__exã∫_Æways_ölöe
 
wch¨_t
 *

153 
	`__NTH
 (
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__§c
))

155 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

156  
	`__wcs˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

157  
	`__wcs˝y_Æüs
 (
__de°
, 
__§c
);

158 
	}
}

161 
wch¨_t
 *
	$__w˝˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

162 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

163 
size_t
 
__de°Àn
Ë
__THROW
;

164 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝˝y_Æüs
,

165 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

166 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
w˝˝y
);

168 
__exã∫_Æways_ölöe
 
wch¨_t
 *

169 
	`__NTH
 (
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__§c
))

171 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

172  
	`__w˝˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

173  
	`__w˝˝y_Æüs
 (
__de°
, 
__§c
);

174 
	}
}

177 
wch¨_t
 *
	$__wc¢˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

178 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
,

179 
size_t
 
__de°Àn
Ë
__THROW
;

180 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢˝y_Æüs
,

181 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

182 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

183 
size_t
 
__n
), 
wc¢˝y
);

184 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢˝y_chk_w¨n
,

185 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

186 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

187 
size_t
 
__n
, size_à
__de°Àn
), 
__wc¢˝y_chk
)

188 
	`__w¨«âr
 ("wcsncpy called withÜength biggerÅhan size of destination "

191 
__exã∫_Æways_ölöe
 
wch¨_t
 *

192 
	`__NTH
 (
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__§c
,

193 
size_t
 
__n
))

195 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

197 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

198  
	`__wc¢˝y_chk
 (
__de°
, 
__§c
, 
__n
,

199 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

200 i‡(
__n
 > 
	`__bos
 (
__de°
Ë/  (
wch¨_t
))

201  
	`__wc¢˝y_chk_w¨n
 (
__de°
, 
__§c
, 
__n
,

202 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

204  
	`__wc¢˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

205 
	}
}

208 
wch¨_t
 *
	$__w˝n˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

209 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
,

210 
size_t
 
__de°Àn
Ë
__THROW
;

211 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝n˝y_Æüs
,

212 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

213 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

214 
size_t
 
__n
), 
w˝n˝y
);

215 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝n˝y_chk_w¨n
,

216 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

217 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

218 
size_t
 
__n
, size_à
__de°Àn
), 
__w˝n˝y_chk
)

219 
	`__w¨«âr
 ("wcpncpy called withÜength biggerÅhan size of destination "

222 
__exã∫_Æways_ölöe
 
wch¨_t
 *

223 
	`__NTH
 (
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__§c
,

224 
size_t
 
__n
))

226 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

228 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

229  
	`__w˝n˝y_chk
 (
__de°
, 
__§c
, 
__n
,

230 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

231 i‡(
__n
 > 
	`__bos
 (
__de°
Ë/  (
wch¨_t
))

232  
	`__w˝n˝y_chk_w¨n
 (
__de°
, 
__§c
, 
__n
,

233 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

235  
	`__w˝n˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

236 
	}
}

239 
wch¨_t
 *
	$__wcsˇt_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

240 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

241 
size_t
 
__de°Àn
Ë
__THROW
;

242 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wcsˇt_Æüs
,

243 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

244 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
wcsˇt
);

246 
__exã∫_Æways_ölöe
 
wch¨_t
 *

247 
	`__NTH
 (
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__§c
))

249 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

250  
	`__wcsˇt_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

251  
	`__wcsˇt_Æüs
 (
__de°
, 
__§c
);

252 
	}
}

255 
wch¨_t
 *
	$__wc¢ˇt_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

256 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

257 
size_t
 
__n
, size_à
__de°Àn
Ë
__THROW
;

258 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢ˇt_Æüs
,

259 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

260 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

261 
size_t
 
__n
), 
wc¢ˇt
);

263 
__exã∫_Æways_ölöe
 
wch¨_t
 *

264 
	`__NTH
 (
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__§c
,

265 
size_t
 
__n
))

267 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

268  
	`__wc¢ˇt_chk
 (
__de°
, 
__§c
, 
__n
,

269 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

270  
	`__wc¢ˇt_Æüs
 (
__de°
, 
__§c
, 
__n
);

271 
	}
}

274 
	$__sw¥ötf_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

275 
__Êag
, 
size_t
 
__s_Àn
,

276 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

277 
__THROW
 ;

279 
	`__REDIRECT_NTH_LDBL
 (
__sw¥ötf_Æüs
,

280 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

281 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...),

282 
sw¥ötf
);

284 #ifde‡
__va_¨g_∑ck


285 
__exã∫_Æways_ölöe
 

286 
	`__NTH
 (
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

287 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...))

289 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1)

290  
	`__sw¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

291 
	`__bos
 (
__s
Ë/  (
wch¨_t
),

292 
__fmt
, 
	`__va_¨g_∑ck
 ());

293  
	`__sw¥ötf_Æüs
 (
__s
, 
__n
, 
__fmt
, 
	`__va_¨g_∑ck
 ());

294 
	}
}

295 #ñi‡!
deföed
 
__˝lu•lus


297 
	#sw¥ötf
(
s
, 
n
, ...) \

298 (
	`__bos
 (
s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1 \

299 ? 
	`__sw¥ötf_chk
 (
s
, 
n
, 
__USE_FORTIFY_LEVEL
 - 1, \

300 
	`__bos
 (
s
Ë/  (
wch¨_t
), 
__VA_ARGS__
) \

301 : 
	`sw¥ötf
 (
s
, 
n
, 
__VA_ARGS__
))

	)

304 
	$__vsw¥ötf_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

305 
__Êag
, 
size_t
 
__s_Àn
,

306 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

307 
__gnuc_va_li°
 
__¨g
)

308 
__THROW
 ;

310 
	`__REDIRECT_NTH_LDBL
 (
__vsw¥ötf_Æüs
,

311 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

312 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
,

313 
__gnuc_va_li°
 
__≠
), 
vsw¥ötf
);

315 
__exã∫_Æways_ölöe
 

316 
	`__NTH
 (
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

317 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
))

319 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1)

320  
	`__vsw¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

321 
	`__bos
 (
__s
Ë/  (
wch¨_t
), 
__fmt
, 
__≠
);

322  
	`__vsw¥ötf_Æüs
 (
__s
, 
__n
, 
__fmt
, 
__≠
);

323 
	}
}

326 #i‡
__USE_FORTIFY_LEVEL
 > 1

328 
__fw¥ötf_chk
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

329 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

330 
__w¥ötf_chk
 (
__Êag
, 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

332 
__vfw¥ötf_chk
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

333 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

334 
__gnuc_va_li°
 
__≠
);

335 
__vw¥ötf_chk
 (
__Êag
, 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

336 
__gnuc_va_li°
 
__≠
);

338 #ifde‡
__va_¨g_∑ck


339 
__exã∫_Æways_ölöe
 

340 
	$w¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...)

342  
	`__w¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

343 
	}
}

345 
__exã∫_Æways_ölöe
 

346 
	$fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__c⁄°
 
wch¨_t
 *__ª°ri˘ 
__fmt
, ...)

348  
	`__fw¥ötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

349 
	`__va_¨g_∑ck
 ());

350 
	}
}

351 #ñi‡!
deföed
 
__˝lu•lus


352 
	#w¥ötf
(...) \

353 
	`__w¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

354 
	#fw¥ötf
(
°ªam
, ...) \

355 
	`__fw¥ötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

358 
__exã∫_Æways_ölöe
 

359 
	$vw¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

361  
	`__vw¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

362 
	}
}

364 
__exã∫_Æways_ölöe
 

365 
	$vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

366 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

368  
	`__vfw¥ötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

369 
	}
}

373 
wch¨_t
 *
	$__fgëws_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

374 
__FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

375 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_Æüs
,

376 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
,

377 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
fgëws
Ë
__wur
;

378 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_chk_w¨n
,

379 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

380 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgëws_chk
)

381 
__wur
 
	`__w¨«âr
 ("fgetws called with bigger sizeÅhanÜength "

384 
__exã∫_Æways_ölöe
 
__wur
 
wch¨_t
 *

385 
	$fgëws
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
, 
__FILE
 *__ª°ri˘ 
__°ªam
)

387 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

389 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

390  
	`__fgëws_chk
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

391 
__n
, 
__°ªam
);

393 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
Ë/  (
wch¨_t
))

394  
	`__fgëws_chk_w¨n
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

395 
__n
, 
__°ªam
);

397  
	`__fgëws_Æüs
 (
__s
, 
__n
, 
__°ªam
);

398 
	}
}

400 #ifde‡
__USE_GNU


401 
wch¨_t
 *
	$__fgëws_u∆ocked_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
,

402 
__n
, 
__FILE
 *
__ª°ri˘
 
__°ªam
)

403 
__wur
;

404 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_u∆ocked_Æüs
,

405 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
,

406 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
fgëws_u∆ocked
)

407 
__wur
;

408 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_u∆ocked_chk_w¨n
,

409 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

410 
__FILE
 *
__ª°ri˘
 
__°ªam
),

411 
__fgëws_u∆ocked_chk
)

412 
__wur
 
	`__w¨«âr
 ("fgetws_unlocked called with bigger sizeÅhanÜength "

415 
__exã∫_Æways_ölöe
 
__wur
 
wch¨_t
 *

416 
	$fgëws_u∆ocked
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
, 
__FILE
 *__ª°ri˘ 
__°ªam
)

418 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

420 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

421  
	`__fgëws_u∆ocked_chk
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

422 
__n
, 
__°ªam
);

424 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
Ë/  (
wch¨_t
))

425  
	`__fgëws_u∆ocked_chk_w¨n
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

426 
__n
, 
__°ªam
);

428  
	`__fgëws_u∆ocked_Æüs
 (
__s
, 
__n
, 
__°ªam
);

429 
	}
}

433 
size_t
 
	$__w¸tomb_chk
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

434 
mb°©e_t
 *
__ª°ri˘
 
__p
,

435 
size_t
 
__buÊí
Ë
__THROW
 
__wur
;

436 
size_t
 
	`__REDIRECT_NTH
 (
__w¸tomb_Æüs
,

437 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

438 
mb°©e_t
 *
__ª°ri˘
 
__ps
), 
w¸tomb
Ë
__wur
;

440 
__exã∫_Æways_ölöe
 
__wur
 
size_t


441 
	`__NTH
 (
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

442 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

447 
	#__WCHAR_MB_LEN_MAX
 16

	)

448 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__WCHAR_MB_LEN_MAX


451 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 && 
__WCHAR_MB_LEN_MAX
 > __bos (__s))

452  
	`__w¸tomb_chk
 (
__s
, 
__wch¨
, 
__ps
, 
	`__bos
 (__s));

453  
	`__w¸tomb_Æüs
 (
__s
, 
__wch¨
, 
__ps
);

454 
	}
}

457 
size_t
 
	$__mb§towcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

458 
__c⁄°
 **
__ª°ri˘
 
__§c
,

459 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

460 
size_t
 
__d°Àn
Ë
__THROW
;

461 
size_t
 
	`__REDIRECT_NTH
 (
__mb§towcs_Æüs
,

462 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

463 
__c⁄°
 **
__ª°ri˘
 
__§c
,

464 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

465 
mb§towcs
);

466 
size_t
 
	`__REDIRECT_NTH
 (
__mb§towcs_chk_w¨n
,

467 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

468 
__c⁄°
 **
__ª°ri˘
 
__§c
,

469 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

470 
size_t
 
__d°Àn
), 
__mb§towcs_chk
)

471 
	`__w¨«âr
 ("mbsrtowcs called with dst buffer smallerÅhanÜen "

474 
__exã∫_Æways_ölöe
 
size_t


475 
	`__NTH
 (
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, 
__c⁄°
 **__ª°ri˘ 
__§c
,

476 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

478 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

480 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

481  
	`__mb§towcs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
,

482 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

484 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

485  
	`__mb§towcs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
,

486 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

488  
	`__mb§towcs_Æüs
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
);

489 
	}
}

492 
size_t
 
	$__wc§tombs_chk
 (*
__ª°ri˘
 
__d°
,

493 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

494 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

495 
size_t
 
__d°Àn
Ë
__THROW
;

496 
size_t
 
	`__REDIRECT_NTH
 (
__wc§tombs_Æüs
,

497 (*
__ª°ri˘
 
__d°
,

498 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

499 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

500 
wc§tombs
);

501 
size_t
 
	`__REDIRECT_NTH
 (
__wc§tombs_chk_w¨n
,

502 (*
__ª°ri˘
 
__d°
,

503 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

504 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

505 
size_t
 
__d°Àn
), 
__wc§tombs_chk
)

506 
	`__w¨«âr
 ("wcsrtombs called with dst buffer smallerÅhanÜen");

508 
__exã∫_Æways_ölöe
 
size_t


509 
	`__NTH
 (
	$wc§tombs
 (*
__ª°ri˘
 
__d°
, 
__c⁄°
 
wch¨_t
 **__ª°ri˘ 
__§c
,

510 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

512 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

514 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

515  
	`__wc§tombs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
, 
	`__bos
 (__dst));

517 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

518  
	`__wc§tombs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
, 
	`__bos
 (__dst));

520  
	`__wc§tombs_Æüs
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
);

521 
	}
}

524 #ifde‡
__USE_GNU


525 
size_t
 
	$__mb¢πowcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

526 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

527 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

528 
size_t
 
__d°Àn
Ë
__THROW
;

529 
size_t
 
	`__REDIRECT_NTH
 (
__mb¢πowcs_Æüs
,

530 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

531 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

532 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

533 
mb¢πowcs
);

534 
size_t
 
	`__REDIRECT_NTH
 (
__mb¢πowcs_chk_w¨n
,

535 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

536 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

537 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

538 
size_t
 
__d°Àn
), 
__mb¢πowcs_chk
)

539 
	`__w¨«âr
 ("mbsnrtowcs called with dst buffer smallerÅhanÜen "

542 
__exã∫_Æways_ölöe
 
size_t


543 
	`__NTH
 (
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, 
__c⁄°
 **__ª°ri˘ 
__§c
,

544 
size_t
 
__nmc
, size_à
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

546 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

548 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

549  
	`__mb¢πowcs_chk
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
,

550 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

552 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

553  
	`__mb¢πowcs_chk_w¨n
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
,

554 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

556  
	`__mb¢πowcs_Æüs
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
);

557 
	}
}

560 
size_t
 
	$__wc¢πombs_chk
 (*
__ª°ri˘
 
__d°
,

561 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

562 
size_t
 
__nwc
, size_à
__Àn
,

563 
mb°©e_t
 *
__ª°ri˘
 
__ps
, 
size_t
 
__d°Àn
)

564 
__THROW
;

565 
size_t
 
	`__REDIRECT_NTH
 (
__wc¢πombs_Æüs
,

566 (*
__ª°ri˘
 
__d°
,

567 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

568 
size_t
 
__nwc
, size_à
__Àn
,

569 
mb°©e_t
 *
__ª°ri˘
 
__ps
), 
wc¢πombs
);

570 
size_t
 
	`__REDIRECT_NTH
 (
__wc¢πombs_chk_w¨n
,

571 (*
__ª°ri˘
 
__d°
,

572 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

573 
size_t
 
__nwc
, size_à
__Àn
,

574 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

575 
size_t
 
__d°Àn
), 
__wc¢πombs_chk
)

576 
	`__w¨«âr
 ("wcsnrtombs called with dst buffer smallerÅhanÜen");

578 
__exã∫_Æways_ölöe
 
size_t


579 
	`__NTH
 (
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
, 
__c⁄°
 
wch¨_t
 **__ª°ri˘ 
__§c
,

580 
size_t
 
__nwc
, size_à
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

582 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

584 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

585  
	`__wc¢πombs_chk
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
,

586 
	`__bos
 (
__d°
));

588 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

589  
	`__wc¢πombs_chk_w¨n
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
,

590 
	`__bos
 (
__d°
));

592  
	`__wc¢πombs_Æüs
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
);

593 
	}
}

	@/usr/include/linux/ioctl.h

1 #i‚de‡
_LINUX_IOCTL_H


2 
	#_LINUX_IOCTL_H


	)

4 
	~<asm/io˘l.h
>

	@/usr/include/pthread.h

20 #i‚de‡
_PTHREAD_H


21 
	#_PTHREAD_H
 1

	)

23 
	~<„©uªs.h
>

24 
	~<ídün.h
>

25 
	~<sched.h
>

26 
	~<time.h
>

28 
	~<bôs/±hªadty≥s.h
>

29 
	~<bôs/£tjmp.h
>

30 
	~<bôs/w‹dsize.h
>

36 
	mPTHREAD_CREATE_JOINABLE
,

37 
	#PTHREAD_CREATE_JOINABLE
 
PTHREAD_CREATE_JOINABLE


	)

38 
	mPTHREAD_CREATE_DETACHED


39 
	#PTHREAD_CREATE_DETACHED
 
PTHREAD_CREATE_DETACHED


	)

46 
	mPTHREAD_MUTEX_TIMED_NP
,

47 
	mPTHREAD_MUTEX_RECURSIVE_NP
,

48 
	mPTHREAD_MUTEX_ERRORCHECK_NP
,

49 
	mPTHREAD_MUTEX_ADAPTIVE_NP


50 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


52 
	mPTHREAD_MUTEX_NORMAL
 = 
PTHREAD_MUTEX_TIMED_NP
,

53 
	mPTHREAD_MUTEX_RECURSIVE
 = 
PTHREAD_MUTEX_RECURSIVE_NP
,

54 
	mPTHREAD_MUTEX_ERRORCHECK
 = 
PTHREAD_MUTEX_ERRORCHECK_NP
,

55 
	mPTHREAD_MUTEX_DEFAULT
 = 
PTHREAD_MUTEX_NORMAL


57 #ifde‡
__USE_GNU


59 , 
	mPTHREAD_MUTEX_FAST_NP
 = 
PTHREAD_MUTEX_TIMED_NP


64 #ifde‡
__USE_XOPEN2K


68 
	mPTHREAD_MUTEX_STALLED
,

69 
	mPTHREAD_MUTEX_STALLED_NP
 = 
PTHREAD_MUTEX_STALLED
,

70 
	mPTHREAD_MUTEX_ROBUST
,

71 
	mPTHREAD_MUTEX_ROBUST_NP
 = 
PTHREAD_MUTEX_ROBUST


76 #ifde‡
__USE_UNIX98


80 
	mPTHREAD_PRIO_NONE
,

81 
	mPTHREAD_PRIO_INHERIT
,

82 
	mPTHREAD_PRIO_PROTECT


88 #i‡
__WORDSIZE
 == 64

89 
	#PTHREAD_MUTEX_INITIALIZER
 \

90 { { 0, 0, 0, 0, 0, 0, { 0, 0 } } }

	)

91 #ifde‡
__USE_GNU


92 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

93 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 0, 0 } } }

	)

94 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

95 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 0, 0 } } }

	)

96 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

97 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 0, 0 } } }

	)

100 
	#PTHREAD_MUTEX_INITIALIZER
 \

101 { { 0, 0, 0, 0, 0, { 0 } } }

	)

102 #ifde‡
__USE_GNU


103 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

104 { { 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 0 } } }

	)

105 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

106 { { 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 0 } } }

	)

107 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

108 { { 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 0 } } }

	)

114 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


117 
	mPTHREAD_RWLOCK_PREFER_READER_NP
,

118 
	mPTHREAD_RWLOCK_PREFER_WRITER_NP
,

119 
	mPTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,

120 
	mPTHREAD_RWLOCK_DEFAULT_NP
 = 
PTHREAD_RWLOCK_PREFER_READER_NP


124 
	#PTHREAD_RWLOCK_INITIALIZER
 \

125 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }

	)

126 #ifde‡
__USE_GNU


127 #i‡
__WORDSIZE
 == 64

128 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

130 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
 } }

	)

132 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


133 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

134 { { 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
, \

135 0, 0, 0, 0 } }

	)

137 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

138 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,\

139 0 } }

	)

149 
	mPTHREAD_INHERIT_SCHED
,

150 
	#PTHREAD_INHERIT_SCHED
 
PTHREAD_INHERIT_SCHED


	)

151 
	mPTHREAD_EXPLICIT_SCHED


152 
	#PTHREAD_EXPLICIT_SCHED
 
PTHREAD_EXPLICIT_SCHED


	)

159 
	mPTHREAD_SCOPE_SYSTEM
,

160 
	#PTHREAD_SCOPE_SYSTEM
 
PTHREAD_SCOPE_SYSTEM


	)

161 
	mPTHREAD_SCOPE_PROCESS


162 
	#PTHREAD_SCOPE_PROCESS
 
PTHREAD_SCOPE_PROCESS


	)

169 
	mPTHREAD_PROCESS_PRIVATE
,

170 
	#PTHREAD_PROCESS_PRIVATE
 
PTHREAD_PROCESS_PRIVATE


	)

171 
	mPTHREAD_PROCESS_SHARED


172 
	#PTHREAD_PROCESS_SHARED
 
PTHREAD_PROCESS_SHARED


	)

178 
	#PTHREAD_COND_INITIALIZER
 { { 0, 0, 0, 0, 0, (*Ë0, 0, 0 } }

	)

182 
	s_±hªad_˛ónup_buf„r


184 (*
	m__routöe
) (*);

185 *
	m__¨g
;

186 
	m__ˇn˚…y≥
;

187 
_±hªad_˛ónup_buf„r
 *
	m__¥ev
;

193 
	mPTHREAD_CANCEL_ENABLE
,

194 
	#PTHREAD_CANCEL_ENABLE
 
PTHREAD_CANCEL_ENABLE


	)

195 
	mPTHREAD_CANCEL_DISABLE


196 
	#PTHREAD_CANCEL_DISABLE
 
PTHREAD_CANCEL_DISABLE


	)

200 
	mPTHREAD_CANCEL_DEFERRED
,

201 
	#PTHREAD_CANCEL_DEFERRED
 
PTHREAD_CANCEL_DEFERRED


	)

202 
	mPTHREAD_CANCEL_ASYNCHRONOUS


203 
	#PTHREAD_CANCEL_ASYNCHRONOUS
 
PTHREAD_CANCEL_ASYNCHRONOUS


	)

205 
	#PTHREAD_CANCELED
 ((*Ë-1)

	)

209 
	#PTHREAD_ONCE_INIT
 0

	)

212 #ifde‡
__USE_XOPEN2K


216 
	#PTHREAD_BARRIER_SERIAL_THREAD
 -1

	)

220 
__BEGIN_DECLS


225 
±hªad_¸óã
 (
±hªad_t
 *
__ª°ri˘
 
__√wthªad
,

226 
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

227 *(*
__°¨t_routöe
) (*),

228 *
__ª°ri˘
 
__¨g
Ë
__THROW
 
__n⁄nuŒ
 ((1, 3));

234 
	$±hªad_exô
 (*
__ªtvÆ
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

242 
	`±hªad_joö
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
);

244 #ifde‡
__USE_GNU


247 
	$±hªad_åyjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
Ë
__THROW
;

255 
	`±hªad_timedjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
,

256 
__c⁄°
 
time•ec
 *
__ab°ime
);

263 
	$±hªad_dëach
 (
±hªad_t
 
__th
Ë
__THROW
;

267 
±hªad_t
 
	$±hªad_£lf
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

270 
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
Ë
__THROW
;

278 
	$±hªad_©å_öô
 (
±hªad_©å_t
 *
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

281 
	$±hªad_©å_de°roy
 (
±hªad_©å_t
 *
__©å
)

282 
__THROW
 
	`__n⁄nuŒ
 ((1));

285 
	$±hªad_©å_gëdëach°©e
 (
__c⁄°
 
±hªad_©å_t
 *
__©å
,

286 *
__dëach°©e
)

287 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

290 
	$±hªad_©å_£tdëach°©e
 (
±hªad_©å_t
 *
__©å
,

291 
__dëach°©e
)

292 
__THROW
 
	`__n⁄nuŒ
 ((1));

296 
	$±hªad_©å_gëgu¨dsize
 (
__c⁄°
 
±hªad_©å_t
 *
__©å
,

297 
size_t
 *
__gu¨dsize
)

298 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

301 
	$±hªad_©å_£tgu¨dsize
 (
±hªad_©å_t
 *
__©å
,

302 
size_t
 
__gu¨dsize
)

303 
__THROW
 
	`__n⁄nuŒ
 ((1));

307 
	$±hªad_©å_gësched∑øm
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


308 
__©å
,

309 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

310 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

313 
	$±hªad_©å_£tsched∑øm
 (
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

314 
__c⁄°
 
sched_∑øm
 *
__ª°ri˘


315 
__∑øm
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

318 
	$±hªad_©å_gëschedpﬁicy
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


319 
__©å
, *
__ª°ri˘
 
__pﬁicy
)

320 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

323 
	$±hªad_©å_£tschedpﬁicy
 (
±hªad_©å_t
 *
__©å
, 
__pﬁicy
)

324 
__THROW
 
	`__n⁄nuŒ
 ((1));

327 
	$±hªad_©å_gëöhîôsched
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


328 
__©å
, *
__ª°ri˘
 
__öhîô
)

329 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

332 
	$±hªad_©å_£töhîôsched
 (
±hªad_©å_t
 *
__©å
,

333 
__öhîô
)

334 
__THROW
 
	`__n⁄nuŒ
 ((1));

338 
	$±hªad_©å_gësc›e
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

339 *
__ª°ri˘
 
__sc›e
)

340 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

343 
	$±hªad_©å_£tsc›e
 (
±hªad_©å_t
 *
__©å
, 
__sc›e
)

344 
__THROW
 
	`__n⁄nuŒ
 ((1));

347 
	$±hªad_©å_gë°ackaddr
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


348 
__©å
, **
__ª°ri˘
 
__°ackaddr
)

349 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__©åibuã_dïªˇãd__
;

355 
	$±hªad_©å_£t°ackaddr
 (
±hªad_©å_t
 *
__©å
,

356 *
__°ackaddr
)

357 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
;

360 
	$±hªad_©å_gë°acksize
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


361 
__©å
, 
size_t
 *
__ª°ri˘
 
__°acksize
)

362 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

367 
	$±hªad_©å_£t°acksize
 (
±hªad_©å_t
 *
__©å
,

368 
size_t
 
__°acksize
)

369 
__THROW
 
	`__n⁄nuŒ
 ((1));

371 #ifde‡
__USE_XOPEN2K


373 
	$±hªad_©å_gë°ack
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

374 **
__ª°ri˘
 
__°ackaddr
,

375 
size_t
 *
__ª°ri˘
 
__°acksize
)

376 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

381 
	$±hªad_©å_£t°ack
 (
±hªad_©å_t
 *
__©å
, *
__°ackaddr
,

382 
size_t
 
__°acksize
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

385 #ifde‡
__USE_GNU


388 
	$±hªad_©å_£èfföôy_≈
 (
±hªad_©å_t
 *
__©å
,

389 
size_t
 
__˝u£tsize
,

390 
__c⁄°
 
˝u_£t_t
 *
__˝u£t
)

391 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

395 
	$±hªad_©å_gëafföôy_≈
 (
__c⁄°
 
±hªad_©å_t
 *
__©å
,

396 
size_t
 
__˝u£tsize
,

397 
˝u_£t_t
 *
__˝u£t
)

398 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

404 
	$±hªad_gë©å_≈
 (
±hªad_t
 
__th
, 
±hªad_©å_t
 *
__©å
)

405 
__THROW
 
	`__n⁄nuŒ
 ((2));

413 
	$±hªad_£tsched∑øm
 (
±hªad_t
 
__èrgë_thªad
, 
__pﬁicy
,

414 
__c⁄°
 
sched_∑øm
 *
__∑øm
)

415 
__THROW
 
	`__n⁄nuŒ
 ((3));

418 
	$±hªad_gësched∑øm
 (
±hªad_t
 
__èrgë_thªad
,

419 *
__ª°ri˘
 
__pﬁicy
,

420 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

421 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

424 
	$±hªad_£tsched¥io
 (
±hªad_t
 
__èrgë_thªad
, 
__¥io
)

425 
__THROW
;

428 #ifde‡
__USE_GNU


430 
	$±hªad_gë«me_≈
 (
±hªad_t
 
__èrgë_thªad
, *
__buf
,

431 
size_t
 
__buÊí
)

432 
__THROW
 
	`__n⁄nuŒ
 ((2));

435 
	$±hªad_£äame_≈
 (
±hªad_t
 
__èrgë_thªad
, 
__c⁄°
 *
__«me
)

436 
__THROW
 
	`__n⁄nuŒ
 ((2));

440 #ifde‡
__USE_UNIX98


442 
	$±hªad_gëc⁄cuºícy
 (Ë
__THROW
;

445 
	$±hªad_£tc⁄cuºícy
 (
__Àvñ
Ë
__THROW
;

448 #ifde‡
__USE_GNU


453 
	$±hªad_yõld
 (Ë
__THROW
;

458 
	$±hªad_£èfföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

459 
__c⁄°
 
˝u_£t_t
 *
__˝u£t
)

460 
__THROW
 
	`__n⁄nuŒ
 ((3));

463 
	$±hªad_gëafföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

464 
˝u_£t_t
 *
__˝u£t
)

465 
__THROW
 
	`__n⁄nuŒ
 ((3));

478 
	`±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

479 (*
__öô_routöe
Ë()Ë
	`__n⁄nuŒ
 ((1, 2));

490 
	`±hªad_£tˇn˚l°©e
 (
__°©e
, *
__ﬁd°©e
);

494 
	`±hªad_£tˇn˚…y≥
 (
__ty≥
, *
__ﬁdty≥
);

497 
	`±hªad_ˇn˚l
 (
±hªad_t
 
__th
);

502 
	`±hªad_ã°ˇn˚l
 ();

511 
__jmp_buf
 
__ˇn˚l_jmp_buf
;

512 
__mask_was_ßved
;

513 } 
__ˇn˚l_jmp_buf
[1];

514 *
__∑d
[4];

515 } 
	t__±hªad_unwöd_buf_t
 
	t__©åibuã__
 ((
	t__Æig√d__
));

518 #i‚de‡
__˛ónup_f˘_©åibuã


519 
	#__˛ónup_f˘_©åibuã


	)

524 
	s__±hªad_˛ónup_‰ame


526 (*
__ˇn˚l_routöe
) (*);

527 *
__ˇn˚l_¨g
;

528 
__do_ô
;

529 
__ˇn˚l_ty≥
;

532 #i‡
deföed
 
__GNUC__
 && deföed 
__EXCEPTIONS


533 #ifde‡
__˝lu•lus


535 ˛as†
	c__±hªad_˛ónup_˛ass


537 (*
__ˇn˚l_routöe
) (*);

538 *
__ˇn˚l_¨g
;

539 
__do_ô
;

540 
__ˇn˚l_ty≥
;

542 
public
:

543 
	`__±hªad_˛ónup_˛ass
 ((*
__f˘
Ë(*), *
__¨g
)

544 : 
	`__ˇn˚l_routöe
 (
__f˘
), 
	`__ˇn˚l_¨g
 (
__¨g
), 
	$__do_ô
 (1) { }

545 ~
	$__±hªad_˛ónup_˛ass
 (Ë{ i‡(
__do_ô
Ë
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); 
	}
}

546 
	$__£tdoô
 (
__√wvÆ
Ë{ 
__do_ô
 = __√wvÆ; 
	}
}

547 
	$__de„r
 (Ë{ 
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
,

548 &
__ˇn˚l_ty≥
); 
	}
}

549 
	$__ª°‹e
 (Ëc⁄° { 
	`±hªad_£tˇn˚…y≥
 (
__ˇn˚l_ty≥
, 0); 
	}
}

559 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

561 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
)

	)

565 
	#±hªad_˛ónup_p›
(
execuã
) \

566 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

567 } 0)

	)

569 #ifde‡
__USE_GNU


573 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

575 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
); \

576 
__˛‰ame
.
	`__de„r
 ()

	)

581 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

582 
__˛‰ame
.
	`__ª°‹e
 (); \

583 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

584 } 0)

	)

591 
__exã∫_ölöe
 

592 
	$__±hªad_˛ónup_routöe
 (
__±hªad_˛ónup_‰ame
 *
__‰ame
)

594 i‡(
__‰ame
->
__do_ô
)

595 
__‰ame
->
	`__ˇn˚l_routöe
 (__‰ame->
__ˇn˚l_¨g
);

596 
	}
}

605 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

607 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

608 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

609 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

610 .
__do_ô
 = 1 };

	)

614 
	#±hªad_˛ónup_p›
(
execuã
) \

615 
__˛‰ame
.
__do_ô
 = (
execuã
); \

616 } 0)

	)

618 #ifde‡
__USE_GNU


622 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

624 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

625 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

626 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

627 .
__do_ô
 = 1 }; \

628 (Ë
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
, \

629 &
__˛‰ame
.
__ˇn˚l_ty≥
)

	)

634 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

635 (Ë
	`±hªad_£tˇn˚…y≥
 (
__˛‰ame
.
__ˇn˚l_ty≥
, 
NULL
); \

636 
__˛‰ame
.
__do_ô
 = (
execuã
); \

637 } 0)

	)

648 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

650 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

651 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

652 *
__ˇn˚l_¨g
 = (
¨g
); \

653 
nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

654 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

655 i‡(
	`__buûtö_ex≥˘
 (
nŸ_fú°_ˇŒ
, 0)) \

657 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

658 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

662 
	`__±hªad_ªgi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

663 dÿ{

	)

664 
__±hªad_ªgi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

665 
__˛ónup_f˘_©åibuã
;

669 
	#±hªad_˛ónup_p›
(
execuã
) \

672 
	`__±hªad_uƒegi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

673 i‡(
execuã
) \

674 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

675 } 0)

	)

676 
	$__±hªad_uƒegi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

677 
__˛ónup_f˘_©åibuã
;

679 #ifde‡
__USE_GNU


683 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

685 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

686 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

687 *
__ˇn˚l_¨g
 = (
¨g
); \

688 
nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

689 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

690 i‡(
	`__buûtö_ex≥˘
 (
nŸ_fú°_ˇŒ
, 0)) \

692 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

693 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

697 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (&
__ˇn˚l_buf
); \

698 dÿ{

	)

699 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (
__±hªad_unwöd_buf_t
 *
__buf
)

700 
__˛ónup_f˘_©åibuã
;

705 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

708 
	`__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (&
__ˇn˚l_buf
); \

709 i‡(
execuã
) \

710 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

711 
	}
} 0)

	)

712 
	$__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (
__±hªad_unwöd_buf_t
 *
__buf
)

713 
__˛ónup_f˘_©åibuã
;

717 
	$__±hªad_unwöd_√xt
 (
__±hªad_unwöd_buf_t
 *
__buf
)

718 
__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
__n‹ëu∫__
))

719 #i‚de‡
SHARED


720 
	`__©åibuã__
 ((
__wók__
))

726 
__jmp_buf_èg
;

727 
	$__sig£tjmp
 (
__jmp_buf_èg
 *
__ív
, 
__ßvemask
Ë
__THROW
;

733 
	$±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

734 
__c⁄°
 
±hªad_muãx©å_t
 *
__muãx©å
)

735 
__THROW
 
	`__n⁄nuŒ
 ((1));

738 
	$±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
)

739 
__THROW
 
	`__n⁄nuŒ
 ((1));

742 
	$±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
)

743 
__THROW
 
	`__n⁄nuŒ
 ((1));

746 
	$±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
)

747 
__THROW
 
	`__n⁄nuŒ
 ((1));

749 #ifde‡
__USE_XOPEN2K


751 
	$±hªad_muãx_timedlock
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

752 
__c⁄°
 
time•ec
 *
__ª°ri˘


753 
__ab°ime
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

757 
	$±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
)

758 
__THROW
 
	`__n⁄nuŒ
 ((1));

762 
	$±hªad_muãx_gë¥io˚ûög
 (
__c⁄°
 
±hªad_muãx_t
 *

763 
__ª°ri˘
 
__muãx
,

764 *
__ª°ri˘
 
__¥io˚ûög
)

765 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

769 
	$±hªad_muãx_£çrio˚ûög
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

770 
__¥io˚ûög
,

771 *
__ª°ri˘
 
__ﬁd_˚ûög
)

772 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

775 #ifde‡
__USE_XOPEN2K8


777 
	$±hªad_muãx_c⁄si°ít
 (
±hªad_muãx_t
 *
__muãx
)

778 
__THROW
 
	`__n⁄nuŒ
 ((1));

779 #ifde‡
__USE_GNU


780 
	$±hªad_muãx_c⁄si°ít_≈
 (
±hªad_muãx_t
 *
__muãx
)

781 
__THROW
 
	`__n⁄nuŒ
 ((1));

790 
	$±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
)

791 
__THROW
 
	`__n⁄nuŒ
 ((1));

794 
	$±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
)

795 
__THROW
 
	`__n⁄nuŒ
 ((1));

798 
	$±hªad_muãx©å_gëpsh¨ed
 (
__c⁄°
 
±hªad_muãx©å_t
 *

799 
__ª°ri˘
 
__©å
,

800 *
__ª°ri˘
 
__psh¨ed
)

801 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

804 
	$±hªad_muãx©å_£çsh¨ed
 (
±hªad_muãx©å_t
 *
__©å
,

805 
__psh¨ed
)

806 
__THROW
 
	`__n⁄nuŒ
 ((1));

808 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


810 
	$±hªad_muãx©å_gëty≥
 (
__c⁄°
 
±hªad_muãx©å_t
 *
__ª°ri˘


811 
__©å
, *
__ª°ri˘
 
__köd
)

812 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

817 
	$±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
, 
__köd
)

818 
__THROW
 
	`__n⁄nuŒ
 ((1));

822 
	$±hªad_muãx©å_gë¥Ÿocﬁ
 (
__c⁄°
 
±hªad_muãx©å_t
 *

823 
__ª°ri˘
 
__©å
,

824 *
__ª°ri˘
 
__¥Ÿocﬁ
)

825 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

829 
	$±hªad_muãx©å_£çrŸocﬁ
 (
±hªad_muãx©å_t
 *
__©å
,

830 
__¥Ÿocﬁ
)

831 
__THROW
 
	`__n⁄nuŒ
 ((1));

834 
	$±hªad_muãx©å_gë¥io˚ûög
 (
__c⁄°
 
±hªad_muãx©å_t
 *

835 
__ª°ri˘
 
__©å
,

836 *
__ª°ri˘
 
__¥io˚ûög
)

837 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

840 
	$±hªad_muãx©å_£çrio˚ûög
 (
±hªad_muãx©å_t
 *
__©å
,

841 
__¥io˚ûög
)

842 
__THROW
 
	`__n⁄nuŒ
 ((1));

844 #ifde‡
__USE_XOPEN2K


846 
	$±hªad_muãx©å_gërobu°
 (
__c⁄°
 
±hªad_muãx©å_t
 *
__©å
,

847 *
__robu°√ss
)

848 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

849 #ifde‡
__USE_GNU


850 
	$±hªad_muãx©å_gërobu°_≈
 (
__c⁄°
 
±hªad_muãx©å_t
 *
__©å
,

851 *
__robu°√ss
)

852 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

856 
	$±hªad_muãx©å_£åobu°
 (
±hªad_muãx©å_t
 *
__©å
,

857 
__robu°√ss
)

858 
__THROW
 
	`__n⁄nuŒ
 ((1));

859 #ifde‡
__USE_GNU


860 
	$±hªad_muãx©å_£åobu°_≈
 (
±hªad_muãx©å_t
 *
__©å
,

861 
__robu°√ss
)

862 
__THROW
 
	`__n⁄nuŒ
 ((1));

867 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


872 
	$±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

873 
__c⁄°
 
±hªad_rwlock©å_t
 *
__ª°ri˘


874 
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

877 
	$±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
)

878 
__THROW
 
	`__n⁄nuŒ
 ((1));

881 
	$±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

882 
__THROW
 
	`__n⁄nuŒ
 ((1));

885 
	$±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

886 
__THROW
 
	`__n⁄nuŒ
 ((1));

888 #ifde‡
__USE_XOPEN2K


890 
	$±hªad_rwlock_timedrdlock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

891 
__c⁄°
 
time•ec
 *
__ª°ri˘


892 
__ab°ime
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

896 
	$±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
)

897 
__THROW
 
	`__n⁄nuŒ
 ((1));

900 
	$±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
)

901 
__THROW
 
	`__n⁄nuŒ
 ((1));

903 #ifde‡
__USE_XOPEN2K


905 
	$±hªad_rwlock_timedwæock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

906 
__c⁄°
 
time•ec
 *
__ª°ri˘


907 
__ab°ime
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

911 
	$±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
)

912 
__THROW
 
	`__n⁄nuŒ
 ((1));

918 
	$±hªad_rwlock©å_öô
 (
±hªad_rwlock©å_t
 *
__©å
)

919 
__THROW
 
	`__n⁄nuŒ
 ((1));

922 
	$±hªad_rwlock©å_de°roy
 (
±hªad_rwlock©å_t
 *
__©å
)

923 
__THROW
 
	`__n⁄nuŒ
 ((1));

926 
	$±hªad_rwlock©å_gëpsh¨ed
 (
__c⁄°
 
±hªad_rwlock©å_t
 *

927 
__ª°ri˘
 
__©å
,

928 *
__ª°ri˘
 
__psh¨ed
)

929 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

932 
	$±hªad_rwlock©å_£çsh¨ed
 (
±hªad_rwlock©å_t
 *
__©å
,

933 
__psh¨ed
)

934 
__THROW
 
	`__n⁄nuŒ
 ((1));

937 
	$±hªad_rwlock©å_gëköd_≈
 (
__c⁄°
 
±hªad_rwlock©å_t
 *

938 
__ª°ri˘
 
__©å
,

939 *
__ª°ri˘
 
__¥ef
)

940 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

943 
	$±hªad_rwlock©å_£tköd_≈
 (
±hªad_rwlock©å_t
 *
__©å
,

944 
__¥ef
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

952 
	$±hªad_c⁄d_öô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

953 
__c⁄°
 
±hªad_c⁄d©å_t
 *
__ª°ri˘


954 
__c⁄d_©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

957 
	$±hªad_c⁄d_de°roy
 (
±hªad_c⁄d_t
 *
__c⁄d
)

958 
__THROW
 
	`__n⁄nuŒ
 ((1));

961 
	$±hªad_c⁄d_sig«l
 (
±hªad_c⁄d_t
 *
__c⁄d
)

962 
__THROW
 
	`__n⁄nuŒ
 ((1));

965 
	$±hªad_c⁄d_brﬂdˇ°
 (
±hªad_c⁄d_t
 *
__c⁄d
)

966 
__THROW
 
	`__n⁄nuŒ
 ((1));

973 
	$±hªad_c⁄d_waô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

974 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
)

975 
	`__n⁄nuŒ
 ((1, 2));

984 
	$±hªad_c⁄d_timedwaô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

985 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

986 
__c⁄°
 
time•ec
 *
__ª°ri˘


987 
__ab°ime
Ë
	`__n⁄nuŒ
 ((1, 2, 3));

992 
	$±hªad_c⁄d©å_öô
 (
±hªad_c⁄d©å_t
 *
__©å
)

993 
__THROW
 
	`__n⁄nuŒ
 ((1));

996 
	$±hªad_c⁄d©å_de°roy
 (
±hªad_c⁄d©å_t
 *
__©å
)

997 
__THROW
 
	`__n⁄nuŒ
 ((1));

1000 
	$±hªad_c⁄d©å_gëpsh¨ed
 (
__c⁄°
 
±hªad_c⁄d©å_t
 *

1001 
__ª°ri˘
 
__©å
,

1002 *
__ª°ri˘
 
__psh¨ed
)

1003 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1006 
	$±hªad_c⁄d©å_£çsh¨ed
 (
±hªad_c⁄d©å_t
 *
__©å
,

1007 
__psh¨ed
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1009 #ifde‡
__USE_XOPEN2K


1011 
	$±hªad_c⁄d©å_gë˛ock
 (
__c⁄°
 
±hªad_c⁄d©å_t
 *

1012 
__ª°ri˘
 
__©å
,

1013 
__˛ockid_t
 *
__ª°ri˘
 
__˛ock_id
)

1014 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1017 
	$±hªad_c⁄d©å_£t˛ock
 (
±hªad_c⁄d©å_t
 *
__©å
,

1018 
__˛ockid_t
 
__˛ock_id
)

1019 
__THROW
 
	`__n⁄nuŒ
 ((1));

1023 #ifde‡
__USE_XOPEN2K


1028 
	$±hªad_•ö_öô
 (
±hªad_•ölock_t
 *
__lock
, 
__psh¨ed
)

1029 
__THROW
 
	`__n⁄nuŒ
 ((1));

1032 
	$±hªad_•ö_de°roy
 (
±hªad_•ölock_t
 *
__lock
)

1033 
__THROW
 
	`__n⁄nuŒ
 ((1));

1036 
	$±hªad_•ö_lock
 (
±hªad_•ölock_t
 *
__lock
)

1037 
__THROW
 
	`__n⁄nuŒ
 ((1));

1040 
	$±hªad_•ö_åylock
 (
±hªad_•ölock_t
 *
__lock
)

1041 
__THROW
 
	`__n⁄nuŒ
 ((1));

1044 
	$±hªad_•ö_u∆ock
 (
±hªad_•ölock_t
 *
__lock
)

1045 
__THROW
 
	`__n⁄nuŒ
 ((1));

1052 
	$±hªad_b¨rõr_öô
 (
±hªad_b¨rõr_t
 *
__ª°ri˘
 
__b¨rõr
,

1053 
__c⁄°
 
±hªad_b¨rõøâr_t
 *
__ª°ri˘


1054 
__©å
, 
__cou¡
)

1055 
__THROW
 
	`__n⁄nuŒ
 ((1));

1058 
	$±hªad_b¨rõr_de°roy
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1059 
__THROW
 
	`__n⁄nuŒ
 ((1));

1062 
	$±hªad_b¨rõr_waô
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1063 
__THROW
 
	`__n⁄nuŒ
 ((1));

1067 
	$±hªad_b¨rõøâr_öô
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1068 
__THROW
 
	`__n⁄nuŒ
 ((1));

1071 
	$±hªad_b¨rõøâr_de°roy
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1072 
__THROW
 
	`__n⁄nuŒ
 ((1));

1075 
	$±hªad_b¨rõøâr_gëpsh¨ed
 (
__c⁄°
 
±hªad_b¨rõøâr_t
 *

1076 
__ª°ri˘
 
__©å
,

1077 *
__ª°ri˘
 
__psh¨ed
)

1078 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1081 
	$±hªad_b¨rõøâr_£çsh¨ed
 (
±hªad_b¨rõøâr_t
 *
__©å
,

1082 
__psh¨ed
)

1083 
__THROW
 
	`__n⁄nuŒ
 ((1));

1095 
	`±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

1096 (*
__de°r_fun˘i⁄
) (*))

1097 
__THROW
 
	`__n⁄nuŒ
 ((1));

1100 
	$±hªad_key_dñëe
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1103 *
	$±hªad_gë•ecific
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1106 
	$±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

1107 
__c⁄°
 *
__poöãr
Ë
__THROW
 ;

1110 #ifde‡
__USE_XOPEN2K


1112 
	$±hªad_gë˝u˛ockid
 (
±hªad_t
 
__thªad_id
,

1113 
__˛ockid_t
 *
__˛ock_id
)

1114 
__THROW
 
	`__n⁄nuŒ
 ((2));

1129 
	`±hªad_©f‹k
 ((*
__¥ï¨e
) (),

1130 (*
__∑ª¡
) (),

1131 (*
__chûd
Ë()Ë
__THROW
;

1134 #ifde‡
__USE_EXTERN_INLINES


1136 
__exã∫_ölöe
 

1137 
	`__NTH
 (
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
))

1139  
__thªad1
 =
__thªad2
;

1140 
	}
}

1143 
	g__END_DECLS


	@/usr/include/wctype.h

24 #i‚de‡
_WCTYPE_H


26 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

29 #i‚de‡
__√ed_iswxxx


30 
	#_WCTYPE_H
 1

	)

33 
	#__√ed_wöt_t


	)

34 
	~<wch¨.h
>

38 #i‚de‡
WEOF


39 
	#WEOF
 (0xffffffffu)

	)

42 #unde‡
__√ed_iswxxx


47 #i‚de‡
__iswxxx_deföed


48 
	#__iswxxx_deföed
 1

	)

50 
__BEGIN_NAMESPACE_C99


53 
	tw˘y≥_t
;

54 
	g__END_NAMESPACE_C99


56 #i‚de‡
_ISwbô


61 
	~<ídün.h
>

62 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


63 
	#_ISwbô
(
bô
Ë(1 << (bô))

	)

65 
	#_ISwbô
(
bô
) \

66 ((
bô
) < 8 ? () ((1UL << (bit)) << 24) \

67 : ((
bô
) < 16 ? () ((1UL << (bit)) << 8) \

68 : ((
bô
) < 24 ? () ((1UL << (bit)) >> 8) \

69 : (Ë((1UL << (
bô
)Ë>> 24))))

	)

74 
	m__ISwuµî
 = 0,

75 
	m__ISwlowî
 = 1,

76 
	m__ISwÆpha
 = 2,

77 
	m__ISwdigô
 = 3,

78 
	m__ISwxdigô
 = 4,

79 
	m__ISw•a˚
 = 5,

80 
	m__ISw¥öt
 = 6,

81 
	m__ISwgøph
 = 7,

82 
	m__ISwbœnk
 = 8,

83 
	m__ISw˙ål
 = 9,

84 
	m__ISwpun˘
 = 10,

85 
	m__ISwÆnum
 = 11,

87 
	m_ISwuµî
 = 
_ISwbô
 (
__ISwuµî
),

88 
	m_ISwlowî
 = 
_ISwbô
 (
__ISwlowî
),

89 
	m_ISwÆpha
 = 
_ISwbô
 (
__ISwÆpha
),

90 
	m_ISwdigô
 = 
_ISwbô
 (
__ISwdigô
),

91 
	m_ISwxdigô
 = 
_ISwbô
 (
__ISwxdigô
),

92 
	m_ISw•a˚
 = 
_ISwbô
 (
__ISw•a˚
),

93 
	m_ISw¥öt
 = 
_ISwbô
 (
__ISw¥öt
),

94 
	m_ISwgøph
 = 
_ISwbô
 (
__ISwgøph
),

95 
	m_ISwbœnk
 = 
_ISwbô
 (
__ISwbœnk
),

96 
	m_ISw˙ål
 = 
_ISwbô
 (
__ISw˙ål
),

97 
	m_ISwpun˘
 = 
_ISwbô
 (
__ISwpun˘
),

98 
	m_ISwÆnum
 = 
_ISwbô
 (
__ISwÆnum
)

103 
__BEGIN_DECLS


105 
__BEGIN_NAMESPACE_C99


112 
	$iswÆnum
 (
wöt_t
 
__wc
Ë
__THROW
;

118 
	$iswÆpha
 (
wöt_t
 
__wc
Ë
__THROW
;

121 
	$isw˙ål
 (
wöt_t
 
__wc
Ë
__THROW
;

125 
	$iswdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

129 
	$iswgøph
 (
wöt_t
 
__wc
Ë
__THROW
;

134 
	$iswlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

137 
	$isw¥öt
 (
wöt_t
 
__wc
Ë
__THROW
;

142 
	$iswpun˘
 (
wöt_t
 
__wc
Ë
__THROW
;

147 
	$isw•a˚
 (
wöt_t
 
__wc
Ë
__THROW
;

152 
	$iswuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

157 
	$iswxdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

162 #ifde‡
__USE_ISOC99


163 
	$iswbœnk
 (
wöt_t
 
__wc
Ë
__THROW
;

172 
w˘y≥_t
 
	$w˘y≥
 (
__c⁄°
 *
__¥›îty
Ë
__THROW
;

176 
	$isw˘y≥
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
Ë
__THROW
;

177 
__END_NAMESPACE_C99


184 
__BEGIN_NAMESPACE_C99


187 
__c⁄°
 
	t__öt32_t
 *
	tw˘øns_t
;

188 
__END_NAMESPACE_C99


189 #ifde‡
__USE_GNU


190 
	$__USING_NAMESPACE_C99
(
w˘øns_t
)

193 
__BEGIN_NAMESPACE_C99


195 
wöt_t
 
	$towlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

198 
wöt_t
 
	$towuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

199 
__END_NAMESPACE_C99


201 
__END_DECLS


208 #ifde‡
_WCTYPE_H


214 
__BEGIN_DECLS


216 
__BEGIN_NAMESPACE_C99


219 
w˘øns_t
 
	$w˘øns
 (
__c⁄°
 *
__¥›îty
Ë
__THROW
;

222 
wöt_t
 
	$tow˘øns
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
Ë
__THROW
;

223 
__END_NAMESPACE_C99


225 #ifde‡
__USE_XOPEN2K8


227 
	~<xloˇÀ.h
>

231 
	$iswÆnum_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

237 
	$iswÆpha_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

240 
	$isw˙ål_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

244 
	$iswdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

248 
	$iswgøph_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

253 
	$iswlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

256 
	$isw¥öt_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

261 
	$iswpun˘_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

266 
	$isw•a˚_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

271 
	$iswuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

276 
	$iswxdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

281 
	$iswbœnk_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

285 
w˘y≥_t
 
	$w˘y≥_l
 (
__c⁄°
 *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

286 
__THROW
;

290 
	$isw˘y≥_l
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
, 
__loˇÀ_t
 
__loˇÀ
)

291 
__THROW
;

299 
wöt_t
 
	$towlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

302 
wöt_t
 
	$towuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

306 
w˘øns_t
 
	$w˘øns_l
 (
__c⁄°
 *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

307 
__THROW
;

310 
wöt_t
 
	$tow˘øns_l
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
,

311 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

315 
__END_DECLS


	@/usr/include/asm-generic/errno-base.h

1 #i‚de‡
_ASM_GENERIC_ERRNO_BASE_H


2 
	#_ASM_GENERIC_ERRNO_BASE_H


	)

4 
	#EPERM
 1

	)

5 
	#ENOENT
 2

	)

6 
	#ESRCH
 3

	)

7 
	#EINTR
 4

	)

8 
	#EIO
 5

	)

9 
	#ENXIO
 6

	)

10 
	#E2BIG
 7

	)

11 
	#ENOEXEC
 8

	)

12 
	#EBADF
 9

	)

13 
	#ECHILD
 10

	)

14 
	#EAGAIN
 11

	)

15 
	#ENOMEM
 12

	)

16 
	#EACCES
 13

	)

17 
	#EFAULT
 14

	)

18 
	#ENOTBLK
 15

	)

19 
	#EBUSY
 16

	)

20 
	#EEXIST
 17

	)

21 
	#EXDEV
 18

	)

22 
	#ENODEV
 19

	)

23 
	#ENOTDIR
 20

	)

24 
	#EISDIR
 21

	)

25 
	#EINVAL
 22

	)

26 
	#ENFILE
 23

	)

27 
	#EMFILE
 24

	)

28 
	#ENOTTY
 25

	)

29 
	#ETXTBSY
 26

	)

30 
	#EFBIG
 27

	)

31 
	#ENOSPC
 28

	)

32 
	#ESPIPE
 29

	)

33 
	#EROFS
 30

	)

34 
	#EMLINK
 31

	)

35 
	#EPIPE
 32

	)

36 
	#EDOM
 33

	)

37 
	#ERANGE
 34

	)

	@/usr/include/asm-generic/sockios.h

1 #i‚de‡
__ASM_GENERIC_SOCKIOS_H


2 
	#__ASM_GENERIC_SOCKIOS_H


	)

5 
	#FIOSETOWN
 0x8901

	)

6 
	#SIOCSPGRP
 0x8902

	)

7 
	#FIOGETOWN
 0x8903

	)

8 
	#SIOCGPGRP
 0x8904

	)

9 
	#SIOCATMARK
 0x8905

	)

10 
	#SIOCGSTAMP
 0x8906

	)

11 
	#SIOCGSTAMPNS
 0x8907

	)

	@/usr/include/asm/ioctl.h

1 
	~<asm-gíîic/io˘l.h
>

	@/usr/include/bits/setjmp.h

20 #i‚de‡
_BITS_SETJMP_H


21 
	#_BITS_SETJMP_H
 1

	)

23 #i‡!
deföed
 
_SETJMP_H
 && !deföed 
_PTHREAD_H


27 
	~<bôs/w‹dsize.h
>

29 #i‚de‡
_ASM


31 #i‡
__WORDSIZE
 == 64

32 
	t__jmp_buf
[8];

34 
	t__jmp_buf
[6];

	@/usr/include/sched.h

21 #i‚def 
_SCHED_H


22 
	#_SCHED_H
 1

	)

24 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

29 
	#__√ed_size_t


	)

30 
	~<°ddef.h
>

32 
	#__√ed_time_t


	)

33 
	#__√ed_time•ec


	)

34 
	~<time.h
>

36 #i‚de‡
__pid_t_deföed


37 
__pid_t
 
	tpid_t
;

38 
	#__pid_t_deföed


	)

43 
	~<bôs/sched.h
>

45 
	#sched_¥i‹ôy
 
__sched_¥i‹ôy


	)

48 
__BEGIN_DECLS


51 
	$sched_£ç¨am
 (
__pid_t
 
__pid
, 
__c⁄°
 
sched_∑øm
 *
__∑øm
)

52 
__THROW
;

55 
	$sched_gë∑øm
 (
__pid_t
 
__pid
, 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

58 
	$sched_£tscheduÀr
 (
__pid_t
 
__pid
, 
__pﬁicy
,

59 
__c⁄°
 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

62 
	$sched_gëscheduÀr
 (
__pid_t
 
__pid
Ë
__THROW
;

65 
	$sched_yõld
 (Ë
__THROW
;

68 
	$sched_gë_¥i‹ôy_max
 (
__Æg‹ôhm
Ë
__THROW
;

71 
	$sched_gë_¥i‹ôy_mö
 (
__Æg‹ôhm
Ë
__THROW
;

74 
	$sched_º_gë_öãrvÆ
 (
__pid_t
 
__pid
, 
time•ec
 *
__t
Ë
__THROW
;

77 #ifde‡
__USE_GNU


79 
	#CPU_SETSIZE
 
__CPU_SETSIZE


	)

80 
	#CPU_SET
(
˝u
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

81 
	#CPU_CLR
(
˝u
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

82 
	#CPU_ISSET
(
˝u
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (˝u,  (
˝u_£t_t
), \

83 
˝u£ç
)

	)

84 
	#CPU_ZERO
(
˝u£ç
Ë
	`__CPU_ZERO_S
 ( (
˝u_£t_t
), cpu£ç)

	)

85 
	#CPU_COUNT
(
˝u£ç
Ë
	`__CPU_COUNT_S
 ( (
˝u_£t_t
), cpu£ç)

	)

87 
	#CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u, sësize, cpu£ç)

	)

88 
	#CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u, sësize, cpu£ç)

	)

89 
	#CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (cpu, setsize, \

90 
˝u£ç
)

	)

91 
	#CPU_ZERO_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_ZERO_S
 (£tsize, cpu£ç)

	)

92 
	#CPU_COUNT_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_COUNT_S
 (£tsize, cpu£ç)

	)

94 
	#CPU_EQUAL
(
˝u£ç1
, 
˝u£ç2
) \

95 
	`__CPU_EQUAL_S
 ( (
˝u_£t_t
), 
˝u£ç1
, 
˝u£ç2
)

	)

96 
	#CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

97 
	`__CPU_EQUAL_S
 (
£tsize
, 
˝u£ç1
, 
˝u£ç2
)

	)

99 
	#CPU_AND
(
de°£t
, 
§c£t1
, 
§c£t2
) \

100 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

101 
	#CPU_OR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

102 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

103 
	#CPU_XOR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

104 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

105 
	#CPU_AND_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

106 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

107 
	#CPU_OR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

108 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

109 
	#CPU_XOR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

110 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

112 
	#CPU_ALLOC_SIZE
(
cou¡
Ë
	`__CPU_ALLOC_SIZE
 (cou¡)

	)

113 
	#CPU_ALLOC
(
cou¡
Ë
	`__CPU_ALLOC
 (cou¡)

	)

114 
	#CPU_FREE
(
˝u£t
Ë
	`__CPU_FREE
 (˝u£t)

	)

118 
	$sched_£èfföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

119 
__c⁄°
 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

122 
	$sched_gëafföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

123 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

126 
__END_DECLS


	@/usr/include/asm-generic/ioctl.h

1 #i‚de‡
_ASM_GENERIC_IOCTL_H


2 
	#_ASM_GENERIC_IOCTL_H


	)

22 
	#_IOC_NRBITS
 8

	)

23 
	#_IOC_TYPEBITS
 8

	)

30 #i‚de‡
_IOC_SIZEBITS


31 
	#_IOC_SIZEBITS
 14

	)

34 #i‚de‡
_IOC_DIRBITS


35 
	#_IOC_DIRBITS
 2

	)

38 
	#_IOC_NRMASK
 ((1 << 
_IOC_NRBITS
)-1)

	)

39 
	#_IOC_TYPEMASK
 ((1 << 
_IOC_TYPEBITS
)-1)

	)

40 
	#_IOC_SIZEMASK
 ((1 << 
_IOC_SIZEBITS
)-1)

	)

41 
	#_IOC_DIRMASK
 ((1 << 
_IOC_DIRBITS
)-1)

	)

43 
	#_IOC_NRSHIFT
 0

	)

44 
	#_IOC_TYPESHIFT
 (
_IOC_NRSHIFT
+
_IOC_NRBITS
)

	)

45 
	#_IOC_SIZESHIFT
 (
_IOC_TYPESHIFT
+
_IOC_TYPEBITS
)

	)

46 
	#_IOC_DIRSHIFT
 (
_IOC_SIZESHIFT
+
_IOC_SIZEBITS
)

	)

53 #i‚de‡
_IOC_NONE


54 
	#_IOC_NONE
 0U

	)

57 #i‚de‡
_IOC_WRITE


58 
	#_IOC_WRITE
 1U

	)

61 #i‚de‡
_IOC_READ


62 
	#_IOC_READ
 2U

	)

65 
	#_IOC
(
dú
,
ty≥
,
ƒ
,
size
) \

66 (((
dú
Ë<< 
_IOC_DIRSHIFT
) | \

67 ((
ty≥
Ë<< 
_IOC_TYPESHIFT
) | \

68 ((
ƒ
Ë<< 
_IOC_NRSHIFT
) | \

69 ((
size
Ë<< 
_IOC_SIZESHIFT
))

	)

71 
	#_IOC_TYPECHECK
(
t
Ë(—))

	)

74 
	#_IO
(
ty≥
,
ƒ
Ë
	`_IOC
(
_IOC_NONE
,—y≥),“r),0)

	)

75 
	#_IOR
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

76 
	#_IOW
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_WRITE
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

77 
	#_IOWR
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
|
_IOC_WRITE
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

78 
	#_IOR_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
,—y≥),“r),(size))

	)

79 
	#_IOW_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_WRITE
,—y≥),“r),(size))

	)

80 
	#_IOWR_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
|
_IOC_WRITE
,—y≥),“r),(size))

	)

83 
	#_IOC_DIR
(
ƒ
Ë((“rË>> 
_IOC_DIRSHIFT
Ë& 
_IOC_DIRMASK
)

	)

84 
	#_IOC_TYPE
(
ƒ
Ë((“rË>> 
_IOC_TYPESHIFT
Ë& 
_IOC_TYPEMASK
)

	)

85 
	#_IOC_NR
(
ƒ
Ë((“rË>> 
_IOC_NRSHIFT
Ë& 
_IOC_NRMASK
)

	)

86 
	#_IOC_SIZE
(
ƒ
Ë((“rË>> 
_IOC_SIZESHIFT
Ë& 
_IOC_SIZEMASK
)

	)

90 
	#IOC_IN
 (
_IOC_WRITE
 << 
_IOC_DIRSHIFT
)

	)

91 
	#IOC_OUT
 (
_IOC_READ
 << 
_IOC_DIRSHIFT
)

	)

92 
	#IOC_INOUT
 ((
_IOC_WRITE
|
_IOC_READ
Ë<< 
_IOC_DIRSHIFT
)

	)

93 
	#IOCSIZE_MASK
 (
_IOC_SIZEMASK
 << 
_IOC_SIZESHIFT
)

	)

94 
	#IOCSIZE_SHIFT
 (
_IOC_SIZESHIFT
)

	)

	@/usr/include/bits/sched.h

22 #i‚de‡
__√ed_sched∑øm


24 #i‚de‡
_SCHED_H


30 
	#SCHED_OTHER
 0

	)

31 
	#SCHED_FIFO
 1

	)

32 
	#SCHED_RR
 2

	)

33 #ifde‡
__USE_GNU


34 
	#SCHED_BATCH
 3

	)

35 
	#SCHED_IDLE
 5

	)

37 
	#SCHED_RESET_ON_FORK
 0x40000000

	)

40 #ifde‡
__USE_MISC


42 
	#CSIGNAL
 0x000000f‡

	)

43 
	#CLONE_VM
 0x00000100

	)

44 
	#CLONE_FS
 0x00000200

	)

45 
	#CLONE_FILES
 0x00000400

	)

46 
	#CLONE_SIGHAND
 0x00000800

	)

47 
	#CLONE_PTRACE
 0x00002000

	)

48 
	#CLONE_VFORK
 0x00004000

	)

50 
	#CLONE_PARENT
 0x00008000

	)

52 
	#CLONE_THREAD
 0x00010000

	)

53 
	#CLONE_NEWNS
 0x00020000

	)

54 
	#CLONE_SYSVSEM
 0x00040000

	)

55 
	#CLONE_SETTLS
 0x00080000

	)

56 
	#CLONE_PARENT_SETTID
 0x00100000

	)

58 
	#CLONE_CHILD_CLEARTID
 0x00200000

	)

60 
	#CLONE_DETACHED
 0x00400000

	)

61 
	#CLONE_UNTRACED
 0x00800000

	)

63 
	#CLONE_CHILD_SETTID
 0x01000000

	)

65 
	#CLONE_NEWUTS
 0x04000000

	)

66 
	#CLONE_NEWIPC
 0x08000000

	)

67 
	#CLONE_NEWUSER
 0x10000000

	)

68 
	#CLONE_NEWPID
 0x20000000

	)

69 
	#CLONE_NEWNET
 0x40000000

	)

70 
	#CLONE_IO
 0x80000000

	)

74 
	ssched_∑øm


76 
	m__sched_¥i‹ôy
;

79 
	g__BEGIN_DECLS


81 #ifde‡
__USE_MISC


83 
˛⁄e
 ((*
__‚
Ë(*
__¨g
), *
__chûd_°ack
,

84 
__Êags
, *
__¨g
, ...Ë
__THROW
;

87 
	$unsh¨e
 (
__Êags
Ë
__THROW
;

90 
	$sched_gë˝u
 (Ë
__THROW
;

93 
__END_DECLS


97 #i‡!
deföed
 
__deföed_sched∑øm
 \

98 && (
deföed
 
__√ed_sched∑øm
 || deföed 
_SCHED_H
)

99 
	#__deföed_sched∑øm
 1

	)

101 
	s__sched_∑øm


103 
__sched_¥i‹ôy
;

105 #unde‡
__√ed_sched∑øm


109 #i‡
deföed
 
_SCHED_H
 && !deföed 
__˝u_£t_t_deföed


110 
	#__˝u_£t_t_deföed


	)

112 
	#__CPU_SETSIZE
 1024

	)

113 
	#__NCPUBITS
 (8 *  (
__˝u_mask
))

	)

116 
	t__˝u_mask
;

119 
	#__CPUELT
(
˝u
Ë((˝uË/ 
__NCPUBITS
)

	)

120 
	#__CPUMASK
(
˝u
Ë((
__˝u_mask
Ë1 << ((˝uË% 
__NCPUBITS
))

	)

125 
__˝u_mask
 
__bôs
[
__CPU_SETSIZE
 / 
__NCPUBITS
];

126 } 
	t˝u_£t_t
;

129 #i‡
	`__GNUC_PREREQ
 (2, 91)

130 
	#__CPU_ZERO_S
(
£tsize
, 
˝u£ç
) \

131 dÿ
	`__buûtö_mem£t
 (
˝u£ç
, '\0', 
£tsize
); 0)

	)

133 
	#__CPU_ZERO_S
(
£tsize
, 
˝u£ç
) \

135 
size_t
 
__i
; \

136 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

137 
__˝u_mask
 *
__bôs
 = (
˝u£ç
)->__bits; \

138 
__i
 = 0; __ò< 
__imax
; ++__i) \

139 
__bôs
[
__i
] = 0; \

140 
	}
} 0)

	)

142 
	#__CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

143 (
__exãnsi⁄__
 \

144 ({ 
size_t
 
__˝u
 = (
˝u
); \

145 
__˝u
 < 8 * (
£tsize
) \

146 ? (((
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

147 |
	`__CPUMASK
 (
__˝u
)) \

148 : 0; }))

	)

149 
	#__CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

150 (
__exãnsi⁄__
 \

151 ({ 
size_t
 
__˝u
 = (
˝u
); \

152 
__˝u
 < 8 * (
£tsize
) \

153 ? (((
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

154 &~
	`__CPUMASK
 (
__˝u
)) \

155 : 0; }))

	)

156 
	#__CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

157 (
__exãnsi⁄__
 \

158 ({ 
size_t
 
__˝u
 = (
˝u
); \

159 
__˝u
 < 8 * (
£tsize
) \

160 ? ((((
__c⁄°
 
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

161 & 
	`__CPUMASK
 (
__˝u
))) != 0 \

162 : 0; }))

	)

164 
	#__CPU_COUNT_S
(
£tsize
, 
˝u£ç
) \

165 
	`__sched_˝ucou¡
 (
£tsize
, 
˝u£ç
)

	)

167 #i‡
__GNUC_PREREQ
 (2, 91)

168 
	#__CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

169 (
	`__buûtö_memcmp
 (
˝u£ç1
, 
˝u£ç2
, 
£tsize
Ë=0)

	)

171 
	#__CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

172 (
__exãnsi⁄__
 \

173 ({ 
__c⁄°
 
__˝u_mask
 *
__¨r1
 = (
˝u£ç1
)->
__bôs
; \

174 
__c⁄°
 
__˝u_mask
 *
__¨r2
 = (
˝u£ç2
)->
__bôs
; \

175 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

176 
size_t
 
__i
; \

177 
__i
 = 0; __ò< 
__imax
; ++__i) \

178 i‡(
__bôs
[
__i
] != __bits[__i]) \

180 
__i
 =
__imax
; }))

	)

183 
	#__CPU_OP_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, 
›
) \

184 (
__exãnsi⁄__
 \

185 ({ 
˝u_£t_t
 *
__de°
 = (
de°£t
); \

186 
__c⁄°
 
__˝u_mask
 *
__¨r1
 = (
§c£t1
)->
__bôs
; \

187 
__c⁄°
 
__˝u_mask
 *
__¨r2
 = (
§c£t2
)->
__bôs
; \

188 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

189 
size_t
 
__i
; \

190 
__i
 = 0; __ò< 
__imax
; ++__i) \

191 ((
__˝u_mask
 *Ë
__de°
->
__bôs
)[
__i
] = 
__¨r1
[__i] 
›
 
__¨r2
[__i]; \

192 
__de°
; }))

	)

194 
	#__CPU_ALLOC_SIZE
(
cou¡
) \

195 ((((
cou¡
Ë+ 
__NCPUBITS
 - 1Ë/ __NCPUBITSË*  (
__˝u_mask
))

	)

196 
	#__CPU_ALLOC
(
cou¡
Ë
	`__sched_˝uÆloc
 (cou¡)

	)

197 
	#__CPU_FREE
(
˝u£t
Ë
	`__sched_˝u‰ì
 (˝u£t)

	)

199 
__BEGIN_DECLS


201 
	$__sched_˝ucou¡
 (
size_t
 
__£tsize
, c⁄° 
˝u_£t_t
 *
__£ç
)

202 
__THROW
;

203 
˝u_£t_t
 *
	$__sched_˝uÆloc
 (
size_t
 
__cou¡
Ë
__THROW
 
__wur
;

204 
	$__sched_˝u‰ì
 (
˝u_£t_t
 *
__£t
Ë
__THROW
;

206 
__END_DECLS


	@
1
.
1
/usr/include
188
4377
WIN32-Code/config.h
WIN32-Code/event-config.h
WIN32-Code/tree.h
WIN32-Code/win32.c
buffer.c
compat/sys/_libevent_time.h
compat/sys/queue.h
devpoll.c
epoll.c
epoll_sub.c
evbuffer.c
evdns.c
evdns.h
event-internal.h
event.c
event.h
event_tagging.c
evhttp.h
evport.c
evrpc-internal.h
evrpc.c
evrpc.h
evsignal.h
evutil.c
evutil.h
http-internal.h
http.c
kqueue.c
log.c
log.h
min_heap.h
poll.c
sample/event-test.c
sample/signal-test.c
sample/time-test.c
select.c
signal.c
strlcpy-internal.h
strlcpy.c
test/bench.c
test/regress.c
test/regress.gen.c
test/regress.gen.h
test/regress.h
test/regress_dns.c
test/regress_http.c
test/regress_rpc.c
test/test-eof.c
test/test-init.c
test/test-time.c
test/test-weof.c
/usr/include/arpa/inet.h
/usr/include/assert.h
/usr/include/ctype.h
/usr/include/errno.h
/usr/include/event-config.h
/usr/include/fcntl.h
/usr/include/inttypes.h
/usr/include/limits.h
/usr/include/netdb.h
/usr/include/netinet/in.h
/usr/include/openssl/rand.h
/usr/include/poll.h
/usr/include/signal.h
/usr/include/stdint.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/sys/epoll.h
/usr/include/sys/ioctl.h
/usr/include/sys/param.h
/usr/include/sys/queue.h
/usr/include/sys/resource.h
/usr/include/sys/select.h
/usr/include/sys/socket.h
/usr/include/sys/stat.h
/usr/include/sys/syscall.h
/usr/include/sys/time.h
/usr/include/sys/timeb.h
/usr/include/sys/types.h
/usr/include/sys/wait.h
/usr/include/syslog.h
/usr/include/time.h
/usr/include/unistd.h
/usr/include/alloca.h
/usr/include/asm/unistd.h
/usr/include/bits/byteswap.h
/usr/include/bits/confname.h
/usr/include/bits/environments.h
/usr/include/bits/errno.h
/usr/include/bits/fcntl.h
/usr/include/bits/fcntl2.h
/usr/include/bits/in.h
/usr/include/bits/ioctl-types.h
/usr/include/bits/ioctls.h
/usr/include/bits/netdb.h
/usr/include/bits/posix1_lim.h
/usr/include/bits/posix2_lim.h
/usr/include/bits/posix_opt.h
/usr/include/bits/pthreadtypes.h
/usr/include/bits/resource.h
/usr/include/bits/select.h
/usr/include/bits/sigaction.h
/usr/include/bits/sigcontext.h
/usr/include/bits/siginfo.h
/usr/include/bits/signum.h
/usr/include/bits/sigset.h
/usr/include/bits/sigstack.h
/usr/include/bits/sigthread.h
/usr/include/bits/socket.h
/usr/include/bits/socket2.h
/usr/include/bits/stat.h
/usr/include/bits/stdio-ldbl.h
/usr/include/bits/stdio.h
/usr/include/bits/stdio2.h
/usr/include/bits/stdio_lim.h
/usr/include/bits/stdlib-ldbl.h
/usr/include/bits/stdlib.h
/usr/include/bits/string.h
/usr/include/bits/string2.h
/usr/include/bits/string3.h
/usr/include/bits/sys_errlist.h
/usr/include/bits/syscall.h
/usr/include/bits/time.h
/usr/include/bits/types.h
/usr/include/bits/unistd.h
/usr/include/bits/waitflags.h
/usr/include/bits/waitstatus.h
/usr/include/bits/wchar.h
/usr/include/bits/wordsize.h
/usr/include/bits/xopen_lim.h
/usr/include/endian.h
/usr/include/features.h
/usr/include/getopt.h
/usr/include/libio.h
/usr/include/linux/limits.h
/usr/include/linux/param.h
/usr/include/openssl/e_os2.h
/usr/include/openssl/ossl_typ.h
/usr/include/rpc/netdb.h
/usr/include/sys/poll.h
/usr/include/sys/syslog.h
/usr/include/sys/sysmacros.h
/usr/include/sys/ttydefaults.h
/usr/include/sys/ucontext.h
/usr/include/sys/uio.h
/usr/include/xlocale.h
/usr/include/_G_config.h
/usr/include/asm/ioctls.h
/usr/include/asm/param.h
/usr/include/asm/socket.h
/usr/include/bits/endian.h
/usr/include/bits/libio-ldbl.h
/usr/include/bits/local_lim.h
/usr/include/bits/poll.h
/usr/include/bits/sockaddr.h
/usr/include/bits/stdio-lock.h
/usr/include/bits/syslog-ldbl.h
/usr/include/bits/syslog-path.h
/usr/include/bits/syslog.h
/usr/include/bits/typesizes.h
/usr/include/bits/uio.h
/usr/include/gnu/stubs.h
/usr/include/linux/errno.h
/usr/include/openssl/opensslconf.h
/usr/include/sys/cdefs.h
/usr/include/asm-generic/ioctls.h
/usr/include/asm-generic/param.h
/usr/include/asm-generic/socket.h
/usr/include/asm/errno.h
/usr/include/bits/libc-lock.h
/usr/include/gconv.h
/usr/include/gnu/stubs-64.h
/usr/include/wchar.h
/usr/include/asm-generic/errno.h
/usr/include/asm/sockios.h
/usr/include/bits/wchar-ldbl.h
/usr/include/bits/wchar2.h
/usr/include/linux/ioctl.h
/usr/include/pthread.h
/usr/include/wctype.h
/usr/include/asm-generic/errno-base.h
/usr/include/asm-generic/sockios.h
/usr/include/asm/ioctl.h
/usr/include/bits/setjmp.h
/usr/include/sched.h
/usr/include/asm-generic/ioctl.h
/usr/include/bits/sched.h
